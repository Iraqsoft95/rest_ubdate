
/****** Object:  View [dbo].[VH_ROOM_TYPE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VH_ROOM_TYPE]'))
DROP VIEW [dbo].[VH_ROOM_TYPE]
GO
/****** Object:  View [dbo].[VH_ROOM]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VH_ROOM]'))
DROP VIEW [dbo].[VH_ROOM]
GO
/****** Object:  View [dbo].[VB_MAINTENANCE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VB_MAINTENANCE]'))
DROP VIEW [dbo].[VB_MAINTENANCE]
GO
/****** Object:  View [dbo].[VA_STUDENT_GATE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VA_STUDENT_GATE]'))
DROP VIEW [dbo].[VA_STUDENT_GATE]
GO
/****** Object:  View [dbo].[VA_STUDENT_ENTRY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VA_STUDENT_ENTRY]'))
DROP VIEW [dbo].[VA_STUDENT_ENTRY]
GO
/****** Object:  View [dbo].[VA_STUDENT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VA_STUDENT]'))
DROP VIEW [dbo].[VA_STUDENT]
GO
/****** Object:  View [dbo].[VA_PROJECT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VA_PROJECT]'))
DROP VIEW [dbo].[VA_PROJECT]
GO
/****** Object:  View [dbo].[V_STORE_BOX_STORE_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_STORE_BARCODE]'))
DROP VIEW [dbo].[V_STORE_BOX_STORE_BARCODE]
GO
/****** Object:  View [dbo].[V_STORE_BOX_STORE_ALL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_STORE_ALL]'))
DROP VIEW [dbo].[V_STORE_BOX_STORE_ALL]
GO
/****** Object:  View [dbo].[V_STORE_BOX_ON_ON]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_ON_ON]'))
DROP VIEW [dbo].[V_STORE_BOX_ON_ON]
GO
/****** Object:  View [dbo].[V_STORE_BOX_ON]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_ON]'))
DROP VIEW [dbo].[V_STORE_BOX_ON]
GO
/****** Object:  View [dbo].[V_STORE_BOX_MOVE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_MOVE]'))
DROP VIEW [dbo].[V_STORE_BOX_MOVE]
GO
/****** Object:  View [dbo].[V_STORE_BOX_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_BARCODE]'))
DROP VIEW [dbo].[V_STORE_BOX_BARCODE]
GO
/****** Object:  View [dbo].[V_SANAD_SMAH]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SANAD_SMAH]'))
DROP VIEW [dbo].[V_SANAD_SMAH]
GO
/****** Object:  View [dbo].[V_SANAD_KAYD_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SANAD_KAYD_DETAILS]'))
DROP VIEW [dbo].[V_SANAD_KAYD_DETAILS]
GO
/****** Object:  View [dbo].[V_SANAD_HAWALA]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SANAD_HAWALA]'))
DROP VIEW [dbo].[V_SANAD_HAWALA]
GO
/****** Object:  View [dbo].[V_SANAD_DOLLAR]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SANAD_DOLLAR]'))
DROP VIEW [dbo].[V_SANAD_DOLLAR]
GO
/****** Object:  View [dbo].[V_SANAD_CNY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SANAD_CNY]'))
DROP VIEW [dbo].[V_SANAD_CNY]
GO
/****** Object:  View [dbo].[V_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SANAD]'))
DROP VIEW [dbo].[V_SANAD]
GO
/****** Object:  View [dbo].[V_SALES_WAITING_ORDER]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_WAITING_ORDER]'))
DROP VIEW [dbo].[V_SALES_WAITING_ORDER]
GO
/****** Object:  View [dbo].[V_SALES_WAITING]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_WAITING]'))
DROP VIEW [dbo].[V_SALES_WAITING]
GO
/****** Object:  View [dbo].[V_SALES_TEMP_ORDER]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_TEMP_ORDER]'))
DROP VIEW [dbo].[V_SALES_TEMP_ORDER]
GO
/****** Object:  View [dbo].[V_SALES_RETURN]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_RETURN]'))
DROP VIEW [dbo].[V_SALES_RETURN]
GO
/****** Object:  View [dbo].[V_SALES_PATROL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_PATROL]'))
DROP VIEW [dbo].[V_SALES_PATROL]
GO
/****** Object:  View [dbo].[V_SALES_INVOICE_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_INVOICE_TEMP]'))
DROP VIEW [dbo].[V_SALES_INVOICE_TEMP]
GO
/****** Object:  View [dbo].[V_SALES_INVOICE_MATERIAL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_INVOICE_MATERIAL]'))
DROP VIEW [dbo].[V_SALES_INVOICE_MATERIAL]
GO
/****** Object:  View [dbo].[V_SALES_INVOICE_DETAILS_MATERIAL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_INVOICE_DETAILS_MATERIAL]'))
DROP VIEW [dbo].[V_SALES_INVOICE_DETAILS_MATERIAL]
GO
/****** Object:  View [dbo].[V_SALES_INVOICE_DETAILS_KIMASH]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_INVOICE_DETAILS_KIMASH]'))
DROP VIEW [dbo].[V_SALES_INVOICE_DETAILS_KIMASH]
GO
/****** Object:  View [dbo].[V_SALES_INVOICE_DETAILS_INFO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_INVOICE_DETAILS_INFO]'))
DROP VIEW [dbo].[V_SALES_INVOICE_DETAILS_INFO]
GO
/****** Object:  View [dbo].[V_SALES_INVOICE_DETAILS_80]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_INVOICE_DETAILS_80]'))
DROP VIEW [dbo].[V_SALES_INVOICE_DETAILS_80]
GO
/****** Object:  View [dbo].[V_SALES_INVOICE_80]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_INVOICE_80]'))
DROP VIEW [dbo].[V_SALES_INVOICE_80]
GO
/****** Object:  View [dbo].[V_SALES_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_INVOICE]'))
DROP VIEW [dbo].[V_SALES_INVOICE]
GO
/****** Object:  View [dbo].[V_SALES_FRUIT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_FRUIT]'))
DROP VIEW [dbo].[V_SALES_FRUIT]
GO
/****** Object:  View [dbo].[V_SALES_EXPENSES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_EXPENSES]'))
DROP VIEW [dbo].[V_SALES_EXPENSES]
GO
/****** Object:  View [dbo].[V_SALES_DIRECT_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DIRECT_DETAILS]'))
DROP VIEW [dbo].[V_SALES_DIRECT_DETAILS]
GO
/****** Object:  View [dbo].[V_SALES_DIRECT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DIRECT]'))
DROP VIEW [dbo].[V_SALES_DIRECT]
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_RETURN]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_RETURN]'))
DROP VIEW [dbo].[V_SALES_DETAILS_RETURN]
GO
/****** Object:  View [dbo].[V_SALES_DATE_CASH]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DATE_CASH]'))
DROP VIEW [dbo].[V_SALES_DATE_CASH]
GO
/****** Object:  View [dbo].[V_SALES_API]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_API]'))
DROP VIEW [dbo].[V_SALES_API]
GO
/****** Object:  View [dbo].[V_REPORT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_REPORT]'))
DROP VIEW [dbo].[V_REPORT]
GO
/****** Object:  View [dbo].[V_PURCHASE_ORDER]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_PURCHASE_ORDER]'))
DROP VIEW [dbo].[V_PURCHASE_ORDER]
GO
/****** Object:  View [dbo].[V_POINT_BALANCE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_POINT_BALANCE]'))
DROP VIEW [dbo].[V_POINT_BALANCE]
GO
/****** Object:  View [dbo].[V_OFFERS_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_OFFERS_DETAILS]'))
DROP VIEW [dbo].[V_OFFERS_DETAILS]
GO
/****** Object:  View [dbo].[V_MANDOOB_VISITS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_MANDOOB_VISITS]'))
DROP VIEW [dbo].[V_MANDOOB_VISITS]
GO
/****** Object:  View [dbo].[V_MAINTENANCE_LIST]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_MAINTENANCE_LIST]'))
DROP VIEW [dbo].[V_MAINTENANCE_LIST]
GO
/****** Object:  View [dbo].[V_MAINTENANCE_DEVICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_MAINTENANCE_DEVICE]'))
DROP VIEW [dbo].[V_MAINTENANCE_DEVICE]
GO
/****** Object:  View [dbo].[V_MAINTENANCE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_MAINTENANCE]'))
DROP VIEW [dbo].[V_MAINTENANCE]
GO
/****** Object:  View [dbo].[V_JOINT_SUBSCRIPTION_GATE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_JOINT_SUBSCRIPTION_GATE]'))
DROP VIEW [dbo].[V_JOINT_SUBSCRIPTION_GATE]
GO
/****** Object:  View [dbo].[V_JOINT_SHOW]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_JOINT_SHOW]'))
DROP VIEW [dbo].[V_JOINT_SHOW]
GO
/****** Object:  View [dbo].[V_JOINT_REPORT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_JOINT_REPORT]'))
DROP VIEW [dbo].[V_JOINT_REPORT]
GO
/****** Object:  View [dbo].[V_JOINT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_JOINT]'))
DROP VIEW [dbo].[V_JOINT]
GO
/****** Object:  View [dbo].[V_ITEMS_START_BALANCE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_START_BALANCE]'))
DROP VIEW [dbo].[V_ITEMS_START_BALANCE]
GO
/****** Object:  View [dbo].[V_ITEM_MISWAK_INFO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_MISWAK_INFO]'))
DROP VIEW [dbo].[V_ITEM_MISWAK_INFO]
GO
/****** Object:  View [dbo].[V_ITEM_EFFECTIVE_MATERIAL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_EFFECTIVE_MATERIAL]'))
DROP VIEW [dbo].[V_ITEM_EFFECTIVE_MATERIAL]
GO
/****** Object:  View [dbo].[V_ITEM_BARCODE_222]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_BARCODE_222]'))
DROP VIEW [dbo].[V_ITEM_BARCODE_222]
GO
/****** Object:  View [dbo].[V_ITEM_BALANCE_WAJBA_FIFO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_BALANCE_WAJBA_FIFO]'))
DROP VIEW [dbo].[V_ITEM_BALANCE_WAJBA_FIFO]
GO
/****** Object:  View [dbo].[V_ITEM_AVG_COST_BUY_OLD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_AVG_COST_BUY_OLD]'))
DROP VIEW [dbo].[V_ITEM_AVG_COST_BUY_OLD]
GO
/****** Object:  View [dbo].[V_ITEM_APPLICATION_DESCREPTION]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_APPLICATION_DESCREPTION]'))
DROP VIEW [dbo].[V_ITEM_APPLICATION_DESCREPTION]
GO
/****** Object:  View [dbo].[V_FACTORY_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_FACTORY_DETAILS]'))
DROP VIEW [dbo].[V_FACTORY_DETAILS]
GO
/****** Object:  View [dbo].[V_FACTORY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_FACTORY]'))
DROP VIEW [dbo].[V_FACTORY]
GO
/****** Object:  View [dbo].[V_EXPENSES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_EXPENSES]'))
DROP VIEW [dbo].[V_EXPENSES]
GO
/****** Object:  View [dbo].[V_EMP_ENTRY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_EMP_ENTRY]'))
DROP VIEW [dbo].[V_EMP_ENTRY]
GO
/****** Object:  View [dbo].[V_CONTAINER_EXPENSES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_CONTAINER_EXPENSES]'))
DROP VIEW [dbo].[V_CONTAINER_EXPENSES]
GO
/****** Object:  View [dbo].[V_CONTAINER_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_CONTAINER_DETAILS]'))
DROP VIEW [dbo].[V_CONTAINER_DETAILS]
GO
/****** Object:  View [dbo].[V_CONTAINER]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_CONTAINER]'))
DROP VIEW [dbo].[V_CONTAINER]
GO
/****** Object:  View [dbo].[V_COMPARE_SALES_STOREBOX]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_COMPARE_SALES_STOREBOX]'))
DROP VIEW [dbo].[V_COMPARE_SALES_STOREBOX]
GO
/****** Object:  View [dbo].[V_CLIENT_ON]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_CLIENT_ON]'))
DROP VIEW [dbo].[V_CLIENT_ON]
GO
/****** Object:  View [dbo].[V_CLIENT_BALANCE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_CLIENT_BALANCE]'))
DROP VIEW [dbo].[V_CLIENT_BALANCE]
GO
/****** Object:  View [dbo].[V_CATEGORY_ON]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_CATEGORY_ON]'))
DROP VIEW [dbo].[V_CATEGORY_ON]
GO
/****** Object:  View [dbo].[V_BUY_OUT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_OUT]'))
DROP VIEW [dbo].[V_BUY_OUT]
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_RETURN]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_RETURN]'))
DROP VIEW [dbo].[V_BUY_DETAILS_RETURN]
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_OUT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_OUT]'))
DROP VIEW [dbo].[V_BUY_DETAILS_OUT]
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_FIRST_AVG]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_FIRST_AVG]'))
DROP VIEW [dbo].[V_BUY_DETAILS_FIRST_AVG]
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_FIRST]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_FIRST]'))
DROP VIEW [dbo].[V_BUY_DETAILS_FIRST]
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_DETAILS_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_DETAILS_TEMP]'))
DROP VIEW [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_DETAILS_TEMP]
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_CORRECT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_CORRECT]'))
DROP VIEW [dbo].[V_BUY_DETAILS_CORRECT]
GO
/****** Object:  View [dbo].[V_BRANCH]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BRANCH]'))
DROP VIEW [dbo].[V_BRANCH]
GO
/****** Object:  View [dbo].[V_BOOKING]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BOOKING]'))
DROP VIEW [dbo].[V_BOOKING]
GO
/****** Object:  View [dbo].[V_APP_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_APP_INVOICE]'))
DROP VIEW [dbo].[V_APP_INVOICE]
GO
/****** Object:  View [dbo].[V_AKSAT_ITEM_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_AKSAT_ITEM_DETAILS]'))
DROP VIEW [dbo].[V_AKSAT_ITEM_DETAILS]
GO
/****** Object:  View [dbo].[V_AKSAT_ITEM]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_AKSAT_ITEM]'))
DROP VIEW [dbo].[V_AKSAT_ITEM]
GO
/****** Object:  View [dbo].[V_AKSAT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_AKSAT]'))
DROP VIEW [dbo].[V_AKSAT]
GO
/****** Object:  View [dbo].[V_ACCOUNTS_START_BALANCE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACCOUNTS_START_BALANCE]'))
DROP VIEW [dbo].[V_ACCOUNTS_START_BALANCE]
GO
/****** Object:  View [dbo].[V_ACCOUNTS_ADD_AMO_18]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACCOUNTS_ADD_AMO_18]'))
DROP VIEW [dbo].[V_ACCOUNTS_ADD_AMO_18]
GO
/****** Object:  View [dbo].[V_ACCOUNTS_ADD_AMO_17]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACCOUNTS_ADD_AMO_17]'))
DROP VIEW [dbo].[V_ACCOUNTS_ADD_AMO_17]
GO
/****** Object:  View [dbo].[V_ACCOUNT3_OLD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACCOUNT3_OLD]'))
DROP VIEW [dbo].[V_ACCOUNT3_OLD]
GO
/****** Object:  View [dbo].[V_ACCOUNT3_DATE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACCOUNT3_DATE]'))
DROP VIEW [dbo].[V_ACCOUNT3_DATE]
GO
/****** Object:  View [dbo].[V_ACCOUNT3]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACCOUNT3]'))
DROP VIEW [dbo].[V_ACCOUNT3]
GO
/****** Object:  View [dbo].[V_ACC4]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC4]'))
DROP VIEW [dbo].[V_ACC4]
GO
/****** Object:  View [dbo].[V_ACC3_REPORT_OLD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC3_REPORT_OLD]'))
DROP VIEW [dbo].[V_ACC3_REPORT_OLD]
GO
/****** Object:  View [dbo].[V_ACC3_REPORT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC3_REPORT]'))
DROP VIEW [dbo].[V_ACC3_REPORT]
GO
/****** Object:  View [dbo].[V_ACC3_OLD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC3_OLD]'))
DROP VIEW [dbo].[V_ACC3_OLD]
GO
/****** Object:  View [dbo].[V_ACC2_OLD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC2_OLD]'))
DROP VIEW [dbo].[V_ACC2_OLD]
GO
/****** Object:  View [dbo].[V_ACC2]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC2]'))
DROP VIEW [dbo].[V_ACC2]
GO
/****** Object:  View [dbo].[V_ACC_B_CLIENTS_ONLY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC_B_CLIENTS_ONLY]'))
DROP VIEW [dbo].[V_ACC_B_CLIENTS_ONLY]
GO
/****** Object:  View [dbo].[V_1111_ERROR_EXP_BUY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_1111_ERROR_EXP_BUY]'))
DROP VIEW [dbo].[V_1111_ERROR_EXP_BUY]
GO
/****** Object:  View [dbo].[AA_CHECK_COUNT_DETAILS_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[AA_CHECK_COUNT_DETAILS_TEMP]'))
DROP VIEW [dbo].[AA_CHECK_COUNT_DETAILS_TEMP]
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN_PHARMA_BARCODE]'))
DROP VIEW [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_BARCODE]
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_WAJBA]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_WAJBA]'))
DROP VIEW [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_WAJBA]
GO
/****** Object:  View [dbo].[V_A_ERROR_SALES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_A_ERROR_SALES]'))
DROP VIEW [dbo].[V_A_ERROR_SALES]
GO
/****** Object:  View [dbo].[V_BOX_EXPENSES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BOX_EXPENSES]'))
DROP VIEW [dbo].[V_BOX_EXPENSES]
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_STORE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN_PHARMA_STORE]'))
DROP VIEW [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_STORE]
GO
/****** Object:  View [dbo].[V_STORE_BOX_STORE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_STORE]'))
DROP VIEW [dbo].[V_STORE_BOX_STORE]
GO
/****** Object:  View [dbo].[V_CATEGORY_ON_MENU]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_CATEGORY_ON_MENU]'))
DROP VIEW [dbo].[V_CATEGORY_ON_MENU]
GO
/****** Object:  View [dbo].[V_ITEMS_ON_MENU]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_ON_MENU]'))
DROP VIEW [dbo].[V_ITEMS_ON_MENU]
GO
/****** Object:  View [dbo].[V_ITEM_BALANCE_PHARMA_MATERIAL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_BALANCE_PHARMA_MATERIAL]'))
DROP VIEW [dbo].[V_ITEM_BALANCE_PHARMA_MATERIAL]
GO
/****** Object:  View [dbo].[V_ITEM_BALANCE_PHARMA]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_BALANCE_PHARMA]'))
DROP VIEW [dbo].[V_ITEM_BALANCE_PHARMA]
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_ALSADY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN_PHARMA_ALSADY]'))
DROP VIEW [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_ALSADY]
GO
/****** Object:  View [dbo].[V_EMPLOYEE_SALARY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_EMPLOYEE_SALARY]'))
DROP VIEW [dbo].[V_EMPLOYEE_SALARY]
GO
/****** Object:  View [dbo].[VB_AQED_AYGAR]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VB_AQED_AYGAR]'))
DROP VIEW [dbo].[VB_AQED_AYGAR]
GO
/****** Object:  View [dbo].[VB_SERVICE_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VB_SERVICE_DETAILS]'))
DROP VIEW [dbo].[VB_SERVICE_DETAILS]
GO
/****** Object:  View [dbo].[V_ACC_BALANCE_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC_BALANCE_CLIENT]'))
DROP VIEW [dbo].[V_ACC_BALANCE_CLIENT]
GO
/****** Object:  View [dbo].[V_ACC_B]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC_B]'))
DROP VIEW [dbo].[V_ACC_B]
GO
/****** Object:  View [dbo].[VB_HOUSE_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VB_HOUSE_CLIENT]'))
DROP VIEW [dbo].[VB_HOUSE_CLIENT]
GO
/****** Object:  View [dbo].[VB_BUILDING]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VB_BUILDING]'))
DROP VIEW [dbo].[VB_BUILDING]
GO
/****** Object:  View [dbo].[V_A_CHECK_SALES_22]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_A_CHECK_SALES_22]'))
DROP VIEW [dbo].[V_A_CHECK_SALES_22]
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_ID_BOX]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_ID_BOX]'))
DROP VIEW [dbo].[V_SALES_DETAILS_ID_BOX]
GO
/****** Object:  View [dbo].[V_SALES_INVOICE_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_INVOICE_DETAILS]'))
DROP VIEW [dbo].[V_SALES_INVOICE_DETAILS]
GO
/****** Object:  View [dbo].[V_A_CHECK_SALES_11]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_A_CHECK_SALES_11]'))
DROP VIEW [dbo].[V_A_CHECK_SALES_11]
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_AFTER_DISCOUNT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_AFTER_DISCOUNT]'))
DROP VIEW [dbo].[V_SALES_DETAILS_AFTER_DISCOUNT]
GO
/****** Object:  View [dbo].[1111]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[1111]'))
DROP VIEW [dbo].[1111]
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_MATERIAL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN_PHARMA_MATERIAL]'))
DROP VIEW [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_MATERIAL]
GO
/****** Object:  View [dbo].[V_1111]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_1111]'))
DROP VIEW [dbo].[V_1111]
GO
/****** Object:  View [dbo].[V_STORE_BOX_STORE_AVG_ON]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_STORE_AVG_ON]'))
DROP VIEW [dbo].[V_STORE_BOX_STORE_AVG_ON]
GO
/****** Object:  View [dbo].[V_ITEM_BARCODE_2]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_BARCODE_2]'))
DROP VIEW [dbo].[V_ITEM_BARCODE_2]
GO
/****** Object:  View [dbo].[V_ITEM_AVG_COST_BUY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_AVG_COST_BUY]'))
DROP VIEW [dbo].[V_ITEM_AVG_COST_BUY]
GO
/****** Object:  View [dbo].[V_ITEM_SCALE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_SCALE]'))
DROP VIEW [dbo].[V_ITEM_SCALE]
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_ITEMS]'))
DROP VIEW [dbo].[V_BUY_DETAILS_ITEMS]
GO
/****** Object:  View [dbo].[V_ITEM_APPLICATION_LIVE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_APPLICATION_LIVE]'))
DROP VIEW [dbo].[V_ITEM_APPLICATION_LIVE]
GO
/****** Object:  View [dbo].[V_ITEM_LAST_DATE_DIFF]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_LAST_DATE_DIFF]'))
DROP VIEW [dbo].[V_ITEM_LAST_DATE_DIFF]
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_ITEMS]'))
DROP VIEW [dbo].[V_SALES_DETAILS_ITEMS]
GO
/****** Object:  View [dbo].[V_A_ERROR_BUY_EXPENSES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_A_ERROR_BUY_EXPENSES]'))
DROP VIEW [dbo].[V_A_ERROR_BUY_EXPENSES]
GO
/****** Object:  View [dbo].[V_BUY_EXPENSES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_EXPENSES]'))
DROP VIEW [dbo].[V_BUY_EXPENSES]
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_GSTORE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN_PHARMA_GSTORE]'))
DROP VIEW [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_GSTORE]
GO
/****** Object:  View [dbo].[V_ITEM_UNIT_FORM_INFO_TEST]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_UNIT_FORM_INFO_TEST]'))
DROP VIEW [dbo].[V_ITEM_UNIT_FORM_INFO_TEST]
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_CLIENT_DIFF]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_CLIENT_DIFF]'))
DROP VIEW [dbo].[V_SALES_DETAILS_CLIENT_DIFF]
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_GSTORE_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN_PHARMA_GSTORE_MS]'))
DROP VIEW [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_GSTORE_MS]
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN_STORE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN_STORE]'))
DROP VIEW [dbo].[V_ITEMS_BALANCE_MIN_STORE]
GO
/****** Object:  View [dbo].[V_ITEM_UNIT_FORM_INFO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_UNIT_FORM_INFO]'))
DROP VIEW [dbo].[V_ITEM_UNIT_FORM_INFO]
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_APP]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_APP]'))
DROP VIEW [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_APP]
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_CLIENT_REGION]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_CLIENT_REGION]'))
DROP VIEW [dbo].[V_SALES_DETAILS_CLIENT_REGION]
GO
/****** Object:  View [dbo].[V_ITEM_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_BARCODE]'))
DROP VIEW [dbo].[V_ITEM_BARCODE]
GO
/****** Object:  View [dbo].[V_ITEMS_ON]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_ON]'))
DROP VIEW [dbo].[V_ITEMS_ON]
GO
/****** Object:  View [dbo].[V_STORE_BOX_QTYMIN]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_QTYMIN]'))
DROP VIEW [dbo].[V_STORE_BOX_QTYMIN]
GO
/****** Object:  View [dbo].[V_STORE_BOX]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX]'))
DROP VIEW [dbo].[V_STORE_BOX]
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_DESCREPTION]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN_PHARMA_DESCREPTION]'))
DROP VIEW [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_DESCREPTION]
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_ARBAH]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_ARBAH]'))
DROP VIEW [dbo].[V_SALES_DETAILS_ARBAH]
GO
/****** Object:  View [dbo].[V_SALES_ITEM_MANDOOB]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_ITEM_MANDOOB]'))
DROP VIEW [dbo].[V_SALES_ITEM_MANDOOB]
GO
/****** Object:  View [dbo].[V_BOX_ERADAT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BOX_ERADAT]'))
DROP VIEW [dbo].[V_BOX_ERADAT]
GO
/****** Object:  View [dbo].[V_BOX]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BOX]'))
DROP VIEW [dbo].[V_BOX]
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_LOSSER]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_LOSSER]'))
DROP VIEW [dbo].[V_SALES_DETAILS_LOSSER]
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_PRO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_PRO]'))
DROP VIEW [dbo].[V_SALES_DETAILS_PRO]
GO
/****** Object:  View [dbo].[V_A_ERROR_T_STORE_BOX_SALES_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_A_ERROR_T_STORE_BOX_SALES_DETAILS]'))
DROP VIEW [dbo].[V_A_ERROR_T_STORE_BOX_SALES_DETAILS]
GO
/****** Object:  View [dbo].[V_ACCOUNT3_APPLICATION]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACCOUNT3_APPLICATION]'))
DROP VIEW [dbo].[V_ACCOUNT3_APPLICATION]
GO
/****** Object:  View [dbo].[V_ACC3]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC3]'))
DROP VIEW [dbo].[V_ACC3]
GO
/****** Object:  View [dbo].[V_JOINT_COURSES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_JOINT_COURSES]'))
DROP VIEW [dbo].[V_JOINT_COURSES]
GO
/****** Object:  View [dbo].[V_JOINT_SUBSCRIPTION]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_JOINT_SUBSCRIPTION]'))
DROP VIEW [dbo].[V_JOINT_SUBSCRIPTION]
GO
/****** Object:  View [dbo].[V_SALES_ITEM_TRANS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_ITEM_TRANS]'))
DROP VIEW [dbo].[V_SALES_ITEM_TRANS]
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN_PHARMA]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN_PHARMA]'))
DROP VIEW [dbo].[V_ITEMS_BALANCE_MIN_PHARMA]
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN]'))
DROP VIEW [dbo].[V_ITEMS_BALANCE_MIN]
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_AFTER_DISCOUNT_OLD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_AFTER_DISCOUNT_OLD]'))
DROP VIEW [dbo].[V_SALES_DETAILS_AFTER_DISCOUNT_OLD]
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_AFTER]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_AFTER]'))
DROP VIEW [dbo].[V_SALES_DETAILS_AFTER]
GO
/****** Object:  View [dbo].[V_PURCHASE_ORDER_REMAIN]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_PURCHASE_ORDER_REMAIN]'))
DROP VIEW [dbo].[V_PURCHASE_ORDER_REMAIN]
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_CLIENT_BEST]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_CLIENT_BEST]'))
DROP VIEW [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_CLIENT_BEST]
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_EXPIRED_REMAIN]'))
DROP VIEW [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN]
GO
/****** Object:  View [dbo].[V_STORE_TRANSFARE_ORDER]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_TRANSFARE_ORDER]'))
DROP VIEW [dbo].[V_STORE_TRANSFARE_ORDER]
GO
/****** Object:  View [dbo].[V_STORE_TRANFARE_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_TRANFARE_DETAILS]'))
DROP VIEW [dbo].[V_STORE_TRANFARE_DETAILS]
GO
/****** Object:  View [dbo].[V_PURCHASE_ORDER_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_PURCHASE_ORDER_DETAILS]'))
DROP VIEW [dbo].[V_PURCHASE_ORDER_DETAILS]
GO
/****** Object:  View [dbo].[V_ITEM_APPLICATION_JISON]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_APPLICATION_JISON]'))
DROP VIEW [dbo].[V_ITEM_APPLICATION_JISON]
GO
/****** Object:  View [dbo].[V_ITEM_APPLICATION]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_APPLICATION]'))
DROP VIEW [dbo].[V_ITEM_APPLICATION]
GO
/****** Object:  View [dbo].[V_ITEM_REMAIN_BUY_FIFO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_REMAIN_BUY_FIFO]'))
DROP VIEW [dbo].[V_ITEM_REMAIN_BUY_FIFO]
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_DATE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_DATE]'))
DROP VIEW [dbo].[V_BUY_DETAILS_DATE]
GO
/****** Object:  View [dbo].[V_ITEM_BARCODE_3]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_BARCODE_3]'))
DROP VIEW [dbo].[V_ITEM_BARCODE_3]
GO
/****** Object:  View [dbo].[V_STORE_BOX_WAJBA]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_WAJBA]'))
DROP VIEW [dbo].[V_STORE_BOX_WAJBA]
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_CLIENT_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_CLIENT_CATEGORY]'))
DROP VIEW [dbo].[V_SALES_DETAILS_CLIENT_CATEGORY]
GO
/****** Object:  View [dbo].[V_STORE_BOX_STORE_AVG_ON_MOVE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_STORE_AVG_ON_MOVE]'))
DROP VIEW [dbo].[V_STORE_BOX_STORE_AVG_ON_MOVE]
GO
/****** Object:  View [dbo].[V_SALES_PHONE_LIST_APPLICATION]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_PHONE_LIST_APPLICATION]'))
DROP VIEW [dbo].[V_SALES_PHONE_LIST_APPLICATION]
GO
/****** Object:  View [dbo].[V_SALES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES]'))
DROP VIEW [dbo].[V_SALES]
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_CLIENT_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_CLIENT_ITEMS]'))
DROP VIEW [dbo].[V_SALES_DETAILS_CLIENT_ITEMS]
GO
/****** Object:  View [dbo].[V_SALES_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS]'))
DROP VIEW [dbo].[V_SALES_DETAILS]
GO
/****** Object:  View [dbo].[V_ITEM_AVG_COST_BUY_MIN_UNIT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_AVG_COST_BUY_MIN_UNIT]'))
DROP VIEW [dbo].[V_ITEM_AVG_COST_BUY_MIN_UNIT]
GO
/****** Object:  View [dbo].[V_A_ERROR_BUY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_A_ERROR_BUY]'))
DROP VIEW [dbo].[V_A_ERROR_BUY]
GO
/****** Object:  View [dbo].[V_BUY_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS]'))
DROP VIEW [dbo].[V_BUY_DETAILS]
GO
/****** Object:  View [dbo].[V_BUY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY]'))
DROP VIEW [dbo].[V_BUY]
GO
/****** Object:  UserDefinedFunction [dbo].[STRING_SPLIT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STRING_SPLIT]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[STRING_SPLIT]
GO
/****** Object:  UserDefinedFunction [dbo].[splitstring]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[splitstring]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[splitstring]
GO
/****** Object:  UserDefinedFunction [dbo].[ParseJSONToTable_INFO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ParseJSONToTable_INFO]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[ParseJSONToTable_INFO]
GO
/****** Object:  UserDefinedFunction [dbo].[ParseJSONToTable_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ParseJSONToTable_DETAILS]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[ParseJSONToTable_DETAILS]
GO
/****** Object:  UserDefinedFunction [dbo].[ParseJSON_TO_TABLE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ParseJSON_TO_TABLE]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[ParseJSON_TO_TABLE]
GO
/****** Object:  UserDefinedFunction [dbo].[parseJSON]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[parseJSON]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[parseJSON]
GO
/****** Object:  StoredProcedure [dbo].[PVB_SERVICE_BALANCE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PVB_SERVICE_BALANCE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PVB_SERVICE_BALANCE]
GO
/****** Object:  StoredProcedure [dbo].[PVB_GET_HOUSE_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PVB_GET_HOUSE_CLIENT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PVB_GET_HOUSE_CLIENT]
GO
/****** Object:  StoredProcedure [dbo].[PVB_GET_AQED_AYGAR]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PVB_GET_AQED_AYGAR]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PVB_GET_AQED_AYGAR]
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_TRANFARE_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_TRANFARE_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_STORE_TRANFARE_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_BOX_STORE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_BOX_STORE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_STORE_BOX_STORE]
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_BOX_QTYMIN_NOTIFICATION]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_BOX_QTYMIN_NOTIFICATION]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_STORE_BOX_QTYMIN_NOTIFICATION]
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_BOX_QTYMIN_GSTORE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_BOX_QTYMIN_GSTORE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_STORE_BOX_QTYMIN_GSTORE]
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_BOX_QTYMIN]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_BOX_QTYMIN]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_STORE_BOX_QTYMIN]
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_BOX_PRICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_BOX_PRICE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_STORE_BOX_PRICE]
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_BOX_PHOTO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_BOX_PHOTO]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_STORE_BOX_PHOTO]
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_BOX_MOVE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_BOX_MOVE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_STORE_BOX_MOVE]
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_BOX_ALL_B_CODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_BOX_ALL_B_CODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_STORE_BOX_ALL_B_CODE]
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_BOX]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_BOX]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_STORE_BOX]
GO
/****** Object:  StoredProcedure [dbo].[PV_SANAD_SMAH_A5]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SANAD_SMAH_A5]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_SANAD_SMAH_A5]
GO
/****** Object:  StoredProcedure [dbo].[PV_SANAD_KAYD_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SANAD_KAYD_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_SANAD_KAYD_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[PV_SANAD_HAWALA_A5]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SANAD_HAWALA_A5]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_SANAD_HAWALA_A5]
GO
/****** Object:  StoredProcedure [dbo].[PV_SANAD_DOLLAR_A5]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SANAD_DOLLAR_A5]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_SANAD_DOLLAR_A5]
GO
/****** Object:  StoredProcedure [dbo].[PV_SANAD_A5_CNY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SANAD_A5_CNY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_SANAD_A5_CNY]
GO
/****** Object:  StoredProcedure [dbo].[PV_SANAD_A5]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SANAD_A5]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_SANAD_A5]
GO
/****** Object:  StoredProcedure [dbo].[PV_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SANAD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_SANAD]
GO
/****** Object:  StoredProcedure [dbo].[PV_SALES_DETAILS_MANDOOB]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SALES_DETAILS_MANDOOB]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_SALES_DETAILS_MANDOOB]
GO
/****** Object:  StoredProcedure [dbo].[PV_SALES_DETAILS_CLIENT_REGION]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SALES_DETAILS_CLIENT_REGION]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_SALES_DETAILS_CLIENT_REGION]
GO
/****** Object:  StoredProcedure [dbo].[PV_SALES_DETAILS_CLIENT_IVC]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SALES_DETAILS_CLIENT_IVC]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_SALES_DETAILS_CLIENT_IVC]
GO
/****** Object:  StoredProcedure [dbo].[PV_SALES_DETAILS_CLIENT_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SALES_DETAILS_CLIENT_ITEMS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_SALES_DETAILS_CLIENT_ITEMS]
GO
/****** Object:  StoredProcedure [dbo].[PV_SALES_DETAILS_CLIENT_DIFF]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SALES_DETAILS_CLIENT_DIFF]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_SALES_DETAILS_CLIENT_DIFF]
GO
/****** Object:  StoredProcedure [dbo].[PV_SALES_DETAILS_CLIENT_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SALES_DETAILS_CLIENT_CATEGORY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_SALES_DETAILS_CLIENT_CATEGORY]
GO
/****** Object:  StoredProcedure [dbo].[PV_SALES_DETAILS_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SALES_DETAILS_CLIENT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_SALES_DETAILS_CLIENT]
GO
/****** Object:  StoredProcedure [dbo].[PV_ITEMS_BALANCE_MIN_STORE_QTYMIN_GSTORE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_ITEMS_BALANCE_MIN_STORE_QTYMIN_GSTORE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_ITEMS_BALANCE_MIN_STORE_QTYMIN_GSTORE]
GO
/****** Object:  StoredProcedure [dbo].[PV_ITEM_MOVE_PRICE_NFO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_ITEM_MOVE_PRICE_NFO]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_ITEM_MOVE_PRICE_NFO]
GO
/****** Object:  StoredProcedure [dbo].[PV_ITEM_LAST_DATE_DIFF]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_ITEM_LAST_DATE_DIFF]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_ITEM_LAST_DATE_DIFF]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_USER_ERROR_COUNT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_USER_ERROR_COUNT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_USER_ERROR_COUNT]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_STORE_TRANSFARE_ORDER_NOT_PRINT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_STORE_TRANSFARE_ORDER_NOT_PRINT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_STORE_TRANSFARE_ORDER_NOT_PRINT]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_TEMP_ORDER_NOT_PRINT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_TEMP_ORDER_NOT_PRINT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_SALES_TEMP_ORDER_NOT_PRINT]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_TEMP_ORDER_DELETE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_TEMP_ORDER_DELETE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_SALES_TEMP_ORDER_DELETE]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_SUM_QTY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_SUM_QTY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_SALES_SUM_QTY]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_RETURN]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_RETURN]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_SALES_RETURN]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_MONTHLY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_MONTHLY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_SALES_MONTHLY]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_MANDOOB_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_MANDOOB_ITEMS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_SALES_MANDOOB_ITEMS]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_DETAILS_RETURN]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_DETAILS_RETURN]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_SALES_DETAILS_RETURN]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_DETAILS_ITEMS_TASAWEK]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_DETAILS_ITEMS_TASAWEK]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_SALES_DETAILS_ITEMS_TASAWEK]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_DETAILS_ITEMS_MANDOOB]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_DETAILS_ITEMS_MANDOOB]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_SALES_DETAILS_ITEMS_MANDOOB]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_DETAILS_ITEMS_AFTER_DISCOUNT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_DETAILS_ITEMS_AFTER_DISCOUNT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_SALES_DETAILS_ITEMS_AFTER_DISCOUNT]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_DETAILS_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_DETAILS_ITEMS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_SALES_DETAILS_ITEMS]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_DETAILS_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_DETAILS_CATEGORY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_SALES_DETAILS_CATEGORY]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_SALES_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_DAYLY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_DAYLY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_SALES_DAYLY]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_DATE_CASH]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_DATE_CASH]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_SALES_DATE_CASH]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_CLIENT_NOT_CASH_ALL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_CLIENT_NOT_CASH_ALL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_SALES_CLIENT_NOT_CASH_ALL]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_CLIENT_NOT_CASH]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_CLIENT_NOT_CASH]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_SALES_CLIENT_NOT_CASH]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_SALES]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_OFFER_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_OFFER_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_OFFER_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_ITEMS_EXPIRED]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_ITEMS_EXPIRED]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_ITEMS_EXPIRED]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_FILL_AVG_ITEM_SHOW_ONLY_WITH_UPDATE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_FILL_AVG_ITEM_SHOW_ONLY_WITH_UPDATE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_FILL_AVG_ITEM_SHOW_ONLY_WITH_UPDATE]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_FILL_AVG_ITEM_SHOW_ONLY_OLD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_FILL_AVG_ITEM_SHOW_ONLY_OLD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_FILL_AVG_ITEM_SHOW_ONLY_OLD]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_FILL_AVG_ITEM_SHOW_ONLY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_FILL_AVG_ITEM_SHOW_ONLY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_FILL_AVG_ITEM_SHOW_ONLY]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_FILL_AVG_ITEM_NOT_SELECT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_FILL_AVG_ITEM_NOT_SELECT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_FILL_AVG_ITEM_NOT_SELECT]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_FILL_AVG_ITEM]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_FILL_AVG_ITEM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_FILL_AVG_ITEM]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_EXPENSES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_EXPENSES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_EXPENSES]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_EMPLOYEE_ENTERY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_EMPLOYEE_ENTERY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_EMPLOYEE_ENTERY]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_EMPLOYEE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_EMPLOYEE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_EMPLOYEE]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_BUY_DETAILS_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_BUY_DETAILS_ITEMS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_BUY_DETAILS_ITEMS]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_BUY_DETAILS_CORRECT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_BUY_DETAILS_CORRECT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_BUY_DETAILS_CORRECT]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_BUY_DETAILS_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_BUY_DETAILS_CLIENT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_BUY_DETAILS_CLIENT]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_BUY_DETAILS_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_BUY_DETAILS_CATEGORY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_BUY_DETAILS_CATEGORY]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_BUY_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_BUY_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_BUY_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_BUY_DATE_CASH]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_BUY_DATE_CASH]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_BUY_DATE_CASH]
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_BUY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_BUY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_GET_BUY]
GO
/****** Object:  StoredProcedure [dbo].[PV_EXPENSES_MOVE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_EXPENSES_MOVE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_EXPENSES_MOVE]
GO
/****** Object:  StoredProcedure [dbo].[PV_EXPENSES_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_EXPENSES_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_EXPENSES_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[PV_EXPENSES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_EXPENSES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_EXPENSES]
GO
/****** Object:  StoredProcedure [dbo].[PV_ERADAT_MOVE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_ERADAT_MOVE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_ERADAT_MOVE]
GO
/****** Object:  StoredProcedure [dbo].[PV_CLIENT_BALANCE_TO_DATE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_CLIENT_BALANCE_TO_DATE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_CLIENT_BALANCE_TO_DATE]
GO
/****** Object:  StoredProcedure [dbo].[PV_CLIENT_BALANCE_DIFF]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_CLIENT_BALANCE_DIFF]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_CLIENT_BALANCE_DIFF]
GO
/****** Object:  StoredProcedure [dbo].[PV_CLIENT_BALANCE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_CLIENT_BALANCE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_CLIENT_BALANCE]
GO
/****** Object:  StoredProcedure [dbo].[PV_CENTER_COST_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_CENTER_COST_ITEMS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_CENTER_COST_ITEMS]
GO
/****** Object:  StoredProcedure [dbo].[PV_CENTER_COST_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_CENTER_COST_INVOICE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_CENTER_COST_INVOICE]
GO
/****** Object:  StoredProcedure [dbo].[PV_CENTER_COST]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_CENTER_COST]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_CENTER_COST]
GO
/****** Object:  StoredProcedure [dbo].[PV_AKSAT_TABLE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_AKSAT_TABLE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_AKSAT_TABLE]
GO
/****** Object:  StoredProcedure [dbo].[PV_AKSAT_KAFEL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_AKSAT_KAFEL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_AKSAT_KAFEL]
GO
/****** Object:  StoredProcedure [dbo].[PV_AKSAT_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_AKSAT_CLIENT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_AKSAT_CLIENT]
GO
/****** Object:  StoredProcedure [dbo].[PV_AKSAT_ALL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_AKSAT_ALL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_AKSAT_ALL]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_VB_HOUSE_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_VB_HOUSE_CLIENT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_VB_HOUSE_CLIENT]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_TESSSSSSSST]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_TESSSSSSSST]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_TESSSSSSSST]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_TEMP]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_TEMP]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_MATERIAL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_MATERIAL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_MATERIAL]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_GENERATE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_GENERATE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_GENERATE]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_DETAILS_MATERIAL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_DETAILS_MATERIAL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_DETAILS_MATERIAL]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_DETAILS_KIMASH_LABEL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_DETAILS_KIMASH_LABEL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_DETAILS_KIMASH_LABEL]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_DETAILS_KIMASH]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_DETAILS_KIMASH]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_DETAILS_KIMASH]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_DETAILS_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_DETAILS_ITEMS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_DETAILS_ITEMS]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_DETAILS_AKSAT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_DETAILS_AKSAT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_DETAILS_AKSAT]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_DETAILS_80]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_DETAILS_80]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_DETAILS_80]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_80]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_80]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_80]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_SALES_INVOICE]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_FRUIT_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_FRUIT_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_SALES_FRUIT_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_FRUIT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_FRUIT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_SALES_FRUIT]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_EXPENSES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_EXPENSES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_SALES_EXPENSES]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_DIRECT_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_DIRECT_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_SALES_DIRECT_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_DIRECT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_DIRECT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_SALES_DIRECT]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_PURCHASE_ORDER_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_PURCHASE_ORDER_INVOICE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_PURCHASE_ORDER_INVOICE]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_PURCHASE_ORDER_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_PURCHASE_ORDER_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_PURCHASE_ORDER_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_MAINTENANCE_LABEL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_MAINTENANCE_LABEL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_MAINTENANCE_LABEL]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_MAINTENANCE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_MAINTENANCE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_MAINTENANCE]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_JOINT_COURSES_FREE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_JOINT_COURSES_FREE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_JOINT_COURSES_FREE]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_JOINT_COURSES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_JOINT_COURSES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_JOINT_COURSES]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_COUPON]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_COUPON]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_COUPON]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_CONTAINER_DETAILS_ID]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_CONTAINER_DETAILS_ID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_CONTAINER_DETAILS_ID]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_CONTAINER_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_CONTAINER_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_CONTAINER_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_CONTAINER]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_CONTAINER]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_CONTAINER]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_CARS_SPICIAL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_CARS_SPICIAL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_CARS_SPICIAL]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_CARS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_CARS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_CARS]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_BUY_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_BUY_INVOICE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_BUY_INVOICE]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_BUY_DETAILS_QR]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_BUY_DETAILS_QR]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_BUY_DETAILS_QR]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_BUY_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_BUY_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_BUY_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_BOOKING]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_BOOKING]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_BOOKING]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_AKSAT_TABLE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_AKSAT_TABLE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_AKSAT_TABLE]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_AKSAT_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_AKSAT_CLIENT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_AKSAT_CLIENT]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_AKSAT_CASH_TOTAL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_AKSAT_CASH_TOTAL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_AKSAT_CASH_TOTAL]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_AKSAT_CASH]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_AKSAT_CASH]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_V_AKSAT_CASH]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_ROOM_TYPE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_ROOM_TYPE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_ROOM_TYPE]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_PRINT_VISITOR]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_PRINT_VISITOR]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_PRINT_VISITOR]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_PRINT_V_JOINT_SUBSCRIPTION]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_PRINT_V_JOINT_SUBSCRIPTION]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_PRINT_V_JOINT_SUBSCRIPTION]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_PRINT_SALES_INVOICE_DETAILS_80]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_PRINT_SALES_INVOICE_DETAILS_80]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_PRINT_SALES_INVOICE_DETAILS_80]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_PRINT_SALES_INVOICE_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_PRINT_SALES_INVOICE_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_PRINT_SALES_INVOICE_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_PRINT_SALES_INVOICE_80]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_PRINT_SALES_INVOICE_80]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_PRINT_SALES_INVOICE_80]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_PRINT_SALES_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_PRINT_SALES_INVOICE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_PRINT_SALES_INVOICE]
GO
/****** Object:  StoredProcedure [dbo].[PV_A_BOOKING_ROOM]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_BOOKING_ROOM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PV_A_BOOKING_ROOM]
GO
/****** Object:  StoredProcedure [dbo].[PF_UPDATE_ITEM_BALANCE_EXPIRED]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_UPDATE_ITEM_BALANCE_EXPIRED]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_UPDATE_ITEM_BALANCE_EXPIRED]
GO
/****** Object:  StoredProcedure [dbo].[PF_UPDATE_BILL_OFFER_CODE_APP]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_UPDATE_BILL_OFFER_CODE_APP]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_UPDATE_BILL_OFFER_CODE_APP]
GO
/****** Object:  StoredProcedure [dbo].[PF_SEARCH_ITEM_NAME]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_SEARCH_ITEM_NAME]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_SEARCH_ITEM_NAME]
GO
/****** Object:  StoredProcedure [dbo].[PF_SEARCH_ITEM_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_SEARCH_ITEM_CATEGORY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_SEARCH_ITEM_CATEGORY]
GO
/****** Object:  StoredProcedure [dbo].[PF_ITEM_TALAF]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_ITEM_TALAF]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_ITEM_TALAF]
GO
/****** Object:  StoredProcedure [dbo].[PF_ITEM_ADD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_ITEM_ADD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_ITEM_ADD]
GO
/****** Object:  StoredProcedure [dbo].[PF_GET_ITEM_SIMILAR]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_GET_ITEM_SIMILAR]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_GET_ITEM_SIMILAR]
GO
/****** Object:  StoredProcedure [dbo].[PF_GET_ITEM_SEARCH]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_GET_ITEM_SEARCH]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_GET_ITEM_SEARCH]
GO
/****** Object:  StoredProcedure [dbo].[PF_GET_ITEM_REMAIN_EXPIRED]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_GET_ITEM_REMAIN_EXPIRED]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_GET_ITEM_REMAIN_EXPIRED]
GO
/****** Object:  StoredProcedure [dbo].[PF_GET_ITEM_RAITING]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_GET_ITEM_RAITING]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_GET_ITEM_RAITING]
GO
/****** Object:  StoredProcedure [dbo].[PF_GET_ITEM_FEATURE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_GET_ITEM_FEATURE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_GET_ITEM_FEATURE]
GO
/****** Object:  StoredProcedure [dbo].[PF_GET_ITEM_DISCOUNT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_GET_ITEM_DISCOUNT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_GET_ITEM_DISCOUNT]
GO
/****** Object:  StoredProcedure [dbo].[PF_GET_ITEM_CODE_BY_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_GET_ITEM_CODE_BY_BARCODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_GET_ITEM_CODE_BY_BARCODE]
GO
/****** Object:  StoredProcedure [dbo].[PF_GET_ITEM_APPLICATION_BY_STORE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_GET_ITEM_APPLICATION_BY_STORE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_GET_ITEM_APPLICATION_BY_STORE]
GO
/****** Object:  StoredProcedure [dbo].[PF_CLIENT_BALANCE_DIFF_APP]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_CLIENT_BALANCE_DIFF_APP]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_CLIENT_BALANCE_DIFF_APP]
GO
/****** Object:  StoredProcedure [dbo].[PF_ADD_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_ADD_SANAD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_ADD_SANAD]
GO
/****** Object:  StoredProcedure [dbo].[PF_ADD_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_ADD_ITEMS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_ADD_ITEMS]
GO
/****** Object:  StoredProcedure [dbo].[PF_ADD_EDIT_TALAF]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_ADD_EDIT_TALAF]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_ADD_EDIT_TALAF]
GO
/****** Object:  StoredProcedure [dbo].[PF_ADD_CLIENTS_NEW]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_ADD_CLIENTS_NEW]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_ADD_CLIENTS_NEW]
GO
/****** Object:  StoredProcedure [dbo].[PF_ADD_CLIENTS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_ADD_CLIENTS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PF_ADD_CLIENTS]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_QTY_MINUS_RETURN_FROM_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_QTY_MINUS_RETURN_FROM_TEMP]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_QTY_MINUS_RETURN_FROM_TEMP]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_QTY_IN_OUT_SALES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_QTY_IN_OUT_SALES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_QTY_IN_OUT_SALES]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_QTY_IN_OUT_BUY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_QTY_IN_OUT_BUY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_QTY_IN_OUT_BUY]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_OFFER_CODE_SALES_ORDER]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_OFFER_CODE_SALES_ORDER]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_OFFER_CODE_SALES_ORDER]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_NOTIFICATION]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_NOTIFICATION]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_NOTIFICATION]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEMS_SELL_FACTORY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEMS_SELL_FACTORY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEMS_SELL_FACTORY]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEMS_SELL_BUY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEMS_SELL_BUY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEMS_SELL_BUY]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEMS_NEW_BUY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEMS_NEW_BUY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEMS_NEW_BUY]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_STORE_FROM_TEMP_TALAF]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_STORE_FROM_TEMP_TALAF]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_STORE_FROM_TEMP_TALAF]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_STORE_FROM_TEMP_ADD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_STORE_FROM_TEMP_ADD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_STORE_FROM_TEMP_ADD]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_STORE_FROM_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_STORE_FROM_TEMP]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_STORE_FROM_TEMP]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_SERIAL_PRINT_FROM_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_SERIAL_PRINT_FROM_TEMP]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_SERIAL_PRINT_FROM_TEMP]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_FROM_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_FROM_TEMP]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_FROM_TEMP]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_DOLLAR]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_DOLLAR]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_DOLLAR]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_WAJBA_SELECT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_WAJBA_SELECT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_WAJBA_SELECT]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_UNIT_2]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_UNIT_2]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_UNIT_2]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_FIFO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_FIFO]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_FIFO]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_ITEMS_CERSUR]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_ITEMS_CERSUR]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_ITEMS_CERSUR]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_BUY_FIFO_NOT_WAJBA]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_BUY_FIFO_NOT_WAJBA]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_BUY_FIFO_NOT_WAJBA]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_BUY_FIFO_ITEM]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_BUY_FIFO_ITEM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_BUY_FIFO_ITEM]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_BUY_FIFO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_BUY_FIFO]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_BUY_FIFO]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_DATE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_AVG_CURSER_WEIGHT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_AVG_CURSER_WEIGHT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_AVG_CURSER_WEIGHT]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_AVG_CURSER]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_AVG_CURSER]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_AVG_CURSER]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_BUY_SELL2]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_BUY_SELL2]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_BUY_SELL2]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_NAME_SALES_CHANGE_CODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_NAME_SALES_CHANGE_CODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_NAME_SALES_CHANGE_CODE]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_NAME_SALES_CHANGE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_NAME_SALES_CHANGE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_NAME_SALES_CHANGE]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_CODE_ERROR]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_CODE_ERROR]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_CODE_ERROR]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_CLIENT_NAME]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_CLIENT_NAME]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_CLIENT_NAME]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_BARCODE_UNIT_2]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_BARCODE_UNIT_2]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_BARCODE_UNIT_2]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_BARCODE_UNIT_1]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_BARCODE_UNIT_1]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_BARCODE_UNIT_1]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_BARCODE_RND_REGENERATE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_BARCODE_RND_REGENERATE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_BARCODE_RND_REGENERATE]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_BARCODE_RND]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_BARCODE_RND]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_BARCODE_RND]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_BARCODE_PRINT_FROM_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_BARCODE_PRINT_FROM_TEMP]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM_BARCODE_PRINT_FROM_TEMP]
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM__SALES_PRICE_COST_DATE_LAST_COST]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM__SALES_PRICE_COST_DATE_LAST_COST]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_UPDATE_ITEM__SALES_PRICE_COST_DATE_LAST_COST]
GO
/****** Object:  StoredProcedure [dbo].[P_RE_ITEMS_TRANS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_RE_ITEMS_TRANS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_RE_ITEMS_TRANS]
GO
/****** Object:  StoredProcedure [dbo].[P_RE_ITEMS_SELL_BUY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_RE_ITEMS_SELL_BUY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_RE_ITEMS_SELL_BUY]
GO
/****** Object:  StoredProcedure [dbo].[P_RE_ITEMS_FACTORY_BILL_ZERO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_RE_ITEMS_FACTORY_BILL_ZERO]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_RE_ITEMS_FACTORY_BILL_ZERO]
GO
/****** Object:  StoredProcedure [dbo].[P_RE_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_RE_ITEMS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_RE_ITEMS]
GO
/****** Object:  StoredProcedure [dbo].[P_ITEMS_RE_ORDERS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_ITEMS_RE_ORDERS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_ITEMS_RE_ORDERS]
GO
/****** Object:  StoredProcedure [dbo].[P_ITEM_RE_INSERT_FIRST_BALANCE_ZERO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_ITEM_RE_INSERT_FIRST_BALANCE_ZERO]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_ITEM_RE_INSERT_FIRST_BALANCE_ZERO]
GO
/****** Object:  StoredProcedure [dbo].[P_INSERT_TEMP_UNIT_CHANGE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_INSERT_TEMP_UNIT_CHANGE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_INSERT_TEMP_UNIT_CHANGE]
GO
/****** Object:  StoredProcedure [dbo].[P_INSERT_TEMP_FROM_T_SALES_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_INSERT_TEMP_FROM_T_SALES_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_INSERT_TEMP_FROM_T_SALES_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[P_INSERT_T_SALES_DETAILS_FROM_TEMP_ORDER]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_INSERT_T_SALES_DETAILS_FROM_TEMP_ORDER]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_INSERT_T_SALES_DETAILS_FROM_TEMP_ORDER]
GO
/****** Object:  StoredProcedure [dbo].[P_INSERT_T_SALES_DETAILS_FROM_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_INSERT_T_SALES_DETAILS_FROM_TEMP]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_INSERT_T_SALES_DETAILS_FROM_TEMP]
GO
/****** Object:  StoredProcedure [dbo].[P_INSERT_T_POINTS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_INSERT_T_POINTS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_INSERT_T_POINTS]
GO
/****** Object:  StoredProcedure [dbo].[P_INSERT_PRINTER_SELECT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_INSERT_PRINTER_SELECT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_INSERT_PRINTER_SELECT]
GO
/****** Object:  StoredProcedure [dbo].[P_INSERT_MANDOOB_PERCENT_EMOLA_ITEM_FOR_ALL_BILLS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_INSERT_MANDOOB_PERCENT_EMOLA_ITEM_FOR_ALL_BILLS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_INSERT_MANDOOB_PERCENT_EMOLA_ITEM_FOR_ALL_BILLS]
GO
/****** Object:  StoredProcedure [dbo].[P_INSERT_MANDOOB_PERCENT_EMOLA_ITEM_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_INSERT_MANDOOB_PERCENT_EMOLA_ITEM_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_INSERT_MANDOOB_PERCENT_EMOLA_ITEM_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[P_INSERT_MANDOOB_PERCENT_EMOLA_ITEM]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_INSERT_MANDOOB_PERCENT_EMOLA_ITEM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_INSERT_MANDOOB_PERCENT_EMOLA_ITEM]
GO
/****** Object:  StoredProcedure [dbo].[P_IMPORT_PRICE2_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_IMPORT_PRICE2_ITEMS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_IMPORT_PRICE2_ITEMS]
GO
/****** Object:  StoredProcedure [dbo].[P_IMPORT_ITEM_FROM_RESTAURANT_DB]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_IMPORT_ITEM_FROM_RESTAURANT_DB]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_IMPORT_ITEM_FROM_RESTAURANT_DB]
GO
/****** Object:  StoredProcedure [dbo].[P_IMPORT_ITEM_FROM_PHARMA_DB]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_IMPORT_ITEM_FROM_PHARMA_DB]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_IMPORT_ITEM_FROM_PHARMA_DB]
GO
/****** Object:  StoredProcedure [dbo].[P_IMPORT_CLIENT_PHONE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_IMPORT_CLIENT_PHONE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_IMPORT_CLIENT_PHONE]
GO
/****** Object:  StoredProcedure [dbo].[P_IMPORT_BARCODE_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_IMPORT_BARCODE_ITEMS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_IMPORT_BARCODE_ITEMS]
GO
/****** Object:  StoredProcedure [dbo].[P_IMPORT_ACCOUNTS_CLIENTS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_IMPORT_ACCOUNTS_CLIENTS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_IMPORT_ACCOUNTS_CLIENTS]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_RULES_KIND_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_RULES_KIND_CLIENT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_RULES_KIND_CLIENT]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_ITEM_UNIT_INFO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_ITEM_UNIT_INFO]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_ITEM_UNIT_INFO]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_DAYLY_USER]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_DAYLY_USER]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_DAYLY_USER]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_DAYLY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_DAYLY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_DAYLY]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_WITHOUT_BALANCE_IDD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_WITHOUT_BALANCE_IDD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_WITHOUT_BALANCE_IDD]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_WITHOUT_BALANCE_DATE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_WITHOUT_BALANCE_DATE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_WITHOUT_BALANCE_DATE]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_TYPE_ALL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_TYPE_ALL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_TYPE_ALL]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_TYPE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_TYPE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_TYPE]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_TABLE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_TABLE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_TABLE]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_SPEED]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_SPEED]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_SPEED]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_SALES_STATUS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_SALES_STATUS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_SALES_STATUS]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_RELATION]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_RELATION]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_RELATION]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_REGION_ALL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_REGION_ALL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_REGION_ALL]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_REGION]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_REGION]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_REGION]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_old14-3]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_old14-3]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_old14-3]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_OLD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_OLD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_OLD]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_new]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_new]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_new]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_MANDOOB_ALL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_MANDOOB_ALL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_MANDOOB_ALL]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_MANDOOB]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_MANDOOB]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_MANDOOB]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_MAIN]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_MAIN]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_MAIN]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_DESC]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_DESC]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_DESC]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_CODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_CODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_CODE]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_B_TEST]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_B_TEST]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_B_TEST]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_ADVANCE_old14-3]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_ADVANCE_old14-3]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_ADVANCE_old14-3]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_ADVANCE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_ADVANCE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_ADVANCE]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_DAYLY_ARBAH_NET_REPORT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_DAYLY_ARBAH_NET_REPORT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_DAYLY_ARBAH_NET_REPORT]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_DAYLY_ALL_REPORT_USER_ONLY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_DAYLY_ALL_REPORT_USER_ONLY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_DAYLY_ALL_REPORT_USER_ONLY]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_DAYLY_ALL_REPORT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_DAYLY_ALL_REPORT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_DAYLY_ALL_REPORT]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_BALANCE_FINAL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_BALANCE_FINAL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_FILL_BALANCE_FINAL]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_CLIENT_PLAYER_orgenal]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_CLIENT_PLAYER_orgenal]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_CLIENT_PLAYER_orgenal]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_CLIENT_PLAYER_OLD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_CLIENT_PLAYER_OLD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_CLIENT_PLAYER_OLD]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_CLIENT_PLAYER_MSG]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_CLIENT_PLAYER_MSG]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_CLIENT_PLAYER_MSG]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_CLIENT_PLAYER]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_CLIENT_PLAYER]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_CLIENT_PLAYER]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_CLIENT_GIM]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_CLIENT_GIM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_CLIENT_GIM]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_BALANCE_ITEM_STORE_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_BALANCE_ITEM_STORE_TEMP]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_BALANCE_ITEM_STORE_TEMP]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_BALANCE_ITEM_STORE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_BALANCE_ITEM_STORE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_BALANCE_ITEM_STORE]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_BALANCE_CLIENT_DISCOUNT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_BALANCE_CLIENT_DISCOUNT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_BALANCE_CLIENT_DISCOUNT]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_BALANCE_CLIENT_BEFORE_BILL_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_BALANCE_CLIENT_BEFORE_BILL_SANAD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_BALANCE_CLIENT_BEFORE_BILL_SANAD]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_BALANCE_CLIENT_BEFORE_BILL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_BALANCE_CLIENT_BEFORE_BILL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_BALANCE_CLIENT_BEFORE_BILL]
GO
/****** Object:  StoredProcedure [dbo].[P_GET_AKSAT_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_AKSAT_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GET_AKSAT_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[P_GENERATE_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GENERATE_BARCODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_GENERATE_BARCODE]
GO
/****** Object:  StoredProcedure [dbo].[P_FIX_ERROR_T_STORE_BOX_SALES_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_FIX_ERROR_T_STORE_BOX_SALES_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_FIX_ERROR_T_STORE_BOX_SALES_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[P_FILL_UNIT_FORM_INFO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_FILL_UNIT_FORM_INFO]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_FILL_UNIT_FORM_INFO]
GO
/****** Object:  StoredProcedure [dbo].[P_FILL_UNIT_FORM]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_FILL_UNIT_FORM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_FILL_UNIT_FORM]
GO
/****** Object:  StoredProcedure [dbo].[P_DIGIT_CARDS_CLIENT_KASHIF]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DIGIT_CARDS_CLIENT_KASHIF]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DIGIT_CARDS_CLIENT_KASHIF]
GO
/****** Object:  StoredProcedure [dbo].[P_DIGIT_CARDS_CLIENT_BALANCE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DIGIT_CARDS_CLIENT_BALANCE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DIGIT_CARDS_CLIENT_BALANCE]
GO
/****** Object:  StoredProcedure [dbo].[P_DIGIT_CARDS_CLIENT_ADD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DIGIT_CARDS_CLIENT_ADD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DIGIT_CARDS_CLIENT_ADD]
GO
/****** Object:  StoredProcedure [dbo].[P_DIGIT_CARDS_ADD_SALES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DIGIT_CARDS_ADD_SALES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DIGIT_CARDS_ADD_SALES]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_STORE_TRANSFARE_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_STORE_TRANSFARE_NOT_USE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_STORE_TRANSFARE_NOT_USE]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SANAD_SMAH_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SANAD_SMAH_NOT_USE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_SANAD_SMAH_NOT_USE]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SANAD_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SANAD_NOT_USE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_SANAD_NOT_USE]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SANAD_KAYD_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SANAD_KAYD_NOT_USE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_SANAD_KAYD_NOT_USE]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SANAD_HAWALA_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SANAD_HAWALA_NOT_USE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_SANAD_HAWALA_NOT_USE]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SANAD_DOLLAR_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SANAD_DOLLAR_NOT_USE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_SANAD_DOLLAR_NOT_USE]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SANAD_CNY_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SANAD_CNY_NOT_USE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_SANAD_CNY_NOT_USE]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SALES_NOT_USE_NEW_SALES_TABLE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SALES_NOT_USE_NEW_SALES_TABLE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_SALES_NOT_USE_NEW_SALES_TABLE]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SALES_NOT_USE_NEW_SALES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SALES_NOT_USE_NEW_SALES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_SALES_NOT_USE_NEW_SALES]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SALES_NOT_USE_ALL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SALES_NOT_USE_ALL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_SALES_NOT_USE_ALL]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SALES_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SALES_NOT_USE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_SALES_NOT_USE]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_PURCHASE_ORDER_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_PURCHASE_ORDER_NOT_USE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_PURCHASE_ORDER_NOT_USE]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_ITEMS_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_ITEMS_NOT_USE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_ITEMS_NOT_USE]
GO
/****** Object:  StoredProcedure [dbo].[P_delete_item_not_sales]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_delete_item_not_sales]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_delete_item_not_sales]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_ITEM_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_ITEM_BARCODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_ITEM_BARCODE]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_FACTORY_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_FACTORY_NOT_USE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_FACTORY_NOT_USE]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_DATA_SALES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_DATA_SALES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_DATA_SALES]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_DATA_NEW_YEAR]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_DATA_NEW_YEAR]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_DATA_NEW_YEAR]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_DATA_BUT_USERS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_DATA_BUT_USERS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_DATA_BUT_USERS]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_DATA_BUT_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_DATA_BUT_ITEMS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_DATA_BUT_ITEMS]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_DATA]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_DATA]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_DATA]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_CLIENTS_BALANCE_ZERO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_CLIENTS_BALANCE_ZERO]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_CLIENTS_BALANCE_ZERO]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_BUY_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_BUY_NOT_USE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_BUY_NOT_USE]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_BILL_NUMBER_FLAG]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_BILL_NUMBER_FLAG]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_BILL_NUMBER_FLAG]
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_ALL_INDEX]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_ALL_INDEX]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DELETE_ALL_INDEX]
GO
/****** Object:  StoredProcedure [dbo].[P_DASHBORD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DASHBORD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DASHBORD]
GO
/****** Object:  StoredProcedure [dbo].[P_DAMAGE_ITEMS_ALL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DAMAGE_ITEMS_ALL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DAMAGE_ITEMS_ALL]
GO
/****** Object:  StoredProcedure [dbo].[P_DAMAGE_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DAMAGE_ITEMS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DAMAGE_ITEMS]
GO
/****** Object:  StoredProcedure [dbo].[P_DAMAGE_ACCOUNTS_ALL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DAMAGE_ACCOUNTS_ALL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DAMAGE_ACCOUNTS_ALL]
GO
/****** Object:  StoredProcedure [dbo].[P_DAMAGE_ACCOUNTS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DAMAGE_ACCOUNTS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_DAMAGE_ACCOUNTS]
GO
/****** Object:  StoredProcedure [dbo].[P_CHECK_NAME_SPACE_UPDATE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_CHECK_NAME_SPACE_UPDATE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_CHECK_NAME_SPACE_UPDATE]
GO
/****** Object:  StoredProcedure [dbo].[P_CHECK_INSERT_COLUMNS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_CHECK_INSERT_COLUMNS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_CHECK_INSERT_COLUMNS]
GO
/****** Object:  StoredProcedure [dbo].[P_CHECK_FIX_ERROR_T_STORE_BOX_SALES_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_CHECK_FIX_ERROR_T_STORE_BOX_SALES_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_CHECK_FIX_ERROR_T_STORE_BOX_SALES_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[P_CHECK_EXIST_INDEX_DELETE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_CHECK_EXIST_INDEX_DELETE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_CHECK_EXIST_INDEX_DELETE]
GO
/****** Object:  StoredProcedure [dbo].[P_CHECK_EXIST_INDEX]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_CHECK_EXIST_INDEX]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_CHECK_EXIST_INDEX]
GO
/****** Object:  StoredProcedure [dbo].[P_CHECK_EXIST_COLUMNS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_CHECK_EXIST_COLUMNS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_CHECK_EXIST_COLUMNS]
GO
/****** Object:  StoredProcedure [dbo].[P_CalculateBillPointsSummary]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_CalculateBillPointsSummary]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_CalculateBillPointsSummary]
GO
/****** Object:  StoredProcedure [dbo].[P_CalculateBillPoints]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_CalculateBillPoints]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_CalculateBillPoints]
GO
/****** Object:  StoredProcedure [dbo].[P_API_UPDATE_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_UPDATE_ITEMS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_UPDATE_ITEMS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_UPDATE_ITEM_UNIT_AND_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_UPDATE_ITEM_UNIT_AND_CATEGORY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_UPDATE_ITEM_UNIT_AND_CATEGORY]
GO
/****** Object:  StoredProcedure [dbo].[P_API_UPDATE_EXPIRED_BUY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_UPDATE_EXPIRED_BUY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_UPDATE_EXPIRED_BUY]
GO
/****** Object:  StoredProcedure [dbo].[P_API_TABOOR_UPDATE_TYPES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_TABOOR_UPDATE_TYPES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_TABOOR_UPDATE_TYPES]
GO
/****** Object:  StoredProcedure [dbo].[P_API_TABOOR_UPDATE_TIME_RESET]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_TABOOR_UPDATE_TIME_RESET]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_TABOOR_UPDATE_TIME_RESET]
GO
/****** Object:  StoredProcedure [dbo].[P_API_TABOOR_UPDATE_ORDERS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_TABOOR_UPDATE_ORDERS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_TABOOR_UPDATE_ORDERS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_TABOOR_INSERT_ORDERS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_TABOOR_INSERT_ORDERS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_TABOOR_INSERT_ORDERS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_TABOOR_GET_TYPES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_TABOOR_GET_TYPES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_TABOOR_GET_TYPES]
GO
/****** Object:  StoredProcedure [dbo].[P_API_TABOOR_GET_TIME_RESET]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_TABOOR_GET_TIME_RESET]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_TABOOR_GET_TIME_RESET]
GO
/****** Object:  StoredProcedure [dbo].[P_API_TABOOR_GET_ORDERS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_TABOOR_GET_ORDERS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_TABOOR_GET_ORDERS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_TABOOR_DELETE_ORDERS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_TABOOR_DELETE_ORDERS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_TABOOR_DELETE_ORDERS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_UPDATE_ITEMS_MISWAK_INFO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_UPDATE_ITEMS_MISWAK_INFO]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_UPDATE_ITEMS_MISWAK_INFO]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_UPDATE_ITEMS_FEATURES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_UPDATE_ITEMS_FEATURES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_UPDATE_ITEMS_FEATURES]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_UPDATE_ENABLE_ITEM]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_UPDATE_ENABLE_ITEM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_UPDATE_ENABLE_ITEM]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_UPDATE_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_UPDATE_CATEGORY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_UPDATE_CATEGORY]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_UPDATE_BARCODE_BY_ITEMCODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_UPDATE_BARCODE_BY_ITEMCODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_UPDATE_BARCODE_BY_ITEMCODE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_INSERT_MISWAK_INFO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_INSERT_MISWAK_INFO]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_INSERT_MISWAK_INFO]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_INSERT_ITEM_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_INSERT_ITEM_BARCODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_INSERT_ITEM_BARCODE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_INSERT_DATA]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_INSERT_DATA]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_INSERT_DATA]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_INSERT_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_INSERT_CATEGORY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_INSERT_CATEGORY]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_NEGTIVE_STORE_REPORT_STORE_REPORT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_NEGTIVE_STORE_REPORT_STORE_REPORT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_GET_NEGTIVE_STORE_REPORT_STORE_REPORT]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ITEM_MOVE_AVG]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ITEM_MOVE_AVG]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_GET_ITEM_MOVE_AVG]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_EXPIRE_STORE_REPORT_STORE_REPORT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_EXPIRE_STORE_REPORT_STORE_REPORT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_GET_EXPIRE_STORE_REPORT_STORE_REPORT]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_DASBOARD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_DASBOARD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_GET_DASBOARD]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_STORE_WAJBA_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_STORE_WAJBA_ITEMS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_GET_ALL_STORE_WAJBA_ITEMS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_STORE_REPORT_STORE_REPORT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_STORE_REPORT_STORE_REPORT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_GET_ALL_STORE_REPORT_STORE_REPORT]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_STORE_QTYMIN_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_STORE_QTYMIN_ITEMS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_GET_ALL_STORE_QTYMIN_ITEMS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_STORE_NEGATIVE_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_STORE_NEGATIVE_ITEMS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_GET_ALL_STORE_NEGATIVE_ITEMS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_STORE_EXPIRE_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_STORE_EXPIRE_ITEMS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_GET_ALL_STORE_EXPIRE_ITEMS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_STORE_DELETED_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_STORE_DELETED_ITEMS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_GET_ALL_STORE_DELETED_ITEMS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_STORE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_STORE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_GET_ALL_STORE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_MISWAK_INFO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_MISWAK_INFO]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_GET_ALL_MISWAK_INFO]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_ITEMS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_GET_ALL_ITEMS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_ITEM_TYPE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_ITEM_TYPE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_GET_ALL_ITEM_TYPE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_INFO_BY_ITEMCODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_INFO_BY_ITEMCODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_GET_ALL_INFO_BY_ITEMCODE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_CLIENT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_GET_ALL_CLIENT]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_CATEGORY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_GET_ALL_CATEGORY]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_BARCODE_BY_ITEMCODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_BARCODE_BY_ITEMCODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_GET_ALL_BARCODE_BY_ITEMCODE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GENERATE_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GENERATE_BARCODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_GENERATE_BARCODE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_DELETED_BARCODE_BY_ITEMCODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_DELETED_BARCODE_BY_ITEMCODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_DELETED_BARCODE_BY_ITEMCODE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_DELETE_ITEMS_MISWAK_INFO]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_DELETE_ITEMS_MISWAK_INFO]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_DELETE_ITEMS_MISWAK_INFO]
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_DELETE_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_DELETE_CATEGORY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_STORES_DELETE_CATEGORY]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_INSERT_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_INSERT_SANAD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_INSERT_SANAD]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_INSERT_NOTE_BILL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_INSERT_NOTE_BILL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_INSERT_NOTE_BILL]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_INSERT_APP_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_INSERT_APP_INVOICE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_INSERT_APP_INVOICE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_USER_CODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_USER_CODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_USER_CODE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_TYPE_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_TYPE_INVOICE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_TYPE_INVOICE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_SALES_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_SALES_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_SALES_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_SALES_BY_DATE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_SALES_BY_DATE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_SALES_BY_DATE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_MOVE_LIST]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_MOVE_LIST]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_MOVE_LIST]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_STORE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_STORE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_STORE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_MOVE_AVG]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_MOVE_AVG]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_MOVE_AVG]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_BY_ITEM_NAME]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_BY_ITEM_NAME]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_BY_ITEM_NAME]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_BY_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_BY_BARCODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_BY_BARCODE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_ITEM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_FILL_REPORT_ACCOUNT_ADVANCE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_FILL_REPORT_ACCOUNT_ADVANCE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_FILL_REPORT_ACCOUNT_ADVANCE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_FILL_REPORT_ACCOUNT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_FILL_REPORT_ACCOUNT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_FILL_REPORT_ACCOUNT]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_DASHBORD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_DASHBORD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_DASHBORD]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_CLIENT_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_CLIENT_SANAD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_CLIENT_SANAD]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_CLIENT_BALANCE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_CLIENT_BALANCE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_CLIENT_BALANCE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_BUY_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_BUY_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_BUY_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_BUY_BY_DATE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_BUY_BY_DATE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_BUY_BY_DATE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_ACCOUNT_TYPE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_ACCOUNT_TYPE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_ACCOUNT_TYPE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_ACCOUNT_PARENT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_ACCOUNT_PARENT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_ACCOUNT_PARENT]
GO
/****** Object:  StoredProcedure [dbo].[P_API_RETURN_BILL_NUMBER]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_RETURN_BILL_NUMBER]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_RETURN_BILL_NUMBER]
GO
/****** Object:  StoredProcedure [dbo].[P_API_PRICE_CHECKER_GET_ITEM_BY_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_PRICE_CHECKER_GET_ITEM_BY_BARCODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_PRICE_CHECKER_GET_ITEM_BY_BARCODE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_PLAY_CARD_GET_USER_CODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_PLAY_CARD_GET_USER_CODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_PLAY_CARD_GET_USER_CODE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_PLAY_CARD_GET_ITEM]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_PLAY_CARD_GET_ITEM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_PLAY_CARD_GET_ITEM]
GO
/****** Object:  StoredProcedure [dbo].[P_API_PLAY_CARD_GET_BALANCE_CARD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_PLAY_CARD_GET_BALANCE_CARD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_PLAY_CARD_GET_BALANCE_CARD]
GO
/****** Object:  StoredProcedure [dbo].[P_API_PLAY_CARD_GET_AMOUNT_CARD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_PLAY_CARD_GET_AMOUNT_CARD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_PLAY_CARD_GET_AMOUNT_CARD]
GO
/****** Object:  StoredProcedure [dbo].[P_API_PLAY_CARD_CLIENT_PLAYER]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_PLAY_CARD_CLIENT_PLAYER]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_PLAY_CARD_CLIENT_PLAYER]
GO
/****** Object:  StoredProcedure [dbo].[P_API_PLAY_CARD_ADD_BALANCE_CARD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_PLAY_CARD_ADD_BALANCE_CARD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_PLAY_CARD_ADD_BALANCE_CARD]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_UPDATE_DELIVERY_ORDERS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_UPDATE_DELIVERY_ORDERS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_UPDATE_DELIVERY_ORDERS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_LOGIN]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_LOGIN]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_LOGIN]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_INSERT_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_INSERT_SANAD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_INSERT_SANAD]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_INSERT_PERMISSION]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_INSERT_PERMISSION]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_INSERT_PERMISSION]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_INSERT_MANDOOB_VISITS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_INSERT_MANDOOB_VISITS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_INSERT_MANDOOB_VISITS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_INSERT_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_INSERT_INVOICE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_INSERT_INVOICE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_INSERT_CLIENTS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_INSERT_CLIENTS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_INSERT_CLIENTS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_INSERT_APP_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_INSERT_APP_INVOICE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_INSERT_APP_INVOICE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_VISITS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_VISITS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_GET_VISITS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_SALES_DETAILS_ITEMS_MANDOOB]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_SALES_DETAILS_ITEMS_MANDOOB]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_GET_SALES_DETAILS_ITEMS_MANDOOB]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_SALES_BY_BILL_NUMBER]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_SALES_BY_BILL_NUMBER]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_GET_SALES_BY_BILL_NUMBER]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_REPORT_SALES_DETIALS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_REPORT_SALES_DETIALS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_GET_REPORT_SALES_DETIALS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_PERMISSION]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_PERMISSION]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_GET_PERMISSION]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_OFFERS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_OFFERS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_GET_OFFERS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_MANDOOB_VISITS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_MANDOOB_VISITS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_GET_MANDOOB_VISITS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_ITEM_STORE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_ITEM_STORE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_GET_ITEM_STORE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_DRIVER_ORDERS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_DRIVER_ORDERS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_GET_DRIVER_ORDERS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_CLIENT_BALANCE_BY_MANDOOB]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_CLIENT_BALANCE_BY_MANDOOB]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_GET_CLIENT_BALANCE_BY_MANDOOB]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_ALL_SYSTEM_INVOICES]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_ALL_SYSTEM_INVOICES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_GET_ALL_SYSTEM_INVOICES]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_ALL_REGION_SHIP]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_ALL_REGION_SHIP]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_GET_ALL_REGION_SHIP]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_ALL_PERMISSIONS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_ALL_PERMISSIONS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_GET_ALL_PERMISSIONS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_ALL_INVOICES_BEFORE_ACCEPT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_ALL_INVOICES_BEFORE_ACCEPT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_GET_ALL_INVOICES_BEFORE_ACCEPT]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_ALL_INVOICES_AFTER_ACCEPT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_ALL_INVOICES_AFTER_ACCEPT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_GET_ALL_INVOICES_AFTER_ACCEPT]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_DELETE_INVOICES_BEFORE_ACCEPT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_DELETE_INVOICES_BEFORE_ACCEPT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_DELETE_INVOICES_BEFORE_ACCEPT]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_CHECK_INSERT_VISIT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_CHECK_INSERT_VISIT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_CHECK_INSERT_VISIT]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_CHECK_INSERT_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_CHECK_INSERT_SANAD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_CHECK_INSERT_SANAD]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_CHECK_INSERT_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_CHECK_INSERT_INVOICE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_CHECK_INSERT_INVOICE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_CHECK_INSERT_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_CHECK_INSERT_CLIENT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_CHECK_INSERT_CLIENT]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_CHECK_DELIVERY_ORDERS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_CHECK_DELIVERY_ORDERS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_CHECK_DELIVERY_ORDERS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_ADD_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_ADD_SANAD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_ADD_SANAD]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_ADD_MANDOOB_VISITS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_ADD_MANDOOB_VISITS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_ADD_MANDOOB_VISITS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_ADD_CLIENTS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_ADD_CLIENTS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MANDOOB_ADD_CLIENTS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MAINTENANCE_UPDATE_USER_PERMISSION]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MAINTENANCE_UPDATE_USER_PERMISSION]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MAINTENANCE_UPDATE_USER_PERMISSION]
GO
/****** Object:  StoredProcedure [dbo].[P_API_MAINTENANCE_GET_ALL_USERS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MAINTENANCE_GET_ALL_USERS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_MAINTENANCE_GET_ALL_USERS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_INSERT_ORDER_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_INSERT_ORDER_INVOICE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_INSERT_ORDER_INVOICE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_INSERT_NOTE_BILL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_INSERT_NOTE_BILL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_INSERT_NOTE_BILL]
GO
/****** Object:  StoredProcedure [dbo].[P_API_INSERT_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_INSERT_INVOICE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_INSERT_INVOICE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_INSERT_COUPON]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_INSERT_COUPON]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_INSERT_COUPON]
GO
/****** Object:  StoredProcedure [dbo].[P_API_INSERT_APP_INVOICE_MUSTAFA]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_INSERT_APP_INVOICE_MUSTAFA]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_INSERT_APP_INVOICE_MUSTAFA]
GO
/****** Object:  StoredProcedure [dbo].[P_API_INSERT_APP_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_INSERT_APP_INVOICE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_INSERT_APP_INVOICE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_IMPORT_STORE_NEW_DATA]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_IMPORT_STORE_NEW_DATA]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_IMPORT_STORE_NEW_DATA]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_USER_LIST_NOT_ADMIN]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_USER_LIST_NOT_ADMIN]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_USER_LIST_NOT_ADMIN]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_USER_CODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_USER_CODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_USER_CODE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_SALES_BY_DATE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_SALES_BY_DATE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_SALES_BY_DATE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_MOVE_LIST]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_MOVE_LIST]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_MOVE_LIST]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_MANDOOB_VISITS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_MANDOOB_VISITS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_MANDOOB_VISITS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_ITEM_STORE_NEW_MOVE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_ITEM_STORE_NEW_MOVE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_ITEM_STORE_NEW_MOVE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_ITEM_STORE_MULTI_CODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_ITEM_STORE_MULTI_CODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_ITEM_STORE_MULTI_CODE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_ITEM_STORE_GSTORE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_ITEM_STORE_GSTORE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_ITEM_STORE_GSTORE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_ITEM_STORE_BY_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_ITEM_STORE_BY_CATEGORY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_ITEM_STORE_BY_CATEGORY]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_ITEM_STORE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_ITEM_STORE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_ITEM_STORE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_ITEM_PRICE_CHECKER]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_ITEM_PRICE_CHECKER]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_ITEM_PRICE_CHECKER]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_ITEM_MOVE_AVG]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_ITEM_MOVE_AVG]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_ITEM_MOVE_AVG]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_FILL_REPORT_ACCOUNT_OLD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_FILL_REPORT_ACCOUNT_OLD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_FILL_REPORT_ACCOUNT_OLD]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_FILL_REPORT_ACCOUNT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_FILL_REPORT_ACCOUNT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_FILL_REPORT_ACCOUNT]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_DASHBORD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_DASHBORD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_DASHBORD]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_CLIENT_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_CLIENT_SANAD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_CLIENT_SANAD]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_CLIENT_BALANCE_BY_MANDOOB]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_CLIENT_BALANCE_BY_MANDOOB]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_CLIENT_BALANCE_BY_MANDOOB]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_CLIENT_BALANCE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_CLIENT_BALANCE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_CLIENT_BALANCE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_BUY_BY_DATE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_BUY_BY_DATE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_BUY_BY_DATE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_ALL_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_ALL_CATEGORY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_ALL_CATEGORY]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_ACCOUNT_PARENT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_ACCOUNT_PARENT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GET_ACCOUNT_PARENT]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GAZ_GET_USER_CODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GAZ_GET_USER_CODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GAZ_GET_USER_CODE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GAZ_GET_STORE_ITEM]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GAZ_GET_STORE_ITEM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GAZ_GET_STORE_ITEM]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GAZ_GET_HOZ_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GAZ_GET_HOZ_CLIENT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GAZ_GET_HOZ_CLIENT]
GO
/****** Object:  StoredProcedure [dbo].[P_API_GAZ_ADD_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GAZ_ADD_INVOICE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_GAZ_ADD_INVOICE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_DELETE_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_DELETE_INVOICE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_DELETE_INVOICE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_CHECKEN_INSERT_SALES_FROM_BUY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_CHECKEN_INSERT_SALES_FROM_BUY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_CHECKEN_INSERT_SALES_FROM_BUY]
GO
/****** Object:  StoredProcedure [dbo].[P_API_CHECKEN_INSERT_BUY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_CHECKEN_INSERT_BUY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_CHECKEN_INSERT_BUY]
GO
/****** Object:  StoredProcedure [dbo].[P_API_CHECKEN_GET_STORE_LIST]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_CHECKEN_GET_STORE_LIST]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_CHECKEN_GET_STORE_LIST]
GO
/****** Object:  StoredProcedure [dbo].[P_API_CHECKEN_GET_QTY_BUY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_CHECKEN_GET_QTY_BUY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_CHECKEN_GET_QTY_BUY]
GO
/****** Object:  StoredProcedure [dbo].[P_API_CHECKEN_CHEACK_STORE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_CHECKEN_CHEACK_STORE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_CHECKEN_CHEACK_STORE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_CHECKEN_CHANGE_STORE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_CHECKEN_CHANGE_STORE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_CHECKEN_CHANGE_STORE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_UPDATE_ITEM_PRICE_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_UPDATE_ITEM_PRICE_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_UPDATE_ITEM_PRICE_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_UPDATE_ITEM_PRICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_UPDATE_ITEM_PRICE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_UPDATE_ITEM_PRICE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_INSERT_APP_INVOICE_TEMP_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_INSERT_APP_INVOICE_TEMP_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_INSERT_APP_INVOICE_TEMP_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_INSERT_APP_INVOICE_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_INSERT_APP_INVOICE_TEMP]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_INSERT_APP_INVOICE_TEMP]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_TAG_PROCCESS_INVOICE_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_TAG_PROCCESS_INVOICE_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_TAG_PROCCESS_INVOICE_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_TAG_PROCCESS_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_TAG_PROCCESS_INVOICE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_TAG_PROCCESS_INVOICE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_SLIDER_HOME_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_SLIDER_HOME_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_SLIDER_HOME_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_SLIDER_HOME]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_SLIDER_HOME]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_SLIDER_HOME]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_LOGIN_MANDOOB_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_LOGIN_MANDOOB_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_LOGIN_MANDOOB_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_LOGIN_MANDOOB]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_LOGIN_MANDOOB]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_LOGIN_MANDOOB]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_LOGIN_CLIENT_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_LOGIN_CLIENT_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_LOGIN_CLIENT_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_LOGIN_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_LOGIN_CLIENT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_LOGIN_CLIENT]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_LAST_ITEM_STORE_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_LAST_ITEM_STORE_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_LAST_ITEM_STORE_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_LAST_ITEM_STORE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_LAST_ITEM_STORE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_LAST_ITEM_STORE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_MULTI_CODE_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_MULTI_CODE_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_ITEM_STORE_MULTI_CODE_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_MULTI_CODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_MULTI_CODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_ITEM_STORE_MULTI_CODE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_ITEM_STORE_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_ITEM_CODE_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_ITEM_CODE_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_ITEM_STORE_ITEM_CODE_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_ITEM_CODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_ITEM_CODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_ITEM_STORE_ITEM_CODE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_SIMILAR_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_SIMILAR_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_SIMILAR_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_SIMILAR]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_SIMILAR]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_SIMILAR]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_KIND_NAME_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_KIND_NAME_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_KIND_NAME_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_KIND_NAME]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_KIND_NAME]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_KIND_NAME]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_COMPANY_CREATE_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_COMPANY_CREATE_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_COMPANY_CREATE_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_COMPANY_CREATE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_COMPANY_CREATE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_COMPANY_CREATE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_BARCODE_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_BARCODE_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_BARCODE_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_BARCODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_BARCODE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_ITEM_STORE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_HOME_PAGE_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_HOME_PAGE_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_ITEM_HOME_PAGE_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_HOME_PAGE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_HOME_PAGE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_ITEM_HOME_PAGE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_INVOICE_RETURN_BY_CLIENT_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_INVOICE_RETURN_BY_CLIENT_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_INVOICE_RETURN_BY_CLIENT_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_INVOICE_RETURN_BY_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_INVOICE_RETURN_BY_CLIENT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_INVOICE_RETURN_BY_CLIENT]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_INVOICE_DETAILS_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_INVOICE_DETAILS_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_INVOICE_DETAILS_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_INVOICE_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_INVOICE_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_INVOICE_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_INVOICE_BY_CLIENT_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_INVOICE_BY_CLIENT_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_INVOICE_BY_CLIENT_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_INVOICE_BY_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_INVOICE_BY_CLIENT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_INVOICE_BY_CLIENT]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_DISCOUNT_CLIENT_MS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_DISCOUNT_CLIENT_MS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_DISCOUNT_CLIENT_MS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_DISCOUNT_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_DISCOUNT_CLIENT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_AL_SADY_GET_DISCOUNT_CLIENT]
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADS_TRACKING_UPDATE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADS_TRACKING_UPDATE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_ADS_TRACKING_UPDATE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADS_TRACKING_GET_BY_FILTER]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADS_TRACKING_GET_BY_FILTER]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_ADS_TRACKING_GET_BY_FILTER]
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADS_TRACKING_GET_ALL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADS_TRACKING_GET_ALL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_ADS_TRACKING_GET_ALL]
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADS_TRACKING_ADD_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADS_TRACKING_ADD_INVOICE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_ADS_TRACKING_ADD_INVOICE]
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADS_TRACKING_ADD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADS_TRACKING_ADD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_ADS_TRACKING_ADD]
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADD_TEMP_BUY_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADD_TEMP_BUY_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_ADD_TEMP_BUY_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADD_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADD_SANAD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_ADD_SANAD]
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADD_MULTI]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADD_MULTI]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_ADD_MULTI]
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADD_MANDOOB_VISITS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADD_MANDOOB_VISITS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_ADD_MANDOOB_VISITS]
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADD_CLIENTS_NEW]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADD_CLIENTS_NEW]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_ADD_CLIENTS_NEW]
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADD_CLIENTS_APP]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADD_CLIENTS_APP]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_ADD_CLIENTS_APP]
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADD_CLIENTS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADD_CLIENTS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_API_ADD_CLIENTS]
GO
/****** Object:  StoredProcedure [dbo].[P_AA_NEW_YEAR_2024]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_AA_NEW_YEAR_2024]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_AA_NEW_YEAR_2024]
GO
/****** Object:  StoredProcedure [dbo].[P_AA_ITEMS_NEW_YEAR_22_FILL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_AA_ITEMS_NEW_YEAR_22_FILL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_AA_ITEMS_NEW_YEAR_22_FILL]
GO
/****** Object:  StoredProcedure [dbo].[P_AA_ITEMS_NEW_YEAR_11_TARSEED]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_AA_ITEMS_NEW_YEAR_11_TARSEED]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_AA_ITEMS_NEW_YEAR_11_TARSEED]
GO
/****** Object:  StoredProcedure [dbo].[P_AA_INSERT_SALES_INVOICE_DEBIT]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_AA_INSERT_SALES_INVOICE_DEBIT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_AA_INSERT_SALES_INVOICE_DEBIT]
GO
/****** Object:  StoredProcedure [dbo].[P_AA_ACCOUNT_NEW_YEAR_22_FILL]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_AA_ACCOUNT_NEW_YEAR_22_FILL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_AA_ACCOUNT_NEW_YEAR_22_FILL]
GO
/****** Object:  StoredProcedure [dbo].[P_AA_ACCOUNT_NEW_YEAR_11_TARSEED]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_AA_ACCOUNT_NEW_YEAR_11_TARSEED]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_AA_ACCOUNT_NEW_YEAR_11_TARSEED]
GO
/****** Object:  StoredProcedure [dbo].[P_A_GET_TATMA_ORDER]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_A_GET_TATMA_ORDER]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_A_GET_TATMA_ORDER]
GO
/****** Object:  StoredProcedure [dbo].[P_A_GET_ITEM_SPECIFICATIONS_GNAME]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_A_GET_ITEM_SPECIFICATIONS_GNAME]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_A_GET_ITEM_SPECIFICATIONS_GNAME]
GO
/****** Object:  StoredProcedure [dbo].[P_A_GET_ITEM_SPECIFICATIONS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_A_GET_ITEM_SPECIFICATIONS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_A_GET_ITEM_SPECIFICATIONS]
GO
/****** Object:  StoredProcedure [dbo].[P_A_GET_COUNT_TABOR]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_A_GET_COUNT_TABOR]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_A_GET_COUNT_TABOR]
GO
/****** Object:  StoredProcedure [dbo].[P_A_FIX_STORE_FROM_SALES_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_A_FIX_STORE_FROM_SALES_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[P_A_FIX_STORE_FROM_SALES_DETAILS]
GO
/****** Object:  StoredProcedure [dbo].[AAAAAAAA_INSERT_STUDENT_TYPE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AAAAAAAA_INSERT_STUDENT_TYPE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[AAAAAAAA_INSERT_STUDENT_TYPE]
GO
/****** Object:  StoredProcedure [dbo].[AAAAAAAA_INSERT_HOUSE_TYPE]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AAAAAAAA_INSERT_HOUSE_TYPE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[AAAAAAAA_INSERT_HOUSE_TYPE]
GO
/****** Object:  StoredProcedure [dbo].[AAAA_P_DELETE_SALES_NOT_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AAAA_P_DELETE_SALES_NOT_TEMP]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[AAAA_P_DELETE_SALES_NOT_TEMP]
GO
/****** Object:  StoredProcedure [dbo].[AAAA_P_DELETE_SALES_NOT_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AAAA_P_DELETE_SALES_NOT_TEMP]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[AAAA_P_DELETE_SALES_NOT_TEMP]


@SUBMIT_FLAG INT OUTPUT

AS


DECLARE BOX_CURSOR CURSOR FOR SELECT  BILL_NUMBER FROM AA_CHECK_COUNT_DETAILS_TEMP  ;


DECLARE
@BILL_CURSOR INT

BEGIN
SET @SUBMIT_FLAG=0

   
OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @BILL_CURSOR
WHILE @@FETCH_STATUS = 0
BEGIN
DELETE FROM T_SALES WHERE BILL_NUMBER=@BILL_CURSOR



FETCH NEXT FROM BOX_CURSOR INTO @BILL_CURSOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR



SET @SUBMIT_FLAG=1

END	--END OF PROGRAM





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[AAAAAAAA_INSERT_HOUSE_TYPE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AAAAAAAA_INSERT_HOUSE_TYPE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[AAAAAAAA_INSERT_HOUSE_TYPE]
AS
BEGIN




DELETE FROM TB_HOUSE_TYPE
INSERT INTO [dbo].[TB_HOUSE_TYPE]
           ([HOUSE_TYPE_CODE]
           ,[HOUSE_TYPE_NAME])
     VALUES
           (0
           ,N''...'')
  

 INSERT INTO [dbo].[TB_HOUSE_TYPE]
           ([HOUSE_TYPE_CODE]
           ,[HOUSE_TYPE_NAME])
     VALUES
           (1
           ,N''ملك'')
  

	 INSERT INTO [dbo].[TB_HOUSE_TYPE]
           ([HOUSE_TYPE_CODE]
           ,[HOUSE_TYPE_NAME])
     VALUES
           (2
           ,N''مستأجر'')
  	 INSERT INTO [dbo].[TB_HOUSE_TYPE]
           ([HOUSE_TYPE_CODE]
           ,[HOUSE_TYPE_NAME])
     VALUES
           (3
           ,N''مغادر'')

END



































' 
END
GO
/****** Object:  StoredProcedure [dbo].[AAAAAAAA_INSERT_STUDENT_TYPE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AAAAAAAA_INSERT_STUDENT_TYPE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[AAAAAAAA_INSERT_STUDENT_TYPE]
AS
BEGIN




DELETE FROM TB_HOUSE_TYPE
INSERT INTO [dbo].[TB_HOUSE_TYPE]
           ([HOUSE_TYPE_CODE]
           ,[HOUSE_TYPE_NAME])
     VALUES
           (0
           ,N''...'')
  

 INSERT INTO [dbo].[TB_HOUSE_TYPE]
           ([HOUSE_TYPE_CODE]
           ,[HOUSE_TYPE_NAME])
     VALUES
           (1
           ,N''جديد'')
  

	 INSERT INTO [dbo].[TB_HOUSE_TYPE]
           ([HOUSE_TYPE_CODE]
           ,[HOUSE_TYPE_NAME])
     VALUES
           (2
           ,N''مستمر'')
  	 INSERT INTO [dbo].[TB_HOUSE_TYPE]
           ([HOUSE_TYPE_CODE]
           ,[HOUSE_TYPE_NAME])
     VALUES
           (3
           ,N''مغادر'')

END



































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_A_FIX_STORE_FROM_SALES_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_A_FIX_STORE_FROM_SALES_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

 
CREATE PROCEDURE [dbo].[P_A_FIX_STORE_FROM_SALES_DETAILS]
 
AS
BEGIN

UPDATE T_STORE_BOX   SET  ST_OUT =(SELECT TOP(1) QTY FROM V_SALES_DETAILS WHERE BILL_NUMBER=T_STORE_BOX.BILL_NUMBER AND ITEM_CODE=T_STORE_BOX.ITEM_CODE)
 WHERE B_CODE=2 AND    BILL_NUMBER IN (SELECT BILL_NUMBER FROM V_A_ERROR_T_STORE_BOX_SALES_DETAILS  ) 
END


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_A_GET_COUNT_TABOR]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_A_GET_COUNT_TABOR]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
 
CREATE PROCEDURE [dbo].[P_A_GET_COUNT_TABOR]
@BILL_NUMBER INT,
@CATEGORY_CODE NVARCHAR(MAX),
@COUNT_TABOR INT OUTPUT

AS
BEGIN

DECLARE
@STR NVARCHAR(MAX)
 
IF LEN(RTRIM(LTRIM(@CATEGORY_CODE)))=0 SET @CATEGORY_CODE=N''0''

SET @STR = ''SELECT  @rowCountOUT=COUNT(T_ID) FROM V_SALES_DETAILS WHERE BILL_NUMBER='' + CAST(@BILL_NUMBER AS nvarchar )+ '' AND  CATEGORY_CODE  NOT IN ('' + @CATEGORY_CODE + '')''
 --PRINT @STR

EXEC sp_executesql @STR,      N''@rowCountOUT INT OUTPUT'',  @rowCountOUT = @COUNT_TABOR OUTPUT;

 
END

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_A_GET_ITEM_SPECIFICATIONS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_A_GET_ITEM_SPECIFICATIONS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[P_A_GET_ITEM_SPECIFICATIONS]
@ITEM_CODE INT 

AS
BEGIN
SELECT TOP(1) ISNULL(
     
    STUFF(
        (
            SELECT '', '' + ST.SPEC_TYPE_SIGN + '': '' + PS.SPEC_VALUE
            FROM T_ITEM_SPECIFICATIONS PS
            JOIN T_ITEM_SPECIFICATION_TYPE ST ON PS.SPEC_TYPE_ID = ST.SPEC_TYPE_ID
            WHERE PS.ITEM_CODE = P.ITEM_CODE
				ORDER BY PS.SPEC_ID
            FOR XML PATH(''''), TYPE
        ).value(''.'', ''NVARCHAR(MAX)''), 1, 2, ''''
    ) ,N'''') AS ITEM_DESCRIPTION
FROM T_ITEM_SPECIFICATIONS P
WHERE P.ITEM_CODE = @ITEM_CODE
 
	
END































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_A_GET_ITEM_SPECIFICATIONS_GNAME]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_A_GET_ITEM_SPECIFICATIONS_GNAME]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

 

CREATE PROCEDURE [dbo].[P_A_GET_ITEM_SPECIFICATIONS_GNAME]
@ITEM_CODE INT 

AS
BEGIN
SELECT TOP(1) ISNULL(
     
    STUFF(
        (
            SELECT   PS.SPEC_VALUE
            FROM T_ITEM_SPECIFICATIONS PS
            JOIN T_ITEM_SPECIFICATION_TYPE ST ON PS.SPEC_TYPE_ID = ST.SPEC_TYPE_ID
            WHERE PS.ITEM_CODE = P.ITEM_CODE
			ORDER BY ST.SPEC_TYPE_ID
 
            FOR XML PATH(''''), TYPE
        ).value(''.'', ''NVARCHAR(MAX)''), 1, 0, ''''
    ) ,N'''') AS ITEM_DESCRIPTION
FROM T_ITEM_SPECIFICATIONS P
WHERE P.ITEM_CODE = @ITEM_CODE
 
	
END


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_A_GET_TATMA_ORDER]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_A_GET_TATMA_ORDER]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'












CREATE PROCEDURE [dbo].[P_A_GET_TATMA_ORDER]
@BILL_NUMBER INT,
@PRINTER_ID	INT,
@TATMA_ORDER varchar(900) OUTPUT

AS
BEGIN
---------------------------------------------BY ITEMS_NAME AND NOTE AND QTY----------------------------------------------------------
--select TOP (1)
-- @TATMA_ORDER= REPLACE(Stuff((SELECT distinct  '','' + cast(ITEM_NAME as varchar(900))+ N''(''+cast(QTY as varchar(900))+ N'')''+cast(ITEM_NOTE as varchar(900))
--           FROM V_SALES_TEMP_ORDER WHERE BILL_NUMBER=@BILL_NUMBER AND IS_PRINT=0 AND PRINTER_ID <> @PRINTER_ID
--           FOR XML PATH('''')),1,1,'''') , '','', CHAR(10)) 
--from V_SALES_TEMP_ORDER
-- WHERE BILL_NUMBER=@BILL_NUMBER AND IS_PRINT=0

-----------------------------------------------BY ITEMS----------------------------------------------------------
select TOP (1)
 @TATMA_ORDER= REPLACE(Stuff((SELECT distinct  '','' + cast(ITEM_NAME as varchar(900))
           FROM V_SALES_TEMP_ORDER WHERE BILL_NUMBER=@BILL_NUMBER AND IS_PRINT=0 AND PRINTER_ID <> @PRINTER_ID
           FOR XML PATH('''')),1,1,'''') , '','', CHAR(10)) 
from V_SALES_TEMP_ORDER
 WHERE BILL_NUMBER=@BILL_NUMBER AND IS_PRINT=0

------------------------------------------------BY CATEGORY---------------------------------------------------------
--select TOP (1)
-- @TATMA_ORDER= REPLACE(Stuff((SELECT distinct  '','' + cast(CATEGORY_NAME as varchar(900))
--           FROM V_SALES_TEMP_TATMA_CATEGORY WHERE BILL_NUMBER=@BILL_NUMBER AND IS_PRINT=0 AND PRINTER_ID <> @PRINTER_ID
--           FOR XML PATH('''')),1,1,'''') , '','', N'' / '') 
--from V_SALES_TEMP_TATMA_CATEGORY
-- WHERE BILL_NUMBER=@BILL_NUMBER AND IS_PRINT=0
 
	
END






























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_AA_ACCOUNT_NEW_YEAR_11_TARSEED]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_AA_ACCOUNT_NEW_YEAR_11_TARSEED]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_AA_ACCOUNT_NEW_YEAR_11_TARSEED]

@SUBMIT_FLAG INT OUTPUT

AS



--DECLARE BOX_CURSOR CURSOR FOR SELECT  ACCOUNT_CODE FROM V_ACCOUNT3 WHERE ACCOUNT_PARENT<>3 OR ACCOUNT_PARENT<>4   ;

DECLARE
@CURRANCY_CODE	int	,
@CURRANCY_EQUAL	float	,
@COMPANY_TITAL NVARCHAR(MAX)
BEGIN TRAN
BEGIN
DELETE FROM T_AA_ACCOUNT_NEW_YEAR 


SELECT @COMPANY_TITAL=COMPANY_TITAL FROM T_COMPANY WHERE T_ID=1
SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
 SELECT @CURRANCY_EQUAL=MAX(CURRANCY_EQUAL) FROM T_CURRANNCY 
 
--OPEN BOX_CURSOR

--FETCH NEXT FROM BOX_CURSOR INTO @ACCOUNT_CODE_CR
--WHILE @@FETCH_STATUS = 0
--BEGIN


INSERT INTO [SPEEDOO_DB].[dbo].[T_AA_ACCOUNT_NEW_YEAR]
           ([ACCOUNT_CODE]
           ,[ACCOUNT_NAME]
           ,[BALANCE]
           ,[BALANCE_IQ]
		   ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COMPANY_TITAL])
     SELECT
          [ACCOUNT_CODE]
           ,[ACCOUNT_NAME]
           ,[BALANCE]
           ,[BALANCE_IQ]
		   ,@CURRANCY_CODE
		   ,@CURRANCY_EQUAL
		   ,@COMPANY_TITAL+N''0''   FROM [SPEEDOO_DB].[dbo].[V_ACCOUNT3]
		   





--FETCH NEXT FROM BOX_CURSOR INTO @ACCOUNT_CODE_CR

--END

--CLOSE BOX_CURSOR
--DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

commit
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_AA_ACCOUNT_NEW_YEAR_22_FILL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_AA_ACCOUNT_NEW_YEAR_22_FILL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

















CREATE PROCEDURE [dbo].[P_AA_ACCOUNT_NEW_YEAR_22_FILL]
@FROM_DATA NVARCHAR(100),
@TO_DATA NVARCHAR(100),
@SUBMIT_FLAG INT OUTPUT

AS



--DECLARE BOX_CURSOR CURSOR FOR SELECT  ACCOUNT_CODE FROM V_ACCOUNT3 WHERE ACCOUNT_PARENT<>3 OR ACCOUNT_PARENT<>4   ;

DECLARE

@CR_SQL NVARCHAR(2000),
@ACCOUNT_CODE_CR INT
BEGIN TRAN
BEGIN




 SET @CR_SQL=N''DELETE FROM ''+@TO_DATA+''.[dbo].[T_BOX] WHERE  BILL_NUMBER=0 AND B_CODE=13''
 exec (@CR_SQL)

--OPEN BOX_CURSOR

--FETCH NEXT FROM BOX_CURSOR INTO @ACCOUNT_CODE_CR
--WHILE @@FETCH_STATUS = 0
--BEGIN


 SET @CR_SQL=N'' INSERT INTO ''+@TO_DATA+''.[dbo].[T_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_STR]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[MOVE_CODE]
           ,[B_CODE]
           ,[BRANCH_CODE]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_DESCRIPTION]
           ,[DEBIT]
           ,[CREDIT]
           ,[DEBIT_IQ]
           ,[CREDIT_IQ]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[DESCRIPTION]
           ,[DEAL_CODE]
           ,[USER_CODE]
           ,[C_DATE]
           ,[ACTIVE])
     SELECT
			COMPANY_TITAL
           ,0
           ,NULL
           ,GETDATE()
            ,GETDATE()
           ,0
           ,13
           ,1
           ,ACCOUNT_CODE
           ,NULL
           ,IIF(BALANCE>=0,BALANCE,0)
           ,IIF(BALANCE<0,BALANCE*-1,0)
           ,IIF(BALANCE_IQ>=0,BALANCE_IQ,0)
           ,IIF(BALANCE_IQ<0,BALANCE_IQ*-1,0)
           ,CURRANCY_CODE
           ,CURRANCY_EQUAL
           ,NULL
           ,0
           ,1
           ,GETDATE()
           ,1  FROM ''+@FROM_DATA+''.[dbo].[T_AA_ACCOUNT_NEW_YEAR]''



 exec (@CR_SQL)


--FETCH NEXT FROM BOX_CURSOR INTO @ACCOUNT_CODE_CR

--END

--CLOSE BOX_CURSOR
--DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

commit

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_AA_INSERT_SALES_INVOICE_DEBIT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_AA_INSERT_SALES_INVOICE_DEBIT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N' 

CREATE PROCEDURE [dbo].[P_AA_INSERT_SALES_INVOICE_DEBIT]
@USER_CREATE NVARCHAR(MAX),
@CLIENT_CODE INT,
@TOTAL_SALES FLOAT,
@ITEM_CODE INT,
@STORE_CODE INT,
 @SUBMIT_FLAG INT OUTPUT

AS
DECLARE
 @BILL_NUMBER INT,
@CURRANCY_CODE_INVOICE INT,
@CURRANCY_EQUAL_INVOICE FLOAT,
@CURRANCY_CODE_PRIMARY INT,
@BOX_USER INT,
@USER_CODE INT,


@COMPANY_TITAL NVARCHAR(MAX)

 SET @SUBMIT_FLAG=0
begin 
BEGIN TRANSACTION;

SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
SELECT @CURRANCY_CODE_PRIMARY=CURRANCY_CODE  FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
 

SELECT TOP(1) @BOX_USER=ISNULL(BOX_CODE,5000),@USER_CODE=USER_CODE  FROM T_USERS WHERE USER_NAME LIKE @USER_CREATE AND ACTIVE=1
SET @BOX_USER=ISNULL(@BOX_USER,5000)
SET @USER_CODE=ISNULL(@USER_CODE,1)
SELECT @BILL_NUMBER=ISNULL(MAX(BILL_NUMBER),0) + 1 FROM T_SALES
SET @CURRANCY_CODE_INVOICE=@CURRANCY_CODE_PRIMARY
 

 DECLARE
 @QRT_STATE INT=1
 IF @TOTAL_SALES<0
 BEGIN
 SET @QRT_STATE=-1
 END
 ELSE
 BEGIN
  SET @QRT_STATE=1
 END

 -------------------------------------------------------------------------------------------------------
INSERT INTO [dbo].[T_SALES]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_INVOICE]
           ,[BILL_DATE]
           ,[OFFER_CODE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[CLIENT_CODE]
           ,[CLIENT_NAME]
           ,[CLIENT_PHONE]
           ,[CLIENT_ADRESS]
           ,[MANDOOB_CODE]
           ,[DESCRIPTION]
           ,[TYPE_PRICE_SELL]
           ,[STORE_CODE]
           ,[USER_CREATE]
           ,[SECURETY_CODE]
           ,[TOTAL_SALES]
           ,[DISCOUNT_ITEMS]
           ,[DISCOUNT_PERCENT]
           ,[DISCOUNT_AMOUNT]
           ,[TOTAL_DISCOUNT]
           ,[NET_SALES]
           ,[TOTAL_COST]
           ,[IVC_CODE]
           ,[DAY_CASH]
           ,[DATE_CASH]
           ,[TOT_CONV]
           ,[ACCOUNT_CODE]
           ,[CASH_USA]
           ,[REMAIN_USA]
           ,[CASH_IQ]
           ,[REMAIN_IQ]
           ,[C_DATE]
           ,[C_UPDATE]
           ,[USER_UPDATE]
           ,[ACTIVE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[FLAG_CASH]
           ,[IS_OUT]
           ,[CURRANCY_SALES]
           ,[IS_TRANS]
           ,[CENTER_CODE]
           ,[QR_DATA]
           ,[ITEM_ID_PAYMENT]
           ,[TAG_PROCCESS_CODE]
           ,[LINK_ID_PAYMENT]
           ,[BILL_RETURN]
           ,[BILL_SANAD_CNY]
           ,[CNY_IQ]
           ,[IS_PREPARE]
           ,[DRIVER_CODE]
           ,[LAT]
           ,[LNG]
           ,[STATUS_SHIPING]
           ,[MOVE_CODE]
           ,[BILL_ORDER]
           ,[TOTAL_TAX_ITEM]
           ,[TOTAL_MANDOOB_ITEM]
           ,[TOTAL_ADD_COST]
           ,[TOTAL_ADD_AMO]
           ,[SHIP_CODE]
           ,[COST_SHIP]
           ,[IS_POINT]
           ,[COST_SHIP_CLIENT]
           ,[USER_TAG_CODE]
           ,[RELATION_BILL_CODE]
           ,[RELATION_B_CODE]
           ,[REGION_CODE]
           ,[COL_INT1]
           ,[COL_INT2]
           ,[COL_INT3]
           ,[COL_STR1]
           ,[COL_STR2]
           ,[COL_STR3]
           ,[IS_PDF]
           ,[PATH_PDF]
           ,[PATH_PDF_API])
      Select TOP(1)
			@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max))  as [BILL_BRANCH]
           ,@BILL_NUMBER as [BILL_NUMBER]
           ,@BILL_NUMBER as [BILL_INVOICE]
           ,GETDATE() as [BILL_DATE]
           ,0 as [OFFER_CODE]
           , @CURRANCY_CODE_PRIMARY  as [CURRANCY_CODE]
           ,1 as [CURRANCY_EQUAL] 
           ,@CLIENT_CODE as [CLIENT_CODE]
           ,(SELECT ISNULL( CLIENT_NAME,N'''' )FROM T_CLIENT WHERE CLIENT_CODE=@CLIENT_CODE) as [CLIENT_NAME]
           ,(SELECT ISNULL( CLIENT_PHONE,N'''' )FROM T_CLIENT WHERE CLIENT_CODE=@CLIENT_CODE)  as [CLIENT_PHONE]
           ,(SELECT ISNULL( CLIENT_ADDRESS,N'''' )FROM T_CLIENT WHERE CLIENT_CODE=@CLIENT_CODE)   as [CLIENT_ADRESS]
           ,1  as [MANDOOB_CODE]
           ,N'''' as [DESCRIPTION]
           ,1 as [TYPE_PRICE_SELL]
           ,0 as [STORE_CODE]
           ,@USER_CREATE as [USER_CREATE]
           ,1 as [SECURETY_CODE]
           ,@TOTAL_SALES as [TOTAL_SALES]
           ,0 as [DISCOUNT_ITEMS]
           ,0 as [DISCOUNT_PERCENT]
           ,0 as [DISCOUNT_AMOUNT]
           ,0 as [TOTAL_DISCOUNT]
           ,@TOTAL_SALES as [NET_SALES]
           ,0 as [TOTAL_COST] -- FROM SUM
           ,1 as [IVC_CODE]
           ,0 as [DAY_CASH]
           ,GETDATE() as [DATE_CASH]
           ,N'''' as [TOT_CONV]
           , @BOX_USER  as [ACCOUNT_CODE]
           ,IIF(@CURRANCY_CODE_INVOICE=1,@TOTAL_SALES,0) as [CASH_USA]
           ,0 as [REMAIN_USA]
           ,IIF(@CURRANCY_CODE_INVOICE=2,@TOTAL_SALES,0) as [CASH_IQ]
           ,0 as [REMAIN_IQ]
           ,GETDATE() as [C_DATE]
           ,N'''' as [C_UPDATE]
           ,N'''' as [USER_UPDATE]
           ,1 as [ACTIVE]
           ,0 as [IS_AVG_COST]
           ,0 as [AVG_COST]
           ,0 as [FLAG_CASH]
           ,1 as [IS_OUT]
           ,1 as [CURRANCY_SALES]
           ,0 as [IS_TRANS]
           ,0 as [CENTER_CODE]
           ,N'''' as [QR_DATA]
           ,N'''' as [ITEM_ID_PAYMENT]
           ,0  as [TAG_PROCCESS_CODE]
           ,N'''' as [LINK_ID_PAYMENT]
           ,0 as [BILL_RETURN]
           ,0 as [BILL_SANAD_CNY]
           ,1 as [CNY_IQ]
           ,0 as [IS_PREPARE]
           ,0 as [DRIVER_CODE]
           ,N'''' as [LAT]
           , N'''' as [LNG]
            ,0  as [STATUS_SHIPING]
           ,0 as [MOVE_CODE]
           ,0 as [BILL_ORDER]
           ,0 as [TOTAL_TAX_ITEM]
           ,0  as [TOTAL_MANDOOB_ITEM]
           ,0 as [TOTAL_ADD_COST]
           ,0 as [TOTAL_ADD_AMO]
           ,0 as [SHIP_CODE]
           ,0 as [COST_SHIP]
           ,0 as [IS_POINT]
           ,0 as [COST_SHIP_CLIENT]
           ,0 as [USER_TAG_CODE]
           ,0 as [RELATION_BILL_CODE]
           ,0 as [RELATION_B_CODE]
           ,0 as [REGION_CODE]
           ,0 as [COL_INT1]
           ,0 as [COL_INT2]
           ,0 as [COL_INT3]
            ,N'''' as [COL_STR1]
			,N'''' as [COL_STR2]
           ,N'''' as [COL_STR3]
           ,0 as [IS_PDF]
           ,N'''' as [PATH_PDF]
           ,N'''' as [PATH_PDF_API]


From T_SALES
 
 
 
 -------------------------------------------------------------------------------------------------------
 select top(1) @CURRANCY_CODE_INVOICE =CURRANCY_CODE,@CURRANCY_EQUAL_INVOICE=CURRANCY_EQUAL  from T_SALES where BILL_NUMBER=@BILL_NUMBER
INSERT INTO [dbo].[T_SALES_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[TOTAL]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY]
           ,[ITEM_NOTE_SALES]
           ,[NOTE_PRINT]
           ,[IS_PRINT]
           ,[USER_PREPARE]
           ,[USER_CUT]
           ,[DISCOUNT_TYPE]
           ,[IS_SERIAL]
           ,[IS_TAX]
           ,[TAX_PERCENT_ITEM]
           ,[TAX_AMO_ITEM]
           ,[IS_MANDOOB]
           ,[MANDOOB_PERCENT_ITEM]
           ,[MANDOOB_AMO_ITEM]
           ,[IS_ITEM_AREA]
           ,[WIDTH_CM]
           ,[LENGTH_CM]
           ,[AREA_M2]
           ,[QTY_AREA]
           ,[QTY_XZ]
           ,[UNIT_QTY_XZ]
           ,[QTY_X1]
           ,[UNIT_QTY_X1]
           ,[QTY_XY]
           ,[UNIT_QTY_XY]
           ,[NOTE_PRINT_2]
           ,[K_STORE_ITEM_CODE]
           ,[K_STORE_COST]
           ,[K_STORE_SELL]
           ,[K_PRINT_ITEM_CODE]
           ,[K_PRINT_COST]
           ,[K_PRINT_SELL]
           ,[K_MODEL_ITEM_CODE]
           ,[K_MODEL_COST]
           ,[K_MODEL_SELL]
           ,[K_MOTOR_ITEM_CODE]
           ,[K_MOTOR_COST]
           ,[K_MOTOR_SELL]
           ,[K_HABEL_ITEM_CODE]
           ,[K_HABEL_COST]
           ,[K_HABEL_SELL]
           ,[K_STORE_TOTAL]
           ,[K_PRINT_TOTAL]
           ,[K_MODEL_TOTAL]
           ,[K_MOTOR_TOTAL]
           ,[K_HABEL_TOTAL]
           ,[K_MODEL_TOTAL_COST]
           ,[QTY_FREE]
           ,[TOTAL_QTY])
 Select TOP(1)
       @COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max))  as [BILL_BRANCH]
           ,@BILL_NUMBER as [BILL_NUMBER]
           ,@ITEM_CODE  as [ITEM_CODE]
           ,(SELECT ISNULL( ITEM_NAME,N'''' )FROM T_ITEMS WHERE ITEM_CODE=@ITEM_CODE) as [ITEM_NAME]
           ,1 *@QRT_STATE as [QTY]
           ,(SELECT ISNULL( UNIT_NAME,N''PCS'' )FROM T_ITEMS WHERE ITEM_CODE=@ITEM_CODE) as [UNIT_NAME]
           ,1 as [UNIT_QTY]
           ,@STORE_CODE as [STORE_CODE]
           ,-999999 as [WAJBA_CODE]
           ,N'''' as [WAJBA_NAME]
           ,N'''' as [WAJBA_BALANCE]
           ,@CURRANCY_CODE_INVOICE as [CURRANCY_CODE]
           ,@CURRANCY_EQUAL_INVOICE as [CURRANCY_EQUAL]
           ,(SELECT ISNULL( COST,0 )FROM T_ITEMS WHERE ITEM_CODE=@ITEM_CODE) as [COST]
           ,@TOTAL_SALES*@QRT_STATE as [PRICE]
           ,@TOTAL_SALES as [TOTAL]
           ,0 as [DISCOUNT_PERCENT_ITEM]
           ,0 as [DISCOUNT_AMOUNT_ITEM]
           ,GETDATE() as [C_DATE]
           ,1 as [ACTIVE]
           ,-999999 as [BILL_BUY]
           , N''''  as [ITEM_NOTE_SALES]
           ,(SELECT ISNULL( CLIENT_BARCODE,N'''' )FROM T_CLIENT WHERE CLIENT_CODE=@CLIENT_CODE)  as [NOTE_PRINT]
           ,0 as [IS_PRINT]
           ,N'''' as [USER_PREPARE]
           ,N'''' as [USER_CUT]
           ,0 as [DISCOUNT_TYPE]
           ,0 as [IS_SERIAL]
           ,0 as [IS_TAX]
           ,0 as [TAX_PERCENT_ITEM]
           ,0 as [TAX_AMO_ITEM]
           ,0 as [IS_MANDOOB]
           ,0 as [MANDOOB_PERCENT_ITEM]
           ,0 as [MANDOOB_AMO_ITEM]
           ,0 as [IS_ITEM_AREA]
           ,0 as [WIDTH_CM]
           ,0 as [LENGTH_CM]
           ,0 as [AREA_M2]
           ,1 as [QTY_AREA]
           ,0 as [QTY_XZ]
           ,0 as [UNIT_QTY_XZ]
           ,0 as [QTY_X1]
           ,0 as [UNIT_QTY_X1]
           ,0 as [QTY_XY]
           ,0 as [UNIT_QTY_XY]
           ,N'''' as [NOTE_PRINT_2]
           ,0 as [K_STORE_ITEM_CODE]
           ,0 as [K_STORE_COST]
           ,0 as [K_STORE_SELL]
           ,0 as [K_PRINT_ITEM_CODE]
           ,0 as [K_PRINT_COST]
           ,0 as [K_PRINT_SELL]
           ,0 as [K_MODEL_ITEM_CODE]
           ,0 as [K_MODEL_COST]
           ,0 as [K_MODEL_SELL]
           ,0 as [K_MOTOR_ITEM_CODE]
           ,0 as [K_MOTOR_COST]
           ,0 as [K_MOTOR_SELL]
           ,0 as [K_HABEL_ITEM_CODE]
           ,0 as [K_HABEL_COST]
           ,0 as [K_HABEL_SELL]
           ,0 as [K_STORE_TOTAL]
           ,0 as [K_PRINT_TOTAL]
           ,0 as [K_MODEL_TOTAL]
           ,0 as [K_MOTOR_TOTAL]
           ,0 as [K_HABEL_TOTAL]
           ,0 as [K_MODEL_TOTAL_COST]
           ,0 as [QTY_FREE]
           ,1  as [TOTAL_QTY]



From T_SALES_DETAILS
 
 -------------------------------------------------------------------------------------------------------

 DECLARE @TOTAL_COST FLOAT ,
 @TOTAL_MANDOOB_ITEM FLOAT,
 @TOTAL_TAX_ITEMS FLOAT,
 @NET_TOTAL FLOAT,
 @CASH_USA FLOAT,
 @CASH_IQ FLOAT,
 @TOTAL_DISCOUNT FLOAT,
 @MANDOOB_CODE INT,
 @SHIP_CODE INT,
@IVC_CODE INT,
@CLIENT_NAME NVARCHAR(MAX) ,
 @DESCRIPTION NVARCHAR(MAX)

  SELECT @IVC_CODE =IVC_CODE,@NET_TOTAL=ISNULL(NET_SALES,0),@CASH_USA=ISNULL(CASH_USA,0),@CASH_IQ=ISNULL(CASH_IQ,0) ,@MANDOOB_CODE=ISNULL(MANDOOB_CODE,1),@DESCRIPTION=DESCRIPTION,@SHIP_CODE=SHIP_CODE,@CLIENT_NAME=CLIENT_NAME,@TOTAL_DISCOUNT=TOTAL_DISCOUNT  FROM T_SALES  WHERE BILL_NUMBER=@BILL_NUMBER
 IF @IVC_CODE=2
 BEGIN
 UPDATE T_SALES SET CASH_USA=0,CASH_IQ=0 WHERE BILL_NUMBER=@BILL_NUMBER
 IF @CURRANCY_CODE_INVOICE=1
 BEGIN
  UPDATE T_SALES SET REMAIN_IQ=0,REMAIN_USA=@NET_TOTAL WHERE BILL_NUMBER=@BILL_NUMBER
 END
 ELSE
 BEGIN
 UPDATE T_SALES SET REMAIN_USA=0,REMAIN_IQ=@NET_TOTAL WHERE BILL_NUMBER=@BILL_NUMBER
 END
 SET @CASH_USA=0
 SET @CASH_IQ=0
 END
 
 SELECT @TOTAL_COST=ISNULL(SUM(TOTAL_COST),0),@TOTAL_MANDOOB_ITEM=ISNULL(SUM(TOTAL_MANDOOB_ITEM),0),@TOTAL_TAX_ITEMS=ISNULL(SUM(TOTAL_TAX_ITEM),0) FROM T_SALES_DETAILS WHERE BILL_NUMBER=@BILL_NUMBER
UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST,TOTAL_MANDOOB_ITEM=@TOTAL_MANDOOB_ITEM,TOTAL_TAX_ITEM=@TOTAL_TAX_ITEMS WHERE BILL_NUMBER=@BILL_NUMBER


 -------------------------------------------------------------------------------------------------------
DECLARE
@REGION_CODE INT,
@COST_SHIP FLOAT=0,
@COST_SHIP_CLIENT FLOAT=0
SELECT @REGION_CODE=REGION_CODE FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER
IF @REGION_CODE<>0
BEGIN
SELECT  @COST_SHIP_CLIENT=ISNULL(REGION_COST,0) FROM T_REGION_SHIP WHERE REGION_CODE=@REGION_CODE
SELECT @COST_SHIP= ISNULL(REGION_SELL,0) FROM T_REGION_SHIP WHERE REGION_CODE=@REGION_CODE
UPDATE T_SALES SET COST_SHIP=@COST_SHIP,COST_SHIP_CLIENT=@COST_SHIP_CLIENT WHERE BILL_NUMBER=@BILL_NUMBER
END

 -------------------------------------------------------------------------------------------------------
  DECLARE @CNU_EQUL_IQ FLOAT = (SELECT ISNULL(CURRANCY_EQUAL,1)  FROM T_CURRANNCY WHERE CURRANCY_CODE=2),
          @CNU_EQUL_USA As FLOAT = (SELECT ISNULL(CURRANCY_EQUAL,1)  FROM T_CURRANNCY WHERE CURRANCY_CODE=1)

 -------------------------------------------------------------------------------------------------------
DECLARE

@IS_COST_SHIP BIT,
@COST_SHIP_MANDOOB FLOAT=0,
@COST_SHIP_EXP FLOAT=0
SELECT @IVC_CODE=IVC_CODE FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER
IF @IVC_CODE=10 GOTO AFTER_OFFERS

 DECLARE @D_USA FLOAT=0, @C_USA FLOAT=0,  @D_IQ FLOAT=0, @C_IQ FLOAT=0, @CURR_EQUL FLOAT=0, @DOOB_USA FLOAT=0, @DOOB_IQ FLOAT=0, @TAX_USA FLOAT=0, @TAX_IQ FLOAT=0, @SHIP_USA FLOAT=0, @SHIP_IQ FLOAT=0, @SHIP_USA_CRE FLOAT=0, @SHIP_IQ_CRE FLOAT=0, @MANDOOB_SHIP_USA FLOAT=0, @MANDOOB_SHIP_IQ FLOAT=0,@DISC_USA FLOAT=0, @DISC_IQ FLOAT=0
   SELECT @IS_COST_SHIP=ISNULL(IS_COST_SHIP,0) FROM T_MANDOOB WHERE MANDOOB_CODE=@MANDOOB_CODE
   SET @COST_SHIP_EXP=@COST_SHIP
 If @IS_COST_SHIP = 1 
 BEGIN
             SET   @COST_SHIP_MANDOOB = @COST_SHIP
              SET  @COST_SHIP_EXP = 0
            End 

If @CURRANCY_CODE_INVOICE = 1 
BEGIN
                       SET @DOOB_USA = @TOTAL_MANDOOB_ITEM
                        SET @TAX_USA = @TOTAL_TAX_ITEMS
                        SET @D_USA = @NET_TOTAL
                       SET  @C_USA = @COST_SHIP_CLIENT + @CASH_USA + (@CASH_IQ / @CNU_EQUL_IQ)
                        SET  @D_IQ = 0
                        SET  @C_IQ = 0
                        SET  @SHIP_USA = @COST_SHIP
                        SET  @SHIP_IQ = 0
                        SET  @SHIP_USA_CRE = @COST_SHIP - @COST_SHIP_CLIENT
                        SET  @SHIP_IQ_CRE = 0

                        SET  @MANDOOB_SHIP_USA = @COST_SHIP_MANDOOB
                        SET  @MANDOOB_SHIP_IQ = 0
				 SET  @CURR_EQUL = @CNU_EQUL_IQ
				 set @DISC_USA=@TOTAL_DISCOUNT
				 set @DISC_IQ=0
END
ELSE 
If @CURRANCY_CODE_INVOICE = 2 
BEGIN
						 SET  @D_USA = 0
                         SET  @C_USA = 0
                         SET  @D_IQ = @NET_TOTAL
                         SET  @C_IQ = @COST_SHIP_CLIENT + @CASH_IQ + @CASH_USA / (1 / @CNU_EQUL_USA)
                         SET  @DOOB_IQ = @TOTAL_MANDOOB_ITEM
                        SET  @TAX_IQ = @TOTAL_TAX_ITEMS
                         SET  @SHIP_USA = 0
                         SET  @SHIP_IQ = @COST_SHIP_EXP
                         SET  @SHIP_USA_CRE = 0
                         SET  @SHIP_IQ_CRE = @COST_SHIP - @COST_SHIP_CLIENT
                         SET  @MANDOOB_SHIP_USA = 0
                         SET  @MANDOOB_SHIP_IQ = @COST_SHIP_MANDOOB
                  SET  @CURR_EQUL = @CNU_EQUL_USA

				   set @DISC_USA=0
				 set @DISC_IQ=@TOTAL_DISCOUNT
END 

 -------------------------------------------------------------------------------------------------------
 DECLARE @ACCOUNT_SHIP Int = 1,
         @IS_AMO_MANDOOB INT = 1,
         @IS_AMO_CLIENT As INT = 1

SELECT @ACCOUNT_SHIP=ISNULL(ACCOUNT_CODE,0),@IS_AMO_MANDOOB=IS_AMO_MANDOOB,@IS_AMO_CLIENT=IS_AMO_CLIENT FROM T_SALES_SHIPPING WHERE SHIP_CODE=@SHIP_CODE
        
-------------------------------------------------------------------------------------------------------
 
 -- supplier
 DECLARE
 @CR_CLIENT_CODE INT 
 SELECT @CR_CLIENT_CODE=CLIENT_CODE FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER
          
	INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
	VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @CR_CLIENT_CODE, N'''', @D_USA, @C_USA, @D_IQ, @C_IQ, @CURRANCY_CODE_INVOICE, @CURR_EQUL,  @DESCRIPTION, 0, @USER_CODE, GETDATE(), @IS_AMO_CLIENT)
                 
-------------------------------------------------------------------------------------------------------

--عمولات المندوب
            
DECLARE
  @MANDOOB_ACCOUNT INT ,
  @MANDOOB_NAME NVARCHAR(MAX)
			   SELECT TOP(1) @MANDOOB_ACCOUNT=ACCOUNT_CODE,@MANDOOB_NAME=MANDOOB_NAME  FROM T_MANDOOB WHERE MANDOOB_CODE=@MANDOOB_CODE
  If (@TOTAL_MANDOOB_ITEM <> 0 Or @COST_SHIP_MANDOOB <> 0) And @MANDOOB_ACCOUNT <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @MANDOOB_ACCOUNT, N'''', @MANDOOB_SHIP_USA, @DOOB_USA, @MANDOOB_SHIP_IQ, @DOOB_IQ, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''عمولة المندوب : ''+ @MANDOOB_NAME + N''/'' + N''للعميل : '' + @CLIENT_NAME, 0, @USER_CODE, GETDATE(), @IS_AMO_MANDOOB)
   
		 END
-------------------------------------------------------------------------------------------------------

--TAX
            
DECLARE
  @TAX_ACCOUNT INT=(SELECT TOP(1) ISNULL(CLIENT_CODE,0)  FROM T_CLIENT WHERE CLIENT_TYPE=8 AND CLIENT_ACTIVE=1)  
   If  @TOTAL_TAX_ITEMS <> 0   And @TAX_ACCOUNT <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @TAX_ACCOUNT, N'''', 0, @TAX_USA, 0, @TAX_IQ, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''ضريبة الفاتورة ''  + N''/'' + N''للعميل : '' + @CLIENT_NAME, 0, @USER_CODE, GETDATE(), 1)
   
		 END                     

-------------------------------------------------------------------------------------------------------

--COST_SHIP ACCOUNT
            
 SET @COST_SHIP_EXP=@COST_SHIP_EXP + @COST_SHIP - @COST_SHIP_CLIENT

   If  @COST_SHIP_EXP <> 0 And @ACCOUNT_SHIP <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @ACCOUNT_SHIP, N'''', @SHIP_USA, @SHIP_USA_CRE, @SHIP_IQ, @SHIP_IQ_CRE, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''كلفة توصيل الفاتورة ''  + N''/'' + N''للعميل : '' + @CLIENT_NAME, 0, @USER_CODE, GETDATE(), @IS_AMO_CLIENT)
   
		 END                     

-------------------------------------------------------------------------------------------------------

--CASH
            
 SET @COST_SHIP_EXP=@COST_SHIP_EXP + @COST_SHIP - @COST_SHIP_CLIENT

   If  @CASH_USA <> 0 OR @CASH_IQ <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @BOX_USER, N'''', @CASH_USA, 0, @CASH_IQ, 0, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''('' + N''العميل : '' + @CLIENT_NAME + N'')'' + @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)
   
		 END 
-------------------------------------------------------------------------------------------------------

-- DISCOUNT
            
 SET @COST_SHIP_EXP=@COST_SHIP_EXP + @COST_SHIP - @COST_SHIP_CLIENT

   If  @TOTAL_DISCOUNT<>0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, 4001, N'''', @DISC_USA, 0, @DISC_IQ, 0, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''('' + N''العميل : '' + @CLIENT_NAME + N'')'' + @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)
   
		 END 

-------------------------------------------------------------------------------------------------------

-- STORE BOX

INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[ACTIVE])

SELECT [BILL_BRANCH]
      ,[BILL_NUMBER]
	  ,(SELECT BILL_DATE FROM T_SALES WHERE BILL_NUMBER = @BILL_NUMBER)
	  ,2
	  ,0
	 ,[STORE_CODE]
	  ,NULL
	  ,[ITEM_CODE]
     ,1
      ,0
	  ,[TOTAL_QTY]
      ,[UNIT_QTY]
      ,1
      
  FROM [dbo].[T_SALES_DETAILS] WHERE BILL_NUMBER = @BILL_NUMBER


 -------------------------------------------------------------------------------------------------------


-- FINISHED
   


AFTER_OFFERS:

SET @SUBMIT_fLAG=1

RETTTTT:
COMMIT
	IF @@ERROR <>0
	BEGIN
	ROLLBACK 
 
	SET @SUBMIT_fLAG=0
	RETURN
	END

return
 

END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_AA_ITEMS_NEW_YEAR_11_TARSEED]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_AA_ITEMS_NEW_YEAR_11_TARSEED]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

















CREATE PROCEDURE [dbo].[P_AA_ITEMS_NEW_YEAR_11_TARSEED]

@SUBMIT_FLAG INT OUTPUT

AS



--DECLARE BOX_CURSOR CURSOR FOR SELECT  ACCOUNT_CODE FROM V_ACCOUNT3 WHERE ACCOUNT_PARENT<>3 OR ACCOUNT_PARENT<>4   ;

DECLARE
@CURRANCY_CODE	int	,
@CURRANCY_EQUAL	float	,
@COMPANY_TITAL NVARCHAR(MAX)
BEGIN TRAN
BEGIN
DELETE FROM T_AA_ITEM_NEW_YEAR


SELECT @COMPANY_TITAL=COMPANY_TITAL FROM T_COMPANY WHERE T_ID=1
SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
 SELECT @CURRANCY_EQUAL=MAX(CURRANCY_EQUAL) FROM T_CURRANNCY 
 
--OPEN BOX_CURSOR

--FETCH NEXT FROM BOX_CURSOR INTO @ACCOUNT_CODE_CR
--WHILE @@FETCH_STATUS = 0
--BEGIN




INSERT INTO [SPEEDOO_DB].[dbo].[T_AA_ITEM_NEW_YEAR]
           ([ITEM_CODE]
           ,[ITEM_NAME]
           ,[STORE_CODE]
           ,[BALANCE]
           ,[COST]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COMPANY_TITAL]
		   ,[UNIT_NAME])
     SELECT
           ITEM_CODE
           ,ITEM_NAME
           ,STORE_CODE
           ,BALANCE
           ,AVG_BUY
           ,@CURRANCY_CODE
		   ,@CURRANCY_EQUAL
		   ,@COMPANY_TITAL+N''0'' 
		   ,UNIT_NAME FROM [SPEEDOO_DB].[dbo].[V_STORE_BOX_STORE_AVG_ON]








--FETCH NEXT FROM BOX_CURSOR INTO @ACCOUNT_CODE_CR

--END

--CLOSE BOX_CURSOR
--DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM


commit

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_AA_ITEMS_NEW_YEAR_22_FILL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_AA_ITEMS_NEW_YEAR_22_FILL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


















CREATE PROCEDURE [dbo].[P_AA_ITEMS_NEW_YEAR_22_FILL]
@FROM_DATA NVARCHAR(100),
@TO_DATA NVARCHAR(100),
@SUBMIT_FLAG INT OUTPUT

AS



--DECLARE BOX_CURSOR CURSOR FOR SELECT  ITEM_CODE FROM T_AA_ITEM_NEW_YEAR    ;

DECLARE

@CR_SQL NVARCHAR(2000),
@ITEM_CODE_CR INT
BEGIN TRAN
BEGIN




 SET @CR_SQL=N''DELETE FROM ''+@TO_DATA+''.[dbo].[T_BUY_DETAILS] WHERE  BILL_NUMBER=0 ''
 exec (@CR_SQL)

 SET @CR_SQL=N''DELETE FROM ''+@TO_DATA+''.[dbo].[T_STORE_BOX] WHERE  BILL_NUMBER=0 AND B_CODE=0''
 exec (@CR_SQL)



--OPEN BOX_CURSOR

--FETCH NEXT FROM BOX_CURSOR INTO @ACCOUNT_CODE_CR
--WHILE @@FETCH_STATUS = 0
--BEGIN




 SET @CR_SQL=N'' INSERT INTO ''+@TO_DATA+''.[dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[C_DATE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[ACTIVE])
     SELECT
           COMPANY_TITAL
           ,0
           ,GETDATE()
           ,0
           ,2
           ,STORE_CODE
           ,ITEM_CODE
           ,1
           ,BALANCE
           ,0
           ,1
           ,GETDATE()
           ,1
           ,COST
           ,1   FROM ''+@FROM_DATA+''.[dbo].[T_AA_ITEM_NEW_YEAR]''


 exec (@CR_SQL)




 SET @CR_SQL=N'' INSERT INTO ''+@TO_DATA+''.[dbo].[T_BUY_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[PRICE_BUY]
           ,[CURRANCY_EQUAL]
           ,[PRICE]
           ,[TOTAL]
           ,[EXPENSES]
           ,[TOTAL_EXPENSES]
           ,[COST]
           ,[TOTAL_COST]
           ,[SELL1]
           ,[SELL2]
           ,[C_DATE]
           ,[ACTIVE])
     SELECT
           COMPANY_TITAL
           ,0
           ,ITEM_CODE
           ,BALANCE
           ,UNIT_NAME
           ,1
           ,STORE_CODE 
           ,COST
           ,1
           ,COST
           ,COST*BALANCE
           ,0
           ,0
           ,COST
           ,COST*BALANCE
           ,0
           ,0
           ,GETDATE()
           ,0 FROM ''+@FROM_DATA+''.[dbo].[T_AA_ITEM_NEW_YEAR]''


 exec (@CR_SQL)





--FETCH NEXT FROM BOX_CURSOR INTO @ACCOUNT_CODE_CR

--END

--CLOSE BOX_CURSOR
--DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM


commit


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_AA_NEW_YEAR_2024]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_AA_NEW_YEAR_2024]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

















CREATE PROCEDURE [dbo].[P_AA_NEW_YEAR_2024]
@OLD_DB_NAME NVARCHAR(MAX),
@NEW_DB_NAME NVARCHAR(MAX),
@SUBMIT_FLAG INT OUTPUT

AS

 DECLARE
 @CURRANCY_CODE NVARCHAR(MAX),
@CURRANCY_EQUAL NVARCHAR(MAX),
 @SQL_STR NVARCHAR(MAX),
  @COMPANY_TITAL NVARCHAR(MAX)
BEGIN
 BEGIN TRANSACTION;
 SELECT @CURRANCY_CODE=CURRANCY_CODE  FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
 IF @CURRANCY_CODE=1
 BEGIN
 SELECT TOP(1) @CURRANCY_EQUAL=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE = 2
 END
 ELSE
 BEGIN
 SELECT TOP(1) @CURRANCY_EQUAL=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE = 1
 END

 SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1


  --*********************AA_ITEM_APPLICATION************************

 --*********************T_AA_ACCOUNT_NEW_YEAR ************************

 --*********************T_AA_ITEM_NEW_YEAR ************************

 --*********************T_ACCOUNT_FINAL************************

 --*********************T_ACCOUNT_TYPE************************

 --*********************T_ADS_TRACKING************************

 --*********************T_API_ADD_MULTI************************




 --*********************T_A_DATA_RESTURANT************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_SHAREEK ([SHAREEK_CODE]  ,[SHAREEK_NAME]  ,[SHAREEK_PERCENT]  ,[RS_CODE] ,[CL_CODE])
                                                                    SELECT [SHAREEK_CODE]  ,[SHAREEK_NAME]  ,[SHAREEK_PERCENT]  ,[RS_CODE] ,[CL_CODE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_SHAREEK''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
 --*********************T_A_DATA_RESTURANT************************
-- SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_SHAREEK ([BRANCH_NAME] ,[PC_NAME] ,[SERVER_NAME] ,[USER_NAME] ,[USER_PASSWORD] ,[DATABASE_NAME] ,[C_DATE])
--                                                                    SELECT [BRANCH_NAME] ,[PC_NAME] ,[SERVER_NAME] ,[USER_NAME] ,[USER_PASSWORD] ,[DATABASE_NAME] ,[C_DATE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_SHAREEK''
--EXEC (@SQL_STR);
--SET @SQL_STR=N'''';
 --*********************ACCOUNTS************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_ACCOUNTS ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE], [ACCOUNT_BARCODE],[IS_POS],[DISC_POS] ,[COM_PORT],[ACC_EXP])
                                                            SELECT [ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE], [ACCOUNT_BARCODE],[IS_POS],[DISC_POS] ,[COM_PORT],[ACC_EXP] FROM ''+ @OLD_DB_NAME +N''.dbo.T_ACCOUNTS  WHERE [ACCOUNT_ACTIVE]=1 ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

 --*********************T_AKSAT************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_AKSAT ([BILL_BRANCH] ,[BILL_NUMBER] ,[BILL_DATE] ,[B_CODE] ,[ACCOUNT_CODE] ,[KAFEL_CODE] ,[CURRANCY_CODE] ,[TOTAL_INVOICE] ,[DATE_DUE] ,[AMO_AKSAT] ,[AMO_ADD] ,[AMO_DISCOUNT] ,[AMO_CASH] ,[AMO_REMAIN] ,[DATE_CASH] ,[USER_CODE] ,[BILL_CASH] ,[BILL_SMAH] ,[NOTE_AKSAT] ,[CASH_CODE] ,[C_DATE])
                                                         SELECT ''''''+N''-''+''''''+[BILL_BRANCH] ,[BILL_NUMBER]*-1 ,[BILL_DATE] ,[B_CODE] ,[ACCOUNT_CODE] ,[KAFEL_CODE] ,[CURRANCY_CODE] ,[TOTAL_INVOICE] ,[DATE_DUE] ,[AMO_AKSAT] ,[AMO_ADD] ,[AMO_DISCOUNT] ,[AMO_CASH] ,[AMO_REMAIN] ,[DATE_CASH] ,[USER_CODE] ,[BILL_CASH] ,[BILL_SMAH] ,[NOTE_AKSAT] ,[CASH_CODE] ,[C_DATE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_AKSAT WHERE [CASH_CODE]=0''
EXEC (@SQL_STR);
SET @SQL_STR=N''''
 --*********************T_AKSAT_ITEM_DETAILS************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_AKSAT_ITEM_DETAILS ([T_ID_ITEM] ,[TOTAL_INVOICE] ,[DATE_DUE] ,[AMO_AKSAT] ,[AMO_ADD] ,[AMO_DISCOUNT] ,[AMO_CASH] ,[AMO_REMAIN] ,[DATE_CASH] ,[USER_CODE] ,[BILL_CASH] ,[BILL_SMAH] ,[NOTE_AKSAT] ,[CASH_CODE] ,[C_DATE] ,[BILL_AKSAT])
																	  SELECT [T_ID_ITEM]*-1 ,[TOTAL_INVOICE] ,[DATE_DUE] ,[AMO_AKSAT] ,[AMO_ADD] ,[AMO_DISCOUNT] ,[AMO_CASH] ,[AMO_REMAIN] ,[DATE_CASH] ,[USER_CODE] ,[BILL_CASH] ,[BILL_SMAH] ,[NOTE_AKSAT] ,[CASH_CODE] ,[C_DATE] ,[BILL_AKSAT] FROM ''+ @OLD_DB_NAME +N''.dbo.T_AKSAT_ITEM_DETAILS WHERE [CASH_CODE]=0''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
 --*********************T_AKSAT_ITEMS************************
 SET @SQL_STR=N''SET IDENTITY_INSERT '' + @NEW_DB_NAME + N''.[dbo].[T_AKSAT_ITEMS] ON ; INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_AKSAT_ITEMS ([T_ID],[BILL_NUMBER], [BILL_DATE], [B_CODE], [ACCOUNT_CODE], [KAFEL_CODE], [CURRANCY_CODE], [ITEM_CODE], [QTY], [PRICE], [TOTAL], [NOTE], [QTY_AKSAT], [TYPE_AKSAT], [EVERY], [AMO_AKSAT], [DATE_DUE], [QTY_CASH_ALL], [TOTAL_CASH], [TOTAL_REMAIN], [START_DATE], [LAST_CASH_AMO], [LAST_CASH_DATE], [AMO_CASH_NOW], [C_DATE], [IS_FINISH], [F_NET_SALARY], [F_EMOLA_CARD], [F_NET_CASH], [F_NET_RETURN])
																	                                                             SELECT  [T_ID], [BILL_NUMBER]*-1, [BILL_DATE], [B_CODE], [ACCOUNT_CODE], [KAFEL_CODE], [CURRANCY_CODE], [ITEM_CODE], [QTY], [PRICE], [TOTAL], [NOTE], [QTY_AKSAT], [TYPE_AKSAT], [EVERY], [AMO_AKSAT], [DATE_DUE], [QTY_CASH_ALL], [TOTAL_CASH], [TOTAL_REMAIN], [START_DATE], [LAST_CASH_AMO], [LAST_CASH_DATE], [AMO_CASH_NOW], [C_DATE], [IS_FINISH], [F_NET_SALARY], [F_EMOLA_CARD], [F_NET_CASH], [F_NET_RETURN] FROM ''+ @OLD_DB_NAME +N''.dbo.T_AKSAT_ITEMS WHERE [IS_FINISH]=0    SET IDENTITY_INSERT '' + @NEW_DB_NAME + N''.[dbo].[T_AKSAT_ITEMS] OFF;''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
 --*********************T_AKSAT_MODEL************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_AKSAT_MODEL ([MODEL_CODE] ,[MODEL_NAME] ,[MODEL_NO] ,[ACTIVE])
												               SELECT [MODEL_CODE] ,[MODEL_NAME] ,[MODEL_NO] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_AKSAT_MODEL  WHERE [ACTIVE]=1 ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
 --*********************T_AKSAT_MODEL_DETAILS************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_AKSAT_MODEL_DETAILS ([MODEL_CODE] ,[SEQ] ,[SEQ_NAME] ,[PERCENTAGE] ,[ADD_MONTH] ,[AMO] ,[DATE_CASH] ,[TOTAL] ,[START_DATE])
												                       SELECT [MODEL_CODE] ,[SEQ] ,[SEQ_NAME] ,[PERCENTAGE] ,[ADD_MONTH] ,[AMO] ,[DATE_CASH] ,[TOTAL] ,[START_DATE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_AKSAT_MODEL_DETAILS ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
 
 --*********************T_AMOUNT_CARD************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_AMOUNT_CARD ([T_ID], [AMO_NAME], [AMO], [FREE_AMO],  [AMO_COLOR], [AMO_FONT_COLOR], [AMO_GROUP], [FONT_NAME], [FONT_SIZE], [BUTTON_SIZE])
												                       SELECT [T_ID], [AMO_NAME], [AMO], [FREE_AMO],  [AMO_COLOR], [AMO_FONT_COLOR], [AMO_GROUP], [FONT_NAME], [FONT_SIZE], [BUTTON_SIZE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_AMOUNT_CARD ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 

 --*********************T_APP_VIEW_COUNT************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_APP_VIEW_COUNT ([ID],[APP_VIEW_COUNT],[APP_NAME])
												                       SELECT [ID],[APP_VIEW_COUNT],[APP_NAME] FROM ''+ @OLD_DB_NAME +N''.dbo.T_APP_VIEW_COUNT ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
 --*********************T_ATTACHMENT************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_ATTACHMENT ([B_CODE] ,[BILL_NUMBER] ,[ATTA_TYPE] ,[ATTA_NAME] ,[NOTE] ,[PATH] ,[SECURETY_CODE] ,[C_DATE] ,[USER_CREATE] ,[USER_DELETE] ,[C_DELETE] ,[ACTIVE])
												           SELECT [B_CODE] ,[BILL_NUMBER]*-1 ,[ATTA_TYPE] ,[ATTA_NAME] ,[NOTE] ,[PATH] ,[SECURETY_CODE] ,[C_DATE] ,[USER_CREATE] ,[USER_DELETE] ,[C_DELETE] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_ATTACHMENT ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_BOOKING************************
--*********************T_BOOKING_DATE************************
--*********************T_BOOKING_DETAILS************************
--*********************T_BOOKING_HOLIDAY************************
--*********************T_BOOKING_QISM************************

--*********************T_CURRANNCY************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_CURRANNCY ([CURRANCY_CODE] ,[CURRANCY_NAME] ,[CURRANCY_SAMPLE] ,[CURRANCY_EQUAL] ,[CURRANCY_MOKAFEA] ,[CURRANCY_PART] ,[PART_EQUAL] ,[CURRANCY_PRIMARY] ,[CURRANCY_ACTIVE])
												             SELECT [CURRANCY_CODE] ,[CURRANCY_NAME] ,[CURRANCY_SAMPLE] ,[CURRANCY_EQUAL] ,[CURRANCY_MOKAFEA] ,[CURRANCY_PART] ,[PART_EQUAL] ,[CURRANCY_PRIMARY] ,[CURRANCY_ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_CURRANNCY ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 

--*********************T_BOX************************
 DECLARE @DESCREPT NVARCHAR(MAX) = N''رصيـــــد منقـــــــول''
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_BOX ([BILL_BRANCH] ,[BILL_NUMBER] ,[BILL_STR] ,[BILL_DATE] ,[BILL_TIME] ,[MOVE_CODE] ,[B_CODE] ,[BRANCH_CODE] ,[ACCOUNT_CODE] ,[ACCOUNT_DESCRIPTION] ,[DEBIT] ,[CREDIT] ,[DEBIT_IQ] ,[CREDIT_IQ] ,[CURRANCY_CODE] ,[CURRANCY_EQUAL] ,[DESCRIPTION] ,[DEAL_CODE] ,[USER_CODE]  ,[CHECKED] ,[C_DATE] ,[ACTIVE] )
									     SELECT ''''''+ @COMPANY_TITAL+N''0''+'''''',0 , ''''''+ N''''+'''''' ,GETDATE() ,GETDATE() ,0 ,13 ,1 ,[ACCOUNT_CODE] ,[ACCOUNT_NAME] ,BALANCE, 0, BALANCE_IQ       ,     0   , ''''''+ @CURRANCY_CODE +'''''' ,''''''+ @CURRANCY_EQUAL +'''''' ,''''''+ @DESCREPT +'''''' ,0 ,0  ,0 ,GETDATE() ,1   FROM ''+ @OLD_DB_NAME +N''.dbo.V_ACC_B WHERE ACCOUNT_PARENT>=5 ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';  
SET @SQL_STR=N''UPDATE '' + @NEW_DB_NAME + N''.dbo.T_BOX SET CREDIT=DEBIT*-1 WHERE DEBIT<0;
                   UPDATE '' + @NEW_DB_NAME + N''.dbo.T_BOX SET DEBIT=0 WHERE DEBIT<0;
                   UPDATE '' + @NEW_DB_NAME + N''.dbo.T_BOX SET CREDIT_IQ=DEBIT_IQ*-1 WHERE DEBIT_IQ<0;
                   UPDATE '' + @NEW_DB_NAME + N''.dbo.T_BOX SET DEBIT_IQ=0 WHERE DEBIT_IQ<0;
			 DELETE FROM  '' + @NEW_DB_NAME + N''.dbo.T_BOX WHERE ACCOUNT_CODE IN (SELECT ACCOUNT_CODE FROM '' + @NEW_DB_NAME + N''.dbo.T_ACCOUNTS WHERE ACCOUNT_PARENT =6);''
				   EXEC (@SQL_STR);
SET @SQL_STR=N'''';
--SET @SQL_STR=N''DELETE FROM T_BOX WHERE ACCOUNT_CODE IN (SELECT ACCOUNT_CODE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT BETWEEN 6 AND 8)''
-- PRINT @SQL_STR
-- EXEC (@SQL_STR);
--SET @SQL_STR=N'''';

 
 --*********************T_BUY_CHOOSE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_BUY_CHOOSE ([T_ID] ,[LABEL] ,[TELE_COMMAND] ,[COMMAND] ,[IS_MAIN] ,[IS_NEED_USER_ENTRY] ,[TYPE] ,[FROM_DATA] ,[SCRIPT] ,[PARENT_COMMAND] ,[NOTE] ,[LEVEL_CASE] ,[SCRIPT_FILTER] ,[TYPE_CASE] ,[MSSG])
												              SELECT [T_ID] ,[LABEL] ,[TELE_COMMAND] ,[COMMAND] ,[IS_MAIN] ,[IS_NEED_USER_ENTRY] ,[TYPE] ,[FROM_DATA] ,[SCRIPT] ,[PARENT_COMMAND] ,[NOTE] ,[LEVEL_CASE] ,[SCRIPT_FILTER] ,[TYPE_CASE] ,[MSSG] FROM ''+ @OLD_DB_NAME +N''.dbo.T_BUY_CHOOSE ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
 --*********************T_CENTER_COST************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_CENTER_COST ([CENTER_CODE] ,[CENTER_NAME] ,[CATEGORY_LIST] ,[ACCOUNT_LIST] ,[ACTIVE] ,[C_DATE] ,[TOTAL_SALES] ,[TOTAL_COST] ,[TOTAL_EXPENSES] ,[NET_ARBAH])
												               SELECT [CENTER_CODE] ,[CENTER_NAME] ,[CATEGORY_LIST] ,[ACCOUNT_LIST] ,[ACTIVE] ,[C_DATE] ,[TOTAL_SALES] ,[TOTAL_COST] ,[TOTAL_EXPENSES] ,[NET_ARBAH] FROM ''+ @OLD_DB_NAME +N''.dbo.T_CENTER_COST  WHERE [ACTIVE]=1  ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
 --*********************T_CENTER_COST_INVOICE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_CENTER_COST_INVOICE ([CENTER_CODE] ,[CENTER_NAME] ,[MOVE_LIST] ,[ACTIVE] ,[C_DATE] ,[TOTAL_SALES] ,[TOTAL_COST] ,[TOTAL_EXPENSES] ,[NET_ARBAH])
												                       SELECT [CENTER_CODE] ,[CENTER_NAME] ,[MOVE_LIST] ,[ACTIVE] ,[C_DATE] ,[TOTAL_SALES] ,[TOTAL_COST] ,[TOTAL_EXPENSES] ,[NET_ARBAH] FROM ''+ @OLD_DB_NAME +N''.dbo.T_CENTER_COST_INVOICE  WHERE [ACTIVE]=1  ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_CENTER_COST_ITEMS************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_CENTER_COST_ITEMS ([CENTER_CODE] ,[CENTER_NAME] ,[ITEM_LIST] ,[MOVE_LIST] ,[ACTIVE] ,[C_DATE] ,[TOTAL_SALES] ,[TOTAL_COST] ,[TOTAL_EXPENSES] ,[NET_ARBAH])
												                     SELECT [CENTER_CODE] ,[CENTER_NAME] ,[ITEM_LIST] ,[MOVE_LIST] ,[ACTIVE] ,[C_DATE] ,[TOTAL_SALES] ,[TOTAL_COST] ,[TOTAL_EXPENSES] ,[NET_ARBAH] FROM ''+ @OLD_DB_NAME +N''.dbo.T_CENTER_COST_ITEMS  WHERE [ACTIVE]=1 ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_CLIENT************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_CLIENT ([CLIENT_CODE] ,[CLIENT_NAME] ,[CLIENT_TYPE] ,[ACCOUNT_CODE] ,[CURRANCY_CODE] ,[MANDOOB_CODE] ,[CLIENT_PHONE] ,[CLIENT_PHONE_SMS] ,[CLIENT_EMAILE] ,[CLIENT_REGION] ,[CLIENT_ADDRESS] ,[CLIENT_BARCODE] ,[CLIENT_CARD] ,[CLIENT_NOTE] ,[CLIENT_PIN_CODE] ,[DISCOUNT_PERCENT] ,[SECURETY_CODE] ,[MAX_DEBIT] ,[CLIENT_BUSINESS] ,[CLIENT_ACTIVE] ,[C_DATE] ,[C_USER] ,[MAIN_ACCOUNT] ,[TYPE_PRICE_CODE] ,[LAT] ,[LNG] ,[FAMILY_NAME] ,[OFFICE_NAME] ,[QISM_NAME] ,[MONTH_WARNING] ,[SALARY_NET] ,[EMOLA_CARD] ,[SHAKAWY_NOTE] ,[HAWIA] ,[HAWIA_FROM] ,[HAWIA_NO] ,[CLIENT_COLOR],[CLIENT_TOKEN] ,[FROM_TIME] ,[TO_TIME])
												          SELECT [CLIENT_CODE] ,[CLIENT_NAME] ,[CLIENT_TYPE] ,[ACCOUNT_CODE] ,[CURRANCY_CODE] ,[MANDOOB_CODE] ,[CLIENT_PHONE] ,[CLIENT_PHONE_SMS] ,[CLIENT_EMAILE] ,[CLIENT_REGION] ,[CLIENT_ADDRESS] ,[CLIENT_BARCODE] ,[CLIENT_CARD] ,[CLIENT_NOTE] ,[CLIENT_PIN_CODE] ,[DISCOUNT_PERCENT] ,[SECURETY_CODE] ,[MAX_DEBIT] ,[CLIENT_BUSINESS] ,[CLIENT_ACTIVE] ,[C_DATE] ,[C_USER] ,[MAIN_ACCOUNT] ,[TYPE_PRICE_CODE] ,[LAT] ,[LNG] ,[FAMILY_NAME] ,[OFFICE_NAME] ,[QISM_NAME] ,[MONTH_WARNING] ,[SALARY_NET] ,[EMOLA_CARD] ,[SHAKAWY_NOTE] ,[HAWIA] ,[HAWIA_FROM] ,[HAWIA_NO] ,[CLIENT_COLOR],[CLIENT_TOKEN] ,[FROM_TIME] ,[TO_TIME] FROM ''+ @OLD_DB_NAME +N''.dbo.T_CLIENT  WHERE [CLIENT_ACTIVE]=1 ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 

--*********************T_COLUMNS_GRID_CAPTION************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_COLUMNS_GRID_CAPTION ([FORM_NAME] ,[COL_NAME] ,[COL_CAPTION])
												                        SELECT [FORM_NAME] ,[COL_NAME] ,[COL_CAPTION] FROM ''+ @OLD_DB_NAME +N''.dbo.T_COLUMNS_GRID_CAPTION ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_COMPANY************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_COMPANY ([T_ID] ,[COMPANY_NAME] ,[COMPANY_LOGO] ,[COMPANY_PHONE] ,[COMPANY_TITAL])
												           SELECT [T_ID] ,[COMPANY_NAME] ,[COMPANY_LOGO] ,[COMPANY_PHONE] ,[COMPANY_TITAL] FROM ''+ @OLD_DB_NAME +N''.dbo.T_COMPANY ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_COMPANY2************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_COMPANY2 ([COMPANY_CODE] ,[COMPANY_NAME] ,[COMPANY_DESCREPTION] ,[COMPANY_ADDRESS] ,[COMPANY_PHONE] ,[COMPANY_URL] ,[COMPANY_EMAIL] ,[COMPANY_LOGO] ,[COMPANY_HEADER] ,[COMPANY_BODY] ,[COMPANY_FOOTER])
												           SELECT [COMPANY_CODE] ,[COMPANY_NAME] ,[COMPANY_DESCREPTION] ,[COMPANY_ADDRESS] ,[COMPANY_PHONE] ,[COMPANY_URL] ,[COMPANY_EMAIL] ,[COMPANY_LOGO] ,[COMPANY_HEADER] ,[COMPANY_BODY] ,[COMPANY_FOOTER] FROM ''+ @OLD_DB_NAME +N''.dbo.T_COMPANY2 ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_CONFIGRATION************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_CONFIGRATION ([T_ID] ,[TELEGRAM] ,[TL_ID] ,[TELE_MAIN])
												                SELECT [T_ID] ,[TELEGRAM] ,[TL_ID] ,[TELE_MAIN] FROM ''+ @OLD_DB_NAME +N''.dbo.T_CONFIGRATION ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_COUPON************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_COUPON ([BILL_COUPON] ,[COUPON_NO] ,[COUPON_DISCOUNT_PERC] ,[COUPON_DISCOUNT_AMOUNT] ,[START_TIME] ,[END_TIME] ,[IS_USED] ,[BILL_NUMBER] ,[C_DATE])
												          SELECT [BILL_COUPON] ,[COUPON_NO] ,[COUPON_DISCOUNT_PERC] ,[COUPON_DISCOUNT_AMOUNT] ,[START_TIME] ,[END_TIME] ,[IS_USED] ,[BILL_NUMBER] ,[C_DATE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_COUPON  WHERE [IS_USED]=0''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_DISCOUNT_APP************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_DISCOUNT_APP ([T_ID] ,[DISCOUNT_CLIENT_APP] ,[DISCOUNT_MANDOOB_APP])
												                SELECT [T_ID] ,[DISCOUNT_CLIENT_APP] ,[DISCOUNT_MANDOOB_APP] FROM ''+ @OLD_DB_NAME +N''.dbo.T_DISCOUNT_APP ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 


--*********************T_DRIVERS************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_DRIVERS ([DRIVER_CODE] ,[DRIVER_NAME] ,[ACTIVE])
												           SELECT [DRIVER_CODE] ,[DRIVER_NAME] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_DRIVERS  WHERE [ACTIVE]=1  ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 

--*********************T_EMPLOYEE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_EMPLOYEE ([EMP_CODE] ,[EMP_NAME] ,[EMP_CARD] ,[EMP_SALLARY] ,[PER_DAY] ,[JOB_HOUR] ,[JOB_FROM] ,[JOB_TO] ,[ACTIVE] ,[ACCOUNT_CODE] ,[ACCOUNT_CODE_SELFA])
												           SELECT [EMP_CODE] ,[EMP_NAME] ,[EMP_CARD] ,[EMP_SALLARY] ,[PER_DAY] ,[JOB_HOUR] ,[JOB_FROM] ,[JOB_TO] ,[ACTIVE] ,[ACCOUNT_CODE] ,[ACCOUNT_CODE_SELFA] FROM ''+ @OLD_DB_NAME +N''.dbo.T_EMPLOYEE   WHERE [ACTIVE]=1 ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_FORM_APP************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_FORM_APP ([ID] ,[TITEL_NAME] ,[FORM_NAME] ,[FORM_PARENT] ,[GROUP_SCREEN] ,[BACK_COLOR] ,[FONT_COLOR] ,[FONT_NAME] ,[FONT_SIZE] ,[BUTTON_SIZE] ,[XML_PRIMARY])
												            SELECT [ID] ,[TITEL_NAME] ,[FORM_NAME] ,[FORM_PARENT] ,[GROUP_SCREEN] ,[BACK_COLOR] ,[FONT_COLOR] ,[FONT_NAME] ,[FONT_SIZE] ,[BUTTON_SIZE] ,[XML_PRIMARY] FROM ''+ @OLD_DB_NAME +N''.dbo.T_FORM_APP  ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_FORM_LAYOUT_FILE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_FORM_LAYOUT_FILE ([Titel] ,[FileName] ,[DateCreate] ,[DateCreateString] ,[LayoutSelected] ,[FormName] ,[FullPathFile] ,[userList])
												                    SELECT [Titel] ,[FileName] ,[DateCreate] ,[DateCreateString] ,[LayoutSelected] ,[FormName] ,[FullPathFile] ,[userList] FROM ''+ @OLD_DB_NAME +N''.dbo.T_FORM_LAYOUT_FILE  ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_FORM_SHORTCUT************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_FORM_SHORTCUT ([ID] ,[CATEGORY_NAME] ,[TYPE_NAME] ,[TITEL_NAME] ,[FORM_NAME] ,[BUTTON_NAME] ,[REPORT_ID])
												                 SELECT [ID] ,[CATEGORY_NAME] ,[TYPE_NAME] ,[TITEL_NAME] ,[FORM_NAME] ,[BUTTON_NAME] ,[REPORT_ID] FROM ''+ @OLD_DB_NAME +N''.dbo.T_FORM_SHORTCUT  ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 

--*********************T_FACTORY_ITEM_WAITING************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_FACTORY_ITEM_WAITING ([ITEM_CODE] ,[QTY] ,[BARCODE_GENAERATE] ,[UNIT_CODE] ,[UNIT_NAME] ,[C_DATE] ,[USER_CREATE] ,[ACTIVE] ,[IS_FACTORY])
												                        SELECT [ITEM_CODE] ,[QTY] ,[BARCODE_GENAERATE] ,[UNIT_CODE] ,[UNIT_NAME] ,[C_DATE] ,[USER_CREATE] ,[ACTIVE] ,[IS_FACTORY] FROM ''+ @OLD_DB_NAME +N''.dbo.T_FACTORY_ITEM_WAITING where [IS_FACTORY]=0 AND [ACTIVE]=1  ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 

--*********************T_GATE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_GATE ([GATE_CODE] ,[GATE_NAME] ,[GATE_SN] ,[GATE_NO])
												                 SELECT [GATE_CODE] ,[GATE_NAME] ,[GATE_SN] ,[GATE_NO] FROM ''+ @OLD_DB_NAME +N''.dbo.T_GATE  ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_ITEM_BARCODE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_ITEM_BARCODE ([ITEM_CODE] ,[TYPE_VAL] ,[ITEM_BARCODE] ,[UNIT_CODE] ,[UNIT_NAME] ,[C_DATE])
												                SELECT [ITEM_CODE] ,[TYPE_VAL] ,[ITEM_BARCODE] ,[UNIT_CODE] ,[UNIT_NAME] ,[C_DATE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_ITEM_BARCODE  ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_ITEM_CATEGORY************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_ITEM_CATEGORY ([CATEGORY_CODE] ,[CATEGORY_NAME] ,[CATEGORY_NAME_EN] ,[ACTIVE] ,[SHOW_MENU] ,[CATEGORY_IMAGE_PATH] ,[PRINTER_ID])
												                 SELECT [CATEGORY_CODE] ,[CATEGORY_NAME] ,[CATEGORY_NAME_EN] ,[ACTIVE] ,[SHOW_MENU] ,[CATEGORY_IMAGE_PATH] ,[PRINTER_ID] FROM ''+ @OLD_DB_NAME +N''.dbo.T_ITEM_CATEGORY  WHERE [ACTIVE]=1  ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_ITEM_CATEGORY_RATING************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_ITEM_CATEGORY_RATING ([CATEGORY_RATING_CODE] ,[CATEGORY_RATING_NAME] ,[CATEGORY_RATING_NAME_EN] ,[ACTIVE] ,[SHOW_MENU] ,[CATEGORY_RATING_IMAGE_PATH] ,[CATEGORY_RATING_CODE_CATEGORY_MULTI])
												                        SELECT [CATEGORY_RATING_CODE] ,[CATEGORY_RATING_NAME] ,[CATEGORY_RATING_NAME_EN] ,[ACTIVE] ,[SHOW_MENU] ,[CATEGORY_RATING_IMAGE_PATH] ,[CATEGORY_RATING_CODE_CATEGORY_MULTI] FROM ''+ @OLD_DB_NAME +N''.dbo.T_ITEM_CATEGORY_RATING   WHERE [ACTIVE]=1  ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_ITEM_FREE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_ITEM_FREE ([TYPE_VAL] ,[ITEM_CODE] ,[QTY] ,[QTY_FREE])
												                        SELECT [TYPE_VAL] ,[ITEM_CODE] ,[QTY] ,[QTY_FREE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_ITEM_FREE  ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_ITEM_IMAGE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_ITEM_IMAGE ([ITEM_CODE] ,[TYPE_IMAGE] ,[IMAGE_PATH_ONLINE] ,[IMAGE_PATH_OFFLINE] ,[C_DATE])
												              SELECT [ITEM_CODE] ,[TYPE_IMAGE] ,[IMAGE_PATH_ONLINE] ,[IMAGE_PATH_OFFLINE] ,[C_DATE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_ITEM_IMAGE  ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_ITEM_MATERIAL************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_ITEM_MATERIAL ([EFFECTIVE_MATERIAL] ,[EFFECTIVE_MATERIAL_2] ,[QTY_STR])
												                 SELECT [EFFECTIVE_MATERIAL] ,[EFFECTIVE_MATERIAL_2] ,[QTY_STR] FROM ''+ @OLD_DB_NAME +N''.dbo.T_ITEM_MATERIAL  ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_ITEM_MATERIAL_EFFECTIVE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_ITEM_MATERIAL_EFFECTIVE ([ITEM_CODE] ,[EFFECTIVE_MATERIAL_ID] ,[EFFECTIVE_MATERIAL_2] ,[QTY_STR])
												                           SELECT [ITEM_CODE] ,[EFFECTIVE_MATERIAL_ID] ,[EFFECTIVE_MATERIAL_2] ,[QTY_STR] FROM ''+ @OLD_DB_NAME +N''.dbo.T_ITEM_MATERIAL_EFFECTIVE  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
--*********************T_ITEM_MISWAK_INFO************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_ITEM_MISWAK_INFO ([ITEM_CODE] ,[ITEM_NAME] ,[QTY] ,[ACTIVE] ,[INFO_NOTE] ,[USER_CREATE] ,[USER_UPDATE] ,[C_DATE] ,[C_UPDATE])
							                                	  SELECT [ITEM_CODE] ,[ITEM_NAME] ,[QTY] ,[ACTIVE] ,[INFO_NOTE] ,[USER_CREATE] ,[USER_UPDATE] ,[C_DATE] ,[C_UPDATE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_ITEM_MISWAK_INFO  WHERE [ACTIVE]=1  ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_ITEM_RESTURANT************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_ITEM_RESTURANT ([ITEM_CODE_REST] ,[ITEM_NAME_REST] ,[ITEM_BARCODE_REST] ,[ITEM_CODE] ,[ITEM_NAME] ,[QTY] ,[COST] ,[PRICE] ,[TOTAL])
							                                	  SELECT [ITEM_CODE_REST] ,[ITEM_NAME_REST] ,[ITEM_BARCODE_REST] ,[ITEM_CODE] ,[ITEM_NAME] ,[QTY] ,[COST] ,[PRICE] ,[TOTAL] FROM ''+ @OLD_DB_NAME +N''.dbo.T_ITEM_RESTURANT  ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_ITEM_SERIAL************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_ITEM_SERIAL ([BILL_NUMBER] ,[BILL_DATE] ,[B_CODE] ,[ITEM_CODE] ,[QTY] ,[IME] ,[SERIAL] ,[EXP_DAY] ,[EXP_DATE] ,[ACTIVE] ,[C_DATE] ,[C_DELETE] ,[USER_DELETE] ,[IS_SALE])
							                                SELECT [BILL_NUMBER]*-1 ,[BILL_DATE] ,[B_CODE] ,[ITEM_CODE] ,[QTY] ,[IME] ,[SERIAL] ,[EXP_DAY] ,[EXP_DATE] ,[ACTIVE] ,[C_DATE] ,[C_DELETE] ,[USER_DELETE] ,[IS_SALE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_ITEM_SERIAL     ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_ITEM_SPECIFICATION_TYPE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_ITEM_SPECIFICATION_TYPE ([SPEC_TYPE_ID] ,[SPEC_TYPE_NAME] ,[SPEC_TYPE_SIGN])
							                                               SELECT [SPEC_TYPE_ID] ,[SPEC_TYPE_NAME] ,[SPEC_TYPE_SIGN] FROM ''+ @OLD_DB_NAME +N''.dbo.T_ITEM_SPECIFICATION_TYPE     ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_ITEM_SPECIFICATIONS************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_ITEM_SPECIFICATIONS ([ITEM_CODE] ,[SPEC_TYPE_ID] ,[SPEC_VALUE])
							                                           SELECT [ITEM_CODE] ,[SPEC_TYPE_ID] ,[SPEC_VALUE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_ITEM_SPECIFICATIONS     ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_ITEM_UNIT************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_ITEM_UNIT ([UNIT_GUID] ,[ITEM_CODE] ,[UNIT_CODE] ,[UNIT_NAME] ,[UNIT_QTY] ,[ON_OFF] ,[DF_SALE] ,[DF_BUY] ,[DF_STORE] ,[PRICE_BUY] ,[PRICE_COST] ,[PRICE_SALE_1] ,[PRICE_SALE_2] ,[PRICE_SALE_3] ,[PRICE_AVG_COST] ,[PRICE_SALE_CUR] ,[C_DATE])
							                                 SELECT [UNIT_GUID] ,[ITEM_CODE] ,[UNIT_CODE] ,[UNIT_NAME] ,[UNIT_QTY] ,[ON_OFF] ,[DF_SALE] ,[DF_BUY] ,[DF_STORE] ,[PRICE_BUY] ,[PRICE_COST] ,[PRICE_SALE_1] ,[PRICE_SALE_2] ,[PRICE_SALE_3] ,[PRICE_AVG_COST] ,[PRICE_SALE_CUR] ,[C_DATE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_ITEM_UNIT  ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_ITEMS************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_ITEMS ([ITEM_CODE] ,[ITEM_NAME] ,[CATEGORY_CODE] ,[TYPE_CODE] ,[COST] ,[SELL] ,[SORT] ,[ACTIVE] ,[PRINTER_ID] ,[ITEM_NOTE] ,[IMG_URL] ,[IMAGE] ,[ITEM_NAME_EN] ,[ITEM_NOTE_EN] ,[TIME_USE] ,[IS_STORE] ,[ITEM_BARCODE] ,[QTY_MIN] ,[ON2_OFF2] ,[UNIT2_NAME] ,[UNIT2_QTY] ,[DF_SALE] ,[SELL2] ,[SELL_CNY] ,[SELL2_CNY] ,[SHOW_MENU] ,[SELL_G] ,[SELL_W] ,[SELL2_G] ,[SELL2_W] ,[IS_TRANS] ,[GUIDS] ,[CLIENT_NAME_BEST] ,[IS_DISCOUNT] ,[ITEM_PARENT] ,[ITEM_SUB_PARENT] ,[LEVEL_SUB] ,[AREA_M2] ,[WIDTH_CM] ,[LENGTH_CM] ,[COMPANY_CREATE] ,[EFFECTIVE_MATERIAL] ,[MAIN_ITEM_CODE] ,[DISC_AMO] ,[DISC_PERCENT] ,[IS_FEATURE] ,[RAF_NAME] ,[IS_HIDE] ,[SERVER_ITEM_CODE] ,[SERVER_BRANCH] ,[IS_SERIAL] ,[UNIT_NAME] ,[EXPIRED_DAY] ,[EXPIRED_DATE] ,[EXPIRED_WARRNING] ,[QTY_AKSAT] ,[IS_TAX] ,[TAX_PERCENT] ,[TAX_AMO] ,[IS_MANDOOB] ,[MANDOOB_PERCENT] ,[MANDOOB_AMO] ,[IS_MANDOOB_SELECTION] ,[IS_ITEM_AREA] ,[UNIT_QTY_X1] ,[UNIT_QTY_XY] ,[UNIT_QTY_XZ] ,[IS_NEW_BUY],[KIND_NAME] ,[POINT_OF_UNIT1] ,[POINT_OF_UNIT2])
							                             SELECT [ITEM_CODE] ,[ITEM_NAME] ,[CATEGORY_CODE] ,[TYPE_CODE] ,[COST] ,[SELL] ,[SORT] ,[ACTIVE] ,[PRINTER_ID] ,[ITEM_NOTE] ,[IMG_URL] ,[IMAGE] ,[ITEM_NAME_EN] ,[ITEM_NOTE_EN] ,[TIME_USE] ,[IS_STORE] ,[ITEM_BARCODE] ,[QTY_MIN] ,[ON2_OFF2] ,[UNIT2_NAME] ,[UNIT2_QTY] ,[DF_SALE] ,[SELL2] ,[SELL_CNY] ,[SELL2_CNY] ,[SHOW_MENU] ,[SELL_G] ,[SELL_W] ,[SELL2_G] ,[SELL2_W] ,[IS_TRANS] ,[GUIDS] ,[CLIENT_NAME_BEST] ,[IS_DISCOUNT] ,[ITEM_PARENT] ,[ITEM_SUB_PARENT] ,[LEVEL_SUB] ,[AREA_M2] ,[WIDTH_CM] ,[LENGTH_CM] ,[COMPANY_CREATE] ,[EFFECTIVE_MATERIAL] ,[MAIN_ITEM_CODE] ,[DISC_AMO] ,[DISC_PERCENT] ,[IS_FEATURE] ,[RAF_NAME] ,[IS_HIDE] ,[SERVER_ITEM_CODE] ,[SERVER_BRANCH] ,[IS_SERIAL] ,[UNIT_NAME] ,[EXPIRED_DAY] ,[EXPIRED_DATE] ,[EXPIRED_WARRNING] ,[QTY_AKSAT] ,[IS_TAX] ,[TAX_PERCENT] ,[TAX_AMO] ,[IS_MANDOOB] ,[MANDOOB_PERCENT] ,[MANDOOB_AMO] ,[IS_MANDOOB_SELECTION] ,[IS_ITEM_AREA] ,[UNIT_QTY_X1] ,[UNIT_QTY_XY] ,[UNIT_QTY_XZ] ,[IS_NEW_BUY],[KIND_NAME] ,[POINT_OF_UNIT1] ,[POINT_OF_UNIT2] FROM ''+ @OLD_DB_NAME +N''.dbo.T_ITEMS  WHERE [ACTIVE]=1  ''
EXEC (@SQL_STR);
SET @SQL_STR=N''''; 
--*********************T_ITEMS_MANDOOB************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_ITEMS_MANDOOB ([ITEM_CODE] ,[MANDOOB_CODE] ,[MANDOOB_PERCENT] ,[MANDOOB_AMO] )
							                                     SELECT [ITEM_CODE] ,[MANDOOB_CODE] ,[MANDOOB_PERCENT] ,[MANDOOB_AMO] FROM ''+ @OLD_DB_NAME +N''.dbo.T_ITEMS_MANDOOB  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
--*********************T_ITEMS_REPORT************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_ITEMS_REPORT ([REPORT_CODE] ,[ITEM_CODE] ,[ITEM_NAME] ,[REPORT_ITEM_ID] ,[REPORT_ITEM_CODE] ,[REPORT_ITEM_NAME] ,[REPORT_ITEM_DISCREPTION] ,[REPORT_ITEM_PRICE] ,[REPORT_ITEM_CATEGORY] ,[REPORT_ITEM_TYPE] )
							                                     SELECT [REPORT_CODE] ,[ITEM_CODE] ,[ITEM_NAME] ,[REPORT_ITEM_ID] ,[REPORT_ITEM_CODE] ,[REPORT_ITEM_NAME] ,[REPORT_ITEM_DISCREPTION] ,[REPORT_ITEM_PRICE] ,[REPORT_ITEM_CATEGORY] ,[REPORT_ITEM_TYPE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_ITEMS_REPORT  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
--*********************T_JOINT************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_JOINT ([JOINT_CODE] ,[JOINT_NAME] ,[JOINT_PHONE] ,[JOINT_ADDRESS] ,[ACCOUNT_CODE] ,[JOINT_CARD] ,[GENDER] ,[LENGHT] ,[WEIGHT] ,[IMG_PATH] ,[IMG_64] ,[C_DATE] ,[USER_CREATE] ,[MAX_T_ID] ,[ACTIVE] ,[NOTE] ,[IMG_64_SHOW] ,[IMG_PATH_SHOW] )
							                             SELECT [JOINT_CODE] ,[JOINT_NAME] ,[JOINT_PHONE] ,[JOINT_ADDRESS] ,[ACCOUNT_CODE] ,[JOINT_CARD] ,[GENDER] ,[LENGHT] ,[WEIGHT] ,[IMG_PATH] ,[IMG_64] ,[C_DATE] ,[USER_CREATE] ,[MAX_T_ID] ,[ACTIVE] ,[NOTE] ,[IMG_64_SHOW] ,[IMG_PATH_SHOW] FROM ''+ @OLD_DB_NAME +N''.dbo.T_JOINT  WHERE [ACTIVE]=1 ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
--*********************T_JOINT_COURSES************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_JOINT_COURSES ([JOINT_CODE] ,[D1_1] ,[D1_2] ,[D1_3] ,[D1_4] ,[D1_5] ,[D1_6] ,[D1_7] ,[D1_8] ,[D2_1] ,[D2_2] ,[D2_3] ,[D2_4] ,[D2_5] ,[D2_6] ,[D2_7] ,[D2_8] ,[D3_1] ,[D3_2] ,[D3_3] ,[D3_4] ,[D3_5] ,[D3_6] ,[D3_7] ,[D3_8] )
							                                     SELECT [JOINT_CODE] ,[D1_1] ,[D1_2] ,[D1_3] ,[D1_4] ,[D1_5] ,[D1_6] ,[D1_7] ,[D1_8] ,[D2_1] ,[D2_2] ,[D2_3] ,[D2_4] ,[D2_5] ,[D2_6] ,[D2_7] ,[D2_8] ,[D3_1] ,[D3_2] ,[D3_3] ,[D3_4] ,[D3_5] ,[D3_6] ,[D3_7] ,[D3_8] FROM ''+ @OLD_DB_NAME +N''.dbo.T_JOINT_COURSES    ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
--*********************T_JOINT_COURSES_FREE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_JOINT_COURSES_FREE ([JOINT_CODE] ,[JOINT_NAME] ,[JOINT_WEIGHT] ,[COTCH_NAME] ,[START_DATE] ,[END_DATE] ,[D1_1] ,[D1_2] ,[D1_3] ,[D1_4] ,[D1_5] ,[D1_6] ,[D1_7] ,[D1_8] ,[D2_1] ,[D2_2] ,[D2_3] ,[D2_4] ,[D2_5] ,[D2_6] ,[D2_7] ,[D2_8] ,[D3_1] ,[D3_2] ,[D3_3] ,[D3_4] ,[D3_5] ,[D3_6] ,[D3_7] ,[D3_8] )
							                                          SELECT [JOINT_CODE] ,[JOINT_NAME] ,[JOINT_WEIGHT] ,[COTCH_NAME] ,[START_DATE] ,[END_DATE] ,[D1_1] ,[D1_2] ,[D1_3] ,[D1_4] ,[D1_5] ,[D1_6] ,[D1_7] ,[D1_8] ,[D2_1] ,[D2_2] ,[D2_3] ,[D2_4] ,[D2_5] ,[D2_6] ,[D2_7] ,[D2_8] ,[D3_1] ,[D3_2] ,[D3_3] ,[D3_4] ,[D3_5] ,[D3_6] ,[D3_7] ,[D3_8] FROM ''+ @OLD_DB_NAME +N''.dbo.T_JOINT_COURSES_FREE  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
--*********************T_JOINT_COURSES_FREE_TAMPLET************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_JOINT_COURSES_FREE_TAMPLET ([COURSES_CODE] ,[COURSES_NAME] ,[D1_1] ,[D1_2] ,[D1_3] ,[D1_4] ,[D1_5] ,[D1_6] ,[D1_7] ,[D1_8] ,[D2_1] ,[D2_2] ,[D2_3] ,[D2_4] ,[D2_5] ,[D2_6] ,[D2_7] ,[D2_8] ,[D3_1] ,[D3_2] ,[D3_3] ,[D3_4] ,[D3_5] ,[D3_6] ,[D3_7] ,[D3_8] )
							                                                  SELECT [COURSES_CODE] ,[COURSES_NAME] ,[D1_1] ,[D1_2] ,[D1_3] ,[D1_4] ,[D1_5] ,[D1_6] ,[D1_7] ,[D1_8] ,[D2_1] ,[D2_2] ,[D2_3] ,[D2_4] ,[D2_5] ,[D2_6] ,[D2_7] ,[D2_8] ,[D3_1] ,[D3_2] ,[D3_3] ,[D3_4] ,[D3_5] ,[D3_6] ,[D3_7] ,[D3_8] FROM ''+ @OLD_DB_NAME +N''.dbo.T_JOINT_COURSES_FREE_TAMPLET  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_JOINT_SUBSCRIPTION************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_JOINT_SUBSCRIPTION ([JOINT_CODE] ,[D_DATE] ,[USER_CODE] ,[START_DATE] ,[END_DATE] ,[SUBSCRIPTION_CODE] ,[AMO] ,[CASH] ,[REMAIN] ,[IS_FINISH] ,[IS_PAUSE] ,[DAY_REMAIN] )
							                                          SELECT [JOINT_CODE] ,[D_DATE] ,[USER_CODE] ,[START_DATE] ,[END_DATE] ,[SUBSCRIPTION_CODE] ,[AMO] ,[CASH] ,[REMAIN] ,[IS_FINISH] ,[IS_PAUSE] ,[DAY_REMAIN] FROM ''+ @OLD_DB_NAME +N''.dbo.T_JOINT_SUBSCRIPTION WHERE [IS_FINISH]=0 ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
--*********************T_KAFEL************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_KAFEL ([KAFEL_CODE] ,[KAFEL_NAME] ,[KAFEL_PHONE] ,[KAFEL_ADDRESS] ,[KAFEL_ACTIVE] ,[PHONE2] ,[OFFICE_NAME] ,[QISM_NAME] ,[KAFEL_BUSINESS] ,[HAWIA] ,[HAWIA_FROM] ,[HAWIA_NO] ,[NOTE])
							                             SELECT [KAFEL_CODE] ,[KAFEL_NAME] ,[KAFEL_PHONE] ,[KAFEL_ADDRESS] ,[KAFEL_ACTIVE] ,[PHONE2] ,[OFFICE_NAME] ,[QISM_NAME] ,[KAFEL_BUSINESS] ,[HAWIA] ,[HAWIA_FROM] ,[HAWIA_NO] ,[NOTE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_KAFEL WHERE [KAFEL_ACTIVE]=1 ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_KAFEL_CLIENT************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_KAFEL_CLIENT ([CLIENT_CODE] ,[KAFEL_CODE])
							                                    SELECT [CLIENT_CODE] ,[KAFEL_CODE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_KAFEL_CLIENT  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_LEVEL************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_LEVEL ([LEVEL_CODE] ,[LEVEL_NAME] ,[LEVEL_MAIN] ,[LEVEL_SALES] ,[LEVEL_BUY] ,[LEVEL_ACCOUNT] ,[LEVEL_REPORT] ,[LEVEL_STORE] ,[LEVEL_CLIENT] ,[LEVEL_ITEMS] ,[LEVEL_GENERAL])
							                             SELECT [LEVEL_CODE] ,[LEVEL_NAME] ,[LEVEL_MAIN] ,[LEVEL_SALES] ,[LEVEL_BUY] ,[LEVEL_ACCOUNT] ,[LEVEL_REPORT] ,[LEVEL_STORE] ,[LEVEL_CLIENT] ,[LEVEL_ITEMS] ,[LEVEL_GENERAL] FROM ''+ @OLD_DB_NAME +N''.dbo.T_LEVEL  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
--*********************T_MAINTANACE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_MAINTANACE ([BILL_BRANCH] ,[IS_IN] ,[DATE_IN] ,[USER_IN] ,[IS_OUT] ,[DATE_OUT] ,[USER_OUT] ,[SEQ_UNIT])
							                                  SELECT [BILL_BRANCH] ,[IS_IN] ,[DATE_IN] ,[USER_IN] ,[IS_OUT] ,[DATE_OUT] ,[USER_OUT] ,[SEQ_UNIT] FROM ''+ @OLD_DB_NAME +N''.dbo.T_MAINTANACE  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
--*********************T_MAINTENANCE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_MAINTENANCE ([BILL_NUMBER] ,[BILL_DATE] ,[BILL_TIME] ,[BILL_SEQ] ,[USER_CREATE] ,[TAG_PROCCESS_CODE] ,[MAINTENANCE_CENTER] ,[AUTHORIZED_CODE] ,[CLIENT_CODE] ,[CLIENT_NAME] ,[CLIENT_PHONE] ,[CLIENT_REGION] ,[CLIENT_ZONE] ,[CLIENT_ADDRESS] ,[CLIENT_COMPLAINT] ,[AGENT_NAME] ,[BUY_DATE] ,[RECIPIENT_NAME] ,[RECEIVED_DATE] ,[MALFUNCTION_NOTE] ,[TECHNICAL_NOTE] ,[EVALUATION_CLIENT] ,[MAINTENANCE_NOTE] ,[MAINTENANCE_TYPE_CODE] ,[GUARANTEE_TYPE_CODE] ,[QTY_DEVICE] ,[BILL_SALES] ,[AMO_TOTAL] ,[AMO_COST_ITEMS] ,[AMO_COMPANY] ,[AMO_AUTHORIZED] ,[AMO_TRANSFARE] ,[AMO_ARBAH] ,[IS_FINISH] ,[ACTIVE] ,[USER_UPDATE] ,[AMO_CASH] ,[AMO_REMAIN],[T_ID_ERROR])
							                                   SELECT [BILL_NUMBER]*-1 ,[BILL_DATE] ,[BILL_TIME] ,[BILL_SEQ] ,[USER_CREATE] ,[TAG_PROCCESS_CODE] ,[MAINTENANCE_CENTER] ,[AUTHORIZED_CODE] ,[CLIENT_CODE] ,[CLIENT_NAME] ,[CLIENT_PHONE] ,[CLIENT_REGION] ,[CLIENT_ZONE] ,[CLIENT_ADDRESS] ,[CLIENT_COMPLAINT] ,[AGENT_NAME] ,[BUY_DATE] ,[RECIPIENT_NAME] ,[RECEIVED_DATE] ,[MALFUNCTION_NOTE] ,[TECHNICAL_NOTE] ,[EVALUATION_CLIENT] ,[MAINTENANCE_NOTE] ,[MAINTENANCE_TYPE_CODE] ,[GUARANTEE_TYPE_CODE] ,[QTY_DEVICE] ,[BILL_SALES] ,[AMO_TOTAL] ,[AMO_COST_ITEMS] ,[AMO_COMPANY] ,[AMO_AUTHORIZED] ,[AMO_TRANSFARE] ,[AMO_ARBAH] ,[IS_FINISH] ,[ACTIVE] ,[USER_UPDATE] ,[AMO_CASH] ,[AMO_REMAIN],[T_ID_ERROR] FROM ''+ @OLD_DB_NAME +N''.dbo.T_MAINTENANCE WHERE [ACTIVE]=1 ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
--*********************T_MAINTENANCE_DEVICE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_MAINTENANCE_DEVICE ([BILL_NUMBER]  ,[DEVICE_TYPE] ,[DEVICE_MODEL] ,[DEVICE_SN] ,[DEVICE_C_DATE])
							                                          SELECT [BILL_NUMBER]*-1 ,[DEVICE_TYPE] ,[DEVICE_MODEL] ,[DEVICE_SN] ,[DEVICE_C_DATE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_MAINTENANCE_DEVICE  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
--*********************T_MAINTENANCE_GUARANTEE_TYPE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_MAINTENANCE_GUARANTEE_TYPE ([GUARANTEE_TYPE_CODE] ,[GUARANTEE_TYPE_NAME] ,[ACTIVE])
							                                                  SELECT [GUARANTEE_TYPE_CODE] ,[GUARANTEE_TYPE_NAME] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_MAINTENANCE_GUARANTEE_TYPE  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_MAINTENANCE_LABEL************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_MAINTENANCE_LABEL ([BILL_NUMBER] ,[SN_BARCODE] ,[DATE_IN] ,[USER_IN] ,[SEQ_UNIT])
							                                         SELECT [BILL_NUMBER]*-1 ,[SN_BARCODE] ,[DATE_IN] ,[USER_IN] ,[SEQ_UNIT] FROM ''+ @OLD_DB_NAME +N''.dbo.T_MAINTENANCE_LABEL  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_MAINTENANCE_TYPE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_MAINTENANCE_TYPE ([MAINTENANCE_TYPE_CODE] ,[MAINTENANCE_TYPE_NAME] ,[ACTIVE])
							                                        SELECT [MAINTENANCE_TYPE_CODE] ,[MAINTENANCE_TYPE_NAME] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_MAINTENANCE_TYPE  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_MANDOOB************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_MANDOOB ([MANDOOB_CODE] ,[MANDOOB_NAME] ,[MANDOOB_PERCENT] ,[MANDOOB_ACTIVE] ,[C_DATE] ,[ACCOUNT_CODE] ,[PIN_CODE] ,[IS_COST_SHIP],[MANDOOB_TOKEN] ,[MAX_DEBIT])
							                               SELECT [MANDOOB_CODE] ,[MANDOOB_NAME] ,[MANDOOB_PERCENT] ,[MANDOOB_ACTIVE] ,[C_DATE] ,[ACCOUNT_CODE] ,[PIN_CODE] ,[IS_COST_SHIP],[MANDOOB_TOKEN] ,[MAX_DEBIT] FROM ''+ @OLD_DB_NAME +N''.dbo.T_MANDOOB WHERE [MANDOOB_ACTIVE]=1 ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_MAWJOOD_STATUS************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_MAWJOOD_STATUS ([STATUS_CODE] ,[STATUS_NAME] ,[STATUS_MAWJOOD] ,[USRE_ID] ,[USER_NAME] ,[USER_DISPLAY_NAME])
							                                      SELECT [STATUS_CODE] ,[STATUS_NAME] ,[STATUS_MAWJOOD] ,[USRE_ID] ,[USER_NAME] ,[USER_DISPLAY_NAME] FROM ''+ @OLD_DB_NAME +N''.dbo.T_MAWJOOD_STATUS   ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_MOVE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_MOVE ([MOVE_CODE] ,[MOVE_NAME] ,[ACTIVE])
							                            SELECT [MOVE_CODE] ,[MOVE_NAME] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_MOVE   ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_NOTES************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_NOTES ([B_CODE] ,[BILL_NUMBER] ,[NOTE] ,[USER_CREATE] ,[C_DATE] ,[ACCOUNT_CODE] ,[REMAINDER_DATE] ,[IS_DONE] ,[MAWJOOD_ID_TASK] ,[NOTE_TYPE] ,[ATTACH_PATH] ,[MAIN_ID] ,[BY_APP] ,[BY_TRACKING] ,[ACTIVE])
							                             SELECT [B_CODE] ,[BILL_NUMBER]*-1 ,[NOTE] ,[USER_CREATE] ,[C_DATE] ,[ACCOUNT_CODE] ,[REMAINDER_DATE] ,[IS_DONE] ,[MAWJOOD_ID_TASK] ,[NOTE_TYPE] ,[ATTACH_PATH] ,[MAIN_ID] ,[BY_APP] ,[BY_TRACKING] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_NOTES   ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_NOTFICATION_TITLE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_NOTFICATION_TITLE ([DATE] ,[TITLE] ,[DESCRPTIONS] ,[STATUS] ,[DEVICES_ID])
							                                         SELECT [DATE] ,[TITLE] ,[DESCRPTIONS] ,[STATUS] ,[DEVICES_ID] FROM ''+ @OLD_DB_NAME +N''.dbo.T_NOTFICATION_TITLE   ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
--*********************T_NOTIFICATION************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_NOTIFICATION ([NOTI_CODE] ,[NOTI_NAME] ,[NOTI_COUNT] ,[IS_READ] ,[COUNT_NAME] ,[COUNT_SETTING] ,[COUNT_SIGN] ,[ACTIVE])
							                                         SELECT [NOTI_CODE] ,[NOTI_NAME] ,[NOTI_COUNT] ,[IS_READ] ,[COUNT_NAME] ,[COUNT_SETTING] ,[COUNT_SIGN] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_NOTIFICATION  WHERE [ACTIVE]=1 ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_OFFER************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_OFFER ([OFFER_CODE] ,[OFFER_NAME] ,[AMO] ,[TYPE_NAME] ,[START_DATE] ,[END_DATE] ,[DESCRIPTION] ,[URL_IMAGE] ,[TOTAL_QTY_CH1] ,[TOTAL_QTY_CH1_GEFT] ,[TOTAL_QTY_CH2] ,[TOTAL_QTY_CH2_GEFT] ,[TOTAL_QTY_CH3] ,[TOTAL_QTY_CH3_GEFT] ,[TYPE_PRICE] ,[TYPE_CH_CODE])
							                             SELECT [OFFER_CODE] ,[OFFER_NAME] ,[AMO] ,[TYPE_NAME] ,[START_DATE] ,[END_DATE] ,[DESCRIPTION] ,[URL_IMAGE] ,[TOTAL_QTY_CH1] ,[TOTAL_QTY_CH1_GEFT] ,[TOTAL_QTY_CH2] ,[TOTAL_QTY_CH2_GEFT] ,[TOTAL_QTY_CH3] ,[TOTAL_QTY_CH3_GEFT] ,[TYPE_PRICE] ,[TYPE_CH_CODE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_OFFER  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_OFFERS************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_OFFERS ([OFFER_CODE] ,[OFFER_NAME] ,[DISCOUNT_PERCENT] ,[DISCOUNT_AMOUNT] ,[TOTAL_USA] ,[TOTAL_IQ] ,[START_DATE] ,[END_DATE])
							                              SELECT [OFFER_CODE] ,[OFFER_NAME] ,[DISCOUNT_PERCENT] ,[DISCOUNT_AMOUNT] ,[TOTAL_USA] ,[TOTAL_IQ] ,[START_DATE] ,[END_DATE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_OFFERS  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_OFFERS_DETAILS************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_OFFERS_DETAILS ([OFFER_CODE] ,[ITEM_CODE] ,[QTY] ,[PRICE])
							                                      SELECT [OFFER_CODE] ,[ITEM_CODE] ,[QTY] ,[PRICE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_OFFERS_DETAILS  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
--*********************T_PATH_BACKUP************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_PATH_BACKUP ([PATH_BACKUP] ,[C_DATE] ,[C_TIME])
							                                   SELECT [PATH_BACKUP] ,[C_DATE] ,[C_TIME] FROM ''+ @OLD_DB_NAME +N''.dbo.T_PATH_BACKUP  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_PARAMETERS************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_PARAMETERS ([P_CODE] ,[P_TYPE] ,[P_VALUE] ,[P_DESC])
							                                      SELECT [P_CODE] ,[P_TYPE] ,[P_VALUE] ,[P_DESC] FROM ''+ @OLD_DB_NAME +N''.dbo.T_PARAMETERS  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_PRINTER************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_PRINTER ([PRINTER_NAME] ,[DEVICE_NAME] ,[IS_SCALE] ,[STORE_CODE])
							                               SELECT [PRINTER_NAME] ,[DEVICE_NAME] ,[IS_SCALE] ,[STORE_CODE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_PRINTER  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_PRINTER_STORE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_PRINTER_STORE ([PRINTER_ID] ,[CATEGORY_CODE])
							                               SELECT [PRINTER_ID] ,[CATEGORY_CODE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_PRINTER_STORE  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_RECEVER_ORDER************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_RECEVER_ORDER ([RECEVER_NAME] ,[PHONE_1] ,[PHONE_2] ,[ZONE_NAME] ,[ADDRESS] ,[NOTE] ,[MANDOOB_CODE] ,[USER_CODE] ,[ACTIVE])
							                                     SELECT [RECEVER_NAME] ,[PHONE_1] ,[PHONE_2] ,[ZONE_NAME] ,[ADDRESS] ,[NOTE] ,[MANDOOB_CODE] ,[USER_CODE] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_RECEVER_ORDER  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
--*********************T_REGION_SHIP************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_REGION_SHIP ([REGION_CODE] ,[REGION_NAME] ,[REGION_COST] ,[REGION_SELL] ,[CLIENT_CODE] ,[ACTIVE])
							                                   SELECT [REGION_CODE] ,[REGION_NAME] ,[REGION_COST] ,[REGION_SELL] ,[CLIENT_CODE] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_REGION_SHIP WHERE [ACTIVE]=1 ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_REPORT************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_REPORT ([ID] ,[RPT_NAME] ,[SCREEN_NAME] ,[FOLDER_PATH] ,[RPT_PATH] ,[IS_SHOW],[ID_GROUP] ,[PARAM_SELECT])
							                              SELECT [ID] ,[RPT_NAME] ,[SCREEN_NAME] ,[FOLDER_PATH] ,[RPT_PATH] ,[IS_SHOW],[ID_GROUP] ,[PARAM_SELECT] FROM ''+ @OLD_DB_NAME +N''.dbo.T_REPORT  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_REPORT_SPECIAL************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_REPORT_SPECIAL ([T_ID] ,[REPORT_NAME] ,[REPORT_HEADER] ,[IS_LANDSCAPE] ,[IS_RTL] ,[SS_SQL] ,[SORT] ,[SUMMARY_COL])
																  SELECT [T_ID] ,[REPORT_NAME] ,[REPORT_HEADER] ,[IS_LANDSCAPE] ,[IS_RTL] ,[SS_SQL] ,[SORT] ,[SUMMARY_COL] FROM ''+ @OLD_DB_NAME +N''.dbo.T_REPORT_SPECIAL  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_REPORT_USER************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_REPORT_USER ([D_DATE] ,[USER_NAME] ,[TOTAL_COST] ,[TOTAL_SELL] ,[TOTAL_ARBAH])
										                       SELECT [D_DATE] ,[USER_NAME] ,[TOTAL_COST] ,[TOTAL_SELL] ,[TOTAL_ARBAH] FROM ''+ @OLD_DB_NAME +N''.dbo.T_REPORT_USER  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_SALES_SHIPPING************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_SALES_SHIPPING ([SHIP_CODE] ,[SHIP_NAME] ,[ACCOUNT_CODE] ,[SHIP_COST] ,[IS_AMO_MANDOOB] ,[IS_AMO_CLIENT] ,[SHIP_COST_CLIENT])
										                          SELECT [SHIP_CODE] ,[SHIP_NAME] ,[ACCOUNT_CODE] ,[SHIP_COST] ,[IS_AMO_MANDOOB] ,[IS_AMO_CLIENT] ,[SHIP_COST_CLIENT] FROM ''+ @OLD_DB_NAME +N''.dbo.T_SALES_SHIPPING  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_SERVER_MAIN************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_SERVER_MAIN ([T_ID] ,[IP_NAME] ,[SERVER_NAME] ,[USER_NAME] ,[USER_PASSWORD] ,[DATABASE_NAME])
										                       SELECT [T_ID] ,[IP_NAME] ,[SERVER_NAME] ,[USER_NAME] ,[USER_PASSWORD] ,[DATABASE_NAME] FROM ''+ @OLD_DB_NAME +N''.dbo.T_SERVER_MAIN  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
--*********************T_SETTING************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_SETTING ([PC_NAME] ,[ST_SKIN_NAME] ,[ST_SALES] ,[ST_PRINTER] ,[ST_DATE] ,[ST_COST] ,[ST_SETTING])
										                   SELECT [PC_NAME] ,[ST_SKIN_NAME] ,[ST_SALES] ,[ST_PRINTER] ,[ST_DATE] ,[ST_COST] ,[ST_SETTING] FROM ''+ @OLD_DB_NAME +N''.dbo.T_SETTING  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
--*********************T_SETTING_DISCOUNT************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_SETTING_DISCOUNT ([T_ID] ,[ST_SETTING])
										                            SELECT [T_ID] ,[ST_SETTING] FROM ''+ @OLD_DB_NAME +N''.dbo.T_SETTING_DISCOUNT  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_SMS_MASSAGE_TYPE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_SMS_MASSAGE_TYPE ([T_ID] ,[NAME] ,[MASSAGE])
										                            SELECT [T_ID] ,[NAME] ,[MASSAGE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_SMS_MASSAGE_TYPE  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
--*********************T_STAFF************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_STAFF ([STAFF_CODE] ,[STAFF_NAME] ,[STAF_PERCENTAGE] ,[STAFF_AMO] ,[APP_USER_NAME] ,[APP_PASSWORD] ,[ACTIVE])
										                 SELECT [STAFF_CODE] ,[STAFF_NAME] ,[STAF_PERCENTAGE] ,[STAFF_AMO] ,[APP_USER_NAME] ,[APP_PASSWORD] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_STAFF WHERE [ACTIVE]=1  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';






--*********************T_STORE_BOX***** T_BUY_DETAILS*******************

 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_STORE_BOX ([BILL_BRANCH] ,[BILL_NUMBER] ,[BILL_DATE] ,[B_CODE] ,[WAJBA_CODE] ,[STORE_CODE] ,[EXP_DATE] ,[ITEM_CODE] ,[UNIT_CODE] ,[ST_IN] ,[ST_OUT] ,[QTY_UNIT] ,[C_DATE] ,[IS_AVG_COST] ,[AVG_COST] ,[ACTIVE])
										                  SELECT ''''''+ @COMPANY_TITAL+N''0''+'''''', 0,GETDATE(),0,2,[STORE_CODE],GETDATE(),[ITEM_CODE] ,[UNIT_CODE],[BALANCE],0,1,GETDATE(),1,[PRICE_COST],1 FROM ''+ @OLD_DB_NAME +N''.dbo.V_STORE_BOX_STORE_ALL WHERE ITEM_CODE>0 AND UNIT_CODE=1 ORDER BY ITEM_CODE ASC   ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';


 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_BUY_DETAILS ([BILL_BRANCH] ,[BILL_NUMBER] ,[ITEM_CODE] ,[QTY] ,[UNIT_NAME] ,[UNIT_QTY] ,[STORE_CODE] ,[EXP_DATE] ,[PRICE_BUY] ,[CURRANCY_EQUAL] ,[PRICE] ,[TOTAL] ,[EXPENSES] ,[TOTAL_EXPENSES] ,[COST] ,[TOTAL_COST] ,[SELL1] ,[SELL2] ,[C_DATE] ,[ACTIVE] ,[OFFER_CODE] ,[IS_USED] ,[QTY_IN] ,[QTY_OUT] ,[TOTAL_OUT] ,[EXPENSES_OUT] ,[DISCOUNT_PERCENT_ITEM] ,[DISCOUNT_AMOUNT_ITEM] )
										                  SELECT ''''''+ @COMPANY_TITAL+N''0''+'''''', 0 ,  [ITEM_CODE] ,[BALANCE],[UNIT_NAME] , 1,      [STORE_CODE],  GETDATE(), [PRICE_COST],    1, [PRICE_COST],[PRICE_COST]*[BALANCE],0,0                   ,[PRICE_COST],[PRICE_COST]*[BALANCE],0,0 ,GETDATE(),0       , 0         ,0           ,[BALANCE],0         ,0,0                          ,0                      ,0   FROM ''+ @OLD_DB_NAME +N''.dbo.V_STORE_BOX_STORE_ALL WHERE ITEM_CODE>0 AND UNIT_CODE=1 ORDER BY ITEM_CODE ASC   ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
----*********************T_STORE_BOX***** T_BUY_DETAILS*******************

-- SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_STORE_BOX ([BILL_BRANCH] ,[BILL_NUMBER] ,[BILL_DATE] ,[B_CODE] ,[WAJBA_CODE] ,[STORE_CODE] ,[EXP_DATE] ,[ITEM_CODE] ,[UNIT_CODE] ,[ST_IN] ,[ST_OUT] ,[QTY_UNIT] ,[C_DATE] ,[IS_AVG_COST] ,[AVG_COST] ,[ACTIVE])
--										                  SELECT ''''''+ @COMPANY_TITAL+N''0''+'''''', 0,GETDATE(),0,2,[STORE_CODE],GETDATE(),[ITEM_CODE] ,[UNIT_CODE],[BALANCE],0,1,GETDATE(),1,[PRICE_AVG_COST],1 FROM ''+ @OLD_DB_NAME +N''.dbo.V_STORE_BOX_STORE_ALL WHERE ITEM_CODE>0 AND UNIT_CODE=1 ORDER BY ITEM_CODE ASC   ''
--EXEC (@SQL_STR);
--SET @SQL_STR=N'''';


-- SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_BUY_DETAILS ([BILL_BRANCH] ,[BILL_NUMBER] ,[ITEM_CODE] ,[QTY] ,[UNIT_NAME] ,[UNIT_QTY] ,[STORE_CODE] ,[EXP_DATE] ,[PRICE_BUY] ,[CURRANCY_EQUAL] ,[PRICE] ,[TOTAL] ,[EXPENSES] ,[TOTAL_EXPENSES] ,[COST] ,[TOTAL_COST] ,[SELL1] ,[SELL2] ,[C_DATE] ,[ACTIVE] ,[OFFER_CODE] ,[IS_USED] ,[QTY_IN] ,[QTY_OUT] ,[TOTAL_OUT] ,[EXPENSES_OUT] ,[DISCOUNT_PERCENT_ITEM] ,[DISCOUNT_AMOUNT_ITEM] )
--										                  SELECT ''''''+ @COMPANY_TITAL+N''0''+'''''', 0 ,  [ITEM_CODE] ,[BALANCE],[UNIT_NAME] , 1,      [STORE_CODE],  GETDATE(), [PRICE_AVG_COST],    1, [PRICE_AVG_COST],[PRICE_AVG_COST]*[BALANCE],0,0                   ,[PRICE_AVG_COST],[PRICE_AVG_COST]*[BALANCE],0,0 ,GETDATE(),0       , 0         ,0           ,[BALANCE],0         ,0,0                          ,0                      ,0   FROM ''+ @OLD_DB_NAME +N''.dbo.V_STORE_BOX_STORE_ALL WHERE ITEM_CODE>0 AND UNIT_CODE=1 ORDER BY ITEM_CODE ASC   ''
--EXEC (@SQL_STR);
--SET @SQL_STR=N'''';


 

--*********************T_STORE_TYPE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_STORE_TYPE ([STORE_CODE] ,[STORE_NAME] ,[IS_USED] ,[FOR_SALES] ,[FOR_BUY] ,[STORE_ADDRESS] ,[ACTIVE])
										                      SELECT [STORE_CODE] ,[STORE_NAME] ,[IS_USED] ,[FOR_SALES] ,[FOR_BUY] ,[STORE_ADDRESS] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_STORE_TYPE  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_SUBSCRIPTION************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_SUBSCRIPTION ([SUBSCRIPTION_CODE] ,[SUBSCRIPTION_NAME] ,[DAYS] ,[DAY_TYPE_CODE] ,[SUBSCRIPTION_AMO] ,[GATE_SN] ,[GATE_NAME])
										                        SELECT [SUBSCRIPTION_CODE] ,[SUBSCRIPTION_NAME] ,[DAYS] ,[DAY_TYPE_CODE] ,[SUBSCRIPTION_AMO] ,[GATE_SN] ,[GATE_NAME] FROM ''+ @OLD_DB_NAME +N''.dbo.T_SUBSCRIPTION  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_TAG_FILTER************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_TAG_FILTER ([FILTER_CODE] ,[FILTER_NAME])
										                      SELECT [FILTER_CODE] ,[FILTER_NAME] FROM ''+ @OLD_DB_NAME +N''.dbo.T_TAG_FILTER  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_TAG_PROCCESS************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_TAG_PROCCESS ([TAG_PROCCESS_CODE] ,[TAG_PROCCESS_NAME] ,[FILTER_CODE] ,[ACCOUNT_CODE])
										                        SELECT [TAG_PROCCESS_CODE] ,[TAG_PROCCESS_NAME] ,[FILTER_CODE] ,[ACCOUNT_CODE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_TAG_PROCCESS  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
 
--*********************T_TYPE_PRICE_SELL************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_TYPE_PRICE_SELL ([TYPE_PRICE_CODE] ,[TYPE_PRICE_NAME] ,[SECURETY_CODE] ,[COL_NAME])
										                           SELECT [TYPE_PRICE_CODE] ,[TYPE_PRICE_NAME] ,[SECURETY_CODE] ,[COL_NAME] FROM ''+ @OLD_DB_NAME +N''.dbo.T_TYPE_PRICE_SELL  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_USERS************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_USERS ([USER_CODE] ,[USER_NAME] ,[USER_PWD] ,[LEVEL_CODE] ,[ACTIVE] ,[LOG_IN] ,[BOX_CODE] ,[IS_ENC] ,[SECURETY_CODE] ,[MANDOOB_CODE] ,[STORE_CODE] ,[TYPE_PRICE_CODE] ,[APP_PWD] ,[LEVEL_APP] ,[DRIVER_CODE] ,[TYPE_CH_OFFER],[PERMISSION])
										                 SELECT [USER_CODE] ,[USER_NAME] ,[USER_PWD] ,[LEVEL_CODE] ,[ACTIVE] ,[LOG_IN] ,[BOX_CODE] ,[IS_ENC] ,[SECURETY_CODE] ,[MANDOOB_CODE] ,[STORE_CODE] ,[TYPE_PRICE_CODE] ,[APP_PWD] ,[LEVEL_APP] ,[DRIVER_CODE] ,[TYPE_CH_OFFER],[PERMISSION] FROM ''+ @OLD_DB_NAME +N''.dbo.T_USERS WHERE [ACTIVE]=1 ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';



--*********************T_USERS_MAWJOOD************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_USERS_MAWJOOD ([USER_CODE] ,[USER_NAME_M] ,[USER_PWD_M])
										                         SELECT [USER_CODE] ,[USER_NAME_M] ,[USER_PWD_M] FROM ''+ @OLD_DB_NAME +N''.dbo.T_USERS_MAWJOOD  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';


--*********************T_USERS_TAG************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_USERS_TAG ([USER_TAG_CODE] ,[USER_TAG_NAME] ,[USER_CODE])
										                     SELECT [USER_TAG_CODE] ,[USER_TAG_NAME] ,[USER_CODE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_USERS_TAG  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************T_VIDEO_LINK************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_VIDEO_LINK ([TITEL] ,[LENK_URL] ,[ACTIVE])
										                      SELECT [TITEL] ,[LENK_URL] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.T_VIDEO_LINK  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
 
--*********************T_VISITOR************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.T_VISITOR ([T_ID] ,[D_DATE] ,[D_TIME] ,[CLIENT_CODE] ,[VISITOR_TYPE] ,[VISITOR_NO] ,[IS_FINISH])
										                   SELECT [T_ID] ,[D_DATE] ,[D_TIME] ,[CLIENT_CODE] ,[VISITOR_TYPE] ,[VISITOR_NO] ,[IS_FINISH] FROM ''+ @OLD_DB_NAME +N''.dbo.T_VISITOR WHERE [IS_FINISH]=0 ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TA_PANDEL************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TA_PANDEL ([PANDEL_CODE] ,[PANDEL_NAME] ,[PANDEL_DESCRIPTION] ,[ACTIVE])
										                   SELECT [PANDEL_CODE] ,[PANDEL_NAME] ,[PANDEL_DESCRIPTION] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.TA_PANDEL WHERE [ACTIVE]=1 ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TA_STUDENT************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TA_STUDENT ([STUDENT_CODE] ,[STUDENT_NAME] ,[STUDENT_PHONE] ,[STUDENT_SCHOOL] ,[STUDENT_FATHER] ,[ST_GROUP_CODE] ,[STUDENT_CARD] ,[GENDER] ,[S1_DATE] ,[S2_DATE] ,[S3_DATE] ,[S4_DATE] ,[S1_CASH] ,[S2_CASH] ,[S3_CASH] ,[S4_CASH] ,[COUNT_ON] ,[COUNT_OFF] ,[IMG_PATH] ,[IMG_64] ,[C_DATE] ,[USER_CREATE] ,[TYPE_STUDENT] ,[ACTIVE] ,[NOTE] ,[IMG_64_SHOW] ,[IMG_PATH_SHOW],[ACCOUNT_CODE] ,[TOTAL_AMO])
										                    SELECT [STUDENT_CODE] ,[STUDENT_NAME] ,[STUDENT_PHONE] ,[STUDENT_SCHOOL] ,[STUDENT_FATHER] ,[ST_GROUP_CODE] ,[STUDENT_CARD] ,[GENDER] ,[S1_DATE] ,[S2_DATE] ,[S3_DATE] ,[S4_DATE] ,[S1_CASH] ,[S2_CASH] ,[S3_CASH] ,[S4_CASH] ,[COUNT_ON] ,[COUNT_OFF] ,[IMG_PATH] ,[IMG_64] ,[C_DATE] ,[USER_CREATE] ,[TYPE_STUDENT] ,[ACTIVE] ,[NOTE] ,[IMG_64_SHOW] ,[IMG_PATH_SHOW],[ACCOUNT_CODE] ,[TOTAL_AMO] FROM ''+ @OLD_DB_NAME +N''.dbo.TA_STUDENT WHERE [ACTIVE]=1 ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TA_STUDENT_DEGREE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TA_STUDENT_DEGREE ([STUDENT_CODE] ,[D_NAME] ,[D1] ,[D2] ,[D3] ,[D4] ,[D5] ,[D6] ,[D7] ,[D8] ,[D9] ,[D10] ,[D11] ,[D12] ,[D13] ,[D14] ,[D15] ,[D16] ,[D17] ,[D18] ,[D19] ,[D20])
										                           SELECT [STUDENT_CODE] ,[D_NAME] ,[D1] ,[D2] ,[D3] ,[D4] ,[D5] ,[D6] ,[D7] ,[D8] ,[D9] ,[D10] ,[D11] ,[D12] ,[D13] ,[D14] ,[D15] ,[D16] ,[D17] ,[D18] ,[D19] ,[D20] FROM ''+ @OLD_DB_NAME +N''.dbo.TA_STUDENT_DEGREE   ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';
 

--*********************TA_STUDENT_ENTRY************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TA_STUDENT_ENTRY ([STUDENT_CODE] ,[E_DATE] ,[DAY_NAME] ,[GATE_SN] ,[IS_ENTRY])
										                          SELECT [STUDENT_CODE] ,[E_DATE] ,[DAY_NAME] ,[GATE_SN] ,[IS_ENTRY] FROM ''+ @OLD_DB_NAME +N''.dbo.TA_STUDENT_ENTRY   ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TA_STUDENT_GROUP************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TA_STUDENT_GROUP ([ST_GROUP_CODE] ,[ST_GROUP_NAME] ,[DAYS_CODE] ,[ACTIVE] ,[START_DATE] ,[END_DATE])
										                          SELECT [ST_GROUP_CODE] ,[ST_GROUP_NAME] ,[DAYS_CODE] ,[ACTIVE] ,[START_DATE] ,[END_DATE] FROM ''+ @OLD_DB_NAME +N''.dbo.TA_STUDENT_GROUP  WHERE [ACTIVE]=1 ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TB_ATTACH_TYPE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_ATTACH_TYPE ([ATTACH_TYPE_CODE] ,[ATTACH_TYPE_NAME])
										                        SELECT [ATTACH_TYPE_CODE] ,[ATTACH_TYPE_NAME] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_ATTACH_TYPE    ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TB_ATTACHMENT************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_ATTACHMENT ([ATTACH_NAME] ,[ATTACH_TYPE_CODE] ,[HOUSE_CODE] ,[ATTACH_PATH] ,[ATTACH_URL] ,[ATTACH_EXTERNAL_URL] ,[ATTACH_NOTE] ,[ATTACH_JSON] ,[SECURETY_CODE] ,[C_DATE] ,[USER_CREATE] ,[C_DELETE] ,[ACTIVE])
										                        SELECT [ATTACH_NAME] ,[ATTACH_TYPE_CODE] ,[HOUSE_CODE] ,[ATTACH_PATH] ,[ATTACH_URL] ,[ATTACH_EXTERNAL_URL] ,[ATTACH_NOTE] ,[ATTACH_JSON] ,[SECURETY_CODE] ,[C_DATE] ,[USER_CREATE] ,[C_DELETE] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_ATTACHMENT  WHERE [ACTIVE]=1  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';


 

--*********************TB_BUILDING************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_BUILDING ([BUILDING_CODE] ,[BUILDING_NAME] ,[ACTIVE])
										                     SELECT [BUILDING_CODE] ,[BUILDING_NAME] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_BUILDING  WHERE [ACTIVE]=1  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TB_CLIENT_INFO************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_CLIENT_INFO ([HOUSE_CODE] ,[BILL_NO] ,[CLIENT_CODE] ,[CLIENT_NAME] ,[JENSIA] ,[SAKAN_NO] ,[HWIA_NO] ,[SEJEL] ,[SAHEFA] ,[DAERA_AHWAL] ,[HWIA_ISDAR_DATE] ,[WATANIA_NO] ,[WATANIA_ISDAR_DATE] ,[SHAHADA_JENSIA_NO] ,[SHAHADA_ISDAR_DATE] ,[SADIRA_FROM] ,[AL_MUDERIA] ,[PHONE_NO] ,[BILL_NUMBER] ,[SELL_AMO] ,[DEISCOUNT_AMO] ,[NET_AMO] ,[IVC_CODE])
										                        SELECT [HOUSE_CODE] ,[BILL_NO] ,[CLIENT_CODE] ,[CLIENT_NAME] ,[JENSIA] ,[SAKAN_NO] ,[HWIA_NO] ,[SEJEL] ,[SAHEFA] ,[DAERA_AHWAL] ,[HWIA_ISDAR_DATE] ,[WATANIA_NO] ,[WATANIA_ISDAR_DATE] ,[SHAHADA_JENSIA_NO] ,[SHAHADA_ISDAR_DATE] ,[SADIRA_FROM] ,[AL_MUDERIA] ,[PHONE_NO] ,[BILL_NUMBER] ,[SELL_AMO] ,[DEISCOUNT_AMO] ,[NET_AMO] ,[IVC_CODE] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_CLIENT_INFO    ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TB_FLOOR************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_FLOOR ([FLOOR_CODE] ,[FLOOR_NAME] ,[ACTIVE])
										                  SELECT [FLOOR_CODE] ,[FLOOR_NAME] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_FLOOR  WHERE [ACTIVE]=1   ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TB_HOUSE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_HOUSE ([HOUSE_CODE] ,[HOUSE_NAME] ,[HOUSE_NO] ,[HOUSE_TYPE_CODE] ,[HOUSE_JSON] ,[CLIENT_CODE] ,[CLIENT_CODE_RENTER] ,[ZONE_CODE] ,[BUILDING_CODE] ,[FLOOR_CODE] ,[ACTIVE] ,[BILL_NUMBER] ,[SELL_DATE] ,[DELIVERY_DATE] ,[MAINTENANCE_END_DATE] ,[HOUSE_AREA])
										                  SELECT [HOUSE_CODE] ,[HOUSE_NAME] ,[HOUSE_NO] ,[HOUSE_TYPE_CODE] ,[HOUSE_JSON] ,[CLIENT_CODE] ,[CLIENT_CODE_RENTER] ,[ZONE_CODE] ,[BUILDING_CODE] ,[FLOOR_CODE] ,[ACTIVE] ,[BILL_NUMBER] ,[SELL_DATE] ,[DELIVERY_DATE] ,[MAINTENANCE_END_DATE] ,[HOUSE_AREA] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_HOUSE  WHERE [ACTIVE]=1   ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TB_HOUSE_TOKEN************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_HOUSE_TOKEN ([HOUSE_CODE] ,[TOKEN] ,[ACTIVE])
										                  SELECT [HOUSE_CODE] ,[TOKEN] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_HOUSE_TOKEN  WHERE [ACTIVE]=1   ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TB_HOUSE_TYPE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_HOUSE_TYPE ([HOUSE_TYPE_CODE] ,[HOUSE_TYPE_NAME])
										                       SELECT [HOUSE_TYPE_CODE] ,[HOUSE_TYPE_NAME] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_HOUSE_TYPE   ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';


--*********************TB_MAINTENANCE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_MAINTENANCE ([HOUSE_CODE] ,[CLIENT_CODE] ,[MAIN_NAME] ,[MAIN_TIME] ,[MAIN_USER] ,[STATUES] ,[USER_CREATE] ,[C_DATE] ,[BILL_NUMBER] ,[ATTACH_CODE])
										                        SELECT [HOUSE_CODE] ,[CLIENT_CODE] ,[MAIN_NAME] ,[MAIN_TIME] ,[MAIN_USER] ,[STATUES] ,[USER_CREATE] ,[C_DATE] ,[BILL_NUMBER] ,[ATTACH_CODE] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_MAINTENANCE   ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TB_MAINTENANCE_STATES************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_MAINTENANCE_STATES ([STATES_CODE] ,[STATES_NAME])
										                               SELECT [STATES_CODE] ,[STATES_NAME] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_MAINTENANCE_STATES   ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TB_NEWS************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_NEWS ([NEWS_NAME] ,[NEWS_TITEL] ,[NEWS_TYPE_CODE] ,[HOUSE_CODE] ,[NEWS_PATH] ,[NEWS_URL] ,[NEWS_EXTERNAL_URL] ,[NEWS_NOTE] ,[NEWS_JSON] ,[TYPE_SENDER] ,[C_DATE] ,[USER_CREATE] ,[C_DELETE] ,[ACTIVE] ,[IS_READ])
										                 SELECT [NEWS_NAME] ,[NEWS_TITEL] ,[NEWS_TYPE_CODE] ,[HOUSE_CODE] ,[NEWS_PATH] ,[NEWS_URL] ,[NEWS_EXTERNAL_URL] ,[NEWS_NOTE] ,[NEWS_JSON] ,[TYPE_SENDER] ,[C_DATE] ,[USER_CREATE] ,[C_DELETE] ,[ACTIVE] ,[IS_READ] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_NEWS  WHERE [ACTIVE]=1   ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TB_NEWS_TYPE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_NEWS_TYPE ([NEWS_TYPE_CODE] ,[NEWS_TYPE_NAME])
										                      SELECT [NEWS_TYPE_CODE] ,[NEWS_TYPE_NAME] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_NEWS_TYPE    ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TB_PROJECT************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_PROJECT ([PROJECT_CODE] ,[PROJECT_NAME] ,[PROJECT_NO] ,[PROJECT_NO_VALUE] ,[ACCOUNT_CODE] ,[ACTIVE])
										                    SELECT [PROJECT_CODE] ,[PROJECT_NAME] ,[PROJECT_NO] ,[PROJECT_NO_VALUE] ,[ACCOUNT_CODE] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_PROJECT  WHERE [ACTIVE]=1   ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TB_PROJECT_SUPPLIER************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_PROJECT_SUPPLIER ([PROJECT_CODE] ,[CLIENT_CODE] ,[PROJECT_NO])
										                             SELECT [PROJECT_CODE] ,[CLIENT_CODE] ,[PROJECT_NO] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_PROJECT_SUPPLIER    ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TB_RELATION_CLIENT************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_RELATION_CLIENT ([CLIENT_CODE] ,[REL_TYPE_CODE] ,[REL_NAME] ,[REL_GENDER] ,[REL_BARTHDAY] ,[REL_BARCODE] ,[REL_CARD] ,[REL_PATH] ,[REL_URL] ,[REL_REGISTER] ,[REL_EXPIRED] ,[HOUSE_CODE] ,[REL_CAR_NO] ,[REL_CAR_TYPE] ,[REL_CAR_MODEL] ,[REL_CAR_COLOR] ,[REL_NOTE] ,[REL_BLOACK] ,[REL_JSON] ,[C_DATE] ,[USER_CREATE] ,[C_UPDATE] ,[USER_UPDATE] ,[ACTIVE])
										                            SELECT [CLIENT_CODE] ,[REL_TYPE_CODE] ,[REL_NAME] ,[REL_GENDER] ,[REL_BARTHDAY] ,[REL_BARCODE] ,[REL_CARD] ,[REL_PATH] ,[REL_URL] ,[REL_REGISTER] ,[REL_EXPIRED] ,[HOUSE_CODE] ,[REL_CAR_NO] ,[REL_CAR_TYPE] ,[REL_CAR_MODEL] ,[REL_CAR_COLOR] ,[REL_NOTE] ,[REL_BLOACK] ,[REL_JSON] ,[C_DATE] ,[USER_CREATE] ,[C_UPDATE] ,[USER_UPDATE] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_RELATION_CLIENT   WHERE [ACTIVE]=1   ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TB_RELATION_TYPE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_RELATION_TYPE ([REL_TYPE_CODE] ,[REL_TYPE_NAME])
										                          SELECT [REL_TYPE_CODE] ,[REL_TYPE_NAME] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_RELATION_TYPE    ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TB_RENTER_HOUSE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_RENTER_HOUSE ([CLIENT_CODE] ,[HOUSE_CODE] ,[STATUS_HOUSE] ,[RENTER_NAME])
										                         SELECT [CLIENT_CODE] ,[HOUSE_CODE] ,[STATUS_HOUSE] ,[RENTER_NAME] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_RENTER_HOUSE    ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';


--*********************TB_SERVICE************************
 SET @SQL_STR=N'' SET IDENTITY_INSERT '' + @NEW_DB_NAME + N''.[dbo].[TB_SERVICE] ON ; INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_SERVICE ([SERVICE_CODE] ,[SERVICE_NAME] ,[SERVICE_TYPE_LOOP] ,[SERVICE_EVERY] ,[SERVICE_ACCOUNT_CODE_INCOME] ,[SERVICE_ACCOUNT_CODE_OUTCOME] ,[SERVICE_AMO] ,[SERVICE_NOTE] ,[START_DAY] ,[START_DATE] ,[NEXT_DATE])
										                    SELECT [SERVICE_CODE] ,[SERVICE_NAME] ,[SERVICE_TYPE_LOOP] ,[SERVICE_EVERY] ,[SERVICE_ACCOUNT_CODE_INCOME] ,[SERVICE_ACCOUNT_CODE_OUTCOME] ,[SERVICE_AMO] ,[SERVICE_NOTE] ,[START_DAY] ,[START_DATE] ,[NEXT_DATE] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_SERVICE  SET IDENTITY_INSERT '' + @NEW_DB_NAME + N''.[dbo].[TB_SERVICE] OFF;  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';


--*********************TB_SERVICE_DETAILS************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_SERVICE_DETAILS ([SERVICE_CODE] ,[SERVICE_NAME] ,[SERVICE_TYPE_LOOP] ,[SERVICE_EVERY] ,[SERVICE_ACCOUNT_CODE_INCOME] ,[SERVICE_ACCOUNT_CODE_OUTCOME] ,[SERVICE_AMO] ,[SERVICE_NOTE] ,[START_DAY] ,[START_DATE] ,[NEXT_DATE] ,[REGENERATED] ,[ACCOUNT_CODE] ,[HOUSE_CODE])
							                                        SELECT [SERVICE_CODE] ,[SERVICE_NAME] ,[SERVICE_TYPE_LOOP] ,[SERVICE_EVERY] ,[SERVICE_ACCOUNT_CODE_INCOME] ,[SERVICE_ACCOUNT_CODE_OUTCOME] ,[SERVICE_AMO] ,[SERVICE_NOTE] ,[START_DAY] ,[START_DATE] ,[NEXT_DATE] ,[REGENERATED] ,[ACCOUNT_CODE] ,[HOUSE_CODE] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_SERVICE_DETAILS  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';


--*********************TB_ZONE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TB_ZONE ([ZONE_CODE] ,[ZONE_NAME] ,[ACTIVE])
							                             SELECT [ZONE_CODE] ,[ZONE_NAME] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.TB_ZONE WHERE [ACTIVE]=1 ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';


--*********************TH_ROOM************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TH_ROOM ([ROOM_CODE] ,[ROOM_NAME] ,[ROOM_NUMBER] ,[ROOM_TYPE_CODE] ,[FLOOR_CODE] ,[ROOM_PRICE] ,[ROOM_PRICE_MIN] ,[ROOM_PRICE_MAX] ,[ROOM_PRICE_SPECIAL] ,[ROOM_STATUS_CODE] ,[ROOM_GUESTS_NO] ,[ROOM_NOTE] ,[ROOM_FEATURE_CODE] ,[ROOM_FEATURE_NAME] ,[ACTIVE])
							                             SELECT [ROOM_CODE] ,[ROOM_NAME] ,[ROOM_NUMBER] ,[ROOM_TYPE_CODE] ,[FLOOR_CODE] ,[ROOM_PRICE] ,[ROOM_PRICE_MIN] ,[ROOM_PRICE_MAX] ,[ROOM_PRICE_SPECIAL] ,[ROOM_STATUS_CODE] ,[ROOM_GUESTS_NO] ,[ROOM_NOTE] ,[ROOM_FEATURE_CODE] ,[ROOM_FEATURE_NAME] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.TH_ROOM WHERE [ACTIVE]=1 ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';


--*********************TH_ROOM_FLOOR************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TH_ROOM_FLOOR ([FLOOR_CODE] ,[FLOOR_NAME] ,[FLOOR_COLOR] ,[ACTIVE])
							                                   SELECT [FLOOR_CODE] ,[FLOOR_NAME] ,[FLOOR_COLOR] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.TH_ROOM_FLOOR WHERE [ACTIVE]=1 ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';

--*********************TH_ROOM_IMAGE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TH_ROOM_IMAGE ([ROOM_CODE] ,[IMG_NOTE] ,[IMG_PATH] ,[IS_MAIN])
							                                   SELECT [ROOM_CODE] ,[IMG_NOTE] ,[IMG_PATH] ,[IS_MAIN] FROM ''+ @OLD_DB_NAME +N''.dbo.TH_ROOM_IMAGE   ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';


--*********************TH_ROOM_STATUS************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TH_ROOM_STATUS ([ROOM_STATUS_CODE] ,[ROOM_STATUS_NAME] ,[ROOM_STATUS_COLOR] ,[ROOM_STATUS_CSS] ,[ACTIVE])
							                                    SELECT [ROOM_STATUS_CODE] ,[ROOM_STATUS_NAME] ,[ROOM_STATUS_COLOR] ,[ROOM_STATUS_CSS] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.TH_ROOM_STATUS  WHERE [ACTIVE]=1  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';


--*********************TH_ROOM_TYPE************************
 SET @SQL_STR=N'' INSERT INTO '' + @NEW_DB_NAME + N''.dbo.TH_ROOM_TYPE ([ROOM_TYPE_CODE] ,[ROOM_TYPE_NAME] ,[ROOM_TYPE_COLOR] ,[ACTIVE])
							                                  SELECT [ROOM_TYPE_CODE] ,[ROOM_TYPE_NAME] ,[ROOM_TYPE_COLOR] ,[ACTIVE] FROM ''+ @OLD_DB_NAME +N''.dbo.TH_ROOM_TYPE  WHERE [ACTIVE]=1  ''
EXEC (@SQL_STR);
SET @SQL_STR=N'''';








 

SET @SUBMIT_fLAG=1

RETTTTT:
COMMIT
	IF @@ERROR <>0
	BEGIN
	ROLLBACK 
 
	SET @SUBMIT_fLAG=0
	RETURN
	END

return
 

END	--END OF PROGRAM

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADD_CLIENTS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADD_CLIENTS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'





CREATE PROCEDURE [dbo].[P_API_ADD_CLIENTS]
@CLIENT_CODE INT,
@CLIENT_NAME NVARCHAR(MAX),
@CLIENT_TYPE INT,
@MANDOOB_CODE INT,
@CLIENT_PHONE NVARCHAR(MAX),
@CLIENT_EMAILE NVARCHAR(MAX),
@CLIENT_REGION NVARCHAR(MAX),
@CLIENT_ADDRESS NVARCHAR(MAX),
@CLIENT_BARCODE NVARCHAR(MAX),
@CLIENT_NOTE NVARCHAR(MAX),
@CLIENT_BUSINESS NVARCHAR(MAX),
@DISCOUNT_PERCENT  float ,
@USER_CREATE NVARCHAR(MAX),

@BALANCE_FIRST_USA float ,
@BALANCE_FIRST_IQ float  


AS
declare
@COUNT_NAME  INT,
@USER_CODE  INT,
@CURRANCY_CODE  INT,
@CURRANCY_USA float	,
@CURRANCY_IQ float	,
@CURRANCY_EQUAL float	,
@COMPANY_TITAL   NVARCHAR(MAX),
@DFF int

BEGIN TRAN
BEGIN
 
SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1

IF @CLIENT_CODE=2
BEGIN
SELECT @COUNT_NAME=COUNT(CLIENT_CODE)  FROM T_CLIENT WHERE CLIENT_PHONE=@CLIENT_PHONE
IF @COUNT_NAME>0
BEGIN
SELECT 0 AS ID, N''رقم الهاتف مضاف مسبقاً'' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
GOTO FINISH_ADD
END
ELSE
BEGIN
SET @CLIENT_NAME=@CLIENT_NAME + N'' - '' +@CLIENT_PHONE
END

SELECT @CLIENT_CODE= ISNULL(MAX(CLIENT_CODE),2100000) + 1 FROM T_CLIENT
END



IF @CLIENT_CODE=0
BEGIN
SELECT @COUNT_NAME=COUNT(CLIENT_CODE)  FROM T_CLIENT WHERE CLIENT_NAME=@CLIENT_NAME
IF @COUNT_NAME>0
BEGIN
SELECT 0 AS ID, N''اسم العميل مضاف مسبقاً'' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
GOTO FINISH_ADD
END
SELECT @CLIENT_CODE= ISNULL(MAX(CLIENT_CODE),2100000) + 1 FROM T_CLIENT
END

if not exists (select * from T_ACCOUNTS where ACCOUNT_CODE = @CLIENT_CODE )  INSERT INTO [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [C_DATE], [ACCOUNT_ACTIVE]) 
VALUES (@CLIENT_CODE, @CLIENT_NAME, 21, 1, 1, @CURRANCY_CODE, 2, 3, N'''', 3, 1, GETDATE(), 1)  
else 
UPDATE [dbo].[T_ACCOUNTS] SET [ACCOUNT_CODE] = @CLIENT_CODE, [ACCOUNT_NAME] = @CLIENT_NAME, [ACCOUNT_PARENT] = 21, [TYPE_ACCOUNT_CODE] = 1, [BRANCH_CODE] = 1, [CURRANCY_CODE] = @CURRANCY_CODE, [FINAL_CODE] = 2, [ACCOUNT_LEVEL] = 3, [ACCOUNT_NOTE] = N'''', [SECURETY_CODE] = 1, [ACCOUNT_ENTITY] = 1,  [ACCOUNT_ACTIVE] = 1  WHERE ACCOUNT_CODE=@CLIENT_CODE  


if not exists (select * from T_CLIENT where CLIENT_CODE = @CLIENT_CODE )  INSERT INTO [dbo].[T_CLIENT] ([CLIENT_CODE], [CLIENT_NAME], [CLIENT_TYPE], [ACCOUNT_CODE], [CURRANCY_CODE], [MANDOOB_CODE], [CLIENT_PHONE], [CLIENT_PHONE_SMS], [CLIENT_EMAILE], [CLIENT_REGION], [CLIENT_ADDRESS], [CLIENT_BARCODE], [CLIENT_CARD], [CLIENT_NOTE], [CLIENT_PIN_CODE], [DISCOUNT_PERCENT], [SECURETY_CODE], [MAX_DEBIT],  [CLIENT_BUSINESS],[CLIENT_ACTIVE], [C_DATE], [C_USER])
 VALUES (@CLIENT_CODE, @CLIENT_NAME, @CLIENT_TYPE, @CLIENT_CODE, @CURRANCY_CODE, @MANDOOB_CODE, @CLIENT_PHONE, N'''', @CLIENT_EMAILE, @CLIENT_REGION, @CLIENT_ADDRESS, @CLIENT_BARCODE, N'''', @CLIENT_NOTE, N'''', @DISCOUNT_PERCENT, 1, 0, @CLIENT_BUSINESS, 1, GETDATE(), @USER_CREATE)  
 else 
 UPDATE [dbo].[T_CLIENT] SET [CLIENT_CODE] = @CLIENT_CODE, [CLIENT_NAME] = @CLIENT_NAME, [CLIENT_TYPE] = @CLIENT_TYPE, [ACCOUNT_CODE] = @CLIENT_CODE, [CURRANCY_CODE] = @CURRANCY_CODE, [MANDOOB_CODE] = @MANDOOB_CODE, [CLIENT_PHONE] = @CLIENT_PHONE, [CLIENT_PHONE_SMS] = N'''', [CLIENT_EMAILE] = @CLIENT_EMAILE, [CLIENT_REGION] = @CLIENT_REGION, [CLIENT_ADDRESS] = @CLIENT_ADDRESS, [CLIENT_BARCODE] = @CLIENT_BARCODE, [CLIENT_CARD] = N'''', [CLIENT_NOTE] = @CLIENT_NOTE, [CLIENT_PIN_CODE] = N'''', [DISCOUNT_PERCENT] = @DISCOUNT_PERCENT, [SECURETY_CODE] = 1, [MAX_DEBIT] = 0, [CLIENT_BUSINESS] = @CLIENT_BUSINESS, [CLIENT_ACTIVE] = 1, [C_DATE] = GETDATE(), [C_USER] = @USER_CREATE  WHERE CLIENT_CODE=@CLIENT_CODE

 IF @BALANCE_FIRST_IQ<>0 OR @BALANCE_FIRST_USA <>0
 BEGIN
 DELETE FROM T_BOX WHERE BILL_NUMBER=0  AND B_CODE=13 AND  ACCOUNT_CODE=@CLIENT_CODE
 IF @CURRANCY_CODE=1
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=1/NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_IQ
END

ELSE
BEGIN
SELECT @CURRANCY_USA=NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_USA
END
SELECT TOP(1) @USER_CODE=ISNULL(USER_CODE,1) FROM T_USERS WHERE [USER_NAME] LIKE @USER_CREATE
INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE]) 
VALUES (@COMPANY_TITAL + N''0'', 0,N'''', (SELECT TOP(1)  ISNULL(MIN(BILL_DATE),GETDATE())  FROM T_BOX ), GETDATE(), 0, 13, 1, @CLIENT_CODE, N'''', @BALANCE_FIRST_USA, 0, @BALANCE_FIRST_IQ, 0, @CURRANCY_CODE, @CURRANCY_EQUAL,  N''الرصيد الافتتاحي'', 0, @USER_CODE, GETDATE(), 1)
 END





	SELECT @CLIENT_CODE AS ID, N''عملية الاضافة , تمت بنجاح ..  '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000


FINISH_ADD:
END	--END OF PROGRAM
commit






























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADD_CLIENTS_APP]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADD_CLIENTS_APP]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'






CREATE PROCEDURE [dbo].[P_API_ADD_CLIENTS_APP]
@CLIENT_CODE INT,
@CLIENT_NAME NVARCHAR(MAX),
@CLIENT_TYPE INT,
@MANDOOB_CODE INT,
@CLIENT_PHONE NVARCHAR(MAX),
@CLIENT_EMAILE NVARCHAR(MAX),
@CLIENT_REGION NVARCHAR(MAX),
@CLIENT_ADDRESS NVARCHAR(MAX),
@CLIENT_BARCODE NVARCHAR(MAX),
@CLIENT_NOTE NVARCHAR(MAX),
@CLIENT_BUSINESS NVARCHAR(MAX),
@DISCOUNT_PERCENT  float ,
@USER_CREATE NVARCHAR(MAX),
@LAT NVARCHAR(MAX),
@LNG NVARCHAR(MAX),
@TYPE_PRICE_CODE INT,
@BALANCE_FIRST_USA float ,
@BALANCE_FIRST_IQ float  


AS
declare
@COUNT_NAME  INT,
@USER_CODE  INT,
@CURRANCY_CODE  INT,
@CURRANCY_USA float	,
@CURRANCY_IQ float	,
@CURRANCY_EQUAL float	,
@COMPANY_TITAL   NVARCHAR(MAX),
@DFF int

BEGIN TRAN
BEGIN
 
SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1

IF @CLIENT_CODE=2
BEGIN
SELECT @COUNT_NAME=COUNT(CLIENT_CODE)  FROM T_CLIENT WHERE CLIENT_PHONE=@CLIENT_PHONE
IF @COUNT_NAME>0
BEGIN
SELECT 0 AS ID, N''رقم الهاتف مضاف مسبقاً'' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
GOTO FINISH_ADD
END
ELSE
BEGIN
SET @CLIENT_NAME=@CLIENT_NAME + N'' - '' +@CLIENT_PHONE
END

SELECT @CLIENT_CODE= ISNULL(MAX(CLIENT_CODE),2100000) + 1 FROM T_CLIENT
END



IF @CLIENT_CODE=0
BEGIN
SELECT @COUNT_NAME=COUNT(CLIENT_CODE)  FROM T_CLIENT WHERE CLIENT_NAME=@CLIENT_NAME
IF @COUNT_NAME>0
BEGIN
SELECT 0 AS ID, N''اسم العميل مضاف مسبقاً'' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
GOTO FINISH_ADD
END
SELECT @CLIENT_CODE= ISNULL(MAX(CLIENT_CODE),2100000) + 1 FROM T_CLIENT
END


if not exists (select * from T_ACCOUNTS where ACCOUNT_CODE = @CLIENT_CODE )  INSERT INTO [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [C_DATE], [ACCOUNT_ACTIVE]) 
VALUES (@CLIENT_CODE, @CLIENT_NAME, 21, 1, 1, @CURRANCY_CODE, 2, 3, N'''', 3, 1, GETDATE(), 1)  
else 
UPDATE [dbo].[T_ACCOUNTS] SET [ACCOUNT_CODE] = @CLIENT_CODE, [ACCOUNT_NAME] = @CLIENT_NAME, [ACCOUNT_PARENT] = 21, [TYPE_ACCOUNT_CODE] = 1, [BRANCH_CODE] = 1, [CURRANCY_CODE] = @CURRANCY_CODE, [FINAL_CODE] = 2, [ACCOUNT_LEVEL] = 3, [ACCOUNT_NOTE] = N'''', [SECURETY_CODE] = 1, [ACCOUNT_ENTITY] = 1,  [ACCOUNT_ACTIVE] = 1  WHERE ACCOUNT_CODE=@CLIENT_CODE  


if not exists (select * from T_CLIENT where CLIENT_CODE = @CLIENT_CODE )  INSERT INTO [dbo].[T_CLIENT] ([CLIENT_CODE], [CLIENT_NAME], [CLIENT_TYPE], [ACCOUNT_CODE], [CURRANCY_CODE], [MANDOOB_CODE], [CLIENT_PHONE], [CLIENT_PHONE_SMS], [CLIENT_EMAILE], [CLIENT_REGION], [CLIENT_ADDRESS], [CLIENT_BARCODE], [CLIENT_CARD], [CLIENT_NOTE], [CLIENT_PIN_CODE], [DISCOUNT_PERCENT], [SECURETY_CODE], [MAX_DEBIT],  [CLIENT_BUSINESS],[CLIENT_ACTIVE], [C_DATE], [C_USER], [LAT], [LNG], [TYPE_PRICE_CODE])
 VALUES (@CLIENT_CODE, @CLIENT_NAME, @CLIENT_TYPE, @CLIENT_CODE, @CURRANCY_CODE, @MANDOOB_CODE, @CLIENT_PHONE, N'''', @CLIENT_EMAILE, @CLIENT_REGION, @CLIENT_ADDRESS, @CLIENT_BARCODE, N'''', @CLIENT_NOTE, N'''', @DISCOUNT_PERCENT, 1, 0, @CLIENT_BUSINESS, 1, GETDATE(), @USER_CREATE,@LAT,@LNG,@TYPE_PRICE_CODE)   
 else 
 UPDATE [dbo].[T_CLIENT] SET [CLIENT_CODE] = @CLIENT_CODE, [CLIENT_NAME] = @CLIENT_NAME, [CLIENT_TYPE] = @CLIENT_TYPE, [ACCOUNT_CODE] = @CLIENT_CODE, [CURRANCY_CODE] = @CURRANCY_CODE, [MANDOOB_CODE] = @MANDOOB_CODE, [CLIENT_PHONE] = @CLIENT_PHONE, [CLIENT_PHONE_SMS] = N'''', [CLIENT_EMAILE] = @CLIENT_EMAILE, [CLIENT_REGION] = @CLIENT_REGION, [CLIENT_ADDRESS] = @CLIENT_ADDRESS, [CLIENT_BARCODE] = @CLIENT_BARCODE, [CLIENT_CARD] = N'''', [CLIENT_NOTE] = @CLIENT_NOTE, [CLIENT_PIN_CODE] = N'''', [DISCOUNT_PERCENT] = @DISCOUNT_PERCENT, [SECURETY_CODE] = 1, [MAX_DEBIT] = 0, [CLIENT_BUSINESS] = @CLIENT_BUSINESS, [CLIENT_ACTIVE] = 1, [C_DATE] = GETDATE(), [C_USER] = @USER_CREATE, [LAT] = @LAT, [LNG] = @LNG, [TYPE_PRICE_CODE] = @TYPE_PRICE_CODE WHERE CLIENT_CODE=@CLIENT_CODE








 IF @BALANCE_FIRST_IQ<>0 OR @BALANCE_FIRST_USA <>0
 BEGIN
 DELETE FROM T_BOX WHERE BILL_NUMBER=0  AND B_CODE=13 AND  ACCOUNT_CODE=@CLIENT_CODE
 IF @CURRANCY_CODE=1
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=1/NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_IQ
END

ELSE
BEGIN
SELECT @CURRANCY_USA=NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_USA
END
SELECT TOP(1) @USER_CODE=ISNULL(USER_CODE,1) FROM T_USERS WHERE [USER_NAME] LIKE @USER_CREATE
INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE]) 
VALUES (@COMPANY_TITAL + N''0'', 0,N'''', (SELECT TOP(1)  ISNULL(MIN(BILL_DATE),GETDATE())  FROM T_BOX ), GETDATE(), 0, 13, 1, @CLIENT_CODE, N'''', @BALANCE_FIRST_USA, 0, @BALANCE_FIRST_IQ, 0, @CURRANCY_CODE, @CURRANCY_EQUAL,  N''الرصيد الافتتاحي'', 0, @USER_CODE, GETDATE(), 1)
 END





	SELECT @CLIENT_CODE AS ID, N''عملية الاضافة , تمت بنجاح ..  '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000


FINISH_ADD:
END	--END OF PROGRAM
commit































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADD_CLIENTS_NEW]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADD_CLIENTS_NEW]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'





CREATE PROCEDURE [dbo].[P_API_ADD_CLIENTS_NEW]

@CLIENT_NAME NVARCHAR(MAX),
@CLIENT_TYPE INT,
@MANDOOB_CODE INT,
@TYPE_PRICE_CODE INT,
@CLIENT_PHONE NVARCHAR(MAX),
@CLIENT_REGION NVARCHAR(MAX),
@CLIENT_ADDRESS NVARCHAR(MAX),
@CLIENT_BUSINESS NVARCHAR(MAX),
@LAT NVARCHAR(MAX),
@LNG NVARCHAR(MAX),
@CLIENT_CODE INT OUTPUT




AS
declare
@COUNT_NAME  INT,
@USER_CODE  INT,
@CURRANCY_CODE  INT


BEGIN TRAN
BEGIN
SELECT @COUNT_NAME=COUNT(CLIENT_CODE)  FROM T_CLIENT WHERE CLIENT_NAME=@CLIENT_NAME
IF @COUNT_NAME>0
BEGIN
SELECT 0 AS ID, N''اسم العميل مضاف مسبقاً'' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
GOTO FINISH_ADD
END

SELECT @CURRANCY_CODE=ISNULL(CURRANCY_CODE,1) FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1


SELECT @CLIENT_CODE= ISNULL(MAX(CLIENT_CODE),2100000) + 1 FROM T_CLIENT


if not exists (select * from T_ACCOUNTS where ACCOUNT_CODE = @CLIENT_CODE )  INSERT INTO [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [C_DATE], [ACCOUNT_ACTIVE]) 
VALUES (@CLIENT_CODE, @CLIENT_NAME, 21, 1, 1, @CURRANCY_CODE, 2, 3, N'''', 1, 1, GETDATE(), 1)  
else 
UPDATE [dbo].[T_ACCOUNTS] SET [ACCOUNT_CODE] = @CLIENT_CODE, [ACCOUNT_NAME] = @CLIENT_NAME, [ACCOUNT_PARENT] = 21, [TYPE_ACCOUNT_CODE] = 1, [BRANCH_CODE] = 1, [CURRANCY_CODE] = @CURRANCY_CODE, [FINAL_CODE] = 2, [ACCOUNT_LEVEL] = 3, [ACCOUNT_NOTE] = N'''', [SECURETY_CODE] = 1, [ACCOUNT_ENTITY] = 1,  [ACCOUNT_ACTIVE] = 1  WHERE ACCOUNT_CODE=@CLIENT_CODE  


if not exists (select * from T_CLIENT where CLIENT_CODE = @CLIENT_CODE )  INSERT INTO [dbo].[T_CLIENT] ([CLIENT_CODE], [CLIENT_NAME], [CLIENT_TYPE], [ACCOUNT_CODE], [CURRANCY_CODE], [MANDOOB_CODE], [CLIENT_PHONE], [CLIENT_PHONE_SMS], [CLIENT_EMAILE], [CLIENT_REGION], [CLIENT_ADDRESS], [CLIENT_BARCODE], [CLIENT_CARD], [CLIENT_NOTE], [CLIENT_PIN_CODE], [DISCOUNT_PERCENT], [SECURETY_CODE], [MAX_DEBIT],  [CLIENT_BUSINESS],[CLIENT_ACTIVE], [C_DATE], [C_USER], [LAT], [LNG], [TYPE_PRICE_CODE])
 VALUES (@CLIENT_CODE, @CLIENT_NAME, @CLIENT_TYPE, @CLIENT_CODE, @CURRANCY_CODE, @MANDOOB_CODE, @CLIENT_PHONE, N'''', N'''', @CLIENT_REGION, @CLIENT_ADDRESS, N'''', N'''', N'''', N'''', 0, 1, 0, @CLIENT_BUSINESS, 1, GETDATE(), N''APP'',@LAT,@LNG,@TYPE_PRICE_CODE)  
 else 
 UPDATE [dbo].[T_CLIENT] SET [CLIENT_CODE] = @CLIENT_CODE, [CLIENT_NAME] = @CLIENT_NAME, [CLIENT_TYPE] = @CLIENT_TYPE, [ACCOUNT_CODE] = @CLIENT_CODE, [CURRANCY_CODE] = @CURRANCY_CODE, [MANDOOB_CODE] = @MANDOOB_CODE, [CLIENT_PHONE] =@CLIENT_PHONE, [CLIENT_PHONE_SMS] = N'''', [CLIENT_EMAILE] = N'''', [CLIENT_REGION] =@CLIENT_REGION, [CLIENT_ADDRESS] = @CLIENT_ADDRESS, [CLIENT_BARCODE] = N'''', [CLIENT_CARD] = N'''', [CLIENT_NOTE] = N'''', [CLIENT_PIN_CODE] = N'''', [DISCOUNT_PERCENT] = 0, [SECURETY_CODE] = 1, [MAX_DEBIT] = 0, [CLIENT_BUSINESS] =@CLIENT_BUSINESS, [CLIENT_ACTIVE] = 1, [C_DATE] = GETDATE(), [C_USER] = N''APP'',TYPE_PRICE_CODE=@TYPE_PRICE_CODE  WHERE CLIENT_CODE=@CLIENT_CODE





 	SELECT @CLIENT_CODE AS ID, N''عملية الاضافة , تمت بنجاح ..  '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000



 FINISH_ADD:
END	--END OF PROGRAM
commit






























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADD_MANDOOB_VISITS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADD_MANDOOB_VISITS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'






CREATE PROCEDURE [dbo].[P_API_ADD_MANDOOB_VISITS]
			@CLIENT_CODE  int 
           ,@CLIENT_BARCODE  nvarchar(50)  
           ,@LAT  nvarchar(max)  
           ,@LNG  nvarchar(max)  
           ,@USER_CODE  int  
           ,@MANDOOB_CODE  int  
           ,@D_DATE  date  
           ,@D_TIME  time(7) ,
		    @NOTE  nvarchar(max)  



AS
 
 


BEGIN TRAN
 
 
BEGIN
INSERT INTO [dbo].[T_MANDOOB_VISITS]
           ([CLIENT_CODE]
           ,[CLIENT_BARCODE]
           ,[LAT]
           ,[LNG]
           ,[USER_CODE]
           ,[MANDOOB_CODE]
           ,[D_DATE]
           ,[D_TIME]
		   ,[NOTE])
     VALUES
           (@CLIENT_CODE 
           ,@CLIENT_BARCODE 
           ,@LAT 
           ,@LNG 
           ,@USER_CODE 
           ,@MANDOOB_CODE 
           ,@D_DATE 
           ,@D_TIME 
		   ,@NOTE)
 


 	SELECT 1 AS ID, N''عملية الاضافة , تمت بنجاح ..  '' AS  N''Response''  



 FINISH_ADD:
END	--END OF PROGRAM
commit































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADD_MULTI]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADD_MULTI]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_ADD_MULTI] 
			 @B_CODE int,
			 @INFO nvarchar(max),
             @DETAILS nvarchar(max),
			 @USER_CREATE nvarchar(max) 
			
            

			 
 
	as
 DECLARE
 @BRANCH nvarchar(max)
 SELECT @BRANCH=COMPANY_TITAL FROM T_COMPANY  WHERE T_ID=1
	-----------------------------------------------------
	 
	BEGIN 
		IF LEN(@INFO)>0 OR  LEN(@DETAILS)>0
		BEGIN
		INSERT INTO [dbo].[T_API_ADD_MULTI]
           ([D_DATE_TIME]
           ,[B_CODE]
           ,[INFO]
           ,[DETAILS]
           ,[IS_INSERT]
           ,[DATE_INSERT]
           ,[BILL_NUMBER]
           ,[USER_CREATE])
     VALUES
           (GETDATE()
           ,@B_CODE 
           ,@INFO 
           ,@DETAILS 
           ,0
           ,NULL
           ,NULL
           ,@USER_CREATE)

	 

		SELECT (SELECT MAX(T_ID) FROM T_APP_INVOICE ) AS ID, N''successfully done , Inser Done ..  '' AS  N''Response'' 
		RETURN
		END
		ELSE 
		BEGIN
		SELECT 0 AS ID, N''Error , Inser '' AS  N''Response''  
		RETURN
		END
	 
	
 



	end 

	

	


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADD_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADD_SANAD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'






CREATE PROCEDURE [dbo].[P_API_ADD_SANAD]


@USER_CREATE NVARCHAR(MAX),
@MOVE_CODE INT,
@FROM_ACCOUNT INT ,
@TO_ACCOUNT INT ,
@AMO_USA float ,
@AMO_IQ float ,
@BILL_RELATION	int	,
@B_CODE_RELATION	int	,
@DESCRIPTION NVARCHAR(MAX) 

 



AS
declare
@BILL_NUMBER INT,
@BILL_BRANCH   NVARCHAR(MAX),
@BILL_DATE DATE = GETDATE(),
@BILL_TIME DATETIME = GETDATE(),
@FROM_ACC   NVARCHAR(MAX),
@TO_ACC   NVARCHAR(MAX),
@CURRANCY_CODE  INT,
@CURRANCY_USA float	,
@CURRANCY_IQ float	,
@CURRANCY_EQUAL float	,
@USER_CODE INT,
@COMPANY_TITAL   NVARCHAR(MAX)

BEGIN TRAN
BEGIN
 
SELECT @BILL_NUMBER=ISNULL(MAX(BILL_NUMBER),0)+1 FROM T_SANAD  

SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
SELECT @FROM_ACC=ACCOUNT_NAME FROM T_ACCOUNTS WHERE ACCOUNT_CODE=@FROM_ACCOUNT
SELECT @TO_ACC=ACCOUNT_NAME FROM T_ACCOUNTS WHERE ACCOUNT_CODE=@TO_ACCOUNT
SET @BILL_BRANCH=@COMPANY_TITAL + CAST(@BILL_NUMBER AS nvarchar)
IF @CURRANCY_CODE=1
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=1/NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_IQ
END

ELSE
BEGIN
SELECT @CURRANCY_USA=NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_USA
END


 
if not exists (select * from T_SANAD where BILL_BRANCH = @BILL_BRANCH )  INSERT INTO [dbo].[T_SANAD] ([BILL_BRANCH],[BILL_NUMBER], [BILL_DATE], [BILL_TIME], [USER_CREATE], [CURRANCY_EQUAL], [MOVE_CODE], [FROM_ACCOUNT], [TO_ACCCOUNT], [FROM_ACC], [TO_ACC], [AMO_USA], [AMO_IQ], [CONV_USA], [CONV_IQ], [DESCRIPTION], [C_DATE],  [SECURETY_CODE], [SANAD_ACTIVE], [OFFER_CODE], [IS_TRANS],[BILL_RELATION],[B_CODE]) 
VALUES (@BILL_BRANCH,@BILL_NUMBER, @BILL_DATE, @BILL_TIME, @USER_CREATE, @CURRANCY_EQUAL, @MOVE_CODE, @FROM_ACCOUNT, @TO_ACCOUNT, @FROM_ACC, @TO_ACC, @AMO_USA, @AMO_IQ, N'''', N'''', @DESCRIPTION, GETDATE(),  1, 1, 1, 0,@BILL_RELATION,@B_CODE_RELATION) 
else 
UPDATE [dbo].[T_SANAD] SET [BILL_BRANCH] = @BILL_BRANCH,[BILL_NUMBER] = @BILL_NUMBER, [BILL_DATE] = @BILL_DATE, [BILL_TIME] = @BILL_TIME, [CURRANCY_EQUAL] = @CURRANCY_EQUAL, [MOVE_CODE] = @MOVE_CODE, [FROM_ACCOUNT] = @FROM_ACCOUNT, [TO_ACCCOUNT] = @TO_ACCOUNT, [FROM_ACC] = @FROM_ACC, [TO_ACC] = @TO_ACC, [AMO_USA] = @AMO_USA, [AMO_IQ] = @AMO_IQ, [CONV_USA] = N'''', [CONV_IQ] = N'''', [DESCRIPTION] = @DESCRIPTION, [C_UPDATE] = GETDATE(), [USER_UPDATE] = @USER_CREATE, [SECURETY_CODE] = 1, [SANAD_ACTIVE] = 1, [OFFER_CODE] = 1, [IS_TRANS] = 0  WHERE BILL_BRANCH=@BILL_BRANCH  

SELECT TOP(1) @USER_CODE=ISNULL(USER_CODE,1) FROM T_USERS WHERE [USER_NAME] LIKE @USER_CREATE
--DELETE FROM T_BOX WHERE BILL_BRANCH=@BILL_BRANCH AND B_CODE=5

-- FROM
INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
 VALUES (@BILL_BRANCH,@BILL_NUMBER, CAST(@BILL_NUMBER AS nvarchar), @BILL_DATE, @BILL_TIME, @MOVE_CODE, 5, 1, @FROM_ACCOUNT, N'''', 0, @AMO_USA, 0, @AMO_IQ, @CURRANCY_CODE, @CURRANCY_EQUAL,  @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)
-- TO
INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE]) 
VALUES (@BILL_BRANCH,@BILL_NUMBER, CAST(@BILL_NUMBER AS nvarchar), @BILL_DATE, @BILL_TIME, @MOVE_CODE, 5, 1, @TO_ACCOUNT, N'''', @AMO_USA, 0, @AMO_IQ, 0, @CURRANCY_CODE, @CURRANCY_EQUAL,  @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)




 	SELECT @BILL_NUMBER AS ID, N''عملية الاضافة , تمت بنجاح ..  '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
	 

END	--END OF PROGRAM
commit































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADD_TEMP_BUY_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADD_TEMP_BUY_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE proc [dbo].[P_API_ADD_TEMP_BUY_DETAILS] 
@T_ID_DETAILS INT,
@ITEM_CODE INT,
@BILL_NUMBER INT,
@EXP_DATE DATE ,
@QTY_MIN_NEW INT
	as
	DECLARE
	@CC_COUNT INT
	 
	begin 
	 
	IF NOT EXISTS (select [T_ID] from [T_BUY_DETAILS_TRANSFARE] where [T_ID_DETAILS] = @T_ID_DETAILS AND ITEM_CODE=@ITEM_CODE ) INSERT [dbo].[T_BUY_DETAILS_TRANSFARE] ([T_ID_DETAILS] ,[ITEM_CODE] ,[BILL_NUMBER] ,[EXP_DATE],[QTY_MIN_NEW],[IS_DONE]) VALUES (  @T_ID_DETAILS, @ITEM_CODE, @BILL_NUMBER, @EXP_DATE, @QTY_MIN_NEW, 0)
	ELSE UPDATE [dbo].[T_BUY_DETAILS_TRANSFARE]
   SET [EXP_DATE] = @EXP_DATE
      ,[QTY_MIN_NEW] = @QTY_MIN_NEW
      ,[IS_DONE] = 0
 WHERE [T_ID_DETAILS] = @T_ID_DETAILS AND ITEM_CODE=@ITEM_CODE

 
	SELECT 1 AS ID, N''successfully done'' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1

	end 

	

	
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADS_TRACKING_ADD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADS_TRACKING_ADD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'







CREATE PROCEDURE [dbo].[P_API_ADS_TRACKING_ADD]

 
           @CLIENT_NAME nvarchar(max) ,
           @CLIENT_PHONE  nvarchar(max), 
           @LINK_URL  nvarchar(max), 
           @ID_ADS nvarchar(max), 
           @D_NOTES nvarchar(max), 
           @USER_NAME  nvarchar(max), 
           @STATUS_NAME  nvarchar(max), 
           @STATUS_REASON  nvarchar(max), 
           @BILL_NUMBER  int 

 

 



AS
 

BEGIN TRAN
BEGIN
 
 INSERT INTO [dbo].[T_ADS_TRACKING]
           ([D_DATE]
           ,[D_TIME]
           ,[CLIENT_NAME]
           ,[CLIENT_PHONE]
           ,[LINK_URL]
           ,[ID_ADS]
           ,[D_NOTES]
           ,[USER_NAME]
           ,[STATUS_NAME]
           ,[STATUS_REASON]
           ,[BILL_NUMBER])
     VALUES
           (GETDATE() 
           ,GETDATE() 
           ,@CLIENT_NAME 
           ,@CLIENT_PHONE 
           ,@LINK_URL 
           ,@ID_ADS 
           ,@D_NOTES 
           ,@USER_NAME 
           ,@STATUS_NAME 
           ,@STATUS_REASON 
           ,@BILL_NUMBER )



 	SELECT 1 AS ID, N''عملية الاضافة , تمت بنجاح ..  '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
	 SELECT TOP(1) * FROM [T_ADS_TRACKING] ORDER BY T_ID DESC

END	--END OF PROGRAM
commit
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADS_TRACKING_ADD_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADS_TRACKING_ADD_INVOICE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
 

CREATE PROCEDURE [dbo].[P_API_ADS_TRACKING_ADD_INVOICE]

			@T_ID INT 
          
    

AS
 DECLARE
		@CLIENT_NAME nvarchar(max) ,
		@CLIENT_PHONE  nvarchar(max), 
		@USER_NAME  nvarchar(max), 
		@ID_ADS nvarchar(max), 
		@D_NOTES nvarchar(max), 
		@LINK_URL  nvarchar(max), 
		@STATUS_NAME  nvarchar(max), 
		@STATUS_REASON  nvarchar(max), 
		 
@CURRANCY_EQUAL_INVOICE FLOAT,
@CURRANCY_CODE_PRIMARY INT,
@CURRANCY_CODE_INVOICE INT,
@BOX_USER INT,
@CLIENT_CODE INT,
@USER_CODE INT,


@COMPANY_TITAL NVARCHAR(MAX),
		@BILL_NUMBER  int 



BEGIN TRAN
BEGIN
SELECT  
      @CLIENT_NAME=[CLIENT_NAME]
      ,@CLIENT_PHONE=[CLIENT_PHONE]
      ,@LINK_URL=[LINK_URL]
      ,@ID_ADS=[ID_ADS]
      ,@D_NOTES=[D_NOTES]
      ,@USER_NAME=[USER_NAME]
      ,@STATUS_NAME=[STATUS_NAME]
      ,@STATUS_REASON=[STATUS_REASON]
       
  FROM [dbo].[T_ADS_TRACKING]  WHERE  T_ID =@T_ID
  
  SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
SELECT @CURRANCY_CODE_PRIMARY=CURRANCY_CODE,@CURRANCY_EQUAL_INVOICE=CURRANCY_EQUAL  FROM T_CURRANNCY WHERE CURRANCY_CODE=2
 
 SET @CLIENT_CODE=ISNULL((SELECT CLIENT_CODE FROM T_CLIENT WHERE CLIENT_NAME=N''عرض اسعار'' AND CLIENT_ACTIVE=1),2100000)

SELECT TOP(1) @BOX_USER=ISNULL(BOX_CODE,5000),@USER_CODE=USER_CODE  FROM T_USERS WHERE USER_NAME LIKE @USER_NAME AND ACTIVE=1
SET @BOX_USER=ISNULL(@BOX_USER,5000)
SET @USER_CODE=ISNULL(@USER_CODE,1)
SELECT @BILL_NUMBER=ISNULL(MAX(BILL_NUMBER),0) + 1 FROM T_SALES
 
 

 
  

 -------------------------------------------------------------------------------------------------------
INSERT INTO [dbo].[T_SALES]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_INVOICE]
           ,[BILL_DATE]
           ,[OFFER_CODE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[CLIENT_CODE]
           ,[CLIENT_NAME]
           ,[CLIENT_PHONE]
           ,[CLIENT_ADRESS]
           ,[MANDOOB_CODE]
           ,[DESCRIPTION]
           ,[TYPE_PRICE_SELL]
           ,[STORE_CODE]
           ,[USER_CREATE]
           ,[SECURETY_CODE]
           ,[TOTAL_SALES]
           ,[DISCOUNT_ITEMS]
           ,[DISCOUNT_PERCENT]
           ,[DISCOUNT_AMOUNT]
           ,[TOTAL_DISCOUNT]
           ,[NET_SALES]
           ,[TOTAL_COST]
           ,[IVC_CODE]
           ,[DAY_CASH]
           ,[DATE_CASH]
           ,[TOT_CONV]
           ,[ACCOUNT_CODE]
           ,[CASH_USA]
           ,[REMAIN_USA]
           ,[CASH_IQ]
           ,[REMAIN_IQ]
           ,[C_DATE]
           ,[C_UPDATE]
           ,[USER_UPDATE]
           ,[ACTIVE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[FLAG_CASH]
           ,[IS_OUT]
           ,[CURRANCY_SALES]
           ,[IS_TRANS]
           ,[CENTER_CODE]
           ,[QR_DATA]
           ,[ITEM_ID_PAYMENT]
           ,[TAG_PROCCESS_CODE]
           ,[LINK_ID_PAYMENT]
           ,[BILL_RETURN]
           ,[BILL_SANAD_CNY]
           ,[CNY_IQ]
           ,[IS_PREPARE]
           ,[DRIVER_CODE]
           ,[LAT]
           ,[LNG]
           ,[STATUS_SHIPING]
           ,[MOVE_CODE]
           ,[BILL_ORDER]
           ,[TOTAL_TAX_ITEM]
           ,[TOTAL_MANDOOB_ITEM]
           ,[TOTAL_ADD_COST]
           ,[TOTAL_ADD_AMO]
           ,[SHIP_CODE]
           ,[COST_SHIP]
           ,[IS_POINT]
           ,[COST_SHIP_CLIENT]
           ,[USER_TAG_CODE]
           ,[RELATION_BILL_CODE]
           ,[RELATION_B_CODE]
           ,[REGION_CODE]
           ,[COL_INT1]
           ,[COL_INT2]
           ,[COL_INT3]
           ,[COL_STR1]
           ,[COL_STR2]
           ,[COL_STR3]
           ,[IS_PDF]
           ,[PATH_PDF]
           ,[PATH_PDF_API])
      Select TOP(1)
			@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max))  as [BILL_BRANCH]
           ,@BILL_NUMBER as [BILL_NUMBER]
           ,@BILL_NUMBER as [BILL_INVOICE]
           ,GETDATE() as [BILL_DATE]
           ,0 as [OFFER_CODE]
           , @CURRANCY_CODE_PRIMARY  as [CURRANCY_CODE]
           ,@CURRANCY_EQUAL_INVOICE as [CURRANCY_EQUAL] 
           ,@CLIENT_CODE as [CLIENT_CODE]
           ,@CLIENT_NAME as [CLIENT_NAME]
           ,@CLIENT_PHONE  as [CLIENT_PHONE]
           , N''''     as [CLIENT_ADRESS]
           ,1  as [MANDOOB_CODE]
           ,N'''' as [DESCRIPTION]
           ,1 as [TYPE_PRICE_SELL]
           ,0 as [STORE_CODE]
           ,@USER_NAME as [USER_CREATE]
           ,1 as [SECURETY_CODE]
           ,0 as [TOTAL_SALES]
           ,0 as [DISCOUNT_ITEMS]
           ,0 as [DISCOUNT_PERCENT]
           ,0 as [DISCOUNT_AMOUNT]
           ,0 as [TOTAL_DISCOUNT]
           ,0 as [NET_SALES]
           ,0 as [TOTAL_COST] -- FROM SUM
           ,10 as [IVC_CODE]
           ,0 as [DAY_CASH]
           ,GETDATE() as [DATE_CASH]
           ,N'''' as [TOT_CONV]
           , @BOX_USER  as [ACCOUNT_CODE]
           ,0 as [CASH_USA]
           ,0 as [REMAIN_USA]
           ,0 as [CASH_IQ]
           ,0 as [REMAIN_IQ]
           ,GETDATE() as [C_DATE]
           ,N'''' as [C_UPDATE]
           ,N'''' as [USER_UPDATE]
           ,1 as [ACTIVE]
           ,0 as [IS_AVG_COST]
           ,0 as [AVG_COST]
           ,0 as [FLAG_CASH]
           ,1 as [IS_OUT]
           ,1 as [CURRANCY_SALES]
           ,0 as [IS_TRANS]
           ,0 as [CENTER_CODE]
           ,N'''' as [QR_DATA]
           ,N'''' as [ITEM_ID_PAYMENT]
           ,0  as [TAG_PROCCESS_CODE]
           ,N'''' as [LINK_ID_PAYMENT]
           ,0 as [BILL_RETURN]
           ,0 as [BILL_SANAD_CNY]
           ,1 as [CNY_IQ]
           ,0 as [IS_PREPARE]
           ,0 as [DRIVER_CODE]
           ,N'''' as [LAT]
           , N'''' as [LNG]
            ,0  as [STATUS_SHIPING]
           ,0 as [MOVE_CODE]
           ,0 as [BILL_ORDER]
           ,0 as [TOTAL_TAX_ITEM]
           ,0  as [TOTAL_MANDOOB_ITEM]
           ,0 as [TOTAL_ADD_COST]
           ,0 as [TOTAL_ADD_AMO]
           ,0 as [SHIP_CODE]
           ,0 as [COST_SHIP]
           ,0 as [IS_POINT]
           ,0 as [COST_SHIP_CLIENT]
           ,0 as [USER_TAG_CODE]
           ,0 as [RELATION_BILL_CODE]
           ,0 as [RELATION_B_CODE]
           ,0 as [REGION_CODE]
           ,0 as [COL_INT1]
           ,0 as [COL_INT2]
           ,0 as [COL_INT3]
            ,N'''' as [COL_STR1]
			,N'''' as [COL_STR2]
           ,N'''' as [COL_STR3]
           ,0 as [IS_PDF]
           ,N'''' as [PATH_PDF]
           ,N'''' as [PATH_PDF_API]


From T_SALES
 
 
 
 -------------------------------------------------------------------------------------------------------
 select top(1) @CURRANCY_CODE_INVOICE =CURRANCY_CODE,@CURRANCY_EQUAL_INVOICE=CURRANCY_EQUAL  from T_SALES where BILL_NUMBER=@BILL_NUMBER
INSERT INTO [dbo].[T_SALES_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[TOTAL]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY]
           ,[ITEM_NOTE_SALES]
           ,[NOTE_PRINT]
           ,[IS_PRINT]
           ,[USER_PREPARE]
           ,[USER_CUT]
           ,[DISCOUNT_TYPE]
           ,[IS_SERIAL]
           ,[IS_TAX]
           ,[TAX_PERCENT_ITEM]
           ,[TAX_AMO_ITEM]
           ,[IS_MANDOOB]
           ,[MANDOOB_PERCENT_ITEM]
           ,[MANDOOB_AMO_ITEM]
           ,[IS_ITEM_AREA]
           ,[WIDTH_CM]
           ,[LENGTH_CM]
           ,[AREA_M2]
           ,[QTY_AREA]
           ,[QTY_XZ]
           ,[UNIT_QTY_XZ]
           ,[QTY_X1]
           ,[UNIT_QTY_X1]
           ,[QTY_XY]
           ,[UNIT_QTY_XY]
           ,[NOTE_PRINT_2]
           ,[K_STORE_ITEM_CODE]
           ,[K_STORE_COST]
           ,[K_STORE_SELL]
           ,[K_PRINT_ITEM_CODE]
           ,[K_PRINT_COST]
           ,[K_PRINT_SELL]
           ,[K_MODEL_ITEM_CODE]
           ,[K_MODEL_COST]
           ,[K_MODEL_SELL]
           ,[K_MOTOR_ITEM_CODE]
           ,[K_MOTOR_COST]
           ,[K_MOTOR_SELL]
           ,[K_HABEL_ITEM_CODE]
           ,[K_HABEL_COST]
           ,[K_HABEL_SELL]
           ,[K_STORE_TOTAL]
           ,[K_PRINT_TOTAL]
           ,[K_MODEL_TOTAL]
           ,[K_MOTOR_TOTAL]
           ,[K_HABEL_TOTAL]
           ,[K_MODEL_TOTAL_COST]
           ,[QTY_FREE]
           ,[TOTAL_QTY])
 Select TOP(1)
       @COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max))  as [BILL_BRANCH]
           ,@BILL_NUMBER as [BILL_NUMBER]
           ,0  as [ITEM_CODE]
           , N''عرض سعر''   as [ITEM_NAME]
           ,1   as [QTY]
           , N''عرض''   as [UNIT_NAME]
           ,1 as [UNIT_QTY]
           ,1 as [STORE_CODE]
           ,-999999 as [WAJBA_CODE]
           ,N'''' as [WAJBA_NAME]
           ,N'''' as [WAJBA_BALANCE]
           ,@CURRANCY_CODE_INVOICE as [CURRANCY_CODE]
           ,@CURRANCY_EQUAL_INVOICE as [CURRANCY_EQUAL]
           ,0 as [COST]
           ,0 as [PRICE]
           ,0 as [TOTAL]
           ,0 as [DISCOUNT_PERCENT_ITEM]
           ,0 as [DISCOUNT_AMOUNT_ITEM]
           ,GETDATE() as [C_DATE]
           ,1 as [ACTIVE]
           ,-999999 as [BILL_BUY]
           , N''''  as [ITEM_NOTE_SALES]
           ,N''''  as [NOTE_PRINT]
           ,0 as [IS_PRINT]
           ,N'''' as [USER_PREPARE]
           ,N'''' as [USER_CUT]
           ,0 as [DISCOUNT_TYPE]
           ,0 as [IS_SERIAL]
           ,0 as [IS_TAX]
           ,0 as [TAX_PERCENT_ITEM]
           ,0 as [TAX_AMO_ITEM]
           ,0 as [IS_MANDOOB]
           ,0 as [MANDOOB_PERCENT_ITEM]
           ,0 as [MANDOOB_AMO_ITEM]
           ,0 as [IS_ITEM_AREA]
           ,0 as [WIDTH_CM]
           ,0 as [LENGTH_CM]
           ,0 as [AREA_M2]
           ,1 as [QTY_AREA]
           ,0 as [QTY_XZ]
           ,0 as [UNIT_QTY_XZ]
           ,0 as [QTY_X1]
           ,0 as [UNIT_QTY_X1]
           ,0 as [QTY_XY]
           ,0 as [UNIT_QTY_XY]
           ,N'''' as [NOTE_PRINT_2]
           ,0 as [K_STORE_ITEM_CODE]
           ,0 as [K_STORE_COST]
           ,0 as [K_STORE_SELL]
           ,0 as [K_PRINT_ITEM_CODE]
           ,0 as [K_PRINT_COST]
           ,0 as [K_PRINT_SELL]
           ,0 as [K_MODEL_ITEM_CODE]
           ,0 as [K_MODEL_COST]
           ,0 as [K_MODEL_SELL]
           ,0 as [K_MOTOR_ITEM_CODE]
           ,0 as [K_MOTOR_COST]
           ,0 as [K_MOTOR_SELL]
           ,0 as [K_HABEL_ITEM_CODE]
           ,0 as [K_HABEL_COST]
           ,0 as [K_HABEL_SELL]
           ,0 as [K_STORE_TOTAL]
           ,0 as [K_PRINT_TOTAL]
           ,0 as [K_MODEL_TOTAL]
           ,0 as [K_MOTOR_TOTAL]
           ,0 as [K_HABEL_TOTAL]
           ,0 as [K_MODEL_TOTAL_COST]
           ,0 as [QTY_FREE]
           ,1  as [TOTAL_QTY]



From T_SALES_DETAILS
 

 	SELECT @BILL_NUMBER AS ID, N''عملية اضافة فاتورة , تمت بنجاح ..  '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
	 

END	--END OF PROGRAM
commit


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADS_TRACKING_GET_ALL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADS_TRACKING_GET_ALL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE proc [dbo].[P_API_ADS_TRACKING_GET_ALL] 

		@PageSize int,
		@PageNumber int  
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	 
	 
	 BEGIN

SELECT    * into #tempADS FROM   T_ADS_TRACKING    

		
    SELECT @TotalRecords = COUNT(*) FROM #tempADS;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempADS
     ORDER BY T_ID DESC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 END
	 

		

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;


	 
	 
	end 

	

	



' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADS_TRACKING_GET_BY_FILTER]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADS_TRACKING_GET_BY_FILTER]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




CREATE proc [dbo].[P_API_ADS_TRACKING_GET_BY_FILTER] 
@USER_NAME NVARCHAR(MAX),
@STATUS_NAME  nvarchar(max),
@CLIENT_NAME  nvarchar(max),
@CLIENT_PHONE  nvarchar(max),
		@PageSize int,
		@PageNumber int  
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	 
	 
	 BEGIN
--IF LEN(LTRIM(RTRIM(@USER_NAME)))>0
--BEGIN
SELECT    * into #tempADS FROM   T_ADS_TRACKING    WHERE USER_NAME LIKE ''%''+@USER_NAME +''%'' AND STATUS_NAME  LIKE ''%''+@STATUS_NAME +''%'' AND CLIENT_NAME  LIKE ''%''+@CLIENT_NAME +''%'' AND CLIENT_PHONE  LIKE ''%''+@CLIENT_PHONE +''%'' 

		
    SELECT @TotalRecords = COUNT(*) FROM #tempADS;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempADS WHERE USER_NAME LIKE ''%''+@USER_NAME +''%'' AND STATUS_NAME  LIKE ''%''+@STATUS_NAME +''%'' 
     ORDER BY T_ID DESC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 END
	 

		

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;
--END



	 
	 
	end 

	

	




' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_ADS_TRACKING_UPDATE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_ADS_TRACKING_UPDATE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'








CREATE PROCEDURE [dbo].[P_API_ADS_TRACKING_UPDATE]

			@T_ID INT,
           @CLIENT_NAME nvarchar(max) ,
           @CLIENT_PHONE  nvarchar(max), 
           @LINK_URL  nvarchar(max), 
           @ID_ADS nvarchar(max), 
           @D_NOTES nvarchar(max), 
           @USER_NAME  nvarchar(max), 
           @STATUS_NAME  nvarchar(max), 
           @STATUS_REASON  nvarchar(max), 
           @BILL_NUMBER  int 

 

 



AS
 

BEGIN TRAN
BEGIN
 UPDATE [dbo].[T_ADS_TRACKING]
   SET  
       [CLIENT_NAME] = @CLIENT_NAME
      ,[CLIENT_PHONE] = @CLIENT_PHONE
      ,[LINK_URL] = @LINK_URL
      ,[ID_ADS] = @ID_ADS
      ,[D_NOTES] = @D_NOTES
      ,[USER_NAME] = @USER_NAME
      ,[STATUS_NAME] =@STATUS_NAME
      ,[STATUS_REASON] = @STATUS_REASON
      ,[BILL_NUMBER] = @BILL_NUMBER
 WHERE T_ID=@T_ID

  


 	SELECT 1 AS ID, N''عملية التعديل , تمت بنجاح ..  '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
	 SELECT TOP(1) * FROM [T_ADS_TRACKING] WHERE  T_ID =@T_ID

END	--END OF PROGRAM
commit

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_DISCOUNT_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_DISCOUNT_CLIENT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_AL_SADY_GET_DISCOUNT_CLIENT] 
 
		@T_ID INT
	as

	set nocount on
	 
	begin 
	 
	 

SELECT    *   FROM   T_DISCOUNT_APP   WHERE T_ID  = @T_ID  

		
   
     
	 
	 
	end 

	

	


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_DISCOUNT_CLIENT_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_DISCOUNT_CLIENT_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_AL_SADY_GET_DISCOUNT_CLIENT_MS] 
	@T_ID INT
AS 
	SET NOCOUNT ON

BEGIN 
	SELECT * FROM T_DISCOUNT_APP WHERE T_ID  = @T_ID  
END 

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_INVOICE_BY_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_INVOICE_BY_CLIENT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_AL_SADY_GET_INVOICE_BY_CLIENT] 

		@PageSize int,
		@PageNumber int ,
		@CLIENT_CODE INT
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	 
	 
 
SELECT    * into #tempSale FROM   V_SALES_API  WHERE   CLIENT_CODE=@CLIENT_CODE AND  ACTIVE =1   AND NET_SALES>=0     ORDER BY BILL_NUMBER DESC

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY BILL_NUMBER DESC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 
  
	
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;

 
	 
	 
	end 

	

	


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_INVOICE_BY_CLIENT_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_INVOICE_BY_CLIENT_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_AL_SADY_GET_INVOICE_BY_CLIENT_MS] 
	@PageSize int,
	@PageNumber int ,
	@CLIENT_CODE INT
	AS

	DECLARE @TotalRecords INT;DECLARE @TotalPages INT;DECLARE @Offset INT;
	begin 
	SET NOCOUNT ON
	SELECT * INTO #tempSale FROM V_SALES_API WHERE CLIENT_CODE=@CLIENT_CODE AND  ACTIVE =1   AND NET_SALES>=0 ORDER BY BILL_NUMBER DESC	
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    SET @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT * FROM #tempSale ORDER BY BILL_NUMBER DESC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_INVOICE_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_INVOICE_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_AL_SADY_GET_INVOICE_DETAILS] 

		@PageSize int,
		@PageNumber int ,
		@BILL_NUMBER INT
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	 
	 
 
SELECT    * into #tempSale FROM   T_SALES_DETAILS  WHERE   BILL_NUMBER=@BILL_NUMBER AND  ACTIVE =1       ORDER BY T_ID DESC

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY T_ID DESC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 
  
	
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;

 
	 
	 
	end 

	

	


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_INVOICE_DETAILS_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_INVOICE_DETAILS_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_AL_SADY_GET_INVOICE_DETAILS_MS] 
	@PageSize int,
	@PageNumber int ,
	@BILL_NUMBER INT
	AS
 	DECLARE @TotalRecords INT;DECLARE @TotalPages INT;DECLARE @Offset INT;
	BEGIN 
	SET NOCOUNT ON 
	SELECT * into #tempSale FROM   T_SALES_DETAILS  WHERE   BILL_NUMBER=@BILL_NUMBER AND  ACTIVE =1 ORDER BY T_ID DESC
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT * FROM #tempSale ORDER BY T_ID DESC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_INVOICE_RETURN_BY_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_INVOICE_RETURN_BY_CLIENT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE proc [dbo].[P_API_AL_SADY_GET_INVOICE_RETURN_BY_CLIENT] 

		@PageSize int,
		@PageNumber int ,
		@CLIENT_CODE INT
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	 
	 
 
SELECT    * into #tempSale FROM   V_SALES_API  WHERE   CLIENT_CODE=@CLIENT_CODE AND  ACTIVE =1   AND NET_SALES<0     ORDER BY BILL_NUMBER DESC

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY BILL_NUMBER DESC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 
  
	
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;

 
	 
	 
	end 

	

	



' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_INVOICE_RETURN_BY_CLIENT_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_INVOICE_RETURN_BY_CLIENT_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE proc [dbo].[P_API_AL_SADY_GET_INVOICE_RETURN_BY_CLIENT_MS] 

	@PageSize int,
	@PageNumber int ,
	@CLIENT_CODE INT
	AS
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	BEGIN 
	SET NOCOUNT ON
	SELECT * into #tempSale FROM V_SALES_API WHERE CLIENT_CODE=@CLIENT_CODE AND  ACTIVE =1   AND NET_SALES<0 ORDER BY BILL_NUMBER DESC
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT * FROM #tempSale ORDER BY BILL_NUMBER DESC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_HOME_PAGE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_HOME_PAGE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE proc [dbo].[P_API_AL_SADY_GET_ITEM_HOME_PAGE] 

		@PageSize int,
		@PageNumber int  
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;

	begin 
	 
	 

SELECT    * into #tempSale FROM   V_ITEMS_BALANCE_MIN_PHARMA_ALSADY   WHERE ITEM_CODE IN ( SELECT TOP (10)     T_ITEMS.ITEM_CODE  FROM T_ITEMS WHERE ACTIVE=1 ORDER BY NEWID())

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 
  
	
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;

 
	 
	 
	end 

	

	



' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_HOME_PAGE_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_HOME_PAGE_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE proc [dbo].[P_API_AL_SADY_GET_ITEM_HOME_PAGE_MS] 

	@PageSize int,
	@PageNumber int  
	AS
	DECLARE @TotalRecords INT;DECLARE @TotalPages INT;DECLARE @Offset INT;
	BEGIN 
	SET NOCOUNT ON

	 

	SELECT * into #tempSale FROM V_ITEMS_BALANCE_MIN_PHARMA_ALSADY WHERE ITEM_CODE IN ( SELECT TOP (10) T_ITEMS.ITEM_CODE  FROM T_ITEMS WHERE ACTIVE=1 ORDER BY NEWID())
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    SET @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT * FROM #tempSale ORDER BY ITEM_NAME ASC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE proc [dbo].[P_API_AL_SADY_GET_ITEM_STORE] 

		@PageSize int,
		@PageNumber int ,
		@ITEM_NAME NVARCHAR(MAX)
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	 
	 IF LEN(@ITEM_NAME)>0
	 BEGIN

SELECT    * into #tempSale FROM   V_ITEMS_BALANCE_MIN_PHARMA_ALSADY   WHERE ITEM_NAME  LIKE ''%''+@ITEM_NAME +''%''    AND IS_HIDE=0

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 END
	 ELSE
 BEGIN
SELECT    * into #tempSale1 FROM   V_ITEMS_BALANCE_MIN_PHARMA_ALSADY      WHERE    IS_HIDE=0

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale1;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale1
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

	 END

		

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;


	 
	 
	end 

	

	
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_BARCODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_BARCODE] 

		@PageSize int,
		@PageNumber int ,
		@ITEM_BARCODE NVARCHAR(MAX)
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	DECLARE @ITEM_CODE INT;
	begin 
	 
	 IF LEN(@ITEM_BARCODE)>0
	 BEGIN

	 SELECT @ITEM_CODE=ITEM_CODE FROM T_ITEM_BARCODE WHERE ITEM_BARCODE =@ITEM_BARCODE

SELECT    * into #tempSale FROM   V_ITEMS_BALANCE_MIN_PHARMA_ALSADY   WHERE ITEM_CODE  =@ITEM_CODE    AND IS_HIDE=0

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 END
	 ELSE
 BEGIN
SELECT    * into #tempSale1 FROM   V_ITEMS_BALANCE_MIN_PHARMA_ALSADY      WHERE    IS_HIDE=0

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale1;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale1
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

	 END

		

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;


	 
	 
	end 

	

	

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_BARCODE_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_BARCODE_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_BARCODE_MS] 

	@PageSize int,
	@PageNumber int ,
	@ITEM_BARCODE NVARCHAR(MAX)
	AS

	DECLARE @TotalRecords INT;DECLARE @TotalPages INT;DECLARE @Offset INT;DECLARE @ITEM_CODE INT;
	BEGIN 
	SET NOCOUNT ON
IF LEN(@ITEM_BARCODE)>0
	BEGIN
	SELECT @ITEM_CODE=ITEM_CODE FROM T_ITEM_BARCODE WHERE ITEM_BARCODE =@ITEM_BARCODE
	SELECT * into #tempSale FROM V_ITEMS_BALANCE_MIN_PHARMA_ALSADY WHERE ITEM_CODE=@ITEM_CODE AND IS_HIDE=0
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    SET @Offset  = (@PageNumber - 1) * @PageSize;
    SELECT * FROM #tempSale ORDER BY ITEM_NAME ASC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	END
ELSE
	BEGIN
	SELECT* into #tempSale1 FROM V_ITEMS_BALANCE_MIN_PHARMA_ALSADY WHERE IS_HIDE=0
    SELECT @TotalRecords = COUNT(*) FROM #tempSale1;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;
    SELECT * FROM #tempSale1 ORDER BY ITEM_NAME ASC
	OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

	 END
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY] 

		@PageSize int,
		@PageNumber int ,
		@CATEGORY_CODE INT
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	 
	 

SELECT    * into #tempSale FROM   V_ITEMS_BALANCE_MIN_PHARMA_ALSADY   WHERE CATEGORY_CODE  = @CATEGORY_CODE  

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 
  
	
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;

--SELECT COMPANY_CREATE FROM T_ITEMS WHERE ACTIVE=1 AND CATEGORY_CODE =@CATEGORY_CODE AND LEN(COMPANY_CREATE)>0 GROUP BY COMPANY_CREATE	

 SELECT N''الكل'' AS KIND_NAME  
UNION
SELECT KIND_NAME FROM T_ITEMS WHERE ACTIVE=1 AND CATEGORY_CODE =@CATEGORY_CODE AND LEN(KIND_NAME)>0 GROUP BY KIND_NAME	
	 
	 
	end 

	

	

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_COMPANY_CREATE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_COMPANY_CREATE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_COMPANY_CREATE] 

		@PageSize int,
		@PageNumber int ,
		@CATEGORY_CODE INT,
		@COMPANY_CREATE NVARCHAR(MAX)
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	 
	 

SELECT    * into #tempSale FROM   V_ITEMS_BALANCE_MIN_PHARMA_ALSADY   WHERE ITEM_CODE IN (SELECT ITEM_CODE FROM T_ITEMS WHERE ACTIVE=1 AND COMPANY_CREATE =@COMPANY_CREATE AND CATEGORY_CODE=@CATEGORY_CODE)  

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 
  
	
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;

 
  
	 
	 
	end 

	

	


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_COMPANY_CREATE_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_COMPANY_CREATE_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_COMPANY_CREATE_MS] 

		@PageSize int,
		@PageNumber int ,
		@CATEGORY_CODE INT,
		@COMPANY_CREATE NVARCHAR(MAX)
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	 
	 

SELECT    * into #tempSale FROM   V_ITEMS_BALANCE_MIN_PHARMA_ALSADY   WHERE ITEM_CODE IN (SELECT ITEM_CODE FROM T_ITEMS WHERE ACTIVE=1 AND COMPANY_CREATE =@COMPANY_CREATE AND CATEGORY_CODE=@CATEGORY_CODE)  

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 
  
	
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;

 
  
	 
	 
	end 

	

	



' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_KIND_NAME]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_KIND_NAME]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_KIND_NAME] 

		@PageSize int,
		@PageNumber int ,
		@CATEGORY_CODE INT,
		@KIND_NAME  NVARCHAR(MAX)
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	 
	 
IF LEN(@KIND_NAME)=0 OR @KIND_NAME=N''الكل''
BEGIN
SELECT    * into #tempSale FROM   V_ITEMS_BALANCE_MIN_PHARMA_ALSADY   WHERE CATEGORY_CODE  = @CATEGORY_CODE   
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 
  
	
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;






END
ELSE
BEGIN
SELECT    * into #tempSaleK FROM   V_ITEMS_BALANCE_MIN_PHARMA_ALSADY   WHERE CATEGORY_CODE  = @CATEGORY_CODE   AND KIND_NAME=@KIND_NAME
    SELECT @TotalRecords = COUNT(*) FROM #tempSaleK;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSaleK
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 
  
	
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;


END

		

 
	 
	end 

	

	


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_KIND_NAME_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_KIND_NAME_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_KIND_NAME_MS] 

	@PageSize int,
	@PageNumber int ,
	@CATEGORY_CODE INT,
	@KIND_NAME  NVARCHAR(MAX)
	AS
	DECLARE @TotalRecords INT;DECLARE @TotalPages INT;DECLARE @Offset INT;
	BEGIN 
	SET NOCOUNT ON
IF LEN(@KIND_NAME)=0 OR @KIND_NAME=N''الكل''
	BEGIN
	SELECT * into #tempSale FROM   V_ITEMS_BALANCE_MIN_PHARMA_ALSADY   WHERE CATEGORY_CODE  = @CATEGORY_CODE  AND IS_HIDE =0
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    SET @Offset  = (@PageNumber - 1) * @PageSize;
    SELECT * FROM #tempSale ORDER BY KIND_NAME ASC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	END
ELSE
	BEGIN
		SELECT * into #tempSaleK FROM V_ITEMS_BALANCE_MIN_PHARMA_ALSADY WHERE CATEGORY_CODE=@CATEGORY_CODE AND KIND_NAME=@KIND_NAME  AND IS_HIDE =0
		SELECT @TotalRecords = COUNT(*) FROM #tempSaleK;    
		SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
		SET @Offset  = (@PageNumber - 1) * @PageSize;
		SELECT * FROM #tempSaleK ORDER BY KIND_NAME ASC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	END
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_CATEGORY_MS] 

	@PageSize int,
	@PageNumber int ,
	@CATEGORY_CODE INT
	AS
	SET NOCOUNT ON
	DECLARE @TotalRecords INT;DECLARE @TotalPages INT;DECLARE @Offset INT;
	BEGIN  
	SELECT * into #tempSale FROM V_ITEMS_BALANCE_MIN_PHARMA_ALSADY WHERE CATEGORY_CODE= @CATEGORY_CODE   AND IS_HIDE =0 
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    SET @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT * FROM #tempSale ORDER BY ITEM_NAME ASC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	SELECT N''الكل'' AS KIND_NAME  UNION SELECT KIND_NAME FROM T_ITEMS WHERE ACTIVE=1 AND CATEGORY_CODE =@CATEGORY_CODE AND LEN(KIND_NAME)>0 GROUP BY KIND_NAME		 
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_SIMILAR]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_SIMILAR]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_SIMILAR] 

		@PageSize int,
		@PageNumber int ,
		@ITEM_CODE INT
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	DECLARE @CATEGORY_CODE INT;
	begin 
	 
	 SELECT @CATEGORY_CODE=CATEGORY_CODE FROM T_ITEMS WHERE ITEM_CODE=@ITEM_CODE

SELECT    * into #tempSale FROM   V_ITEMS_BALANCE_MIN_PHARMA_ALSADY   WHERE ITEM_CODE IN ( SELECT TOP (10)     T_ITEMS.ITEM_CODE  FROM T_ITEMS WHERE CATEGORY_CODE=@CATEGORY_CODE AND ACTIVE=1 ORDER BY NEWID())

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 
  
	
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;

 
	 
	 
	end 

	

	


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_SIMILAR_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_SIMILAR_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_AL_SADY_GET_ITEM_STORE_BY_SIMILAR_MS] 

	@PageSize int,
	@PageNumber int ,
	@ITEM_CODE INT
	AS


	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	DECLARE @KIND_NAME nvarchar(max);
	BEGIN 
	SET NOCOUNT ON
	SELECT @KIND_NAME=KIND_NAME FROM V_ITEMS_BALANCE_MIN_PHARMA_ALSADY WHERE ITEM_CODE=@ITEM_CODE 
	SELECT * into #tempSale FROM V_ITEMS_BALANCE_MIN_PHARMA_ALSADY WHERE ITEM_CODE IN ( SELECT TOP (10) T_ITEMS.ITEM_CODE FROM T_ITEMS WHERE KIND_NAME=@KIND_NAME AND ACTIVE=1 AND IS_HIDE =0  ORDER BY NEWID())
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    SET @Offset  = (@PageNumber - 1) * @PageSize;
    SELECT * FROM #tempSale ORDER BY KIND_NAME ASC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_ITEM_CODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_ITEM_CODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_AL_SADY_GET_ITEM_STORE_ITEM_CODE] 

		@PageSize int,
		@PageNumber int ,
		@ITEM_CODE INT
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	 
	 IF  @ITEM_CODE>0
	 BEGIN

SELECT    * into #tempSale FROM   V_ITEMS_BALANCE_MIN_PHARMA_ALSADY   WHERE ITEM_CODE =@ITEM_CODE

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 END
	 ELSE
 BEGIN
SELECT    * into #tempSale1 FROM   V_ITEMS_BALANCE_MIN_PHARMA_ALSADY         WHERE ITEM_CODE =@ITEM_CODE

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale1;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale1
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

	 END

		

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;


	 
	 
	end 

	

	


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_ITEM_CODE_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_ITEM_CODE_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_AL_SADY_GET_ITEM_STORE_ITEM_CODE_MS] 

	@PageSize int,
	@PageNumber int ,
	@ITEM_CODE INT
	AS
	DECLARE @TotalRecords INT;DECLARE @TotalPages INT;DECLARE @Offset INT;
	BEGIN 
	SET NOCOUNT ON
IF  @ITEM_CODE>0
	BEGIN
	SELECT * into #tempSale FROM V_ITEMS_BALANCE_MIN_PHARMA_ALSADY WHERE ITEM_CODE =@ITEM_CODE AND IS_HIDE =0 	 AND SHOW_CATEGORY_ITEM =1
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    SET @Offset  = (@PageNumber - 1) * @PageSize;
    SELECT * FROM #tempSale ORDER BY ITEM_NAME ASC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	END
ELSE
	BEGIN
	SELECT * into #tempSale1 FROM V_ITEMS_BALANCE_MIN_PHARMA_ALSADY WHERE ITEM_CODE =@ITEM_CODE AND IS_HIDE =0  AND SHOW_CATEGORY_ITEM =1
    SELECT @TotalRecords = COUNT(*) FROM #tempSale1;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    SET @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT * FROM #tempSale ORDER BY ITEM_NAME ASC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	END
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_AL_SADY_GET_ITEM_STORE_MS] 

	@PageSize int,
	@PageNumber int ,
	@ITEM_NAME NVARCHAR(MAX)
	AS
	DECLARE @TotalRecords INT;DECLARE @TotalPages INT;DECLARE @Offset INT;
	BEGIN 
	SET NOCOUNT ON

IF LEN(@ITEM_NAME)>0
	BEGIN
	SELECT * into #tempSale FROM V_ITEMS_BALANCE_MIN_PHARMA_ALSADY WHERE ITEM_NAME LIKE ''%''+@ITEM_NAME +''%'' AND IS_HIDE=0 AND SHOW_CATEGORY_ITEM =1
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    SET @Offset  = (@PageNumber - 1) * @PageSize;
    SELECT * FROM #tempSale ORDER BY ITEM_NAME OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	END
ELSE
	BEGIN
	SELECT * into #tempSale1 FROM V_ITEMS_BALANCE_MIN_PHARMA_ALSADY WHERE IS_HIDE=0  AND SHOW_CATEGORY_ITEM =1
    SELECT @TotalRecords = COUNT(*) FROM #tempSale1;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    SET @Offset  = (@PageNumber - 1) * @PageSize;
    SELECT * FROM #tempSale1 ORDER BY NEWID() OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
END 
END 


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_MULTI_CODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_MULTI_CODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_AL_SADY_GET_ITEM_STORE_MULTI_CODE] 

		@PageSize int,
		@PageNumber int ,
		@MULTI_CODE NVARCHAR(MAX)
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	 
	 IF LEN(@MULTI_CODE)>0
	 BEGIN

SELECT    * into #tempSale FROM   V_ITEMS_BALANCE_MIN_PHARMA_ALSADY   WHERE ITEM_CODE IN (SELECT * FROM dbo.splitstring(@MULTI_CODE)  ) 

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 END
	 ELSE
 BEGIN
SELECT    * into #tempSale1 FROM   V_ITEMS_BALANCE_MIN_PHARMA_ALSADY         WHERE ITEM_CODE IN (SELECT * FROM dbo.splitstring(@MULTI_CODE)  ) 

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale1;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale1
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

	 END

		

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;


	 
	 
	end 

	

	

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_ITEM_STORE_MULTI_CODE_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_ITEM_STORE_MULTI_CODE_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_AL_SADY_GET_ITEM_STORE_MULTI_CODE_MS] 
	@PageSize int,
	@PageNumber int ,
	@MULTI_CODE NVARCHAR(MAX)
	AS
	DECLARE @TotalRecords INT;DECLARE @TotalPages INT;DECLARE @Offset INT;
	BEGIN 
	SET NOCOUNT ON 
IF LEN(@MULTI_CODE)>0
	BEGIN
	SELECT * into #tempSale FROM V_ITEMS_BALANCE_MIN_PHARMA_ALSADY WHERE ITEM_CODE IN (SELECT * FROM dbo.splitstring(@MULTI_CODE)) 	
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;
	SELECT * FROM #tempSale ORDER BY ITEM_NAME ASC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	END
ELSE
	BEGIN
	SELECT * into #tempSale1 FROM V_ITEMS_BALANCE_MIN_PHARMA_ALSADY WHERE ITEM_CODE IN (SELECT * FROM dbo.splitstring(@MULTI_CODE)) 	
    SELECT @TotalRecords = COUNT(*) FROM #tempSale1;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    SET @Offset  = (@PageNumber - 1) * @PageSize;
	SELECT * FROM #tempSale ORDER BY ITEM_NAME ASC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	END
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_LAST_ITEM_STORE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_LAST_ITEM_STORE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_AL_SADY_GET_LAST_ITEM_STORE] 
	@PageSize int,@PageNumber int 
	AS
	set nocount on
	DECLARE @TotalRecords INT;DECLARE @TotalPages INT;DECLARE @Offset INT;
BEGIN 
	SELECT ITEM.* into #tempSale1 FROM V_ITEMS_BALANCE_MIN_PHARMA_ALSADY AS ITEM
	INNER JOIN T_BUY_DETAILS ON T_BUY_DETAILS.ITEM_CODE =ITEM.ITEM_CODE
	WHERE ITEM.IS_HIDE=0	AND T_BUY_DETAILS.BILL_NUMBER=0   AND T_BUY_DETAILS.C_DATE >= DATEADD(MONTH, -1, GETDATE())
    SELECT @TotalRecords = COUNT(*) FROM #tempSale1;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;
    SELECT * FROM #tempSale1 ORDER BY ITEM_NAME ASC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
END


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_LAST_ITEM_STORE_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_LAST_ITEM_STORE_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE proc [dbo].[P_API_AL_SADY_GET_LAST_ITEM_STORE_MS] 
	@PageSize int,@PageNumber int 
	AS
	set nocount on
	DECLARE @TotalRecords INT;DECLARE @TotalPages INT;DECLARE @Offset INT;
BEGIN 
	SELECT ITEM.* into #tempSale1 FROM V_ITEMS_BALANCE_MIN_PHARMA_ALSADY AS ITEM
	INNER JOIN T_BUY_DETAILS ON T_BUY_DETAILS.ITEM_CODE =ITEM.ITEM_CODE
	WHERE ITEM.IS_HIDE=0 AND ITEM.SHOW_CATEGORY_ITEM =1	AND T_BUY_DETAILS.BILL_NUMBER=0 AND IS_HIDE =0  AND T_BUY_DETAILS.C_DATE >= DATEADD(MONTH, -1, GETDATE())
    SELECT @TotalRecords = COUNT(*) FROM #tempSale1;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;
    SELECT * FROM #tempSale1 ORDER BY ITEM_CODE desc OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_LOGIN_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_LOGIN_CLIENT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




CREATE proc [dbo].[P_API_AL_SADY_GET_LOGIN_CLIENT] 
 
	@CLIENT_PHONE NVARCHAR(MAX)	 ,
	@CLIENT_PIN_CODE NVARCHAR(MAX),
	@DEVICE_TOKEN NVARCHAR(MAX)	

	as

	set nocount on
	 
	begin 
	 
DECLARE @CURRANCY_CLIENT INT,@COUNT_CLIENT INT	,@CLIENT_CODE INT ,@CLIENT_TOKEN NVARCHAR(MAX)	 
IF @DEVICE_TOKEN=''0000''
BEGIN
 UPDATE T_CLIENT SET CLIENT_TOKEN=N'''' WHERE  CLIENT_ACTIVE=1 AND CLIENT_PHONE LIKE @CLIENT_PHONE AND CLIENT_PIN_CODE=@CLIENT_PIN_CODE
 SELECT 9 AS ID, N''Error , Reset TOKEN successfully done '' AS  N''Response''  FROM T_CLIENT WHERE CLIENT_CODE=2100000

 RETURN
END
IF @DEVICE_TOKEN=''1111''
BEGIN
SELECT TOP(1) @DEVICE_TOKEN=CLIENT_TOKEN  FROM T_CLIENT WHERE CLIENT_ACTIVE=1 AND CLIENT_PHONE LIKE @CLIENT_PHONE AND CLIENT_PIN_CODE=@CLIENT_PIN_CODE ORDER BY CLIENT_CODE DESC
IF LEN(@DEVICE_TOKEN)=0
BEGIN
SET @DEVICE_TOKEN=''1111''
UPDATE T_CLIENT SET CLIENT_TOKEN=@DEVICE_TOKEN WHERE  CLIENT_ACTIVE=1 AND CLIENT_PHONE LIKE @CLIENT_PHONE AND CLIENT_PIN_CODE=@CLIENT_PIN_CODE
END
 END



 SELECT @COUNT_CLIENT=COUNT(CLIENT_CODE) FROM T_CLIENT WHERE CLIENT_ACTIVE=1 AND CLIENT_PHONE LIKE @CLIENT_PHONE AND CLIENT_PIN_CODE=@CLIENT_PIN_CODE
 IF @COUNT_CLIENT=0
 BEGIN

 SELECT 0 AS ID, N''Error , No Data By Login '' AS  N''Response''  FROM T_CLIENT WHERE CLIENT_CODE=2100000

 RETURN
 END
 else if @COUNT_CLIENT>0
 begin

 SELECT TOP(1) @CLIENT_TOKEN=CLIENT_TOKEN,@CLIENT_CODE=CLIENT_CODE FROM T_CLIENT WHERE CLIENT_ACTIVE=1 AND CLIENT_PHONE LIKE @CLIENT_PHONE AND CLIENT_PIN_CODE=@CLIENT_PIN_CODE ORDER BY CLIENT_CODE DESC

 IF @CLIENT_TOKEN <> @DEVICE_TOKEN AND LEN(@CLIENT_TOKEN)>0
 BEGIN
 SELECT 3 AS ID, N''Error , You are logged in from another device '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
		RETURN
 END

SELECT  TOP(1) *,ISNULL((SELECT BALANCE  FROM V_ACC_B WHERE ACCOUNT_CODE=S.CLIENT_CODE),0) AS BALANCE_USA,ISNULL((SELECT BALANCE_IQ  FROM V_ACC_B WHERE ACCOUNT_CODE=S.CLIENT_CODE),0) AS BALANCE_IQ  FROM T_CLIENT S WHERE S.CLIENT_ACTIVE=1 AND S.CLIENT_PHONE LIKE @CLIENT_PHONE AND S.CLIENT_PIN_CODE=@CLIENT_PIN_CODE ORDER BY S.CLIENT_CODE DESC
		
SELECT  TOP(1) @CURRANCY_CLIENT =ISNULL(CURRANCY_CODE,0) FROM T_CLIENT WHERE CLIENT_ACTIVE=1 AND CLIENT_PHONE LIKE @CLIENT_PHONE AND CLIENT_PIN_CODE=@CLIENT_PIN_CODE ORDER BY CLIENT_CODE DESC
 SELECT    *   FROM   T_DISCOUNT_APP   WHERE T_ID  = 1  
SELECT  * from T_CURRANNCY where CURRANCY_CODE=@CURRANCY_CLIENT
 UPDATE T_CLIENT SET CLIENT_TOKEN=@DEVICE_TOKEN WHERE CLIENT_CODE=@CLIENT_CODE  
     
SELECT @CURRANCY_CLIENT AS CURRANCY_CLIENT
		SELECT 1 AS ID, N''successfully done , Get Data ..  '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
	 RETURN
		END
		ELSE 
		BEGIN
		SELECT 2 AS ID, N''Error , Get Data '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
		 RETURN
		END	 
	 
	end 
	
	

	




' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_LOGIN_CLIENT_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_LOGIN_CLIENT_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROC [dbo].[P_API_AL_SADY_GET_LOGIN_CLIENT_MS] 
    @CLIENT_PHONE NVARCHAR(MAX),
    @CLIENT_PIN_CODE NVARCHAR(MAX),
    @DEVICE_TOKEN NVARCHAR(MAX)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @CURRANCY_CLIENT INT, @COUNT_CLIENT INT, @CLIENT_CODE INT, @CLIENT_TOKEN NVARCHAR(MAX);

IF @DEVICE_TOKEN = ''0000''
    BEGIN
        UPDATE T_CLIENT SET CLIENT_TOKEN = N'''' WHERE CLIENT_ACTIVE = 1 AND CLIENT_PHONE LIKE @CLIENT_PHONE AND CLIENT_PIN_CODE = @CLIENT_PIN_CODE;
        IF @@ROWCOUNT = 0
        BEGIN
            RAISERROR(''لا توجد بيانات لتحديث التوكن'', 16, 1);
            RETURN;
        END
        RETURN;
    END
IF @DEVICE_TOKEN = ''1111''
    BEGIN
	SELECT TOP(1) @DEVICE_TOKEN = CLIENT_TOKEN  FROM T_CLIENT WHERE CLIENT_ACTIVE = 1 AND CLIENT_PHONE LIKE @CLIENT_PHONE AND CLIENT_PIN_CODE = @CLIENT_PIN_CODE ORDER BY CLIENT_CODE DESC;
        IF LEN(@DEVICE_TOKEN) = 0
        BEGIN
		SET @DEVICE_TOKEN = ''1111'';
		UPDATE T_CLIENT SET CLIENT_TOKEN = @DEVICE_TOKEN WHERE CLIENT_ACTIVE = 1 AND CLIENT_PHONE LIKE @CLIENT_PHONE AND CLIENT_PIN_CODE = @CLIENT_PIN_CODE;
		IF @@ROWCOUNT = 0
			BEGIN
                RAISERROR(''لا توجد بيانات لتحديث التوكن'', 16, 1);
                RETURN;
            END
        END
    END
    IF NOT EXISTS (SELECT 1 FROM T_CLIENT WHERE CLIENT_ACTIVE = 1 AND CLIENT_PHONE LIKE @CLIENT_PHONE AND CLIENT_PIN_CODE = @CLIENT_PIN_CODE)
    BEGIN
        RAISERROR(''لا توجد بيانات للعميل'', 16, 1);
        RETURN;
    END

    SELECT TOP(1) @CLIENT_TOKEN = CLIENT_TOKEN, @CLIENT_CODE = CLIENT_CODE FROM T_CLIENT WHERE CLIENT_ACTIVE = 1 AND CLIENT_PHONE LIKE @CLIENT_PHONE AND CLIENT_PIN_CODE = @CLIENT_PIN_CODE ORDER BY CLIENT_CODE DESC;

    IF @CLIENT_TOKEN <> @DEVICE_TOKEN AND LEN(@CLIENT_TOKEN) > 0
    BEGIN
	    RAISERROR(''تم تسجيل الدخول من جهاز اخر'', 16, 1);
        RETURN;
    END

	SELECT TOP(1) *, ISNULL((SELECT BALANCE FROM V_ACC_B WHERE ACCOUNT_CODE = S.CLIENT_CODE), 0) AS BALANCE_USA, ISNULL((SELECT BALANCE_IQ FROM V_ACC_B WHERE ACCOUNT_CODE = S.CLIENT_CODE), 0) AS BALANCE_IQ FROM T_CLIENT S WHERE S.CLIENT_ACTIVE = 1 AND S.CLIENT_PHONE LIKE @CLIENT_PHONE AND S.CLIENT_PIN_CODE = @CLIENT_PIN_CODE ORDER BY S.CLIENT_CODE DESC;
    SELECT TOP(1) @CURRANCY_CLIENT = ISNULL(CURRANCY_CODE, 0) FROM T_CLIENT WHERE CLIENT_ACTIVE = 1 AND CLIENT_PHONE LIKE @CLIENT_PHONE AND CLIENT_PIN_CODE = @CLIENT_PIN_CODE ORDER BY CLIENT_CODE DESC;
    SELECT * FROM T_DISCOUNT_APP WHERE T_ID = 1;
    SELECT * FROM T_CURRANNCY WHERE CURRANCY_CODE = @CURRANCY_CLIENT;
    UPDATE T_CLIENT SET CLIENT_TOKEN = @DEVICE_TOKEN WHERE CLIENT_CODE = @CLIENT_CODE;

    IF @@ROWCOUNT = 0
    BEGIN
        RAISERROR(''لا توجد بيانات لتحديث التوكن'', 16, 1);
        RETURN;
    END

END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_LOGIN_MANDOOB]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_LOGIN_MANDOOB]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'





CREATE proc [dbo].[P_API_AL_SADY_GET_LOGIN_MANDOOB] 
 
	@MANDOOB_NAME NVARCHAR(MAX)	 ,
	@MANDOOB_PIN_CODE NVARCHAR(MAX),
	@DEVICE_TOKEN NVARCHAR(MAX)	

	as

	set nocount on
	 
	begin 
	 
DECLARE @CURRANCY_CLIENT INT,@COUNT_MANDOOB INT	,@MANDOOB_CODE INT ,@MANDOOB_TOKEN NVARCHAR(MAX)	 
IF @DEVICE_TOKEN=''0000''
BEGIN
 UPDATE T_MANDOOB SET MANDOOB_TOKEN=N'''' WHERE  MANDOOB_ACTIVE=1 AND MANDOOB_NAME LIKE @MANDOOB_NAME AND PIN_CODE=@MANDOOB_PIN_CODE
 SELECT 9 AS ID, N''Error , Reset TOKEN successfully done '' AS  N''Response''  FROM T_MANDOOB WHERE MANDOOB_CODE=-10

 RETURN
END
 SELECT @COUNT_MANDOOB=COUNT(MANDOOB_CODE) FROM T_MANDOOB WHERE MANDOOB_ACTIVE=1 AND MANDOOB_NAME LIKE @MANDOOB_NAME AND PIN_CODE=@MANDOOB_PIN_CODE
 IF @COUNT_MANDOOB=0
 BEGIN

 SELECT 0 AS ID, N''Error , No Data By Login '' AS  N''Response'' FROM T_MANDOOB WHERE MANDOOB_CODE=-10

 RETURN
 END
 else if @COUNT_MANDOOB>0
 begin

 SELECT TOP(1) @MANDOOB_TOKEN=MANDOOB_TOKEN,@MANDOOB_CODE=MANDOOB_CODE FROM T_MANDOOB WHERE MANDOOB_ACTIVE=1AND MANDOOB_NAME LIKE @MANDOOB_NAME AND PIN_CODE=@MANDOOB_PIN_CODE ORDER BY MANDOOB_CODE DESC

 IF @MANDOOB_TOKEN <> @DEVICE_TOKEN AND LEN(@MANDOOB_TOKEN)>0
 BEGIN
 SELECT 3 AS ID, N''Error , You are logged in from another device '' AS  N''Response'' FROM T_MANDOOB WHERE MANDOOB_CODE=-10
		RETURN
 END

SELECT  TOP(1) * FROM T_MANDOOB   WHERE MANDOOB_ACTIVE=1 AND MANDOOB_NAME LIKE @MANDOOB_NAME AND PIN_CODE=@MANDOOB_PIN_CODE ORDER BY MANDOOB_CODE DESC

SELECT  CLIENT_CODE,CLIENT_NAME,CLIENT_PHONE,CLIENT_PIN_CODE  FROM T_CLIENT   WHERE  CLIENT_ACTIVE=1 AND MANDOOB_CODE = @MANDOOB_CODE   ORDER BY CLIENT_NAME DESC
	 SELECT    *   FROM   T_DISCOUNT_APP   WHERE T_ID  = 1  	
 
 UPDATE T_MANDOOB SET MANDOOB_TOKEN=@DEVICE_TOKEN WHERE MANDOOB_CODE=@MANDOOB_CODE  
     
 
		SELECT 1 AS ID, N''successfully done , Get Data ..  '' AS  N''Response'' FROM T_MANDOOB WHERE MANDOOB_CODE=-10
	 RETURN
		END
		ELSE 
		BEGIN
		SELECT 2 AS ID, N''Error , Get Data '' AS  N''Response''   FROM T_MANDOOB WHERE MANDOOB_CODE=-10
		 RETURN
		END	 
	 
	end 
	
	

	





' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_LOGIN_MANDOOB_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_LOGIN_MANDOOB_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_AL_SADY_GET_LOGIN_MANDOOB_MS] 
    @MANDOOB_NAME NVARCHAR(MAX),
    @MANDOOB_PIN_CODE NVARCHAR(MAX),
    @DEVICE_TOKEN NVARCHAR(MAX)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @COUNT_MANDOOB INT,@MANDOOB_CODE INT,@MANDOOB_TOKEN NVARCHAR(MAX);

    IF @DEVICE_TOKEN = ''0000''
		BEGIN UPDATE T_MANDOOB SET MANDOOB_TOKEN = N'''' WHERE MANDOOB_ACTIVE = 1 AND MANDOOB_NAME = @MANDOOB_NAME AND PIN_CODE = @MANDOOB_PIN_CODE;
		IF @@ROWCOUNT = 0
		BEGIN
		RAISERROR(''لا توجد بيانات لتحديث التوكن'', 16, 1);
		RETURN;
		END
		RETURN;
    END;
    SELECT @COUNT_MANDOOB = COUNT(*) FROM T_MANDOOB WHERE MANDOOB_ACTIVE = 1 AND MANDOOB_NAME = @MANDOOB_NAME AND PIN_CODE = @MANDOOB_PIN_CODE;
    IF @COUNT_MANDOOB = 0
    BEGIN
        RAISERROR(''لا توجد بيانات تطابق تسجيل الدخول'', 16, 1);
        RETURN;
    END;

    SELECT TOP(1) @MANDOOB_TOKEN = MANDOOB_TOKEN, @MANDOOB_CODE = MANDOOB_CODE FROM T_MANDOOB WHERE MANDOOB_ACTIVE = 1 AND MANDOOB_NAME = @MANDOOB_NAME AND PIN_CODE = @MANDOOB_PIN_CODE ORDER BY MANDOOB_CODE DESC;

    IF @MANDOOB_TOKEN <> @DEVICE_TOKEN AND LEN(@MANDOOB_TOKEN) > 0
    BEGIN
        RAISERROR(''تم تسجيل الدخول من جهاز آخر'', 16, 1);
        RETURN;
    END;

    SELECT TOP(1) * FROM T_MANDOOB WHERE MANDOOB_ACTIVE = 1 AND MANDOOB_NAME = @MANDOOB_NAME AND PIN_CODE = @MANDOOB_PIN_CODE ORDER BY MANDOOB_CODE DESC;

    SELECT CLIENT_CODE, CLIENT_NAME, CLIENT_PHONE, CLIENT_PIN_CODE  FROM T_CLIENT WHERE CLIENT_ACTIVE = 1 AND MANDOOB_CODE = @MANDOOB_CODE ORDER BY CLIENT_NAME DESC;

    SELECT * FROM T_DISCOUNT_APP WHERE T_ID = 1;

    UPDATE T_MANDOOB SET MANDOOB_TOKEN = @DEVICE_TOKEN WHERE MANDOOB_CODE = @MANDOOB_CODE;

    -- إرجاع نتيجة النجاح
    SELECT 1 AS ID, N''تم جلب البيانات بنجاح'' AS Response;
END;

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_SLIDER_HOME]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_SLIDER_HOME]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE proc [dbo].[P_API_AL_SADY_GET_SLIDER_HOME] 
 
	@TYPE_IMAGE INT	 
	as

	set nocount on
	 
	begin 
	 
	 

SELECT    *   FROM   T_ITEM_IMAGE   WHERE TYPE_IMAGE  = @TYPE_IMAGE

		
   
     
	 
	 
	end 

	

	



' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_SLIDER_HOME_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_SLIDER_HOME_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE proc [dbo].[P_API_AL_SADY_GET_SLIDER_HOME_MS] 
	@TYPE_IMAGE INT	 
	AS
	SET NOCOUNT ON
BEGIN 
	SELECT * FROM T_ITEM_IMAGE WHERE TYPE_IMAGE=@TYPE_IMAGE
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_TAG_PROCCESS_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_TAG_PROCCESS_INVOICE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'





CREATE proc [dbo].[P_API_AL_SADY_GET_TAG_PROCCESS_INVOICE] 
 
	@FILTER_CODE INT	 
	as

	set nocount on
	 
	begin 
	 
	 

 
SELECT * FROM [T_TAG_PROCCESS] WHERE FILTER_CODE=@FILTER_CODE OR TAG_PROCCESS_CODE=0 ORDER BY TAG_PROCCESS_CODE ASC
		
   
     
	 
	 
	end 

	

	






' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_GET_TAG_PROCCESS_INVOICE_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_GET_TAG_PROCCESS_INVOICE_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'





CREATE proc [dbo].[P_API_AL_SADY_GET_TAG_PROCCESS_INVOICE_MS] 
 
	@FILTER_CODE INT	 
	AS
	SET NOCOUNT ON 
BEGIN 
	SELECT * FROM [T_TAG_PROCCESS] WHERE FILTER_CODE=@FILTER_CODE OR TAG_PROCCESS_CODE=0 ORDER BY TAG_PROCCESS_CODE ASC
END


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_INSERT_APP_INVOICE_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_INSERT_APP_INVOICE_TEMP]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[P_API_AL_SADY_INSERT_APP_INVOICE_TEMP]
@T_ID INT,
@BILL_NUMBER INT OUTPUT,
@SUBMIT_FLAG INT OUTPUT

AS
DECLARE
@B_CODE INT,
@CURRANCY_CODE_INVOICE INT,
@CURRANCY_EQUAL_INVOICE FLOAT,
--@CURRANCY_CODE_PRIMARY INT,
@BOX_USER INT,
@USER_CODE INT,
@INFO NVARCHAR(MAX),
@DETAILS NVARCHAR(MAX),
@USER_CREATE NVARCHAR(MAX),
@COMPANY_TITAL NVARCHAR(MAX)


begin 
BEGIN TRANSACTION;
SET @SUBMIT_FLAG=0
SELECT @INFO=INFO,@DETAILS=DETAILS,@B_CODE=B_CODE,@USER_CREATE=ISNULL(USER_CREATE,N''APPS'')  FROM T_APP_INVOICE WHERE T_ID=@T_ID  AND IS_INSERT=0
IF LEN(ISNULL(@DETAILS,N''''))<10 GOTO RETTTTT
IF @B_CODE<>2  GOTO RETTTTT
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1

SELECT @CURRANCY_CODE_INVOICE=CURRANCY_CODE  FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SELECT @CURRANCY_EQUAL_INVOICE=CURRANCY_EQUAL  FROM T_CURRANNCY WHERE CURRANCY_CODE=2

SELECT TOP(1) @BOX_USER=ISNULL(BOX_CODE,5000),@USER_CODE=USER_CODE  FROM T_USERS WHERE USER_NAME LIKE @USER_CREATE AND ACTIVE=1
SET @BOX_USER=ISNULL(@BOX_USER,5000)
SET @USER_CODE=ISNULL(@USER_CODE,1)
SELECT @BILL_NUMBER=ISNULL(MAX(BILL_NUMBER),0) + 1 FROM T_SALES
 
 -------------------------------------------------------------------------------------------------------
INSERT INTO [dbo].[T_SALES]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_INVOICE]
           ,[BILL_DATE]
           ,[OFFER_CODE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[CLIENT_CODE]
           ,[CLIENT_NAME]
           ,[CLIENT_PHONE]
           ,[CLIENT_ADRESS]
           ,[MANDOOB_CODE]
           ,[DESCRIPTION]
           ,[TYPE_PRICE_SELL]
           ,[STORE_CODE]
           ,[USER_CREATE]
           ,[SECURETY_CODE]
           ,[TOTAL_SALES]
           ,[DISCOUNT_ITEMS]
           ,[DISCOUNT_PERCENT]
           ,[DISCOUNT_AMOUNT]
           ,[TOTAL_DISCOUNT]
           ,[NET_SALES]
           ,[TOTAL_COST]
           ,[IVC_CODE]
           ,[DAY_CASH]
           ,[DATE_CASH]
           ,[TOT_CONV]
           ,[ACCOUNT_CODE]
           ,[CASH_USA]
           ,[REMAIN_USA]
           ,[CASH_IQ]
           ,[REMAIN_IQ]
           ,[C_DATE]
           ,[C_UPDATE]
           ,[USER_UPDATE]
           ,[ACTIVE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[FLAG_CASH]
           ,[IS_OUT]
           ,[CURRANCY_SALES]
           ,[IS_TRANS]
           ,[CENTER_CODE]
           ,[QR_DATA]
           ,[ITEM_ID_PAYMENT]
           ,[TAG_PROCCESS_CODE]
           ,[LINK_ID_PAYMENT]
           ,[BILL_RETURN]
           ,[BILL_SANAD_CNY]
           ,[CNY_IQ]
           ,[IS_PREPARE]
           ,[DRIVER_CODE]
           ,[LAT]
           ,[LNG]
           ,[STATUS_SHIPING]
           ,[MOVE_CODE]
           ,[BILL_ORDER]
           ,[TOTAL_TAX_ITEM]
           ,[TOTAL_MANDOOB_ITEM]
           ,[TOTAL_ADD_COST]
           ,[TOTAL_ADD_AMO]
           ,[SHIP_CODE]
           ,[COST_SHIP]
           ,[IS_POINT]
           ,[COST_SHIP_CLIENT]
           ,[USER_TAG_CODE]
           ,[RELATION_BILL_CODE]
           ,[RELATION_B_CODE]
           ,[REGION_CODE]
           ,[COL_INT1]
           ,[COL_INT2]
           ,[COL_INT3]
           ,[COL_STR1]
           ,[COL_STR2]
           ,[COL_STR3]
           ,[IS_PDF]
           ,[PATH_PDF]
           ,[PATH_PDF_API])
      Select
			@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max))  as [BILL_BRANCH]
           ,@BILL_NUMBER as [BILL_NUMBER]
           ,@BILL_NUMBER as [BILL_INVOICE]
           ,GETDATE() as [BILL_DATE]
           ,77 as [OFFER_CODE]
           ,@CURRANCY_CODE_INVOICE as [CURRANCY_CODE]
           , @CURRANCY_EQUAL_INVOICE as [CURRANCY_EQUAL]
           ,max(case when name=''CLIENT_CODE'' then convert(int,StringValue) else 0 end) as [CLIENT_CODE]
           ,max(case when name=''CLIENT_NAME'' then convert(nvarchar(max),StringValue) else N'''' end) as [CLIENT_NAME]
           ,max(case when name=''CLIENT_PHONE'' then convert(nvarchar(max),StringValue) else N'''' end) as [CLIENT_PHONE]
           ,max(case when name=''CLIENT_ADDRESS'' then convert(nvarchar(max),StringValue) else N'''' end) as [CLIENT_ADRESS]
           ,max(case when name=''MANDOOB_CODE'' then convert(nvarchar(max),StringValue) else N''1'' end) as [MANDOOB_CODE]
           ,max(case when name=''NOTE_ORDER'' then convert(nvarchar(max),StringValue) else N'''' end) as [DESCRIPTION]
           ,1 as [TYPE_PRICE_SELL]
           ,0 as [STORE_CODE]
           ,@USER_CREATE as [USER_CREATE]
           ,1 as [SECURETY_CODE]
           ,max(case when name=''TOTAL'' then convert(float,StringValue) else 0 end) as [TOTAL_SALES]
           ,0 as [DISCOUNT_ITEMS]
           ,0 as [DISCOUNT_PERCENT]
           ,max(case when name=''TOTAL_DISCOUNT'' then convert(float,StringValue) else 0 end) as [DISCOUNT_AMOUNT]
           ,max(case when name=''TOTAL_DISCOUNT'' then convert(float,StringValue) else 0 end) as [TOTAL_DISCOUNT]
           ,(max(case when name=''TOTAL'' then convert(float,StringValue) else 0 end) - max(case when name=''TOTAL_DISCOUNT'' then convert(float,StringValue) else 0 end)) as [NET_SALES]
           ,0 as [TOTAL_COST] -- FROM SUM
           ,max(case when name=''INVOICE_CODE'' then convert(int,StringValue) else 0 end) as [IVC_CODE]
           ,0 as [DAY_CASH]
           ,GETDATE() as [DATE_CASH]
           ,N'''' as [TOT_CONV]
           , @BOX_USER  as [ACCOUNT_CODE]
           ,IIF(@CURRANCY_CODE_INVOICE=1, max(case when name=''CASH_AMO'' then convert(float,StringValue) else 0 end),0) as [CASH_USA]
           ,IIF(@CURRANCY_CODE_INVOICE=1,max(case when name=''REMAIN_AMO'' then convert(float,StringValue) else 0 end),0) as [REMAIN_USA]
           ,IIF(@CURRANCY_CODE_INVOICE=2, max(case when name=''CASH_AMO'' then convert(float,StringValue) else 0 end),0) as [CASH_IQ]
           ,IIF(@CURRANCY_CODE_INVOICE=2,max(case when name=''REMAIN_AMO'' then convert(float,StringValue) else 0 end),0) as [REMAIN_IQ]
           ,GETDATE() as [C_DATE]
           ,N'''' as [C_UPDATE]
           ,N'''' as [USER_UPDATE]
           ,0 as [ACTIVE]
           ,0 as [IS_AVG_COST]
           ,0 as [AVG_COST]
           ,IIF( max(case when name=''REMAIN_AMO'' then convert(float,StringValue) else 0 end)=0,1,0) as [FLAG_CASH]
           ,1 as [IS_OUT]
           ,@CURRANCY_EQUAL_INVOICE as [CURRANCY_SALES]
           ,0 as [IS_TRANS]
           ,0 as [CENTER_CODE]
           ,N'''' as [QR_DATA]
           ,N'''' as [ITEM_ID_PAYMENT]
           ,max(case when name=''INVOICE_STATUS'' then convert(int,StringValue) else 0 end)  as [TAG_PROCCESS_CODE]
           ,N'''' as [LINK_ID_PAYMENT]
           ,0 as [BILL_RETURN]
           ,0 as [BILL_SANAD_CNY]
           ,1 as [CNY_IQ]
           ,0 as [IS_PREPARE]
           ,max(case when name=''DRIVER_CODE'' then convert(int,StringValue) else 0 end) as [DRIVER_CODE]
           ,max(case when name=''LAT'' then convert(nvarchar(max),StringValue) else N'''' end) as [LAT]
           ,max(case when name=''LNG'' then convert(nvarchar(max),StringValue) else N'''' end) as [LNG]
           ,max(case when name=''STATUS_SHIPING'' then convert(int,StringValue) else 0 end) as [STATUS_SHIPING]
           ,0 as [MOVE_CODE]
           ,0 as [BILL_ORDER]
           ,0 as [TOTAL_TAX_ITEM]
           ,max(case when name=''TOTAL_MANDOOB_ITEM'' then convert(float,StringValue) else 0 end) as [TOTAL_MANDOOB_ITEM]
           ,max(case when name=''TOTAL_ADD_COST'' then convert(float,StringValue) else 0 end) as [TOTAL_ADD_COST]
           ,max(case when name=''TOTAL_ADD_AMO'' then convert(float,StringValue) else 0 end) as [TOTAL_ADD_AMO]
           ,max(case when name=''SHIP_CODE'' then convert(INT,StringValue) else 0 end) as [SHIP_CODE]
           ,max(case when name=''DELIVERYCOST'' then convert(float,StringValue) else 0 end) as [COST_SHIP]
           ,0 as [IS_POINT]
           ,max(case when name=''COST_SHIP_CLIENT'' then convert(float,StringValue) else 0 end) as [COST_SHIP_CLIENT]
           ,0 as [USER_TAG_CODE]
           ,0 as [RELATION_BILL_CODE]
           ,0 as [RELATION_B_CODE]
           ,max(case when name=''REGION_CODE'' then convert(int,StringValue) else 0 end) as [REGION_CODE]
           ,max(case when name=''COL_INT1'' then convert(int,StringValue) else 0 end) as [COL_INT1]
           ,max(case when name=''COL_INT2'' then convert(int,StringValue) else 0 end) as [COL_INT2]
           ,max(case when name=''COL_INT3'' then convert(int,StringValue) else 0 end) as [COL_INT3]
           ,max(case when name=''COL_STR1'' then convert(nvarchar(max),StringValue) else N'''' end) as [COL_STR1]
           ,max(case when name=''COL_STR2'' then convert(nvarchar(max),StringValue) else N'''' end) as [COL_STR2]
           ,max(case when name=''COL_STR3'' then convert(nvarchar(max),StringValue) else N'''' end) as [COL_STR3]
           ,0 as [IS_PDF]
           ,N'''' as [PATH_PDF]
           ,N'''' as [PATH_PDF_API]


From parseJSON
(
       @INFO
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID

 -------------------------------------------------------------------------------------------------------
 select top(1) @CURRANCY_CODE_INVOICE =CURRANCY_CODE,@CURRANCY_EQUAL_INVOICE=CURRANCY_EQUAL  from T_SALES where BILL_NUMBER=@BILL_NUMBER
INSERT INTO [dbo].[T_SALES_TEMP]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY]
           ,[ITEM_NOTE_SALES]
           ,[NOTE_PRINT]
           ,[IS_PRINT]
           ,[USER_PREPARE]
           ,[USER_CUT]
           ,[DISCOUNT_TYPE]
           ,[IS_SERIAL]
           ,[IS_TAX]
           ,[TAX_PERCENT_ITEM]
           ,[TAX_AMO_ITEM]
           ,[IS_MANDOOB]
           ,[MANDOOB_PERCENT_ITEM]
           ,[MANDOOB_AMO_ITEM]
           ,[QTY_FREE]
           ,[TOTAL_QTY])
 Select
       @COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max))  as [BILL_BRANCH]
           ,@BILL_NUMBER as [BILL_NUMBER]
           ,max(case when name=''ITEM_CODE'' then convert(int,StringValue) else -1 end) as [ITEM_CODE]
           ,max(case when name=''ITEM_NAME'' then convert(nvarchar(max),StringValue) else N'''' end) as [ITEM_NAME]
           ,max(case when name=''QTY'' then convert(float,StringValue) else 0 end) as [QTY]
           ,max(case when name=''UNIT_NAME'' then convert(nvarchar(max),StringValue) else N'''' end) as [UNIT_NAME]
           ,max(case when name=''UNIT_QTY'' then convert(float,StringValue) else 0 end) as [UNIT_QTY]
           ,max(case when name=''STORE_CODE'' then convert(int,StringValue) else 0 end) as [STORE_CODE]
           ,-999999 as [WAJBA_CODE]
           ,N'''' as [WAJBA_NAME]
           ,N'''' as [WAJBA_BALANCE]
           ,@CURRANCY_CODE_INVOICE as [CURRANCY_CODE]
           ,@CURRANCY_EQUAL_INVOICE as [CURRANCY_EQUAL]
           ,max(case when name=''PRICE_COST'' then convert(float,StringValue) else 0 end)*max(case when name=''UNIT_QTY'' then convert(float,StringValue) else 0 end) as [COST]
           ,max(case when name=''PRICE'' then convert(float,StringValue) else 0 end) as [PRICE]
           ,max(case when name=''DISC_PERCENT'' then convert(float,StringValue) else 0 end) as [DISCOUNT_PERCENT_ITEM]
           ,0 as [DISCOUNT_AMOUNT_ITEM]
           ,GETDATE() as [C_DATE]
           ,1 as [ACTIVE]
           ,-999999 as [BILL_BUY]
           ,max(case when name=''NOTE'' then convert(nvarchar(max),StringValue) else N'''' end) as [ITEM_NOTE_SALES]
           ,NULL as [NOTE_PRINT]
           ,0 as [IS_PRINT]
           ,NULL as [USER_PREPARE]
           ,N'''' as [USER_CUT]
           ,IIF(max(case when name=''DISC_PERCENT'' then convert(float,StringValue) else 0 end)<>0,1, 0 )as [DISCOUNT_TYPE]
           ,0 as [IS_SERIAL]
           ,0 as [IS_TAX]
           ,max(case when name=''TAX_PERCENT_ITEM'' then convert(float,StringValue) else 0 end) as [TAX_PERCENT_ITEM]
           ,max(case when name=''TAX_AMO_ITEM'' then convert(float,StringValue) else 0 end) as [TAX_AMO_ITEM]
           ,max(case when name=''IS_MANDOOB'' then convert(bit,StringValue) else 0 end) as [IS_MANDOOB]
           ,max(case when name=''MANDOOB_PERCENT_ITEM'' then convert(nvarchar(max),StringValue) else 0 end) as [MANDOOB_PERCENT_ITEM]
           ,IIF(max(case when name=''IS_MINUS_MANDOOB'' then convert(int,StringValue) else 0 end)=0, (max(case when name=''totalNetProfitMandob'' then convert(float,StringValue) else 0 end)/ max(case when name=''QTY'' then convert(float,StringValue) else 0 end)),(max(case when name=''totalNetProfitMandob'' then convert(float,StringValue) else 0 end)/ max(case when name=''QTY'' then convert(float,StringValue) else 0 end))*-1) as [MANDOOB_AMO_ITEM]
           ,max(case when name=''QTY_FREE'' then convert(float,StringValue) else 0 end) as [QTY_FREE]
           ,max(case when name=''QTY'' then convert(float,StringValue) else 0 end)+max(case when name=''QTY_FREE'' then convert(float,StringValue) else 0 end)  as [TOTAL_QTY]



From parseJSON
(
       @DETAILS
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID
 
 
 -------------------------------------------------------------------------------------------------------

 -------------------------------------------------------------------------------------------------------


-- FINISHED
  UPDATE [dbo].[T_APP_INVOICE] SET  [IS_INSERT] = 1, [BILL_BRANCH] = @COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), [BILL_NUMBER] = @BILL_NUMBER WHERE T_ID=@T_ID 
  UPDATE T_SALES_TEMP SET DISCOUNT_TYPE=(SELECT IS_DISCOUNT FROM T_ITEMS WHERE ITEM_CODE=T_SALES_TEMP.ITEM_CODE) WHERE BILL_NUMBER=@BILL_NUMBER



AFTER_OFFERS:

SET @SUBMIT_fLAG=1

RETTTTT:
COMMIT
	IF @@ERROR <>0
	BEGIN
	ROLLBACK 
 
	SET @SUBMIT_fLAG=0
	RETURN
	END

return
 

END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_INSERT_APP_INVOICE_TEMP_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_INSERT_APP_INVOICE_TEMP_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[P_API_AL_SADY_INSERT_APP_INVOICE_TEMP_MS]
@T_ID INT,
@BILL_NUMBER INT OUTPUT,
@SUBMIT_FLAG INT OUTPUT

AS
DECLARE
@B_CODE INT,
@CURRANCY_CODE_INVOICE INT,
@CURRANCY_EQUAL_INVOICE FLOAT,
--@CURRANCY_CODE_PRIMARY INT,
@BOX_USER INT,
@USER_CODE INT,
@INFO NVARCHAR(MAX),
@DETAILS NVARCHAR(MAX),
@USER_CREATE NVARCHAR(MAX),
@COMPANY_TITAL NVARCHAR(MAX)


begin 
BEGIN TRANSACTION;
SET @SUBMIT_FLAG=0
SELECT @INFO=INFO,@DETAILS=DETAILS,@B_CODE=B_CODE,@USER_CREATE=ISNULL(USER_CREATE,N''APPS'')  FROM T_APP_INVOICE WHERE T_ID=@T_ID  AND IS_INSERT=0
IF LEN(ISNULL(@DETAILS,N''''))<10 GOTO RETTTTT
IF @B_CODE<>2  GOTO RETTTTT
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1

SELECT @CURRANCY_CODE_INVOICE=CURRANCY_CODE  FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SELECT @CURRANCY_EQUAL_INVOICE=CURRANCY_EQUAL  FROM T_CURRANNCY WHERE CURRANCY_CODE=2

SELECT TOP(1) @BOX_USER=ISNULL(BOX_CODE,5000),@USER_CODE=USER_CODE  FROM T_USERS WHERE USER_NAME LIKE @USER_CREATE AND ACTIVE=1
SET @BOX_USER=ISNULL(@BOX_USER,5000)
SET @USER_CODE=ISNULL(@USER_CODE,1)
SELECT @BILL_NUMBER=ISNULL(MAX(BILL_NUMBER),0) + 1 FROM T_SALES
 
 -------------------------------------------------------------------------------------------------------
INSERT INTO [dbo].[T_SALES]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_INVOICE]
           ,[BILL_DATE]
           ,[OFFER_CODE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[CLIENT_CODE]
           ,[CLIENT_NAME]
           ,[CLIENT_PHONE]
           ,[CLIENT_ADRESS]
           ,[MANDOOB_CODE]
           ,[DESCRIPTION]
           ,[TYPE_PRICE_SELL]
           ,[STORE_CODE]
           ,[USER_CREATE]
           ,[SECURETY_CODE]
           ,[TOTAL_SALES]
           ,[DISCOUNT_ITEMS]
           ,[DISCOUNT_PERCENT]
           ,[DISCOUNT_AMOUNT]
           ,[TOTAL_DISCOUNT]
           ,[NET_SALES]
           ,[TOTAL_COST]
           ,[IVC_CODE]
           ,[DAY_CASH]
           ,[DATE_CASH]
           ,[TOT_CONV]
           ,[ACCOUNT_CODE]
           ,[CASH_USA]
           ,[REMAIN_USA]
           ,[CASH_IQ]
           ,[REMAIN_IQ]
           ,[C_DATE]
           ,[C_UPDATE]
           ,[USER_UPDATE]
           ,[ACTIVE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[FLAG_CASH]
           ,[IS_OUT]
           ,[CURRANCY_SALES]
           ,[IS_TRANS]
           ,[CENTER_CODE]
           ,[QR_DATA]
           ,[ITEM_ID_PAYMENT]
           ,[TAG_PROCCESS_CODE]
           ,[LINK_ID_PAYMENT]
           ,[BILL_RETURN]
           ,[BILL_SANAD_CNY]
           ,[CNY_IQ]
           ,[IS_PREPARE]
           ,[DRIVER_CODE]
           ,[LAT]
           ,[LNG]
           ,[STATUS_SHIPING]
           ,[MOVE_CODE]
           ,[BILL_ORDER]
           ,[TOTAL_TAX_ITEM]
           ,[TOTAL_MANDOOB_ITEM]
           ,[TOTAL_ADD_COST]
           ,[TOTAL_ADD_AMO]
           ,[SHIP_CODE]
           ,[COST_SHIP]
           ,[IS_POINT]
           ,[COST_SHIP_CLIENT]
           ,[USER_TAG_CODE]
           ,[RELATION_BILL_CODE]
           ,[RELATION_B_CODE]
           ,[REGION_CODE]
           ,[COL_INT1]
           ,[COL_INT2]
           ,[COL_INT3]
           ,[COL_STR1]
           ,[COL_STR2]
           ,[COL_STR3]
           ,[IS_PDF]
           ,[PATH_PDF]
           ,[PATH_PDF_API])
      Select
			@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max))  as [BILL_BRANCH]
           ,@BILL_NUMBER as [BILL_NUMBER]
           ,@BILL_NUMBER as [BILL_INVOICE]
           ,GETDATE() as [BILL_DATE]
           ,77 as [OFFER_CODE]
           ,@CURRANCY_CODE_INVOICE as [CURRANCY_CODE]
           , @CURRANCY_EQUAL_INVOICE as [CURRANCY_EQUAL]
           ,max(case when name=''CLIENT_CODE'' then convert(int,StringValue) else 0 end) as [CLIENT_CODE]
           ,max(case when name=''CLIENT_NAME'' then convert(nvarchar(max),StringValue) else N'''' end) as [CLIENT_NAME]
           ,max(case when name=''CLIENT_PHONE'' then convert(nvarchar(max),StringValue) else N'''' end) as [CLIENT_PHONE]
           ,max(case when name=''CLIENT_ADDRESS'' then convert(nvarchar(max),StringValue) else N'''' end) as [CLIENT_ADRESS]
           ,max(case when name=''MANDOOB_CODE'' then convert(nvarchar(max),StringValue) else N''1'' end) as [MANDOOB_CODE]
           ,max(case when name=''NOTE_ORDER'' then convert(nvarchar(max),StringValue) else N'''' end) as [DESCRIPTION]
           ,1 as [TYPE_PRICE_SELL]
           ,0 as [STORE_CODE]
           ,@USER_CREATE as [USER_CREATE]
           ,1 as [SECURETY_CODE]
           ,max(case when name=''TOTAL'' then convert(float,StringValue) else 0 end) as [TOTAL_SALES]
           ,0 as [DISCOUNT_ITEMS]
           ,0 as [DISCOUNT_PERCENT]
           ,max(case when name=''TOTAL_DISCOUNT'' then convert(float,StringValue) else 0 end) as [DISCOUNT_AMOUNT]
           ,max(case when name=''TOTAL_DISCOUNT'' then convert(float,StringValue) else 0 end) as [TOTAL_DISCOUNT]
           ,(max(case when name=''TOTAL'' then convert(float,StringValue) else 0 end) - max(case when name=''TOTAL_DISCOUNT'' then convert(float,StringValue) else 0 end)) as [NET_SALES]
           ,0 as [TOTAL_COST] -- FROM SUM
           ,max(case when name=''INVOICE_CODE'' then convert(int,StringValue) else 0 end) as [IVC_CODE]
           ,0 as [DAY_CASH]
           ,GETDATE() as [DATE_CASH]
           ,N'''' as [TOT_CONV]
           , @BOX_USER  as [ACCOUNT_CODE]
           ,IIF(@CURRANCY_CODE_INVOICE=1, max(case when name=''CASH_AMO'' then convert(float,StringValue) else 0 end),0) as [CASH_USA]
           ,IIF(@CURRANCY_CODE_INVOICE=1,max(case when name=''REMAIN_AMO'' then convert(float,StringValue) else 0 end),0) as [REMAIN_USA]
           ,IIF(@CURRANCY_CODE_INVOICE=2, max(case when name=''CASH_AMO'' then convert(float,StringValue) else 0 end),0) as [CASH_IQ]
           ,IIF(@CURRANCY_CODE_INVOICE=2,max(case when name=''REMAIN_AMO'' then convert(float,StringValue) else 0 end),0) as [REMAIN_IQ]
           ,GETDATE() as [C_DATE]
           ,N'''' as [C_UPDATE]
           ,N'''' as [USER_UPDATE]
           ,0 as [ACTIVE]
           ,0 as [IS_AVG_COST]
           ,0 as [AVG_COST]
           ,IIF( max(case when name=''REMAIN_AMO'' then convert(float,StringValue) else 0 end)=0,1,0) as [FLAG_CASH]
           ,1 as [IS_OUT]
           ,@CURRANCY_EQUAL_INVOICE as [CURRANCY_SALES]
           ,0 as [IS_TRANS]
           ,0 as [CENTER_CODE]
           ,N'''' as [QR_DATA]
           ,N'''' as [ITEM_ID_PAYMENT]
           ,max(case when name=''INVOICE_STATUS'' then convert(int,StringValue) else 0 end)  as [TAG_PROCCESS_CODE]
           ,N'''' as [LINK_ID_PAYMENT]
           ,0 as [BILL_RETURN]
           ,0 as [BILL_SANAD_CNY]
           ,1 as [CNY_IQ]
           ,0 as [IS_PREPARE]
           ,max(case when name=''DRIVER_CODE'' then convert(int,StringValue) else 0 end) as [DRIVER_CODE]
           ,max(case when name=''LAT'' then convert(nvarchar(max),StringValue) else N'''' end) as [LAT]
           ,max(case when name=''LNG'' then convert(nvarchar(max),StringValue) else N'''' end) as [LNG]
           ,max(case when name=''STATUS_SHIPING'' then convert(int,StringValue) else 0 end) as [STATUS_SHIPING]
           ,0 as [MOVE_CODE]
           ,0 as [BILL_ORDER]
           ,0 as [TOTAL_TAX_ITEM]
           ,max(case when name=''TOTAL_MANDOOB_ITEM'' then convert(float,StringValue) else 0 end) as [TOTAL_MANDOOB_ITEM]
           ,max(case when name=''TOTAL_ADD_COST'' then convert(float,StringValue) else 0 end) as [TOTAL_ADD_COST]
           ,max(case when name=''TOTAL_ADD_AMO'' then convert(float,StringValue) else 0 end) as [TOTAL_ADD_AMO]
           ,max(case when name=''SHIP_CODE'' then convert(INT,StringValue) else 0 end) as [SHIP_CODE]
           ,max(case when name=''DELIVERYCOST'' then convert(float,StringValue) else 0 end) as [COST_SHIP]
           ,0 as [IS_POINT]
           ,max(case when name=''COST_SHIP_CLIENT'' then convert(float,StringValue) else 0 end) as [COST_SHIP_CLIENT]
           ,0 as [USER_TAG_CODE]
           ,0 as [RELATION_BILL_CODE]
           ,0 as [RELATION_B_CODE]
           ,max(case when name=''REGION_CODE'' then convert(int,StringValue) else 0 end) as [REGION_CODE]
           ,max(case when name=''COL_INT1'' then convert(int,StringValue) else 0 end) as [COL_INT1]
           ,max(case when name=''COL_INT2'' then convert(int,StringValue) else 0 end) as [COL_INT2]
           ,max(case when name=''COL_INT3'' then convert(int,StringValue) else 0 end) as [COL_INT3]
           ,max(case when name=''COL_STR1'' then convert(nvarchar(max),StringValue) else N'''' end) as [COL_STR1]
           ,max(case when name=''COL_STR2'' then convert(nvarchar(max),StringValue) else N'''' end) as [COL_STR2]
           ,max(case when name=''COL_STR3'' then convert(nvarchar(max),StringValue) else N'''' end) as [COL_STR3]
           ,0 as [IS_PDF]
           ,N'''' as [PATH_PDF]
           ,N'''' as [PATH_PDF_API]


From parseJSON
(
       @INFO
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID

 -------------------------------------------------------------------------------------------------------
 select top(1) @CURRANCY_CODE_INVOICE =CURRANCY_CODE,@CURRANCY_EQUAL_INVOICE=CURRANCY_EQUAL  from T_SALES where BILL_NUMBER=@BILL_NUMBER
INSERT INTO [dbo].[T_SALES_TEMP]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY]
           ,[ITEM_NOTE_SALES]
           ,[NOTE_PRINT]
           ,[IS_PRINT]
           ,[USER_PREPARE]
           ,[USER_CUT]
           ,[DISCOUNT_TYPE]
           ,[IS_SERIAL]
           ,[IS_TAX]
           ,[TAX_PERCENT_ITEM]
           ,[TAX_AMO_ITEM]
           ,[IS_MANDOOB]
           ,[MANDOOB_PERCENT_ITEM]
           ,[MANDOOB_AMO_ITEM]
           ,[QTY_FREE]
           ,[TOTAL_QTY])
 Select
       @COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max))  as [BILL_BRANCH]
           ,@BILL_NUMBER as [BILL_NUMBER]
           ,max(case when name=''ITEM_CODE'' then convert(int,StringValue) else -1 end) as [ITEM_CODE]
           ,max(case when name=''ITEM_NAME'' then convert(nvarchar(max),StringValue) else N'''' end) as [ITEM_NAME]
           ,max(case when name=''QTY'' then convert(float,StringValue) else 0 end) as [QTY]
           ,max(case when name=''UNIT_NAME'' then convert(nvarchar(max),StringValue) else N'''' end) as [UNIT_NAME]
           ,max(case when name=''UNIT_QTY'' then convert(float,StringValue) else 0 end) as [UNIT_QTY]
           ,max(case when name=''STORE_CODE'' then convert(int,StringValue) else 0 end) as [STORE_CODE]
           ,-999999 as [WAJBA_CODE]
           ,N'''' as [WAJBA_NAME]
           ,N'''' as [WAJBA_BALANCE]
           ,@CURRANCY_CODE_INVOICE as [CURRANCY_CODE]
           ,@CURRANCY_EQUAL_INVOICE as [CURRANCY_EQUAL]
           ,max(case when name=''PRICE_COST'' then convert(float,StringValue) else 0 end)*max(case when name=''UNIT_QTY'' then convert(float,StringValue) else 0 end) as [COST]
           ,max(case when name=''PRICE'' then convert(float,StringValue) else 0 end) as [PRICE]
           ,max(case when name=''DISC_PERCENT'' then convert(float,StringValue) else 0 end) as [DISCOUNT_PERCENT_ITEM]
           ,0 as [DISCOUNT_AMOUNT_ITEM]
           ,GETDATE() as [C_DATE]
           ,1 as [ACTIVE]
           ,-999999 as [BILL_BUY]
           ,max(case when name=''NOTE'' then convert(nvarchar(max),StringValue) else N'''' end) as [ITEM_NOTE_SALES]
           ,NULL as [NOTE_PRINT]
           ,0 as [IS_PRINT]
           ,NULL as [USER_PREPARE]
           ,N'''' as [USER_CUT]
           ,IIF(max(case when name=''DISC_PERCENT'' then convert(float,StringValue) else 0 end)<>0,1, 0 )as [DISCOUNT_TYPE]
           ,0 as [IS_SERIAL]
           ,0 as [IS_TAX]
           ,max(case when name=''TAX_PERCENT_ITEM'' then convert(float,StringValue) else 0 end) as [TAX_PERCENT_ITEM]
           ,max(case when name=''TAX_AMO_ITEM'' then convert(float,StringValue) else 0 end) as [TAX_AMO_ITEM]
           ,max(case when name=''IS_MANDOOB'' then convert(bit,StringValue) else 0 end) as [IS_MANDOOB]
           ,max(case when name=''MANDOOB_PERCENT_ITEM'' then convert(nvarchar(max),StringValue) else 0 end) as [MANDOOB_PERCENT_ITEM]
           ,IIF(max(case when name=''IS_MINUS_MANDOOB'' then convert(int,StringValue) else 0 end)=0, (max(case when name=''totalNetProfitMandob'' then convert(float,StringValue) else 0 end)/ max(case when name=''QTY'' then convert(float,StringValue) else 0 end)),(max(case when name=''totalNetProfitMandob'' then convert(float,StringValue) else 0 end)/ max(case when name=''QTY'' then convert(float,StringValue) else 0 end))*-1) as [MANDOOB_AMO_ITEM]
           ,max(case when name=''QTY_FREE'' then convert(float,StringValue) else 0 end) as [QTY_FREE]
           ,max(case when name=''QTY'' then convert(float,StringValue) else 0 end)+max(case when name=''QTY_FREE'' then convert(float,StringValue) else 0 end)  as [TOTAL_QTY]



From parseJSON
(
       @DETAILS
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID
 
 
 -------------------------------------------------------------------------------------------------------

 -------------------------------------------------------------------------------------------------------


-- FINISHED
  UPDATE [dbo].[T_APP_INVOICE] SET  [IS_INSERT] = 1, [BILL_BRANCH] = @COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), [BILL_NUMBER] = @BILL_NUMBER WHERE T_ID=@T_ID 
  


AFTER_OFFERS:

SET @SUBMIT_fLAG=1

RETTTTT:
COMMIT
	IF @@ERROR <>0
	BEGIN
	ROLLBACK 
 
	SET @SUBMIT_fLAG=0
	RETURN
	END

return
 

END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_UPDATE_ITEM_PRICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_UPDATE_ITEM_PRICE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_AL_SADY_UPDATE_ITEM_PRICE] 

		
		@ITEM_CODE INT,
		@PRICE FLOAT
	as

	set nocount on
	 
	begin 
	 
	 IF  @ITEM_CODE>0
	 BEGIN
	 UPDATE T_ITEMS SET SELL=@PRICE ,SELL2=@PRICE*[UNIT2_QTY] WHERE ITEM_CODE=@ITEM_CODE
	UPDATE T_ITEM_UNIT SET PRICE_SALE_1=@PRICE WHERE ITEM_CODE=@ITEM_CODE AND UNIT_CODE=1
	UPDATE T_ITEM_UNIT SET PRICE_SALE_1=@PRICE*[UNIT_QTY] WHERE ITEM_CODE=@ITEM_CODE AND UNIT_CODE=2
SELECT 1 AS ID, N''successfully done'' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
	 END
	 ELSE
 BEGIN
SELECT 0 AS ID, N''ERROR CODE'' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
	 END

		

  
   


	 
	 
	end 

	

	


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_AL_SADY_UPDATE_ITEM_PRICE_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_AL_SADY_UPDATE_ITEM_PRICE_MS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROC [dbo].[P_API_AL_SADY_UPDATE_ITEM_PRICE_MS] 
    @ITEM_CODE INT,
    @PRICE FLOAT
AS
BEGIN
    SET NOCOUNT ON;
    
    -- بدء كتلة المعالجة باستخدام TRY...CATCH
    BEGIN TRY
        IF @ITEM_CODE > 0
        BEGIN
            UPDATE T_ITEMS 
            SET SELL = @PRICE, 
                SELL2 = @PRICE * [UNIT2_QTY] 
            WHERE ITEM_CODE = @ITEM_CODE;
            
            UPDATE T_ITEM_UNIT 
            SET PRICE_SALE_1 = @PRICE 
            WHERE ITEM_CODE = @ITEM_CODE 
              AND UNIT_CODE = 1;

            UPDATE T_ITEM_UNIT 
            SET PRICE_SALE_1 = @PRICE * [UNIT_QTY] 
            WHERE ITEM_CODE = @ITEM_CODE 
              AND UNIT_CODE = 2;
        END
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(MAX) = ERROR_MESSAGE();
        RAISERROR(N''حدث خطأ أثناء تحديث الأسعار: %s'', 16, 1, @ErrorMessage);
        RETURN;
    END CATCH
END;

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_CHECKEN_CHANGE_STORE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_CHECKEN_CHANGE_STORE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




CREATE proc [dbo].[P_API_CHECKEN_CHANGE_STORE] 
@USER_CREATE nvarchar(max),
@STORE_CODE INT,
@BILL_NUMBER INT 
 
	 

			 
 
	as
  
	BEGIN 
		IF @BILL_NUMBER>0  
		BEGIN
 
 
 UPDATE T_BUY_DETAILS SET STORE_CODE=@STORE_CODE WHERE BILL_NUMBER=@BILL_NUMBER

UPDATE [T_STORE_BOX] SET STORE_CODE=@STORE_CODE WHERE BILL_NUMBER=@BILL_NUMBER AND B_CODE=21

 



		SELECT 1 AS ID, N''successfully done , Update Done ..  '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
		ELSE 
		BEGIN
		SELECT 0 AS ID, N''Error , Update '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
	 
	
 



	end 

	

	




' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_CHECKEN_CHEACK_STORE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_CHECKEN_CHEACK_STORE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




CREATE proc [dbo].[P_API_CHECKEN_CHEACK_STORE] 
@USER_CREATE nvarchar(max),
  @STORE_CODE INT,
@BILL_NUMBER INT 
 
	 

			 
 
	as
  DECLARE

@STORE_CODE_BUY INT
	BEGIN 
		
-- SELECT TOP(1) @STORE_CODE =STORE_CODE  FROM T_USERS WHERE [USER_NAME]=@USER_CREATE AND ACTIVE=1
 
SELECT TOP(1) @STORE_CODE_BUY=STORE_CODE  FROM T_BUY_DETAILS WHERE BILL_NUMBER=@BILL_NUMBER
 

  
 

IF @STORE_CODE_BUY= @STORE_CODE 
		BEGIN

		SELECT 1 AS ID, N''المخزن مطابق  , تمت العملية بنجاح ..  '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
		ELSE 
		BEGIN
		SELECT 0 AS ID, N''خطأ , المخزن غير مطابق '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
	 
	
 



	end 

	

	




' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_CHECKEN_GET_QTY_BUY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_CHECKEN_GET_QTY_BUY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




CREATE proc [dbo].[P_API_CHECKEN_GET_QTY_BUY] 
 
@BILL_NUMBER INT 
	 

			 
 
	as
 DECLARE
  @ITEM_CODE INT,
 @COUNT_BUY INT
 
 
	-----------------------------------------------------
	 SELECT @COUNT_BUY=COUNT(BILL_NUMBER) FROM T_BUY WHERE BILL_NUMBER=@BILL_NUMBER AND ACTIVE=1
  
	BEGIN 
		IF @COUNT_BUY>0  
		BEGIN
		SELECT TOP(1) @ITEM_CODE=ITEM_CODE  FROM T_BUY_DETAILS  WHERE BILL_NUMBER=@BILL_NUMBER 

		SELECT 1 AS ID,(SELECT TOP(1)ISNULL(REMAIN_BUY,0) FROM V_BUY_DETAILS_EXPIRED_REMAIN WHERE BILL_NUMBER=@BILL_NUMBER AND ITEM_CODE=@ITEM_CODE)  AS QTY ,N''successfully done , GET Done ..  '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
		ELSE 
		BEGIN
		SELECT 0 AS ID,0 AS QTY,N''Error , Inser '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
	 
	
 



	end 

	

	




' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_CHECKEN_GET_STORE_LIST]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_CHECKEN_GET_STORE_LIST]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE proc [dbo].[P_API_CHECKEN_GET_STORE_LIST] 

		@PageSize int,
		@PageNumber int  
		 
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	 
	begin 
	 
	 

SELECT    * into #tempSale FROM   T_STORE_TYPE   WHERE IS_USED=1   AND ACTIVE=1

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
	WHERE IS_USED=1  AND ACTIVE=1
     ORDER BY STORE_CODE ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 
  
	
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;

 
	 
	 
	end 

	

	



' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_CHECKEN_INSERT_BUY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_CHECKEN_INSERT_BUY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE proc [dbo].[P_API_CHECKEN_INSERT_BUY] 
@USER_CREATE nvarchar(max),
@STORE_CODE INT,
@ITEM_CODE INT,
@QTY FLOAT,
@EXP_DATE_NO INT,
@NUMBER FLOAT

	 

			 
 
	as
 DECLARE
 @EXP_DATE DATE,
 @BILL_NUMBER INT,
 @CURRANCY_CODE INT,
 @UNIT_NAME nvarchar(max),
 @BRANCH nvarchar(max)
 SELECT @BRANCH=COMPANY_TITAL FROM T_COMPANY  WHERE T_ID=1
 SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY  WHERE CURRANCY_PRIMARY=1
 SELECT @UNIT_NAME=UNIT_NAME FROM T_ITEMS  WHERE ITEM_CODE=@ITEM_CODE
	-----------------------------------------------------
	SET @EXP_DATE=DATEADD(DAY, @EXP_DATE_NO,GETDATE())
	BEGIN 
		IF @QTY>0  
		BEGIN
SELECT @BILL_NUMBER=MAX(BILL_NUMBER)+1 FROM T_BUY  
 INSERT INTO [dbo].[T_BUY]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_INVOICE]
           ,[BILL_DATE]
           ,[USER_CREATE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[CLIENT_CODE]
           ,[CLIENT_NAME]
           ,[DESCRIPTION]
           ,[WAJBA_CODE]
           ,[SECURETY_CODE]
           ,[TOTAL_BUY]
           ,[DISCOUNT_PERCENT]
           ,[DISCOUNT_AMOUNT]
           ,[NET_BUY]
           ,[TOTAL_EXPENSES]
           ,[TOTAL_COST]
           ,[IVC_CODE]
           ,[DAY_CASH]
           ,[DATE_CASH]
           ,[TOT_CONV]
           ,[ACCOUNT_CODE]
           ,[CASH_USA]
           ,[REMAIN_USA]
           ,[CASH_IQ]
           ,[REMAIN_IQ]
           ,[EXP_CASH]
           ,[EXP_PERCENT]
           ,[C_DATE]
           ,[C_UPDATE]
           ,[USER_UPDATE]
           ,[ACTIVE]
           ,[IS_OUT]
           ,[OFFER_CODE]
           ,[IS_TRANS]
           ,[NET_SUPPLIER]
           ,[TOTAL_OUT]
           ,[TOTAL_SUPPLIER]
           ,[QR_DATA]
           ,[TAG_PROCCESS_CODE]
           ,[DATE_RETURN]
           ,[CASH_INVOICE_BILL]
           ,[IS_CASH]
           ,[BILL_SANAD_CNY]
           ,[IS_UPDATE_SELL_PRICE]
           ,[IS_UPDATE_NEW_BUY])
     VALUES
           (@BRANCH+ CAST(@BILL_NUMBER AS nvarchar(max))
           ,@BILL_NUMBER
           ,@BILL_NUMBER
           ,GETDATE()
           ,@USER_CREATE
           ,@CURRANCY_CODE
           ,1
           ,2100000
           ,N''عميل نقدي''
           ,CAST(@NUMBER AS nvarchar(max) )
           ,1
           ,1
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,1
           ,0
           ,GETDATE()
           ,N''''
           ,5000
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,GETDATE()
           ,N''''
           ,N''''
           ,1
           ,0
           ,1
           ,0
           ,0
           ,0
           ,0
           ,N''''
           ,0
           ,GETDATE()
           ,N''''
           ,1
           ,NULL
           ,0
           ,0)



INSERT INTO [dbo].[T_BUY_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[PRICE_BUY]
           ,[CURRANCY_EQUAL]
           ,[PRICE]
           ,[TOTAL]
           ,[EXPENSES]
           ,[TOTAL_EXPENSES]
           ,[COST]
           ,[TOTAL_COST]
           ,[SELL1]
           ,[SELL2]
           ,[C_DATE]
           ,[ACTIVE]
           ,[OFFER_CODE]
           ,[IS_USED]
           ,[QTY_IN]
           ,[QTY_OUT]
           ,[TOTAL_OUT]
           ,[EXPENSES_OUT]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[NOTE1]
           ,[NOTE2])
     VALUES
            (@BRANCH+ CAST(@BILL_NUMBER AS nvarchar(max))
           ,@BILL_NUMBER
           ,@ITEM_CODE
           ,@QTY
           ,@UNIT_NAME
           ,1
           ,@STORE_CODE
           ,@EXP_DATE 
           ,0
           ,1
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,GETDATE()
           ,1
           ,1
           ,0
           ,@QTY
           ,0
           ,0
           ,0
           ,0
           ,0
           ,CAST(@NUMBER AS nvarchar(max)) 
           ,N'''')



INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[C_DATE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[ACTIVE])
     VALUES
           (@BRANCH+ CAST(@BILL_NUMBER AS nvarchar(max))
           ,@BILL_NUMBER
           ,GETDATE()
           ,21
           ,1
           ,@STORE_CODE 
           ,@EXP_DATE 
           ,@ITEM_CODE 
           ,1
           ,@QTY
           ,0
           ,1
           ,GETDATE()
           ,0
           ,0
           ,1)


--INSERT INTO [dbo].[T_PRINT_SYNCH]
--           ([BILL_NUMBER]
--           ,[B_CODE]
--           ,[IS_PRINT]
--		   ,[USER_CREATE])
--     VALUES
--           (@BILL_NUMBER
--           ,21
--           ,1
--		   ,@USER_CREATE)



		SELECT (SELECT MAX(CAST (BILL_NUMBER AS INT) ) FROM T_BUY ) AS ID, N''successfully done , Inser Done ..  '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
		ELSE 
		BEGIN
		SELECT 0 AS ID, N''Error , Inser '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
	 
	
 



	end 

	

	



' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_CHECKEN_INSERT_SALES_FROM_BUY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_CHECKEN_INSERT_SALES_FROM_BUY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE proc [dbo].[P_API_CHECKEN_INSERT_SALES_FROM_BUY] 
@USER_CREATE nvarchar(max),
@BILL_NUMBER INT ,
@QTY_OUT FLOAT
	 

			 
 
	as
 DECLARE
 @QTY_REMAIN FLOAT,
 @CURRANCY_CODE INT,
 @ITEM_CODE INT,
  @BILL_SALES INT,
 @BRANCH nvarchar(max)
 SELECT @BRANCH=COMPANY_TITAL FROM T_COMPANY  WHERE T_ID=1
 SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY  WHERE CURRANCY_PRIMARY=1
 
	-----------------------------------------------------
	 
	BEGIN 
		IF @BILL_NUMBER>0  
		BEGIN

SELECT TOP(1) @ITEM_CODE=ITEM_CODE  FROM T_BUY_DETAILS  WHERE BILL_NUMBER=@BILL_NUMBER 
SELECT TOP(1) @QTY_REMAIN =REMAIN_BUY  FROM V_BUY_DETAILS_EXPIRED_REMAIN  WHERE BILL_NUMBER=@BILL_NUMBER  AND ITEM_CODE=@ITEM_CODE

SELECT @BILL_SALES=MAX(BILL_NUMBER)+1 FROM T_SALES  
INSERT INTO [dbo].[T_SALES]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_INVOICE]
           ,[BILL_DATE]
           ,[OFFER_CODE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[CLIENT_CODE]
           ,[CLIENT_NAME]
           ,[CLIENT_PHONE]
           ,[CLIENT_ADRESS]
           ,[MANDOOB_CODE]
           ,[DESCRIPTION]
           ,[TYPE_PRICE_SELL]
           ,[STORE_CODE]
           ,[USER_CREATE]
           ,[SECURETY_CODE]
           ,[TOTAL_SALES]
           ,[DISCOUNT_ITEMS]
           ,[DISCOUNT_PERCENT]
           ,[DISCOUNT_AMOUNT]
           ,[TOTAL_DISCOUNT]
           ,[NET_SALES]
           ,[TOTAL_COST]
           ,[IVC_CODE]
           ,[DAY_CASH]
           ,[DATE_CASH]
           ,[TOT_CONV]
           ,[ACCOUNT_CODE]
           ,[CASH_USA]
           ,[REMAIN_USA]
           ,[CASH_IQ]
           ,[REMAIN_IQ]
           ,[C_DATE]
           ,[C_UPDATE]
           ,[USER_UPDATE]
           ,[ACTIVE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[FLAG_CASH]
           ,[IS_OUT]
           ,[CURRANCY_SALES]
           ,[IS_TRANS]
           ,[CENTER_CODE]
           ,[QR_DATA]
           ,[ITEM_ID_PAYMENT]
           ,[TAG_PROCCESS_CODE]
           ,[LINK_ID_PAYMENT]
           ,[BILL_RETURN]
           ,[BILL_SANAD_CNY]
           ,[CNY_IQ]
           ,[IS_PREPARE]
           ,[DRIVER_CODE]
           ,[LAT]
           ,[LNG]
           ,[STATUS_SHIPING]
           ,[MOVE_CODE]
           ,[BILL_ORDER]
           ,[TOTAL_TAX_ITEM]
           ,[TOTAL_MANDOOB_ITEM]
           ,[TOTAL_ADD_COST]
           ,[TOTAL_ADD_AMO]
           ,[SHIP_CODE]
           ,[COST_SHIP]
           ,[IS_POINT]
           ,[COST_SHIP_CLIENT]
           ,[USER_TAG_CODE]
           ,[RELATION_BILL_CODE]
           ,[RELATION_B_CODE]
           ,[REGION_CODE]
           ,[COL_INT1]
           ,[COL_INT2]
           ,[COL_INT3]
           ,[COL_STR1]
           ,[COL_STR2]
           ,[COL_STR3]
           ,[IS_PDF]
           ,[PATH_PDF]
           ,[PATH_PDF_API]
           ,[ZONE_CODE])
     VALUES
          (@BRANCH+ CAST(@BILL_SALES AS nvarchar(max))
           ,@BILL_SALES
           ,@BILL_SALES
           ,GETDATE()
           ,1
           ,@CURRANCY_CODE
           ,1
           ,2100000
           ,N''عميل نقدي''
           ,N''''
           ,N''''
           ,1
            ,N''''
           ,1
           ,(SELECT TOP(1) MIN(STORE_CODE) FROM T_BUY_DETAILS WHERE BILL_NUMBER=@BILL_NUMBER)
           ,@USER_CREATE
           ,1
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,1
           ,0
           ,GETDATE()
           ,N''''
           ,5000
           ,0
           ,0
           ,0
           ,0
           ,GETDATE()
           ,N''''
           ,N''''
           ,1
           ,0
           ,0
           ,1
           ,0
           ,1
           ,0
           ,0
           ,N''''
           ,N''''
           ,0
           ,N''''
           ,0
           ,0
           ,0
           ,0
           ,0
           ,N''''
           ,N''''
           ,0
           ,0
           ,@BILL_SALES
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,N''''
           ,N''''
           ,N''''
           ,0
           ,N''''
          ,N''''
           ,0)





INSERT INTO [dbo].[T_SALES_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[TOTAL]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY]
           ,[ITEM_NOTE_SALES]
           ,[NOTE_PRINT]
           ,[IS_PRINT]
           ,[USER_PREPARE]
           ,[USER_CUT]
           ,[DISCOUNT_TYPE]
           ,[IS_SERIAL]
           ,[IS_TAX]
           ,[TAX_PERCENT_ITEM]
           ,[TAX_AMO_ITEM]
           ,[IS_MANDOOB]
           ,[MANDOOB_PERCENT_ITEM]
           ,[MANDOOB_AMO_ITEM]
           ,[IS_ITEM_AREA]
           ,[WIDTH_CM]
           ,[LENGTH_CM]
           ,[AREA_M2]
           ,[QTY_AREA]
           ,[QTY_XZ]
           ,[UNIT_QTY_XZ]
           ,[QTY_X1]
           ,[UNIT_QTY_X1]
           ,[QTY_XY]
           ,[UNIT_QTY_XY]
           ,[NOTE_PRINT_2]
           ,[K_STORE_ITEM_CODE]
           ,[K_STORE_COST]
           ,[K_STORE_SELL]
           ,[K_PRINT_ITEM_CODE]
           ,[K_PRINT_COST]
           ,[K_PRINT_SELL]
           ,[K_MODEL_ITEM_CODE]
           ,[K_MODEL_COST]
           ,[K_MODEL_SELL]
           ,[K_MOTOR_ITEM_CODE]
           ,[K_MOTOR_COST]
           ,[K_MOTOR_SELL]
           ,[K_HABEL_ITEM_CODE]
           ,[K_HABEL_COST]
           ,[K_HABEL_SELL]
           ,[K_STORE_TOTAL]
           ,[K_PRINT_TOTAL]
           ,[K_MODEL_TOTAL]
           ,[K_MOTOR_TOTAL]
           ,[K_HABEL_TOTAL]
           ,[K_MODEL_TOTAL_COST]
           ,[QTY_FREE]
           ,[TOTAL_QTY]
           ,[NOTE_PRINT_3]
           ,[NOTE_PRINT_4]
           ,[NOTE_PRINT_5]
           ,[CNY_IQ])
     SELECT TOP(1)
           @BRANCH+ CAST(@BILL_SALES AS nvarchar(max))
           ,@BILL_SALES
           ,ITEM_CODE 
           , ITEM_NAME 
           , @QTY_OUT 
           , UNIT_NAME 
           , UNIT_QTY 
           , STORE_CODE 
           , @BILL_NUMBER 
           ,N''''
           ,N''''
           , @CURRANCY_CODE 
           ,1
           ,0
           ,0
           ,0
           ,0
           ,0
           ,GETDATE()
           ,1
           ,@BILL_NUMBER
           ,N''''
           ,N''''
           ,0
            ,N''''
            ,N''''
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,1
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,N''''
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,@QTY_OUT
           ,N''''
           ,N''''
           ,N''''
           ,0
		   FROM V_BUY_DETAILS_EXPIRED_REMAIN WHERE BILL_NUMBER=@BILL_NUMBER AND ITEM_CODE=@ITEM_CODE








 


INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[C_DATE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[ACTIVE])
     SELECT TOP(1)
	 @BRANCH+ CAST(@BILL_SALES AS nvarchar(max))
           ,@BILL_SALES
           ,GETDATE()
           ,2
           ,1
           ,STORE_CODE 
           ,EXP_DATE 
           ,ITEM_CODE 
           ,1
           ,0
           ,@QTY_OUT
           ,1
           ,GETDATE()
           ,0
           ,0
           ,1

		   FROM V_BUY_DETAILS_EXPIRED_REMAIN WHERE BILL_NUMBER=@BILL_NUMBER AND ITEM_CODE=@ITEM_CODE
IF @QTY_OUT<>@QTY_REMAIN
BEGIN
 INSERT INTO [dbo].[T_PRINT_SYNCH]
           ([BILL_NUMBER]
           ,[B_CODE]
           ,[IS_PRINT]
		   ,[USER_CREATE]
		   ,[QTY])
     VALUES
           (@BILL_NUMBER
           ,21
           ,0
		   ,@USER_CREATE
		   ,@QTY_REMAIN-@QTY_OUT)

INSERT INTO [dbo].[T_PRINT_SYNCH]
           ([BILL_NUMBER]
           ,[B_CODE]
           ,[IS_PRINT]
		   ,[USER_CREATE]
		   ,[QTY])
     VALUES
           (@BILL_NUMBER
           ,2
           ,0
		   ,@USER_CREATE
		   ,@QTY_OUT)
END

		SELECT (SELECT MAX(CAST (BILL_NUMBER AS INT) ) FROM T_SALES ) AS ID, N''successfully done , Inser Done ..  '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
		ELSE 
		BEGIN
		SELECT 0 AS ID, N''Error , Inser '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
	 
	
 



	end 

	

	



' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_DELETE_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_DELETE_INVOICE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[P_API_DELETE_INVOICE]

@BILL_NUMBER INT ,
@USER_CREATE NVARCHAR(MAX)
AS
DECLARE
@FLAG INT=0
 

 BEGIN
BEGIN TRANSACTION;
UPDATE T_SALES SET OFFER_CODE=0, ACTIVE =@FLAG,USER_UPDATE=N''تم الحذف بواسطة : ''+ @USER_CREATE+N'' - ''+ CONVERT(VARCHAR(20),GETDATE(),100) WHERE BILL_NUMBER = @BILL_NUMBER 
UPDATE T_SALES_DETAILS SET ACTIVE =@FLAG WHERE BILL_NUMBER = @BILL_NUMBER 
 
UPDATE T_BOX SET ACTIVE =@FLAG WHERE BILL_NUMBER = @BILL_NUMBER  AND B_CODE=2
UPDATE T_STORE_BOX SET ACTIVE =@FLAG WHERE BILL_NUMBER = @BILL_NUMBER   AND B_CODE=2
DELETE FROM T_SALES_TEMP WHERE BILL_NUMBER = @BILL_NUMBER 


DELETE FROM T_ITEM_SERIAL WHERE BILL_NUMBER=BILL_NUMBER AND B_CODE=2
SELECT 1 AS ID, N''successfully done , Delete Done ..  '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
COMMIT
	IF @@ERROR <>0
	BEGIN
	ROLLBACK 
	SELECT 0 AS ID, N''Error , Delete '' AS  N''Response'' FROM T_COUPON WHERE COUPON_CODE=-1
	RETURN
	END

return
END





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GAZ_ADD_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GAZ_ADD_INVOICE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE PROCEDURE [dbo].[P_API_GAZ_ADD_INVOICE]
@CLIENT_BARCODE NVARCHAR(MAX),
@QTY float  ,
@NEW_READ float  ,
@USER_CODE INT



AS
DECLARE 
@ITEM_PRICE float ,
@ITEM_COST float ,
@CLIENT_CODE INT,
@CC_COUNT INT,
@CC_ITEM INT,
@UNIT_CODE INT,
@CC_COUNT_TIME INT,
@ITEM_NAME  NVARCHAR(MAX),
@UNIT_NAME  NVARCHAR(MAX),
@FROM_TIME TIME(7),
@TO_TIME TIME(7),
@ITEM_CODE INT=(SELECT TOP(1) ISNULL(CLIENT_EMAILE,1) FROM T_CLIENT WHERE CLIENT_BARCODE=@CLIENT_BARCODE),
@CLIENT_TYPE_CODE INT,

@SUBMIT_MSG  NVARCHAR(MAX),
@SUBMIT_FLAG INT  



BEGIN TRAN
BEGIN
SET @SUBMIT_FLAG=0
SET @SUBMIT_MSG=N''رمز العميل غير معرف''
 
--------------------------CHECK PIN CODE------------------------------------------------
 
----------------------END------CHECK PIN CODE------------------------------------------------
SELECT @CC_COUNT=COUNT(CLIENT_CODE )FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1

IF @CC_COUNT=0
BEGIN

SET @SUBMIT_FLAG=0
SET @SUBMIT_MSG=N''رمز العميل غير معرف''
GOTO FINSHSH

END

ELSE

BEGIN
SELECT TOP(1) @CLIENT_CODE=ISNULL(CLIENT_CODE ,0),@CLIENT_TYPE_CODE=CLIENT_TYPE FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1
 
 
 

SELECT @ITEM_PRICE=ISNULL(SELL,0),@ITEM_COST=ISNULL(COST,0), @ITEM_NAME=ITEM_NAME  FROM T_ITEMS WHERE ACTIVE=1 AND ITEM_CODE=@ITEM_CODE
SELECT @UNIT_NAME=UNIT_NAME,@UNIT_CODE=UNIT_CODE  FROM T_ITEM_BARCODE WHERE ITEM_CODE LIKE @ITEM_CODE
 
 
DECLARE
@CURRANCY_CODE INT,
@CURRANCY_USA float	,
@CURRANCY_IQ float	,
@CURRANCY_EQUAL float	,
@MAX_BILL INT,
@USER_CREATE nvarchar(MAX),	
@CLIENT_NAME nvarchar(MAX),	
@COMPANY_TITAL NVARCHAR(MAX)
SELECT @COMPANY_TITAL=COMPANY_TITAL FROM T_COMPANY WHERE T_ID=1
SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
SELECT @CLIENT_NAME=CLIENT_NAME FROM T_CLIENT WHERE CLIENT_CODE=@CLIENT_CODE
SELECT @USER_CREATE=[USER_NAME] FROM T_USERS WHERE  USER_CODE=@USER_CODE


SELECT @MAX_BILL=ISNULL(MAX(BILL_NUMBER),0) + 1 FROM T_SALES
INSERT INTO [dbo].[T_SALES]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_INVOICE]
           ,[BILL_DATE]
           ,[OFFER_CODE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[CLIENT_CODE]
           ,[CLIENT_NAME]
           ,[CLIENT_PHONE]
           ,[CLIENT_ADRESS]
           ,[MANDOOB_CODE]
           ,[DESCRIPTION]
           ,[TYPE_PRICE_SELL]
           ,[STORE_CODE]
           ,[USER_CREATE]
           ,[SECURETY_CODE]
           ,[TOTAL_SALES]
           ,[DISCOUNT_ITEMS]
           ,[DISCOUNT_PERCENT]
           ,[DISCOUNT_AMOUNT]
           ,[TOTAL_DISCOUNT]
           ,[NET_SALES]
           ,[TOTAL_COST]
           ,[IVC_CODE]
           ,[DAY_CASH]
           ,[DATE_CASH]
           ,[TOT_CONV]
           ,[ACCOUNT_CODE]
           ,[CASH_USA]
           ,[REMAIN_USA]
           ,[CASH_IQ]
           ,[REMAIN_IQ]
           ,[C_DATE]
           ,[C_UPDATE]
           ,[USER_UPDATE]
           ,[ACTIVE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[FLAG_CASH]
           ,[IS_OUT]
           ,[CURRANCY_SALES]
		   ,[COL_INT1])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,NULL
           ,GETDATE()
           ,1
           ,@CURRANCY_CODE
           ,1
           ,@CLIENT_CODE
           ,@CLIENT_NAME
            ,NULL
           ,NULL
           ,0
           ,NULL
           ,1
           ,0
           ,@USER_CREATE
           ,1
           ,@ITEM_PRICE
           ,0
           ,0
           ,0
           ,0
           ,@ITEM_PRICE*@QTY
           ,@ITEM_COST*@QTY
           ,2
           ,0
           ,GETDATE()
           ,NULL
           ,5000
           ,0
           ,0
           ,0
           ,0
           ,GETDATE()
           ,NULL
           ,NULL
           ,1
           ,0
           ,0
           ,1
           ,0
           ,1
		   ,@NEW_READ)



IF @CURRANCY_CODE=1
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=1/NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_IQ
INSERT INTO [dbo].[T_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_STR]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[MOVE_CODE]
           ,[B_CODE]
           ,[BRANCH_CODE]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_DESCRIPTION]
           ,[DEBIT]
           ,[CREDIT]
           ,[DEBIT_IQ]
           ,[CREDIT_IQ]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[DESCRIPTION]
           ,[DEAL_CODE]
           ,[USER_CODE]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,@MAX_BILL
           ,GETDATE()
          ,GETDATE()
           ,0
           ,2
           ,1
           ,@CLIENT_CODE
           ,NULL
           ,@ITEM_PRICE*@QTY
           ,0
           ,0
           ,0
           ,@CURRANCY_CODE
           ,@CURRANCY_EQUAL
           ,NULL
           ,0
           ,@USER_CODE
           ,GETDATE()
           ,1)


END

ELSE
BEGIN
SELECT @CURRANCY_USA=NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_USA

INSERT INTO [dbo].[T_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_STR]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[MOVE_CODE]
           ,[B_CODE]
           ,[BRANCH_CODE]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_DESCRIPTION]
           ,[DEBIT]
           ,[CREDIT]
           ,[DEBIT_IQ]
           ,[CREDIT_IQ]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[DESCRIPTION]
           ,[DEAL_CODE]
           ,[USER_CODE]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,@MAX_BILL
           ,GETDATE()
          ,GETDATE()
           ,0
           ,2
           ,1
           ,@CLIENT_CODE
           ,NULL
           ,0
           ,0
           ,@ITEM_PRICE*@QTY
           ,0
           ,@CURRANCY_CODE
           ,@CURRANCY_EQUAL
           ,NULL
           ,0
           ,@USER_CODE
           ,GETDATE()
           ,1)

END


INSERT INTO [dbo].[T_SALES_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[TOTAL]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY]
           ,[ITEM_NOTE_SALES])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
           ,@ITEM_CODE
           ,@ITEM_NAME
           ,@QTY
           ,@UNIT_NAME
           ,1
           ,0
           ,-999999
           ,NULL
           ,NULL
           ,@CURRANCY_CODE
           ,1
           ,@ITEM_COST
           ,@ITEM_PRICE
           ,@ITEM_PRICE*@QTY
           ,0
           ,0
           ,GETDATE()
           ,1
           ,-999999
           ,NULL)
INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[C_DATE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
           ,GETDATE()
           ,2
           ,-999999
           ,0
           ,GETDATE()
           ,@ITEM_CODE
           ,@UNIT_CODE
           ,0
           ,@QTY
           ,1
           ,GETDATE()
           ,0
           ,0
           ,1)
 
 --****************************************************

SET @SUBMIT_FLAG=1
SET @SUBMIT_MSG=N''تمت العملية بنجاح''
END

 
FINSHSH:
 
SELECT @SUBMIT_FLAG AS SUBMIT_FLAG,@SUBMIT_MSG AS SUBMIT_MSG  



END	--END OF PROGRAM
commit




























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GAZ_GET_HOZ_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GAZ_GET_HOZ_CLIENT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_GAZ_GET_HOZ_CLIENT] 

		
		
	as

	
	begin 
	 
	 SELECT *,ISNULL((SELECT  TOP(1) ISNULL(COL_INT1,0) FROM T_SALES  WHERE CLIENT_CODE= S.CLIENT_CODE AND ACTIVE=1 ORDER BY BILL_NUMBER DESC),0) AS LAST_READ FROM T_CLIENT S WHERE CLIENT_ACTIVE=1  AND CLIENT_TYPE=3 and CLIENT_CODE>2100000 ORDER BY CLIENT_CODE
	 
	end 

	

	

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GAZ_GET_STORE_ITEM]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GAZ_GET_STORE_ITEM]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_GAZ_GET_STORE_ITEM] 
@ITEM_CODE INT
		
		
	as

	
	begin 
	 
	 SELECT * FROM V_ITEMS_BALANCE_MIN_PHARMA S WHERE ITEM_CODE=@ITEM_CODE	 
	end 

	

	

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GAZ_GET_USER_CODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GAZ_GET_USER_CODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_GAZ_GET_USER_CODE] 
 @USER_NAME NVARCHAR(MAX),
@USER_PWD  NVARCHAR(MAX)
	as

	set nocount on
	 
	begin 
	 
	  
SELECT    *  FROM   T_USERS WHERE  USER_NAME=@USER_NAME AND USER_PWD=@USER_PWD

		
    
	 
	 
	end 

	

	


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_ACCOUNT_PARENT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_ACCOUNT_PARENT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE proc [dbo].[P_API_GET_ACCOUNT_PARENT] 

		@PageSize int,
		@PageNumber int ,
		@ACCOUNT_PARENT INT,
		@ACCOUNT_NAME NVARCHAR(MAX)

	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 


	IF LEN(@ACCOUNT_NAME)>0
	BEGIN
IF OBJECT_ID(''tempdb..#TEMP_MAIN_ACC2'') IS NOT NULL DROP Table #TEMP_MAIN_ACC2
	SELECT ACCOUNT_CODE AS T_ID_BOX
      ,N''0'' AS  BILL_BRANCH 
      ,0 AS BILL_NUMBER 
      , GETDATE() AS BILL_DATE 
      ,GETDATE() AS BILL_TIME 
      ,0 AS B_CODE 
      ,N'''' AS B_NAME 
      ,0 AS MOVE_CODE 
      , N'''' AS  MOVE_NAME 
      , ACCOUNT_CODE 
      , ACCOUNT_NAME 
      , N'''' AS  ACCOUNT_DESCRIPTION   
      , 0 AS DEBIT 
      , 0 AS CREDIT 
			, BALANCE AS BALANCE_USA
      ,0 AS DEBIT_IQ 
      ,0 AS CREDIT_IQ 
       ,     BALANCE_IQ AS BALANCE_IQ
      , 0 AS DEBIT_CUR 
      ,0 AS  CREDIT_CUR 
       ,	 BALANCE_CUR AS BALANCE_CUR
      ,N'''' AS DESCRIPTION
      ,0 AS USER_CODE
      ,N'''' AS USER_NAME
      ,0 AS DEAL_CODE
      ,N'''' AS DEAL_NAME
           , 0 AS BRANCH_CODE 
           , N'''' AS BRANCH_NAME 
           , N''''  AS MANDOB_NAME
           ,N''''  AS CLIENT_REGION 
           , N''''  AS CLIENT_PHONE_SMS 
           ,N'''' AS B_COLOR
      ,0 AS CHECKED
     ,0 AS  ID_BOX,
	 CURRANCY_CODE
	 INTO #TEMP_MAIN_ACC2 FROM  [dbo].[V_ACC_B] WHERE ACCOUNT_PARENT=@ACCOUNT_PARENT and ACCOUNT_CODE<> 2100000 AND ACCOUNT_NAME LIKE ''%''+@ACCOUNT_NAME +''%''
	  SELECT @TotalRecords = COUNT(*) FROM #TEMP_MAIN_ACC2;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #TEMP_MAIN_ACC2
     ORDER BY ACCOUNT_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	END
	
	ELSE
	
	BEGIN
	IF OBJECT_ID(''tempdb..#TEMP_MAIN_ACC'') IS NOT NULL DROP Table #TEMP_MAIN_ACC
	SELECT ACCOUNT_CODE AS T_ID_BOX
      ,N''0'' AS  BILL_BRANCH 
      ,0 AS BILL_NUMBER 
      , GETDATE() AS BILL_DATE 
      ,GETDATE() AS BILL_TIME 
      ,0 AS B_CODE 
      ,N'''' AS B_NAME 
      ,0 AS MOVE_CODE 
      , N'''' AS  MOVE_NAME 
      , ACCOUNT_CODE 
      , ACCOUNT_NAME 
      , N'''' AS  ACCOUNT_DESCRIPTION   
      , 0 AS DEBIT 
      , 0 AS CREDIT 
			, BALANCE AS BALANCE_USA
      ,0 AS DEBIT_IQ 
      ,0 AS CREDIT_IQ 
       ,     BALANCE_IQ AS BALANCE_IQ
      , 0 AS DEBIT_CUR 
      ,0 AS  CREDIT_CUR 
       ,	 BALANCE_CUR AS BALANCE_CUR
      ,N'''' AS DESCRIPTION
      ,0 AS USER_CODE
      ,N'''' AS USER_NAME
      ,0 AS DEAL_CODE
      ,N'''' AS DEAL_NAME
           , 0 AS BRANCH_CODE 
           , N'''' AS BRANCH_NAME 
           , N''''  AS MANDOB_NAME
           ,N''''  AS CLIENT_REGION 
           , N''''  AS CLIENT_PHONE_SMS 
           ,N'''' AS B_COLOR
      ,0 AS CHECKED
     ,0 AS  ID_BOX,
	 CURRANCY_CODE
 
	 INTO #TEMP_MAIN_ACC FROM  [dbo].[V_ACC_B] WHERE ACCOUNT_PARENT=@ACCOUNT_PARENT and ACCOUNT_CODE<> 2100000

 SELECT @TotalRecords = COUNT(*) FROM #TEMP_MAIN_ACC;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #TEMP_MAIN_ACC
     ORDER BY ACCOUNT_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

	END 

    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords; 
	end ' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_ALL_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_ALL_CATEGORY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE proc [dbo].[P_API_GET_ALL_CATEGORY] 
AS 
	SET NOCOUNT ON

BEGIN 
	SELECT * FROM T_ITEM_CATEGORY  WHERE ACTIVE=1  AND CATEGORY_CODE>0 AND SHOW_MENU=1
END 


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_BUY_BY_DATE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_BUY_BY_DATE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE proc [dbo].[P_API_GET_BUY_BY_DATE] 

		@PageSize int,
		@PageNumber int,
		@active bit = 1,
		@D1 DATE = '''',
		@D2 DATE = '''' ,
		@IVC_CODE INT = -1
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	if @d1 <> '''' and @d2<> '''' and @ivc_code <> -1
	begin 
		SELECT    * into #tempSale FROM   V_BUY  WHERE   BILL_DATE BETWEEN @D1 AND @D2 AND  ACTIVE =@active  and IVC_CODE=@IVC_CODE    ORDER BY BILL_NUMBER DESC

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
    ORDER BY BILL_NUMBER DESC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;


	end 
	else if @d1 = '''' and @ivc_code<> -1
	begin 
	SELECT    * into #temp2 FROM   V_BUY WHERE ACTIVE =@active  and IVC_CODE=@IVC_CODE    ORDER BY BILL_NUMBER DESC
	 SELECT @TotalRecords = COUNT(*) FROM #temp2;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #temp2
     ORDER BY BILL_NUMBER DESC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;

	end 
	else if @d1<> '''' and @d2 <> '''' and @IVC_CODE = -1
	begin 
	SELECT    * into #temp3 FROM   V_BUY WHERE   BILL_DATE BETWEEN @D1 AND @D2 AND  ACTIVE =@active    ORDER BY BILL_NUMBER DESC
	SELECT @TotalRecords = COUNT(*) FROM #temp3;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #temp3
    ORDER BY BILL_NUMBER DESC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;

	end 
	end 

	

	' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_CLIENT_BALANCE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_CLIENT_BALANCE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE proc [dbo].[P_API_GET_CLIENT_BALANCE] 

		@PageSize int,
		@PageNumber int ,
		@ACCOUNT_NAME  NVARCHAR(MAX)
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	 
	 IF LEN(@ACCOUNT_NAME)>0
	 BEGIN
SELECT    * into #tempSale1 FROM   V_ACC_BALANCE_CLIENT   WHERE CAST (ACCOUNT_CODE AS INT) >2100000 AND ACCOUNT_NAME  LIKE ''%''+@ACCOUNT_NAME +''%''     ORDER BY ACCOUNT_NAME ASC

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale1;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale1
     ORDER BY ACCOUNT_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

END
ELSE
BEGIN
SELECT    * into #tempSale FROM   V_ACC_BALANCE_CLIENT   WHERE CAST (ACCOUNT_CODE AS INT) >2100000      ORDER BY ACCOUNT_NAME ASC

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY ACCOUNT_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

END

		
  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;


	 
	 
	end 

	

	
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_CLIENT_BALANCE_BY_MANDOOB]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_CLIENT_BALANCE_BY_MANDOOB]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_GET_CLIENT_BALANCE_BY_MANDOOB] 

		@PageSize int,
		@PageNumber int ,
		@MANDOOB_CODE INT,
		@ACCOUNT_NAME  NVARCHAR(MAX)
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	 
	 IF @MANDOOB_CODE=-10
	 BEGIN
SELECT    * into #tempSale1 FROM   V_ACC_BALANCE_CLIENT   WHERE CAST (ACCOUNT_CODE AS INT) >2100000    AND ACCOUNT_NAME  LIKE ''%''+LTRIM(RTRIM(@ACCOUNT_NAME)) +''%''     ORDER BY ACCOUNT_NAME ASC

 
    SELECT @TotalRecords = COUNT(*) FROM #tempSale1;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale1
     ORDER BY ACCOUNT_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

END
ELSE
BEGIN
SELECT    * into #tempSale FROM   V_ACC_BALANCE_CLIENT   WHERE CAST (ACCOUNT_CODE AS INT) >2100000  AND    MANDOOB_CODE =@MANDOOB_CODE   AND ACCOUNT_NAME  LIKE ''%''+LTRIM(RTRIM(@ACCOUNT_NAME)) +''%''     ORDER BY ACCOUNT_NAME ASC

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY ACCOUNT_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

END

		
  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;


	 
	 
	end 

	

	

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_CLIENT_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_CLIENT_SANAD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_GET_CLIENT_SANAD] 

		@PageSize int,
		@PageNumber int ,
		@CLIENT_CODE INT
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	 
	 
SELECT X.BILL_NUMBER,X.BILL_DATE ,X.B_CODE,BT.B_NAME,BT.B_COLOR,X.MOVE_CODE,MO.MOVE_NAME,X.ACCOUNT_CODE,X.DEBIT,X.CREDIT ,X.DEBIT_IQ,X.CREDIT_IQ,X.[DESCRIPTION],US.[USER_NAME]  into #tempBOX  FROM T_BOX X 
 LEFT OUTER JOIN
 T_MOVE  MO ON X.MOVE_CODE =MO.MOVE_CODE LEFT OUTER JOIN
 T_BILL_TYPE  BT ON X.B_CODE =BT.B_CODE  LEFT OUTER JOIN
 T_USERS  US ON X.USER_CODE =US.USER_CODE
WHERE X.ACCOUNT_CODE=@CLIENT_CODE  AND( X.B_CODE=5 OR  X.B_CODE=15 OR  X.B_CODE=28 OR X.B_CODE=70 OR  X.B_CODE=71 )   AND X.ACTIVE=1
ORDER BY BILL_DATE DESC


 
		
    SELECT @TotalRecords = COUNT(*) FROM #tempBOX;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempBOX
     ORDER BY BILL_DATE DESC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 
  
		

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;


	 
	 
	end 

	

	

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_DASHBORD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_DASHBORD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'





 



CREATE PROCEDURE [dbo].[P_API_GET_DASHBORD]
@D1 DATE,
@D2 DATE 


AS
DECLARE
 
@CURRANCY_CODE	int	,
@CURRANCY_USA	float	,
@CURRANCY_IQ	float	,
@CURRANCY_EQUAL	float	
BEGIN
 

SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1

IF @CURRANCY_CODE=1
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=1/CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_IQ
END

ELSE
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_USA
END


SELECT ISNULL(SUM(S.NET_SALES),0)  AS NET_SALES,ISNULL(SUM(S.NET_SALES-S.TOTAL_COST),0)  AS TOTAL_ARBAH

,(SELECT ISNULL(SUM(NET_BUY),0) FROM T_BUY WHERE ACTIVE=1 AND TOTAL_COST>=0 AND BILL_DATE BETWEEN @D1 AND @D2 )  AS TOTAL_BUY
,COUNT(S.BILL_NUMBER)  AS COUNT_SALES
,(SELECT COUNT(ITEM_CODE) FROM T_ITEMS WHERE ACTIVE=1 AND ITEM_CODE>0  )  AS COUNT_ITEMS
,(SELECT COUNT(ACCOUNT_CODE) FROM V_ACC_BALANCE_CLIENT  WHERE ACCOUNT_CODE> 2100000    )  AS COUNT_CLIENT
,(SELECT  ISNULL(SUM(DEBIT-CREDIT),0)*@CURRANCY_USA+ISNULL(SUM(DEBIT_IQ-CREDIT_IQ),0)*@CURRANCY_IQ  FROM T_BOX WHERE ACTIVE=1 AND BILL_DATE BETWEEN @D1 AND @D2 AND ACCOUNT_CODE BETWEEN 300 AND 399 )  AS TOTAL_EXPENSES
,(SELECT CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1    )  AS CURRANCY_PRIMARY

FROM V_SALES S WHERE BILL_DATE BETWEEN @D1 AND @D2 
 

END	--END OF PROGRAM





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_FILL_REPORT_ACCOUNT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_FILL_REPORT_ACCOUNT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE PROCEDURE [dbo].[P_API_GET_FILL_REPORT_ACCOUNT]
		@PageSize int,
		@PageNumber int,
    @IDD INT,
    @ACCOUNT_CODE INT,
    @D1 DATE,
    @D2 DATE,
    @CNY_CODE INT
AS
set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
BEGIN
    SET NOCOUNT ON;
 

    ------------------------------------------------------------------------
    -- 1) جلب المعلومات الأساسية عن الحساب والعميل والمندوب ونوع الفاتورة الافتراضي
    ------------------------------------------------------------------------
    DECLARE 
        @ACCOUNT_NAME        NVARCHAR(MAX),
        @CLIENT_PHONE_SMS    NVARCHAR(MAX),
        @CLIENT_REGION       NVARCHAR(MAX),
        @MANDOOB_CODE        INT,
        @MANDOOB_NAME        NVARCHAR(MAX),
        @B_NAME              NVARCHAR(MAX),
        @B_COLOR             NVARCHAR(MAX);

    SELECT @ACCOUNT_NAME = ACCOUNT_NAME
      FROM T_ACCOUNTS
     WHERE ACCOUNT_CODE = @ACCOUNT_CODE;

    SELECT 
        @CLIENT_PHONE_SMS = CLIENT_FULL_PHONE,
        @CLIENT_REGION    = CLIENT_REGION,
        @MANDOOB_CODE     = MANDOOB_CODE
    FROM T_CLIENT
    WHERE CLIENT_CODE = @ACCOUNT_CODE;

    SELECT @MANDOOB_NAME = MANDOOB_NAME
      FROM T_MANDOOB
     WHERE MANDOOB_CODE = @MANDOOB_CODE;

    SELECT 
        @B_NAME  = B_NAME,
        @B_COLOR = B_COLOR
    FROM T_BILL_TYPE
    WHERE B_CODE = 0;  -- (الفاتورة الافتراضية)

    ------------------------------------------------------------------------
    -- 2) جلب الرصيد الافتتاحي (ما قبل الفترة المحددة أو ما قبل IDD)
    ------------------------------------------------------------------------
    DECLARE 
        @BalanceFirstUSA  DECIMAL(18,4) = 0,
        @BalanceFirstIQ   DECIMAL(18,4) = 0,
        @BalanceFirstCur  DECIMAL(18,4) = 0;

    SELECT 
        @BalanceFirstUSA = ISNULL(SUM(DEBIT - CREDIT), 0),
        @BalanceFirstIQ  = ISNULL(SUM(DEBIT_IQ - CREDIT_IQ), 0),
        @BalanceFirstCur = ISNULL(SUM(DEBIT_CUR - CREDIT_CUR), 0)
    FROM T_BOX
    WHERE ACCOUNT_CODE = @ACCOUNT_CODE
      AND ACTIVE = 1
      AND (
           (@IDD = 0 AND BILL_DATE < @D1)
           OR (@IDD <> 0 AND T_ID_BOX <= @IDD)
          );

    ------------------------------------------------------------------------
    -- 3) جدول مؤقت لحفظ النتائج
    ------------------------------------------------------------------------
    IF OBJECT_ID(''tempdb..#TMP_REPORT_ACCOUNT'') IS NOT NULL
       DROP TABLE #TMP_REPORT_ACCOUNT;

    CREATE TABLE #TMP_REPORT_ACCOUNT
    (
        T_ID_BOX            INT NOT NULL PRIMARY KEY,
        BILL_BRANCH         NVARCHAR(50),
        BILL_NUMBER         NVARCHAR(50),
        BILL_DATE           DATE,
        BILL_TIME           DATETIME,
        B_CODE              INT,
        B_NAME              NVARCHAR(MAX),
        MOVE_CODE           INT,
        MOVE_NAME           NVARCHAR(MAX),
        ACCOUNT_CODE        INT,
        ACCOUNT_NAME        NVARCHAR(MAX),
        ACCOUNT_FULL_NAME   NVARCHAR(MAX),
        ACCOUNT_DESCRIPTION NVARCHAR(MAX),
        AMO_DEBIT           DECIMAL(18,4),
        AMO_CREDIT          DECIMAL(18,4),
        BALANCE_USA         DECIMAL(18,4),
        AMO_DEBIT_IQ        DECIMAL(18,4),
        AMO_CREDIT_IQ       DECIMAL(18,4),
        BALANCE_IQ          DECIMAL(18,4),
        AMO_DEBIT_CUR       DECIMAL(18,3),
        AMO_CREDIT_CUR      DECIMAL(18,3),
        BALANCE_CUR         DECIMAL(18,3),
        DESCRIPTION         NVARCHAR(MAX),
        USER_CODE           INT,
        USER_NAME           NVARCHAR(MAX),
        DEAL_CODE           INT,
        DEAL_NAME           NVARCHAR(MAX),
        BRANCH_CODE         INT,
        BRANCH_NAME         NVARCHAR(MAX),
        MANDOB_NAME         NVARCHAR(MAX),
        CLIENT_REGION       NVARCHAR(MAX),
        CLIENT_PHONE_SMS    NVARCHAR(MAX),
        B_COLOR             NVARCHAR(MAX),
        CHECKED             BIT,
        ID_BOX              INT
    );

    ------------------------------------------------------------------------
    -- 4) إدخال "رصيد سابق" كسجل أولي في كشف الحساب
    ------------------------------------------------------------------------
    INSERT INTO #TMP_REPORT_ACCOUNT
    (
        T_ID_BOX, BILL_BRANCH, BILL_NUMBER, BILL_DATE, BILL_TIME,
        B_CODE, B_NAME, MOVE_CODE, MOVE_NAME, ACCOUNT_CODE, ACCOUNT_NAME, ACCOUNT_FULL_NAME,
        ACCOUNT_DESCRIPTION, AMO_DEBIT, AMO_CREDIT, BALANCE_USA,
        AMO_DEBIT_IQ, AMO_CREDIT_IQ, BALANCE_IQ,
        AMO_DEBIT_CUR, AMO_CREDIT_CUR, BALANCE_CUR,
        DESCRIPTION, USER_CODE, USER_NAME, DEAL_CODE, DEAL_NAME,
        BRANCH_CODE, BRANCH_NAME, MANDOB_NAME, CLIENT_REGION, CLIENT_PHONE_SMS,
        B_COLOR, CHECKED, ID_BOX
    )
    SELECT
        0 AS T_ID_BOX,
        NULL AS BILL_BRANCH,
        ''0'' AS BILL_NUMBER,
        CONVERT(NVARCHAR(MAX), @D1, 111) AS BILL_DATE,
        NULL AS BILL_TIME,
        0 AS B_CODE,
        @B_NAME AS B_NAME,
        0 AS MOVE_CODE,
        NULL AS MOVE_NAME,
        @ACCOUNT_CODE,
        @ACCOUNT_NAME,
        NULL,
        NULL,
        NULL, NULL,
        iif(@CNY_CODE = 1,@BalanceFirstUSA,0),
        NULL, NULL,
         iif(@CNY_CODE = 2,@BalanceFirstIQ,0),
        NULL, NULL,
        @BalanceFirstCur,
        N''رصيد سابق ماقبل الفترة'',
        0, NULL,
        0, NULL,
        0, NULL,
        @MANDOOB_NAME,
        @CLIENT_REGION,
        @CLIENT_PHONE_SMS,
        @B_COLOR,
        0,
        0;

    ------------------------------------------------------------------------
    -- 5) جلب الحركات التفصيلية من T_BOX حسب قيمة @IDD
    ------------------------------------------------------------------------
    IF (@IDD = 0)
    BEGIN
        -- إذا @IDD=0: نعتمد التاريخ Between @D1 AND @D2
        WITH BaseData AS
        (
            SELECT
                T_ID_BOX,
                BILL_BRANCH,
                BILL_NUMBER,
                BILL_DATE,
                BILL_TIME,
                MOVE_CODE,
                B_CODE,
                BRANCH_CODE,
                ACCOUNT_CODE,
                ACCOUNT_DESCRIPTION,
                DEBIT,
                CREDIT,
                DEBIT_IQ,
                CREDIT_IQ,
                DEBIT_CUR,
                CREDIT_CUR,
                DESCRIPTION,
                USER_CODE,
                DEAL_CODE,
                CHECKED,
                ACTIVE
            FROM T_BOX
            WHERE ACTIVE = 1
              AND ACCOUNT_CODE = @ACCOUNT_CODE
              AND BILL_DATE BETWEEN @D1 AND @D2
        )
        INSERT INTO #TMP_REPORT_ACCOUNT
        SELECT
            ROW_NUMBER() OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) AS T_ID_BOX,
            bd.BILL_BRANCH,
            CONVERT(NVARCHAR(MAX), bd.BILL_NUMBER),
            CONVERT(NVARCHAR(MAX), bd.BILL_DATE, 111),
            bd.BILL_TIME,
            bd.B_CODE,
            bt.B_NAME,
            bd.MOVE_CODE,
            mv.MOVE_NAME,
            bd.ACCOUNT_CODE,
            @ACCOUNT_NAME,
            NULL AS ACCOUNT_FULL_NAME,
            bd.ACCOUNT_DESCRIPTION,
            bd.DEBIT AS AMO_DEBIT,
            bd.CREDIT AS AMO_CREDIT,
            SUM(bd.DEBIT - bd.CREDIT) OVER 
                (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + @BalanceFirstUSA AS BALANCE_USA,
            bd.DEBIT_IQ AS AMO_DEBIT_IQ,
            bd.CREDIT_IQ AS AMO_CREDIT_IQ,
            SUM(bd.DEBIT_IQ - bd.CREDIT_IQ) OVER 
                (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + @BalanceFirstIQ AS BALANCE_IQ,
            bd.DEBIT_CUR AS AMO_DEBIT_CUR,
            bd.CREDIT_CUR AS AMO_CREDIT_CUR,
            SUM(CAST(bd.DEBIT_CUR AS DECIMAL(18,3)) - CAST(bd.CREDIT_CUR AS DECIMAL(18,3)))
                OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + @BalanceFirstCur AS BALANCE_CUR,
            bd.DESCRIPTION,
            bd.USER_CODE,
            us.USER_NAME,
            bd.DEAL_CODE,
            dl.DEAL_NAME,
            bd.BRANCH_CODE,
            NULL AS BRANCH_NAME,
            @MANDOOB_NAME,
            @CLIENT_REGION,
            @CLIENT_PHONE_SMS,
            bt.B_COLOR,
            bd.CHECKED,
            bd.T_ID_BOX AS ID_BOX
        FROM BaseData bd
        LEFT JOIN T_DEAL       dl ON bd.DEAL_CODE = dl.DEAL_CODE
        LEFT JOIN T_MOVE       mv ON bd.MOVE_CODE = mv.MOVE_CODE
        LEFT JOIN T_BILL_TYPE  bt ON bd.B_CODE    = bt.B_CODE
        LEFT JOIN T_USERS      us ON bd.USER_CODE = us.USER_CODE
        WHERE bd.ACTIVE = 1;
    END
    ELSE
    BEGIN
        -- إذا @IDD <> 0: نعتمد T_ID_BOX > @IDD
        WITH BaseData AS
        (
            SELECT
                T_ID_BOX,
                BILL_BRANCH,
                BILL_NUMBER,
                BILL_DATE,
                BILL_TIME,
                MOVE_CODE,
                B_CODE,
                BRANCH_CODE,
                ACCOUNT_CODE,
                ACCOUNT_DESCRIPTION,
                DEBIT,
                CREDIT,
                DEBIT_IQ,
                CREDIT_IQ,
                DEBIT_CUR,
                CREDIT_CUR,
                DESCRIPTION,
                USER_CODE,
                DEAL_CODE,
                CHECKED,
                ACTIVE
            FROM T_BOX
            WHERE ACTIVE = 1
              AND ACCOUNT_CODE = @ACCOUNT_CODE
              AND T_ID_BOX > @IDD
        )
        INSERT INTO #TMP_REPORT_ACCOUNT
        SELECT
            ROW_NUMBER() OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) AS T_ID_BOX,
            bd.BILL_BRANCH,
            CONVERT(NVARCHAR(MAX), bd.BILL_NUMBER),
            CONVERT(NVARCHAR(MAX), bd.BILL_DATE, 111),
            bd.BILL_TIME,
            bd.B_CODE,
            bt.B_NAME,
            bd.MOVE_CODE,
            mv.MOVE_NAME,
            bd.ACCOUNT_CODE,
            @ACCOUNT_NAME,
            NULL AS ACCOUNT_FULL_NAME,
            bd.ACCOUNT_DESCRIPTION,
            bd.DEBIT AS AMO_DEBIT,
            bd.CREDIT AS AMO_CREDIT,
            SUM(bd.DEBIT - bd.CREDIT) OVER 
                (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + @BalanceFirstUSA AS BALANCE_USA,
            bd.DEBIT_IQ AS AMO_DEBIT_IQ,
            bd.CREDIT_IQ AS AMO_CREDIT_IQ,
            SUM(bd.DEBIT_IQ - bd.CREDIT_IQ) OVER 
                (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + @BalanceFirstIQ AS BALANCE_IQ,
            bd.DEBIT_CUR AS AMO_DEBIT_CUR,
            bd.CREDIT_CUR AS AMO_CREDIT_CUR,
            SUM(CAST(bd.DEBIT_CUR AS DECIMAL(18,3)) - CAST(bd.CREDIT_CUR AS DECIMAL(18,3)))
                OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + @BalanceFirstCur AS BALANCE_CUR,
            bd.DESCRIPTION,
            bd.USER_CODE,
            us.USER_NAME,
            bd.DEAL_CODE,
            dl.DEAL_NAME,
            bd.BRANCH_CODE,
            NULL AS BRANCH_NAME,
            @MANDOOB_NAME,
            @CLIENT_REGION,
            @CLIENT_PHONE_SMS,
            bt.B_COLOR,
            bd.CHECKED,
            bd.T_ID_BOX AS ID_BOX
        FROM BaseData bd
        LEFT JOIN T_DEAL       dl ON bd.DEAL_CODE = dl.DEAL_CODE
        LEFT JOIN T_MOVE       mv ON bd.MOVE_CODE = mv.MOVE_CODE
        LEFT JOIN T_BILL_TYPE  bt ON bd.B_CODE    = bt.B_CODE
        LEFT JOIN T_USERS      us ON bd.USER_CODE = us.USER_CODE
        WHERE bd.ACTIVE = 1;
    END

    ------------------------------------------------------------------------
    -- 6) ترشيح السجلات بناءً على قيمة @CNY_CODE
    --    1 = عملة USD   2 = عملة IQD  (حسب ما ورد في الإجراء الأصلي)
    ------------------------------------------------------------------------
    IF (@CNY_CODE = 1)
    BEGIN
        DELETE FROM #TMP_REPORT_ACCOUNT
         WHERE (AMO_DEBIT = 0 AND AMO_CREDIT = 0 AND BILL_NUMBER <> ''0'');
    END
    ELSE IF (@CNY_CODE = 2)
    BEGIN
        DELETE FROM #TMP_REPORT_ACCOUNT
         WHERE (AMO_DEBIT_IQ = 0 AND AMO_CREDIT_IQ = 0 AND BILL_NUMBER <> ''0'');
    END
 
 

------------------------------------------------------------------------
    -- 7) إرجاع النتائج 
    ------------------------------------------------------------------------
  
SELECT @TotalRecords = COUNT(*) FROM #TMP_REPORT_ACCOUNT;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
      
   FROM #TMP_REPORT_ACCOUNT ORDER BY  T_ID_BOX ASC

     OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;
  
    SET NOCOUNT OFF;
END;



' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_FILL_REPORT_ACCOUNT_OLD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_FILL_REPORT_ACCOUNT_OLD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE PROCEDURE [dbo].[P_API_GET_FILL_REPORT_ACCOUNT_OLD]
		@PageSize int,
		@PageNumber int,
    @IDD INT,
    @ACCOUNT_CODE INT,
    @D1 DATE,
    @D2 DATE,
    @CNY_CODE INT
AS
set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
BEGIN -- CREATE TABLE AND FILTER DATA TO TABLE TEMP
    CREATE TABLE #TEMP_T_BOX ([T_ID_BOX] DECIMAL(18, 0),
                              [BILL_BRANCH] NVARCHAR(50),
                              [BILL_NUMBER] DECIMAL(18, 0),
                              [BILL_STR] NVARCHAR(MAX),
                              [FULL_BILL] NVARCHAR(MAX),
                              [BILL_DATE] DATE,
                              [BILL_TIME] DATETIME,
                              [MOVE_CODE] INT,
                              [B_CODE] INT,
                              [BRANCH_CODE] INT,
                              [ACCOUNT_CODE] INT,
                              [ACCOUNT_DESCRIPTION] NVARCHAR(MAX),
                              [DEBIT] DECIMAL(18, 3),
                              [CREDIT] DECIMAL(18, 3),
                              [B_USA] DECIMAL(19, 3),
                              [DEBIT_IQ] DECIMAL(18, 0),
                              [CREDIT_IQ] DECIMAL(18, 0),
                              [B_IQ] DECIMAL(19, 0),
                              [CURRANCY_CODE] INT,
                              [CURRANCY_EQUAL] DECIMAL(18, 3),
                              [DEBIT_CUR] DECIMAL(38, 6),
                              [CREDIT_CUR] DECIMAL(38, 6),
                              [B_CUR] DECIMAL(38, 6),
                              [DESCRIPTION] NVARCHAR(MAX),
                              [DEAL_CODE] INT,
                              [USER_CODE] INT,
                              [CHECKED] BIT,
                              [C_DATE] DATETIME,
                              [ACTIVE] BIT,
                              [GUIDS] UNIQUEIDENTIFIER,
                              [BILL_RELATION] INT,
                              [B_RELATION] INT,
                              [DATE_RELATION] DATE,
                              [FLAG_RELATION] INT);
    -- create new struct table like Table T_BOX
    IF @IDD = 0
    BEGIN



        INSERT INTO #TEMP_T_BOX (T_ID_BOX,
                                 BILL_BRANCH,
                                 BILL_NUMBER,
                                 BILL_STR,
                                 FULL_BILL,
                                 BILL_DATE,
                                 BILL_TIME,
                                 MOVE_CODE,
                                 B_CODE,
                                 BRANCH_CODE,
                                 ACCOUNT_CODE,
                                 ACCOUNT_DESCRIPTION,
                                 DEBIT,
                                 CREDIT,
                                 B_USA,
                                 DEBIT_IQ,
                                 CREDIT_IQ,
                                 B_IQ,
                                 CURRANCY_CODE,
                                 CURRANCY_EQUAL,
                                 DEBIT_CUR,
                                 CREDIT_CUR,
                                 B_CUR,
                                 DESCRIPTION,
                                 DEAL_CODE,
                                 USER_CODE,
                                 CHECKED,
                                 C_DATE,
                                 ACTIVE,
                                 GUIDS,
                                 BILL_RELATION,
                                 B_RELATION,
                                 DATE_RELATION,
                                 FLAG_RELATION)
        SELECT T_ID_BOX,
               BILL_BRANCH,
               BILL_NUMBER,
               BILL_STR,
               FULL_BILL,
               BILL_DATE,
               BILL_TIME,
               MOVE_CODE,
               B_CODE,
               BRANCH_CODE,
               ACCOUNT_CODE,
               ACCOUNT_DESCRIPTION,
               DEBIT,
               CREDIT,
               B_USA,
               DEBIT_IQ,
               CREDIT_IQ,
               B_IQ,
               CURRANCY_CODE,
               CURRANCY_EQUAL,
               DEBIT_CUR,
               CREDIT_CUR,
               B_CUR,
               DESCRIPTION,
               DEAL_CODE,
               USER_CODE,
               CHECKED,
               C_DATE,
               ACTIVE,
               GUIDS,
               BILL_RELATION,
               B_RELATION,
               DATE_RELATION,
               FLAG_RELATION
          FROM dbo.T_BOX
         WHERE ACTIVE       = 1
           AND ACCOUNT_CODE = @ACCOUNT_CODE
           AND BILL_DATE BETWEEN @D1 AND @D2
		   ORDER BY  BILL_DATE,B_CODE,BILL_NUMBER ASC;

    END;
    ELSE
    BEGIN

        INSERT INTO #TEMP_T_BOX (T_ID_BOX,
                                 BILL_BRANCH,
                                 BILL_NUMBER,
                                 BILL_STR,
                                 FULL_BILL,
                                 BILL_DATE,
                                 BILL_TIME,
                                 MOVE_CODE,
                                 B_CODE,
                                 BRANCH_CODE,
                                 ACCOUNT_CODE,
                                 ACCOUNT_DESCRIPTION,
                                 DEBIT,
                                 CREDIT,
                                 B_USA,
                                 DEBIT_IQ,
                                 CREDIT_IQ,
                                 B_IQ,
                                 CURRANCY_CODE,
                                 CURRANCY_EQUAL,
                                 DEBIT_CUR,
                                 CREDIT_CUR,
                                 B_CUR,
                                 DESCRIPTION,
                                 DEAL_CODE,
                                 USER_CODE,
                                 CHECKED,
                                 C_DATE,
                                 ACTIVE,
                                 GUIDS,
                                 BILL_RELATION,
                                 B_RELATION,
                                 DATE_RELATION,
                                 FLAG_RELATION)
        SELECT T_ID_BOX,
               BILL_BRANCH,
               BILL_NUMBER,
               BILL_STR,
               FULL_BILL,
               BILL_DATE,
               BILL_TIME,
               MOVE_CODE,
               B_CODE,
               BRANCH_CODE,
               ACCOUNT_CODE,
               ACCOUNT_DESCRIPTION,
               DEBIT,
               CREDIT,
               B_USA,
               DEBIT_IQ,
               CREDIT_IQ,
               B_IQ,
               CURRANCY_CODE,
               CURRANCY_EQUAL,
               DEBIT_CUR,
               CREDIT_CUR,
               B_CUR,
               DESCRIPTION,
               DEAL_CODE,
               USER_CODE,
               CHECKED,
               C_DATE,
               ACTIVE,
               GUIDS,
               BILL_RELATION,
               B_RELATION,
               DATE_RELATION,
               FLAG_RELATION
          FROM dbo.T_BOX
         WHERE ACTIVE       = 1
           AND ACCOUNT_CODE = @ACCOUNT_CODE
           AND T_ID_BOX     > @IDD 
		   ORDER BY  BILL_DATE,B_CODE,BILL_NUMBER ASC;
    END;
END;
-- BEGIN CALC
DECLARE @T_ID_BOX_CURCOR     INT,
        @ID_REPORT           NUMERIC(18, 0),
        @BILL_DATE_ID        DATE,
        @BILL_TIME           DATETIME,
        @CR_USA              FLOAT,
        @DE_USA              FLOAT,
        @CR_IQ               FLOAT,
        @DE_IQ               FLOAT,
        @CR_CUR              FLOAT,
        @DE_CUR              FLOAT,
        @REMAIN_USA          FLOAT,
        @REMAIN_IQ           FLOAT,
        @REMAIN_CUR          FLOAT,
        @BILL_BRANCH         NVARCHAR(50),
        @BILL_NUMBER         INT,
        @BILL_DATE           DATE,
        @B_CODE              INT,
        @B_NAME              NVARCHAR(MAX),
        @MOVE_CODE           INT,
        @MOVE_NAME           NVARCHAR(MAX),
        @ACCOUNT_NAME        NVARCHAR(MAX),
        @ACCOUNT_DESCRIPTION NVARCHAR(MAX),
        @DESCRIPTION         NVARCHAR(MAX),
        @CURRANCY_CODE       INT,
        @CURRANCY_NAME       NVARCHAR(MAX),
        @CURRANCY_EQUAL      FLOAT,
        @BALANCE_USA_ID      FLOAT,
        @USER_CODE           INT,
        @USER_NAME           NVARCHAR(MAX),
        @BALANCEEE           FLOAT,
        @BALANCEEE_IQ        FLOAT,
        @BALANCEEE_FIRST     FLOAT,
        @BALANCEEE_FIRST_IQ  FLOAT,
        @BALANCEEE_CUR       FLOAT,
        @BALANCEEE_FIRST_CUR FLOAT,
        @MANDOB_CODE         INT,
        @MANDOB_NAME         NVARCHAR(MAX),
        @CLIENT_REGION       NVARCHAR(MAX),
        @CLIENT_PHONE_SMS    NVARCHAR(MAX),
        @DEAL_CODE           INT,
        @DEAL_NAME           NVARCHAR(MAX),
        @B_COLOR             NVARCHAR(MAX),
        @CHECKED             INT;

BEGIN
 

    SELECT @ACCOUNT_NAME = ACCOUNT_NAME
      FROM T_ACCOUNTS
     WHERE ACCOUNT_CODE = @ACCOUNT_CODE;
    SELECT @CLIENT_PHONE_SMS = CLIENT_FULL_PHONE,
           @CLIENT_REGION = CLIENT_REGION,
           @MANDOB_CODE = MANDOOB_CODE
      FROM T_CLIENT
     WHERE CLIENT_CODE = @ACCOUNT_CODE;
    SELECT @MANDOB_NAME = MANDOOB_NAME
      FROM T_MANDOOB
     WHERE MANDOOB_CODE = @MANDOB_CODE;

    SELECT @B_NAME = B_NAME,
           @B_COLOR = B_COLOR
      FROM T_BILL_TYPE
     WHERE B_CODE = 0;


    IF @IDD = 0
    BEGIN

        SELECT @BALANCEEE_FIRST = ISNULL(SUM(DEBIT - CREDIT), 0),
               @BALANCEEE_FIRST_IQ = ISNULL(SUM(DEBIT_IQ - CREDIT_IQ), 0),
               @BALANCEEE_FIRST_CUR = ISNULL(SUM(DEBIT_CUR - CREDIT_CUR), 0)
          FROM T_BOX
         WHERE ACCOUNT_CODE = @ACCOUNT_CODE
           AND BILL_DATE    < @D1
           AND ACTIVE       = 1;
    END;
    ELSE
    BEGIN
        SELECT @BALANCEEE_FIRST = ISNULL(SUM(DEBIT - CREDIT), 0),
               @BALANCEEE_FIRST_IQ = ISNULL(SUM(DEBIT_IQ - CREDIT_IQ), 0),
               @BALANCEEE_FIRST_CUR = ISNULL(SUM(DEBIT_CUR - CREDIT_CUR), 0)
          FROM T_BOX
         WHERE ACCOUNT_CODE = @ACCOUNT_CODE
           AND T_ID_BOX     <= @IDD
           AND ACTIVE       = 1
		   

    END;

    CREATE TABLE #TEMP_T_BOX_REPORT_ACCOUNT ([T_ID_BOX] [NUMERIC](18, 0) NOT NULL primary key ,
                                             [BILL_BRANCH] [NVARCHAR](50) COLLATE Arabic_CI_AS NULL,
                                             [BILL_NUMBER] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [BILL_DATE] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [BILL_TIME] [DATETIME] NULL,
                                             [B_CODE] [INT] NULL,
                                             [B_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [MOVE_CODE] [INT] NULL,
                                             [MOVE_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [ACCOUNT_CODE] [INT] NULL,
                                             [ACCOUNT_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [ACCOUNT_FULL_NAME] AS
                                                 ((CONVERT([VARCHAR](MAX), [ACCOUNT_CODE]) + '' - '') + [ACCOUNT_NAME]),
                                             [ACCOUNT_DESCRIPTION] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [AMO_DEBIT] [DECIMAL](18, 3) NULL,
                                             [AMO_CREDIT] [DECIMAL](18, 3) NULL,
                                             [BALANCE_USA] [DECIMAL](18, 3) NULL,
                                             [AMO_DEBIT_IQ] [DECIMAL](18, 0) NULL,
                                             [AMO_CREDIT_IQ] [DECIMAL](18, 0) NULL,
                                             [BALANCE_IQ] [DECIMAL](18, 0) NULL,
                                             [AMO_DEBIT_CUR] [DECIMAL](18, 3) NULL,
                                             [AMO_CREDIT_CUR] [DECIMAL](18, 3) NULL,
                                             [BALANCE_CUR] [DECIMAL](18, 3) NULL,
                                             [DESCRIPTION] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [USER_CODE] [INT] NULL,
                                             [USER_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [DEAL_CODE] [INT] NULL,
                                             [DEAL_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [BRANCH_CODE] [INT] NULL
                                                 DEFAULT ((0)),
                                             [BRANCH_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [MANDOB_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [CLIENT_REGION] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [CLIENT_PHONE_SMS] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [B_COLOR] [NVARCHAR](100) COLLATE Arabic_CI_AS NULL,
                                             [CHECKED] [BIT] NULL
                                                 DEFAULT ((0)),
                                             [ID_BOX] [NUMERIC](18, 0) NULL
                                                 DEFAULT ((0)),
                                             [REMAIN_USA] [NUMERIC](18, 0) NULL
                                                 DEFAULT ((0)),
                                             [REMAIN_IQ] [NUMERIC](18, 0) NULL
                                                 DEFAULT ((0)),
                                             [REMAIN_CUR] [NUMERIC](18, 0) NULL
                                                 DEFAULT ((0)));


    INSERT INTO #TEMP_T_BOX_REPORT_ACCOUNT ([T_ID_BOX],
                                            [BILL_BRANCH],
                                            [BILL_NUMBER],
                                            [BILL_DATE],
                                            [BILL_TIME],
                                            [B_CODE],
                                            [B_NAME],
                                            [MOVE_CODE],
                                            [MOVE_NAME],
                                            [ACCOUNT_CODE],
                                            [ACCOUNT_NAME],
                                            [ACCOUNT_DESCRIPTION],
                                            [AMO_DEBIT],
                                            [AMO_CREDIT],
                                            [BALANCE_USA],
                                            [AMO_DEBIT_IQ],
                                            [AMO_CREDIT_IQ],
                                            [BALANCE_IQ],
                                            [AMO_DEBIT_CUR],
                                            [AMO_CREDIT_CUR],
                                            [BALANCE_CUR],
                                            [DESCRIPTION],
                                            [USER_CODE],
                                            [USER_NAME],
                                            [DEAL_CODE],
                                            [DEAL_NAME],
                                            [BRANCH_CODE],
                                            [BRANCH_NAME],
                                            [MANDOB_NAME],
                                            [CLIENT_REGION],
                                            [CLIENT_PHONE_SMS],
                                            [B_COLOR],
                                            [CHECKED],
                                            [ID_BOX])
    VALUES (0, 0, 0, @D1, N'' '', 0, @B_NAME, 0, N'' '', @ACCOUNT_CODE, @ACCOUNT_NAME, @ACCOUNT_DESCRIPTION, NULL, NULL,
            @BALANCEEE_FIRST, NULL, NULL, @BALANCEEE_FIRST_IQ, NULL, NULL, @BALANCEEE_FIRST_CUR,
            N''رصيد سابق ماقبل الفترة'', 0, NULL, 0, NULL, 0, NULL, @MANDOB_NAME, @CLIENT_REGION, @CLIENT_PHONE_SMS,
            @B_COLOR, 0, 0);

    BEGIN

        INSERT INTO #TEMP_T_BOX_REPORT_ACCOUNT ([T_ID_BOX],
                                                [BILL_BRANCH],
                                                [BILL_NUMBER],
                                                [BILL_DATE],
                                                [BILL_TIME],
                                                [B_CODE],
                                                [B_NAME],
                                                [MOVE_CODE],
                                                [MOVE_NAME],
                                                [ACCOUNT_CODE],
                                                [ACCOUNT_NAME],
                                                [ACCOUNT_DESCRIPTION],
                                                [AMO_DEBIT],
                                                [AMO_CREDIT],
                                                [BALANCE_USA],
                                                [AMO_DEBIT_IQ],
                                                [AMO_CREDIT_IQ],
                                                [BALANCE_IQ],
                                                [AMO_DEBIT_CUR],
                                                [AMO_CREDIT_CUR],
                                                [BALANCE_CUR],
                                                [DESCRIPTION],
                                                [USER_CODE],
                                                [USER_NAME],
                                                [DEAL_CODE],
                                                [DEAL_NAME],
                                                [BRANCH_CODE],
                                                [BRANCH_NAME],
                                                [MANDOB_NAME],
                                                [CLIENT_REGION],
                                                [CLIENT_PHONE_SMS],
                                                [B_COLOR],
                                                [CHECKED],
                                                [ID_BOX])

        SELECT      ROW_NUMBER() OVER (ORDER BY a.BILL_DATE, a.B_CODE, a.BILL_NUMBER ASC),
                    a.BILL_BRANCH,
                    a.BILL_NUMBER,
                    a.BILL_DATE,
                    a.BILL_TIME,
                    a.B_CODE,
                    d.B_NAME,
                    a.MOVE_CODE,
                    c.MOVE_NAME,
                    a.ACCOUNT_CODE,
                    @ACCOUNT_NAME,
                    a.ACCOUNT_DESCRIPTION,
                    a.DEBIT,
                    a.CREDIT,
                    SUM(a.DEBIT - a.CREDIT) OVER (ORDER BY a.BILL_DATE, a.B_CODE, a.BILL_NUMBER ASC), -- NULL, -- @BALANCEEE + @REMAIN_USA (Last update)
                    a.DEBIT_IQ,
                    a.CREDIT_IQ,
                    SUM(a.DEBIT_IQ - a.CREDIT_IQ) OVER (ORDER BY a.BILL_DATE, a.B_CODE, a.BILL_NUMBER ASC), -- NULL, -- @BALANCEEE + @REMAIN_IQ (Last update)
                    a.DEBIT_CUR,
                    a.CREDIT_CUR,
                    SUM(CAST(a.DEBIT_CUR AS DECIMAL(18,3)) - CAST(a.CREDIT_CUR AS DECIMAL(18,3))) OVER (ORDER BY a.BILL_DATE, a.B_CODE, a.BILL_NUMBER ASC), -- @BALANCEEE_CUR + @REMAIN_CUR (last update)
					-- IT''S IN TABLE DESIGN IS SET DECIMAL (38,6) ::) NOT SAME IN YOUR OLD PROCEDURE 
                    a.DESCRIPTION,
                    a.USER_CODE,
                    f.USER_NAME,
                    a.DEAL_CODE,
                    b.DEAL_NAME,
                    0,
                    NULL,
                    @MANDOB_NAME,
                    @CLIENT_REGION,
                    @CLIENT_PHONE_SMS,
                    d.B_COLOR,
                    a.CHECKED,
                    a.T_ID_BOX
          FROM      #TEMP_T_BOX a
          LEFT JOIN dbo.T_DEAL b
            ON a.DEAL_CODE     = b.DEAL_CODE
          LEFT JOIN dbo.T_MOVE c
            ON a.MOVE_CODE     = c.MOVE_CODE
          LEFT JOIN dbo.T_BILL_TYPE d
            ON a.B_CODE        = d.B_CODE
          LEFT JOIN dbo.T_CURRANNCY e
            ON a.CURRANCY_CODE = e.CURRANCY_CODE
          LEFT JOIN dbo.T_USERS f
            ON a.USER_CODE     = f.USER_CODE;


    END;
    IF @CNY_CODE = 1
    BEGIN
        DELETE FROM #TEMP_T_BOX_REPORT_ACCOUNT
         WHERE AMO_DEBIT  = 0
           AND AMO_CREDIT = 0;
    END;
    IF @CNY_CODE = 2
    BEGIN
        DELETE FROM #TEMP_T_BOX_REPORT_ACCOUNT
         WHERE AMO_DEBIT_IQ  = 0
           AND AMO_CREDIT_IQ = 0;
    END;

	 

SELECT @TotalRecords = COUNT(*) FROM #TEMP_T_BOX_REPORT_ACCOUNT;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
      
   FROM #TEMP_T_BOX_REPORT_ACCOUNT ORDER BY  T_ID_BOX ASC

     OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;

END;

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_ITEM_MOVE_AVG]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_ITEM_MOVE_AVG]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'






CREATE PROCEDURE [dbo].[P_API_GET_ITEM_MOVE_AVG]


@ITEM_CODE INT 

AS
DECLARE 
@BILL_SEQ decimal(18, 0)

 
IF OBJECT_ID(''tempdb..#TEMP_AVG_ITEM'') IS NOT NULL DROP Table #TEMP_AVG_ITEM
SELECT CAST( ROW_NUMBER() OVER (ORDER BY BILL_DATE ASC,BILL_NUMBER ASC) AS FLOAT) AS RowNum, x.* INTO #TEMP_AVG_ITEM FROM 
( SELECT 0 AS SEQ,ITEM_CODE, ITEM_NAME,N'''' AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST AS PRICE,TOTAL_COST AS TOTAL,''2000-01-01'' AS BILL_DATE,BILL_NUMBER,BILL_BRANCH,0 AS B_CODE,N''رصيد اولي'' AS B_NAME,(N''رصيد اولي للمادة'') AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG ,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID  FROM V_BUY_DETAILS_FIRST WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT 1 AS SEQ,ITEM_CODE, ITEM_NAME,ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,BILL_DATE,BILL_NUMBER,BILL_BRANCH,21 AS B_CODE,N''مشتريات'' AS B_NAME,(N''المورد :''+CLIENT_NAME) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS int) AS PROCCESS_ID FROM V_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE AND QTY<>0
UNION 
SELECT 2 AS SEQ,ITEM_CODE, ITEM_NAME,ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,TOTAL_QTY AS QTY,UNIT_NAME,UNIT_QTY,(TOTAL_QTY*UNIT_QTY)AS QTY_MIN,(TOTAL_QTY*UNIT_QTY)*-1 AS QTY_MIN_BALANCE ,PRICE,TOTAL,BILL_DATE,BILL_NUMBER,BILL_BRANCH,2 AS B_CODE ,N''مبيعات'' AS B_NAME ,(N''العميل :''+CLIENT_NAME) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID FROM V_SALES_DETAILS WHERE ITEM_CODE=@ITEM_CODE 
 UNION 
SELECT 3 AS SEQ,ITEM_CODE, ITEM_NAME,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,24 AS B_CODE,N''تصحيح مخزني او تلف'' AS B_NAME,IIF(QTY<0,N''تلف'' ,N''اضافة عدد'') AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG ,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID FROM V_BUY_DETAILS_CORRECT WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT 4 AS SEQ,ITEM_CODE_FACTORY, ITEM_NAME_FACTORY,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,11 AS B_CODE,N''تصنيع'' AS B_NAME,N''تصنيع'' AS DESCRIPTION_TYPE,BILL_NUMBER AS GUID_ID,0 AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID FROM V_FACTORY WHERE ITEM_CODE_FACTORY=@ITEM_CODE
UNION 
SELECT 5 AS SEQ,ITEM_CODE, ITEM_NAME,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,(TOT_QTY_MIN/UNIT_QTY) AS QTY,UNIT_NAME,UNIT_QTY,(TOT_QTY_MIN)AS QTY_MIN,(TOT_QTY_MIN)*-1 AS QTY_MIN_BALANCE ,PRICE,(PRICE*TOT_QTY_MIN) AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,12 AS B_CODE,N''استهلاك في التصنيع'' AS B_NAME,(N''استهلاك في التصنيع للمادة : ''+ITEM_NAME_FACTORY) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID FROM V_FACTORY_DETAILS WHERE ITEM_CODE=@ITEM_CODE
 )x ORDER BY SEQ ASC,BILL_DATE ASC,BILL_NUMBER ASC


UPDATE #TEMP_AVG_ITEM SET PROCCESS_ID=RowNum
--SELECT * FROM #TEMP_AVG_ITEM

DECLARE
@LOOP_COUNT INT


SET @LOOP_COUNT=0
LOOP_FIRST:
SET @LOOP_COUNT+=1
 --UPDATE #TEMP_AVG_ITEM SET RowNum=0,PROCCESS_ID=0 WHERE B_CODE=0
DECLARE BOX_CURSOR CURSOR FOR SELECT  RowNum FROM #TEMP_AVG_ITEM   ORDER BY PROCCESS_ID ASC

DECLARE
@T_ID_BOX_CURCOR numeric(18, 2),
@B_CODE INT,
@GUID_ID numeric(18, 2),
@MAX_ID numeric(18, 2),
@BILL_BRANCH NVARCHAR(30),
@QTY FLOAT,
@COST FLOAT,
@COSTIFZERO FLOAT,
@TOTAL_AVG_COST	FLOAT	,
@TOTAL_BALANCE	FLOAT	,
@TOTAL_BALANCE_BEFORE	FLOAT	,
@COST_BEFORE FLOAT,
@TOTAL FLOAT,
@BALANCE_QTY FLOAT,
@BALANCE_QTY_BEFORE FLOAT,
@PROCCESS_IDD numeric(18, 2),
@PROCCESS_NEW numeric(18, 2),

@TOTAL_COST	FLOAT	

BEGIN



OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN

SELECT @B_CODE=B_CODE,@GUID_ID=GUID_ID,@BILL_BRANCH=BILL_BRANCH,@QTY=QTY_MIN_BALANCE,@COST=PRICE,@TOTAL=TOTAL,@COST=AVG_COST,@TOTAL_AVG_COST=TOTAL_AVG,@PROCCESS_IDD=PROCCESS_ID FROM #TEMP_AVG_ITEM WHERE RowNum=@T_ID_BOX_CURCOR
  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''SELECT '' 
 

 IF @B_CODE=0
 BEGIN 
UPDATE #TEMP_AVG_ITEM SET AVG_COST=PRICE,TOTAL_AVG=TOTAL,BALANCE_MIN_AVG=QTY_MIN_BALANCE,TOTAL_BALANCE=TOTAL WHERE RowNum=@T_ID_BOX_CURCOR

END
ELSE IF @B_CODE=2
 BEGIN 
 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

 IF (@BALANCE_QTY_BEFORE)=0
 BEGIN 
 SET @COST=@COST
 SET @TOTAL_AVG_COST=@COST*@QTY
 END
  ELSE
 BEGIN

 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

 END
 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

----UPDATE T_SALES_DETAILS SET [COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL] WHERE T_ID=@GUID_ID
----SET @TOTAL_COST=ISNULL((SELECT  SUM(TOTAL_COST) FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH),0)
----UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST WHERE BILL_BRANCH LIKE @BILL_BRANCH

END
ELSE IF @B_CODE=21
 BEGIN 

SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
 SELECT @COST =PRICE,@COSTIFZERO= AVG_COST , @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY

  IF @BALANCE_QTY=0
 BEGIN 
SET @COST=@COSTIFZERO

 IF @LOOP_COUNT=1 
  BEGIN
 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''ZERO '' 
  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
 set @LOOP_COUNT=0
 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR
 GOTO LOOP_FIRST
 END
 
 
 END
  ELSE IF @BALANCE_QTY>0

 

 IF @BALANCE_QTY_BEFORE<0
 BEGIN 
 IF @LOOP_COUNT=1
  BEGIN
 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
    --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MORE'' 
  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
 set @LOOP_COUNT=0
 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR
 GOTO LOOP_FIRST
 END


 END
 ELSE
  BEGIN

 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
   
 END

 

 ELSE IF @BALANCE_QTY<0 OR @BALANCE_QTY_BEFORE<0
 BEGIN
 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
  
IF @LOOP_COUNT=1
  BEGIN
 SET @PROCCESS_NEW=(SELECT  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MINNNN'' 
  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
 set @LOOP_COUNT=0
 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR
 GOTO LOOP_FIRST
 END


 END
 
 

 
 SET @TOTAL_AVG_COST=@COST*@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

END

ELSE IF @B_CODE=24
 BEGIN 
 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

 IF (@BALANCE_QTY_BEFORE)=0
 BEGIN 
 SET @COST=@COST
 SET @TOTAL_AVG_COST=@COST*@QTY
 END
  ELSE
 BEGIN

 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

 END
 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

----UPDATE T_BUY_DETAILS SET [PRICE_BUY]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[PRICE]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[TOTAL]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL]*QTY,[COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[TOTAL_COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL]*QTY WHERE T_ID=@GUID_ID

END
ELSE IF @B_CODE=11
 BEGIN 

SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
 SELECT @COST =PRICE,@COSTIFZERO= AVG_COST ,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 



 
 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
   IF @BALANCE_QTY=0
 BEGIN 
SET @COST=@COSTIFZERO
 --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''ZERO'' 
 IF @LOOP_COUNT=1
  BEGIN
 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
 set @LOOP_COUNT=0
 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR
 GOTO LOOP_FIRST
 END
 
 
 END
  ELSE IF @BALANCE_QTY>0
 IF @BALANCE_QTY_BEFORE<0
 BEGIN 
 IF @LOOP_COUNT=1
  BEGIN
 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
 set @LOOP_COUNT=0
 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR
 GOTO LOOP_FIRST
 END


 END
 ELSE
  BEGIN
  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MORE'' 
 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
   
 END
 ELSE IF @BALANCE_QTY<0 OR @BALANCE_QTY_BEFORE<0
 BEGIN
 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MINNNN'' 
IF @LOOP_COUNT=1
  BEGIN
 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
 set @LOOP_COUNT=0
 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR
 GOTO LOOP_FIRST
 END


 END
 

 
 SET @TOTAL_AVG_COST=@COST*@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

END
ELSE IF @B_CODE=12
 BEGIN 
 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

 IF (@BALANCE_QTY_BEFORE)=0
 BEGIN 
 SET @COST=@COST
 SET @TOTAL_AVG_COST=@COST*@QTY
 END
  ELSE
 BEGIN

 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

 END
 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

--UPDATE T_FACTORY_DETAILS SET [PRICE]=@COST*[UNIT_QTY],TOTAL=@COST*[UNIT_QTY] WHERE T_ID=@GUID_ID
--SET @TOTAL_COST=ISNULL((SELECT  SUM(TOTAL_COST) FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH),0)
--UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST WHERE BILL_BRANCH LIKE @BILL_BRANCH

END
---------------****************

 
FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


DECLARE ITEMS_CURSOR CURSOR FOR SELECT  UNIT_GUID FROM T_ITEM_UNIT  WHERE ITEM_CODE=@ITEM_CODE   ;

DECLARE
@T_ID_GUID_CURCOR INT,
@QTY_UU FLOAT,
@COST_MIN FLOAT,
@AVG_COST FLOAT,
@BILL_SELECT NVARCHAR(30)

 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0) FROM #TEMP_AVG_ITEM 
 SELECT @AVG_COST =AVG_COST FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID


OPEN ITEMS_CURSOR

FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN



SELECT @QTY_UU=UNIT_QTY FROM  T_ITEM_UNIT WHERE UNIT_GUID=@T_ID_GUID_CURCOR
SELECT TOP (1) @BILL_SELECT=ISNULL(BILL_BRANCH,N''0'') FROM  T_BUY_DETAILS WHERE ACTIVE=1 AND ITEM_CODE=@ITEM_CODE ORDER BY BILL_NUMBER DESC

 
--END




FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR

END

CLOSE ITEMS_CURSOR
DEALLOCATE ITEMS_CURSOR

SELECT * FROM #TEMP_AVG_ITEM ORDER BY PROCCESS_ID ASC


END	--END OF PROGRAM





















' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_ITEM_PRICE_CHECKER]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_ITEM_PRICE_CHECKER]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE proc [dbo].[P_API_GET_ITEM_PRICE_CHECKER] 

		@ITEM_BARCODE NVARCHAR(MAX)
	as
	DECLARE
	@ITEM_CODE INT,
	@COUNT_CODE AS INT

	set nocount on
	 
	begin 
	 SELECT @COUNT_CODE= COUNT(ITEM_CODE)FROM T_ITEM_BARCODE WHERE ITEM_BARCODE=@ITEM_BARCODE
	 IF @COUNT_CODE>0
	 BEGIN
	 SELECT TOP(1) @ITEM_CODE=  ITEM_CODE FROM T_ITEM_BARCODE WHERE ITEM_BARCODE=@ITEM_BARCODE
SELECT 1 AS ID, N''successfully done'' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
SELECT  UU.[ITEM_CODE]
		,II.ITEM_NAME
      ,UU.[UNIT_CODE]
      ,UU.[UNIT_NAME]
      ,UU.[UNIT_QTY]
      ,UU.[PRICE_SALE_1]
       
  FROM [dbo].[T_ITEM_UNIT] UU   LEFT OUTER JOIN
                  dbo.T_ITEMS II ON UU.ITEM_CODE = II.ITEM_CODE  WHERE UU.ITEM_CODE=@ITEM_CODE and UNIT_CODE=1



	 END
	 ELSE
 BEGIN
SELECT 0 AS ID, N''المادة غير مدخلة في النظام'' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1

	 END

		

  
 


	 
	 
	end 

	

	
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_ITEM_STORE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_ITEM_STORE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE proc [dbo].[P_API_GET_ITEM_STORE] 

		@PageSize int,
		@PageNumber int ,
		@ITEM_NAME NVARCHAR(MAX)
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	 
	 IF LEN(@ITEM_NAME)>0
	 BEGIN

SELECT    * into #tempSale FROM   V_ITEMS_BALANCE_MIN_PHARMA   WHERE ITEM_NAME  LIKE ''%''+@ITEM_NAME +''%''   

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 END
	 ELSE
 BEGIN
SELECT    * into #tempSale1 FROM   V_ITEMS_BALANCE_MIN_PHARMA      

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale1;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale1
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

	 END

		

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;


	 
	 
	end 

	

	' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_ITEM_STORE_BY_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_ITEM_STORE_BY_CATEGORY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE proc [dbo].[P_API_GET_ITEM_STORE_BY_CATEGORY] 

		@PageSize int,
		@PageNumber int ,
		@CATEGORY_CODE INT
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	 
	 

SELECT    * into #tempSale FROM   V_ITEMS_BALANCE_MIN_PHARMA   WHERE CATEGORY_CODE  = @CATEGORY_CODE  

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 
  
		

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;


	 
	 
	end 

	

	
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_ITEM_STORE_GSTORE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_ITEM_STORE_GSTORE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE proc [dbo].[P_API_GET_ITEM_STORE_GSTORE] 

    @PageSize int,
    @PageNumber int ,
    @STORE_CODE int ,
    @ITEM_NAME NVARCHAR(MAX)
  as

  set nocount on
  DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
  DECLARE @Offset INT;
  begin 
   
   IF LEN(@ITEM_NAME)>0
   BEGIN

SELECT    * into #tempSale FROM   V_ITEMS_BALANCE_MIN_PHARMA_GSTORE   WHERE (ITEM_NAME  LIKE ''%''+@ITEM_NAME +''%'' OR   ITEM_BARCODE=@ITEM_NAME   )  AND STORE_CODE IN (IIF(@STORE_CODE=-10,(SELECT STORE_CODE FROM T_STORE_TYPE WHERE IS_USED=1),@STORE_CODE));

    
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
   END


   ELSE
 BEGIN
SELECT    * into #tempSale1 FROM   V_ITEMS_BALANCE_MIN_PHARMA_GSTORE         WHERE    STORE_CODE IN (IIF(@STORE_CODE=-10,(SELECT STORE_CODE FROM T_STORE_TYPE WHERE IS_USED=1),@STORE_CODE));

    
    SELECT @TotalRecords = COUNT(*) FROM #tempSale1;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale1
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

   END

    

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;


   
   
  end' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_ITEM_STORE_MULTI_CODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_ITEM_STORE_MULTI_CODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_GET_ITEM_STORE_MULTI_CODE] 

		@PageSize int,
		@PageNumber int ,
		@MULTI_CODE NVARCHAR(MAX)
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	 
	 IF LEN(@MULTI_CODE)>0
	 BEGIN

SELECT    * into #tempSale FROM   V_ITEMS_BALANCE_MIN_PHARMA   WHERE ITEM_CODE IN (SELECT * FROM dbo.splitstring(@MULTI_CODE)  ) 

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 END
	 ELSE
 BEGIN
SELECT    * into #tempSale1 FROM   V_ITEMS_BALANCE_MIN_PHARMA         WHERE ITEM_CODE IN (SELECT * FROM dbo.splitstring(@MULTI_CODE)  ) 

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale1;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale1
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

	 END

		

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;


	 
	 
	end 

	

	


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_ITEM_STORE_NEW_MOVE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_ITEM_STORE_NEW_MOVE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE proc [dbo].[P_API_GET_ITEM_STORE_NEW_MOVE] 

		@PageSize int,
		@PageNumber int ,
		@MAX_ID_STORE int 
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	DECLARE @MAX_ID_COUNT INT;
	DECLARE @MAX_ID  INT;
	begin 
IF @MAX_ID_STORE=-99999
BEGIN
	UPDATE T_STORE_ID_MAX SET MAX_ID_STORE=0 WHERE T_ID=1
END

SELECT @MAX_ID=MAX(T_ID) FROM T_STORE_BOX 
	 
SELECT @MAX_ID_COUNT=COUNT(ITEM_CODE) FROM T_STORE_BOX WHERE T_ID>(SELECT ISNULL(MAX_ID_STORE,0) FROM T_STORE_ID_MAX WHERE T_ID=1) GROUP BY ITEM_CODE

	 IF @MAX_ID_COUNT>0
	 BEGIN

SELECT    *,@MAX_ID AS MAX_ID_STORE into #tempSale FROM   V_ITEMS_BALANCE_MIN_PHARMA   WHERE ITEM_CODE IN  (SELECT ITEM_CODE FROM T_STORE_BOX WHERE T_ID>@MAX_ID_STORE GROUP BY ITEM_CODE)

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	 END
	 ELSE
 BEGIN
SELECT    *,@MAX_ID AS MAX_ID_STORE into #tempSale1 FROM   V_ITEMS_BALANCE_MIN_PHARMA        WHERE ITEM_CODE IN  (SELECT ITEM_CODE FROM T_STORE_BOX WHERE T_ID>@MAX_ID_STORE GROUP BY ITEM_CODE)

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale1;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale1
     ORDER BY ITEM_NAME ASC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

	 END

		

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;
	IF @MAX_ID_STORE<>-99999
BEGIN
	UPDATE T_STORE_ID_MAX SET MAX_ID_STORE=@MAX_ID WHERE T_ID=1
	 
	end  
	end 

	

	
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_MANDOOB_VISITS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_MANDOOB_VISITS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE proc [dbo].[P_API_GET_MANDOOB_VISITS] 
 @USER_CODE INT 
	as

	set nocount on
	 
	begin 
	 
	  
SELECT    *  FROM   V_MANDOOB_VISITS WHERE  USER_CODE=@USER_CODE AND D_DATE=CAST(GETDATE() AS date) ORDER BY T_ID DESC

		
    
	 
	 
	end 

	

	



' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_MOVE_LIST]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_MOVE_LIST]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_GET_MOVE_LIST] 
 @USER_NAME NVARCHAR(MAX),
@USER_PWD  NVARCHAR(MAX)
	as

	set nocount on
	 
	begin 
	 
	  
 
SELECT    MOVE_CODE, MOVE_NAME FROM T_MOVE WHERE MOVE_CODE < 100 OR MOVE_CODE >=300
		
    
	 
	 
	end 

	

	


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_SALES_BY_DATE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_SALES_BY_DATE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE proc [dbo].[P_API_GET_SALES_BY_DATE] 

		@PageSize int,
		@PageNumber int,
		@active bit = 1,
		@D1 DATE = '''',
		@D2 DATE = '''' ,
		@IVC_CODE INT = -1
	as

	set nocount on
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	begin 
	if @d1 <> '''' and @d2<> '''' and @ivc_code <> -1
	begin 
		SELECT    * into #tempSale FROM   V_SALES_API  WHERE   BILL_DATE BETWEEN @D1 AND @D2 AND  ACTIVE =@active  and IVC_CODE=@IVC_CODE    ORDER BY BILL_NUMBER DESC

		
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #tempSale
    ORDER BY BILL_NUMBER DESC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;


	end 
	else if @d1 = '''' and @ivc_code<> -1
	begin 
	SELECT    * into #temp2 FROM   V_SALES_API WHERE ACTIVE =@active  and IVC_CODE=@IVC_CODE    ORDER BY BILL_NUMBER DESC
	 SELECT @TotalRecords = COUNT(*) FROM #temp2;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #temp2
     ORDER BY BILL_NUMBER DESC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;

	end 
	else if @d1<> '''' and @d2 <> '''' and @IVC_CODE = -1
	begin 
	SELECT    * into #temp3 FROM   V_SALES WHERE   BILL_DATE BETWEEN @D1 AND @D2 AND  ACTIVE =@active    ORDER BY BILL_NUMBER DESC
	SELECT @TotalRecords = COUNT(*) FROM #temp3;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *
    FROM #temp3
    ORDER BY BILL_NUMBER DESC
    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

  
    SELECT @TotalPages AS TotalPages, @TotalRecords AS TotalRecords;

	end 
	end 

	

	' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_USER_CODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_USER_CODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_GET_USER_CODE] 
 @USER_NAME NVARCHAR(MAX),
@USER_PWD  NVARCHAR(MAX)
	as

	set nocount on
	 
	begin 
	 
	  
SELECT    *  FROM   T_USERS WHERE  USER_NAME=@USER_NAME AND USER_PWD=@USER_PWD

		
    
	 
	 
	end 

	

	


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_GET_USER_LIST_NOT_ADMIN]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_GET_USER_LIST_NOT_ADMIN]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE proc [dbo].[P_API_GET_USER_LIST_NOT_ADMIN] 
  
	as

	set nocount on
	 
	begin 
	 
	 

SELECT    *   FROM   T_USERS   WHERE ACTIVE  = 1 AND LEVEL_CODE>1

		
   
     
	 
	 
	end 

	

	



' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_IMPORT_STORE_NEW_DATA]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_IMPORT_STORE_NEW_DATA]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N' 



CREATE PROCEDURE  [dbo].[P_API_IMPORT_STORE_NEW_DATA]
 @ITEM_CODE INT
AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID FROM T_BUY_DETAILS_TRANSFARE  WHERE ITEM_CODE=@ITEM_CODE AND IS_DONE=0 ;

DECLARE
@TO_DATA NVARCHAR(100),
@CR_SQL NVARCHAR(max),
@T_ID_CR INT,
@ITEM_CODE_CR INT, 
	 @COMPANY_TITAL nvarchar (100)

BEGIN
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
--DECLARE
--@ITEM_CODE INT=1,
--@TO_DATA NVARCHAR(100),
--@CR_SQL NVARCHAR(max)
SET @TO_DATA=N''SPEEDOO_DB''
 SET @CR_SQL=  N'' INSERT INTO  ''+@TO_DATA+''.[dbo].[T_ITEMS] SELECT * FROM [T_ITEMS] WHERE  ITEM_CODE=''+CAST (@ITEM_CODE AS nvarchar (max)) 
 exec (@CR_SQL)
 
SET @CR_SQL=N''SET IDENTITY_INSERT [dbo].[T_ITEM_BARCODE] ON ;'' + N'' INSERT INTO  ''+@TO_DATA+''.[dbo].[T_ITEM_BARCODE] SELECT * FROM [T_ITEM_BARCODE] WHERE  ITEM_CODE=''+CAST (@ITEM_CODE AS nvarchar (max))+N'';''+N''SET IDENTITY_INSERT [dbo].[T_ITEM_BARCODE] OFF''
 exec (@CR_SQL)

  SET @CR_SQL=N''SET IDENTITY_INSERT [dbo].[T_ITEM_UNIT] ON ;'' + N'' INSERT INTO  ''+@TO_DATA+''.[dbo].[T_ITEM_UNIT] SELECT * FROM [T_ITEM_UNIT] WHERE  ITEM_CODE=''+CAST (@ITEM_CODE AS nvarchar (max))+N'';''+N''SET IDENTITY_INSERT [dbo].[T_ITEM_UNIT] OFF''
 exec (@CR_SQL)

 DECLARE
@T_ID_DETAILS INT,
 
@BILL_NUMBER INT,
@EXP_DATE DATE ,
@QTY_MIN_NEW INT


OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CR
WHILE @@FETCH_STATUS = 0
BEGIN


 SELECT @T_ID_DETAILS=T_ID_DETAILS ,@BILL_NUMBER=BILL_NUMBER,@EXP_DATE=EXP_DATE,@QTY_MIN_NEW=QTY_MIN_NEW   FROM T_BUY_DETAILS_TRANSFARE WHERE T_ID=@T_ID_CR

  SET @CR_SQL=  N'' INSERT INTO  ''+@TO_DATA+''.[dbo].[T_BUY] SELECT * FROM [T_BUY] WHERE  BILL_NUMBER =''+CAST (@BILL_NUMBER AS nvarchar (max)) 
 exec (@CR_SQL)
  SET @CR_SQL=  N'' INSERT INTO  ''+@TO_DATA+''.[dbo].[T_BUY_DETAILS] SELECT * FROM [T_BUY_DETAILS] WHERE  BILL_NUMBER =''+CAST (@BILL_NUMBER AS nvarchar (max)) 
 exec (@CR_SQL)

 SET @CR_SQL=  N''UPDATE ''+@TO_DATA+''.[dbo].[T_BUY_DETAILS] SET QTY_IN=''+CAST (@QTY_MIN_NEW AS nvarchar (max)) +N'', QTY=''+CAST (@QTY_MIN_NEW AS nvarchar (max))  +N'', EXP_DATE=''+CAST (@EXP_DATE AS nvarchar (max))+N''  WHERE BILL_NUMBER=''+CAST (@BILL_NUMBER AS nvarchar (max))+N''  AND  ITEM_CODE=''+CAST (@ITEM_CODE AS nvarchar (max))
 exec (@CR_SQL)

 SET @CR_SQL=  N''UPDATE ''+@TO_DATA+''.[dbo].[T_BUY_DETAILS] SET TOTAL=[PRICE]*[QTY] , TOTAL_COST=[COST]*[QTY] ,TOTAL_OUT=0,EXPENSES_OUT=0,DISCOUNT_PERCENT_ITEM=0,DISCOUNT_AMOUNT_ITEM=0 ''+N''  WHERE BILL_NUMBER=''+CAST (@BILL_NUMBER AS nvarchar (max))+N''  AND  ITEM_CODE=''+CAST (@ITEM_CODE AS nvarchar (max))
 exec (@CR_SQL)
 SET @CR_SQL=  N''UPDATE ''+@TO_DATA+''.[dbo].[T_BUY] SET TOTAL_BUY=''+N''(SELECT ISNULL(SUM(TOTAL),0) FROM ''+@TO_DATA+''.[dbo].[T_BUY_DETAILS]   WHERE BILL_NUMBER=''+CAST (@BILL_NUMBER AS nvarchar (max))+N'' )''+N''  WHERE BILL_NUMBER=''+CAST (@BILL_NUMBER AS nvarchar (max))+N''  AND  ITEM_CODE=''+CAST (@ITEM_CODE AS nvarchar (max))
 exec (@CR_SQL)
 SET @CR_SQL=  N''UPDATE ''+@TO_DATA+''.[dbo].[T_BUY] SET NET_BUY=''+N''(SELECT ISNULL(SUM(TOTAL_COST),0) FROM ''+@TO_DATA+''.[dbo].[T_BUY_DETAILS]   WHERE BILL_NUMBER=''+CAST (@BILL_NUMBER AS nvarchar (max))+N'' )''+N''  WHERE BILL_NUMBER=''+CAST (@BILL_NUMBER AS nvarchar (max))+N''  AND  ITEM_CODE=''+CAST (@ITEM_CODE AS nvarchar (max))
 exec (@CR_SQL)
  SET @CR_SQL=  N''UPDATE ''+@TO_DATA+''.[dbo].[T_BUY] SET CASH_USA=0,REMAIN_USA=0,CASH_IQ=0,REMAIN_IQ=0,IVC_CODE=1,NET_SUPPLIER=0,TOTAL_OUT=0,TOTAL_SUPPLIER=0,IS_CASH=1, NET_BUY=''+N''(SELECT ISNULL(SUM(TOTAL_COST),0) FROM ''+@TO_DATA+''.[dbo].[T_BUY_DETAILS]   WHERE BILL_NUMBER=''+CAST (@BILL_NUMBER AS nvarchar (max))+N'' )''+N''  WHERE BILL_NUMBER=''+CAST (@BILL_NUMBER AS nvarchar (max))+N''  AND  ITEM_CODE=''+CAST (@ITEM_CODE AS nvarchar (max))
 exec (@CR_SQL)


 SET @CR_SQL=N''SET IDENTITY_INSERT [dbo].[T_STORE_BOX] ON ;'' + N'' INSERT INTO  ''+@TO_DATA+''.[dbo].[T_STORE_BOX] SELECT * FROM [T_STORE_BOX] WHERE  BILL_NUMBER=''+CAST (@BILL_NUMBER AS nvarchar (max))+N'' AND B_CODE=21 AND  ITEM_CODE=''+CAST (@ITEM_CODE AS nvarchar (max))   +N'';''+N''SET IDENTITY_INSERT [dbo].[T_STORE_BOX] OFF''
 exec (@CR_SQL)


  SET @CR_SQL=  N''UPDATE ''+@TO_DATA+''.[dbo].[T_STORE_BOX] SET ST_IN=''+CAST (@QTY_MIN_NEW AS nvarchar (max)) +N'',UNIT_CODE=1,  QTY_UNIT=1, EXP_DATE=''+CAST (@EXP_DATE AS nvarchar (max))+N''  WHERE  BILL_NUMBER=''+CAST (@BILL_NUMBER AS nvarchar (max))+N'' AND B_CODE=21 AND  ITEM_CODE=''+CAST (@ITEM_CODE AS nvarchar (max))
 exec (@CR_SQL)

SELECT 1 AS ID, N''successfully done'' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1


FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


 

END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_INSERT_APP_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_INSERT_APP_INVOICE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'












CREATE PROCEDURE [dbo].[P_API_INSERT_APP_INVOICE]
@T_ID INT,
@BILL_NUMBER INT OUTPUT,
@SUBMIT_FLAG INT OUTPUT

AS
DECLARE
@B_CODE INT,
@CURRANCY_CODE_INVOICE INT,
@CURRANCY_EQUAL_INVOICE FLOAT,
@CURRANCY_CODE_PRIMARY INT,
@COST_SHIP_DELEVERY FLOAT,
@BOX_USER INT,
@USER_CODE INT,
@INFO NVARCHAR(MAX),
@DETAILS NVARCHAR(MAX),
@USER_CREATE NVARCHAR(MAX),
@COMPANY_TITAL NVARCHAR(MAX)


begin 
BEGIN TRANSACTION;
SET @SUBMIT_FLAG=0
SELECT @INFO=INFO,@DETAILS=DETAILS,@B_CODE=B_CODE,@USER_CREATE=ISNULL(USER_CREATE,N''APPS'')  FROM T_APP_INVOICE WHERE T_ID=@T_ID  AND IS_INSERT=0
IF LEN(ISNULL(@DETAILS,N''''))<10 GOTO RETTTTT
IF @B_CODE<>2  GOTO RETTTTT
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
SELECT @CURRANCY_CODE_PRIMARY=CURRANCY_CODE  FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
 

SELECT TOP(1) @BOX_USER=ISNULL(BOX_CODE,5000),@USER_CODE=USER_CODE  FROM T_USERS WHERE USER_NAME LIKE @USER_CREATE AND ACTIVE=1
SET @BOX_USER=ISNULL(@BOX_USER,5000)
SET @USER_CODE=ISNULL(@USER_CODE,1)
SELECT @BILL_NUMBER=ISNULL(MAX(BILL_NUMBER),0) + 1 FROM T_SALES
SET @CURRANCY_CODE_INVOICE=(Select  max(case when name=''CURRANCY_CODE'' then convert(int,StringValue) else @CURRANCY_CODE_PRIMARY end) as [CURRANCY_CODE] 
From parseJSON
(
       @INFO
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID)

SET @CURRANCY_EQUAL_INVOICE=(Select  max(case when name=''CURRANCY_EQUAL'' then convert(int,StringValue) else 1 end) as [CURRANCY_EQUAL] 
From parseJSON
(
       @INFO
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID)
 -------------------------------------------------------------------------------------------------------

 

DECLARE @CLIENT_CODE INT;
DECLARE @CLIENT_BARCODE NVARCHAR(MAX);

SELECT @CLIENT_BARCODE = CASE WHEN name = ''CLIENT_BARCODE'' THEN CONVERT(NVARCHAR(MAX), StringValue)ELSE ''''END
FROM parseJSON(@INFO) AS info
WHERE info.name = ''CLIENT_BARCODE'';
SELECT 
    @CLIENT_CODE = CASE 
                    WHEN name = ''CLIENT_CODE'' THEN 
                        CASE WHEN CONVERT(INT, StringValue) = 0 THEN (SELECT CLIENT_CODE FROM T_CLIENT WHERE CLIENT_BARCODE = @CLIENT_BARCODE)ELSE CONVERT(INT, StringValue) 
                        END ELSE 0 END
FROM parseJSON(@INFO) AS info
WHERE info.name = ''CLIENT_CODE'';

INSERT INTO [dbo].[T_SALES]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_INVOICE]
           ,[BILL_DATE]
           ,[OFFER_CODE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[CLIENT_CODE]
           ,[CLIENT_NAME]
           ,[CLIENT_PHONE]
           ,[CLIENT_ADRESS]
           ,[MANDOOB_CODE]
           ,[DESCRIPTION]
           ,[TYPE_PRICE_SELL]
           ,[STORE_CODE]
           ,[USER_CREATE]
           ,[SECURETY_CODE]
           ,[TOTAL_SALES]
           ,[DISCOUNT_ITEMS]
           ,[DISCOUNT_PERCENT]
           ,[DISCOUNT_AMOUNT]
           ,[TOTAL_DISCOUNT]
           ,[NET_SALES]
           ,[TOTAL_COST]
           ,[IVC_CODE]
           ,[DAY_CASH]
           ,[DATE_CASH]
           ,[TOT_CONV]
           ,[ACCOUNT_CODE]
           ,[CASH_USA]
           ,[REMAIN_USA]
           ,[CASH_IQ]
           ,[REMAIN_IQ]
           ,[C_DATE]
           ,[C_UPDATE]
           ,[USER_UPDATE]
           ,[ACTIVE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[FLAG_CASH]
           ,[IS_OUT]
           ,[CURRANCY_SALES]
           ,[IS_TRANS]
           ,[CENTER_CODE]
           ,[QR_DATA]
           ,[ITEM_ID_PAYMENT]
           ,[TAG_PROCCESS_CODE]
           ,[LINK_ID_PAYMENT]
           ,[BILL_RETURN]
           ,[BILL_SANAD_CNY]
           ,[CNY_IQ]
           ,[IS_PREPARE]
           ,[DRIVER_CODE]
           ,[LAT]
           ,[LNG]
           ,[STATUS_SHIPING]
           ,[MOVE_CODE]
           ,[BILL_ORDER]
           ,[TOTAL_TAX_ITEM]
           ,[TOTAL_MANDOOB_ITEM]
           ,[TOTAL_ADD_COST]
           ,[TOTAL_ADD_AMO]
           ,[SHIP_CODE]
           ,[COST_SHIP]
           ,[IS_POINT]
           ,[COST_SHIP_CLIENT]
           ,[USER_TAG_CODE]
           ,[RELATION_BILL_CODE]
           ,[RELATION_B_CODE]
           ,[REGION_CODE]
           ,[COL_INT1]
           ,[COL_INT2]
           ,[COL_INT3]
           ,[COL_STR1]
           ,[COL_STR2]
           ,[COL_STR3]
           ,[IS_PDF]
           ,[PATH_PDF]
           ,[PATH_PDF_API])


      Select
			@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max))  as [BILL_BRANCH]
           ,@BILL_NUMBER as [BILL_NUMBER]
           ,max(case when name=''BILL_INVOICE'' then convert(nvarchar(max),StringValue) else N'''' end) as [BILL_INVOICE] 
           ,GETDATE() as [BILL_DATE]
           ,0 as [OFFER_CODE]
           , max(case when name=''CURRANCY_CODE'' then convert(int,StringValue) else @CURRANCY_CODE_PRIMARY end) as [CURRANCY_CODE]
           , max(case when name=''CURRANCY_EQUAL'' then convert(int,StringValue) else 1 end) as [CURRANCY_EQUAL]
           ,@CLIENT_CODE AS [CLIENT_CODE]
           ,max(case when name=''CLIENT_NAME'' then convert(nvarchar(max),StringValue) else N'''' end) as [CLIENT_NAME]
           ,max(case when name=''CLIENT_PHONE'' then convert(nvarchar(max),StringValue) else N'''' end) as [CLIENT_PHONE]
           ,max(case when name=''CLIENT_ADDRESS'' then convert(nvarchar(max),StringValue) else N'''' end) as [CLIENT_ADRESS]
           ,max(case when name=''MANDOOB_CODE'' then convert(int,StringValue) else 1 end) as [MANDOOB_CODE]
           ,max(case when name=''NOTE_ORDER'' then convert(nvarchar(max),StringValue) else N'''' end) as [DESCRIPTION]
           ,1 as [TYPE_PRICE_SELL]
           ,0 as [STORE_CODE]
           ,@USER_CREATE as [USER_CREATE]
           ,1 as [SECURETY_CODE]
           ,max(case when name=''TOTAL'' then convert(float,StringValue) else 0 end) as [TOTAL_SALES]
           ,max(case when name=''DISCOUNT_ITEMS'' then convert(float,StringValue) else 0 end) as [DISCOUNT_ITEMS]
           ,0 as [DISCOUNT_PERCENT]
           ,max(case when name=''TOTAL_DISCOUNT'' then convert(float,StringValue) else 0 end) as [DISCOUNT_AMOUNT]
           ,max(case when name=''TOTAL_DISCOUNT'' then convert(float,StringValue) else 0 end) + max(case when name=''DISCOUNT_ITEMS'' then convert(float,StringValue) else 0 end) as [TOTAL_DISCOUNT]
           ,(max(case when name=''TOTAL'' then convert(float,StringValue) else 0 end) - (max(case when name=''TOTAL_DISCOUNT'' then convert(float,StringValue) else 0 end) + max(case when name=''DISCOUNT_ITEMS'' then convert(float,StringValue) else 0 end))) as [NET_SALES]
           ,0 as [TOTAL_COST] -- FROM SUM
           ,max(case when name=''INVOICE_CODE'' then convert(int,StringValue) else 1 end) as [IVC_CODE]
           ,0 as [DAY_CASH]
           ,GETDATE() as [DATE_CASH]
           ,N'''' as [TOT_CONV]
           , @BOX_USER  as [ACCOUNT_CODE]
           ,IIF(@CURRANCY_CODE_INVOICE=1, max(case when name=''CASH_AMO'' then convert(float,StringValue) else 0 end),0) as [CASH_USA]
           ,IIF(@CURRANCY_CODE_INVOICE=1,max(case when name=''REMAIN_AMO'' then convert(float,StringValue) else 0 end),0) as [REMAIN_USA]
           ,IIF(@CURRANCY_CODE_INVOICE=2, max(case when name=''CASH_AMO'' then convert(float,StringValue) else 0 end),0) as [CASH_IQ]
           ,IIF(@CURRANCY_CODE_INVOICE=2,max(case when name=''REMAIN_AMO'' then convert(float,StringValue) else 0 end),0) as [REMAIN_IQ]
           ,GETDATE() as [C_DATE]
           ,N'''' as [C_UPDATE]
           ,N'''' as [USER_UPDATE]
           ,1 as [ACTIVE]
           ,0 as [IS_AVG_COST]
           ,0 as [AVG_COST]
           ,IIF( max(case when name=''REMAIN_AMO'' then convert(float,StringValue) else 0 end)=0,1,0) as [FLAG_CASH]
           ,1 as [IS_OUT]
           ,max(case when name=''CURRANCY_EQUAL'' then convert(int,StringValue) else 1 end) as [CURRANCY_SALES]
           ,0 as [IS_TRANS]
           ,0 as [CENTER_CODE]
           ,N'''' as [QR_DATA]
           ,N'''' as [ITEM_ID_PAYMENT]
           ,max(case when name=''INVOICE_STATUS'' then convert(int,StringValue) else 0 end)  as [TAG_PROCCESS_CODE]
           ,N'''' as [LINK_ID_PAYMENT]
           ,0 as [BILL_RETURN]
           ,0 as [BILL_SANAD_CNY]
           ,1 as [CNY_IQ]
           ,0 as [IS_PREPARE]
           ,max(case when name=''DRIVER_CODE'' then convert(int,StringValue) else 0 end) as [DRIVER_CODE]
           ,max(case when name=''LAT'' then convert(nvarchar(max),StringValue) else N'''' end) as [LAT]
           ,max(case when name=''LNG'' then convert(nvarchar(max),StringValue) else N'''' end) as [LNG]
           ,max(case when name=''STATUS_SHIPING'' then convert(int,StringValue) else 0 end) as [STATUS_SHIPING]
           ,0 as [MOVE_CODE]
           ,0 as [BILL_ORDER]
           ,0 as [TOTAL_TAX_ITEM]
           ,max(case when name=''TOTAL_MANDOOB_ITEM'' then convert(float,StringValue) else 0 end) as [TOTAL_MANDOOB_ITEM]
           ,max(case when name=''TOTAL_ADD_COST'' then convert(float,StringValue) else 0 end) as [TOTAL_ADD_COST]
           ,max(case when name=''TOTAL_ADD_AMO'' then convert(float,StringValue) else 0 end) as [TOTAL_ADD_AMO]
           ,max(case when name=''SHIP_CODE'' then convert(INT,StringValue) else 0 end) as [SHIP_CODE]
           ,max(case when name=''DELIVERYCOST'' then convert(float,StringValue) else 0 end) as [COST_SHIP]
           ,0 as [IS_POINT]
           ,max(case when name=''COST_SHIP_CLIENT'' then convert(float,StringValue) else 0 end) as [COST_SHIP_CLIENT]
           ,0 as [USER_TAG_CODE]
           ,0 as [RELATION_BILL_CODE]
           ,0 as [RELATION_B_CODE]
           ,max(case when name=''REGION_CODE'' then convert(int,StringValue) else 0 end) as [REGION_CODE]
           ,max(case when name=''COL_INT1'' then convert(int,StringValue) else 0 end) as [COL_INT1]
           ,max(case when name=''COL_INT2'' then convert(int,StringValue) else 0 end) as [COL_INT2]
           ,max(case when name=''COL_INT3'' then convert(int,StringValue) else 0 end) as [COL_INT3]
           ,max(case when name=''COL_STR1'' then convert(nvarchar(max),StringValue) else N'''' end) as [COL_STR1]
           ,max(case when name=''COL_STR2'' then convert(nvarchar(max),StringValue) else N'''' end) as [COL_STR2]
           ,max(case when name=''COL_STR3'' then convert(nvarchar(max),StringValue) else N'''' end) as [COL_STR3]
           ,0 as [IS_PDF]
           ,N'''' as [PATH_PDF]
           ,N'''' as [PATH_PDF_API]


From parseJSON
(
       @INFO
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID

 -------------------------------------------------------------------------------------------------------
 select top(1) @CURRANCY_CODE_INVOICE =CURRANCY_CODE,@CURRANCY_EQUAL_INVOICE=CURRANCY_EQUAL  from T_SALES where BILL_NUMBER=@BILL_NUMBER
INSERT INTO [dbo].[T_SALES_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[TOTAL]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY]
           ,[ITEM_NOTE_SALES]
           ,[NOTE_PRINT]
           ,[IS_PRINT]
           ,[USER_PREPARE]
           ,[USER_CUT]
           ,[DISCOUNT_TYPE]
           ,[IS_SERIAL]
           ,[IS_TAX]
           ,[TAX_PERCENT_ITEM]
           ,[TAX_AMO_ITEM]
           ,[IS_MANDOOB]
           ,[MANDOOB_PERCENT_ITEM]
           ,[MANDOOB_AMO_ITEM]
           ,[IS_ITEM_AREA]
           ,[WIDTH_CM]
           ,[LENGTH_CM]
           ,[AREA_M2]
           ,[QTY_AREA]
           ,[QTY_XZ]
           ,[UNIT_QTY_XZ]
           ,[QTY_X1]
           ,[UNIT_QTY_X1]
           ,[QTY_XY]
           ,[UNIT_QTY_XY]
           ,[NOTE_PRINT_2]
           ,[K_STORE_ITEM_CODE]
           ,[K_STORE_COST]
           ,[K_STORE_SELL]
           ,[K_PRINT_ITEM_CODE]
           ,[K_PRINT_COST]
           ,[K_PRINT_SELL]
           ,[K_MODEL_ITEM_CODE]
           ,[K_MODEL_COST]
           ,[K_MODEL_SELL]
           ,[K_MOTOR_ITEM_CODE]
           ,[K_MOTOR_COST]
           ,[K_MOTOR_SELL]
           ,[K_HABEL_ITEM_CODE]
           ,[K_HABEL_COST]
           ,[K_HABEL_SELL]
           ,[K_STORE_TOTAL]
           ,[K_PRINT_TOTAL]
           ,[K_MODEL_TOTAL]
           ,[K_MOTOR_TOTAL]
           ,[K_HABEL_TOTAL]
           ,[K_MODEL_TOTAL_COST]
           ,[QTY_FREE]
           ,[TOTAL_QTY])
 Select
       @COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max))  as [BILL_BRANCH]
           ,@BILL_NUMBER as [BILL_NUMBER]
           ,max(case when name=''ITEM_CODE'' then convert(int,StringValue) else -1 end) as [ITEM_CODE]
           ,max(case when name=''ITEM_NAME'' then convert(nvarchar(max),StringValue) else N'''' end) as [ITEM_NAME]
           ,max(case when name=''QTY'' then convert(float,StringValue) else 0 end) as [QTY]
           ,max(case when name=''UNIT_NAME'' then convert(nvarchar(max),StringValue) else N'''' end) as [UNIT_NAME]
           ,max(case when name=''UNIT_QTY'' then convert(float,StringValue) else 0 end) as [UNIT_QTY]
           ,max(case when name=''STORE_CODE'' then convert(int,StringValue) else 0 end) as [STORE_CODE]
           ,-999999 as [WAJBA_CODE]
           ,N'''' as [WAJBA_NAME]
           ,N'''' as [WAJBA_BALANCE]
           ,@CURRANCY_CODE_INVOICE as [CURRANCY_CODE]
           ,@CURRANCY_EQUAL_INVOICE as [CURRANCY_EQUAL]
           ,max(case when name=''PRICE_COST'' then convert(float,StringValue) else 0 end) as [COST]
           ,max(case when name=''PRICE'' then convert(float,StringValue) else 0 end) as [PRICE]
           ,(max(case when name=''PRICE'' then convert(float,StringValue) else 0 end) * max(case when name=''QTY'' then convert(float,StringValue) else 0 end)) as [TOTAL]
           ,max(case when name=''DISC_PERCENT'' then convert(float,StringValue) else 0 end) as [DISCOUNT_PERCENT_ITEM]
           ,max(case when name=''DISC_AMO'' then convert(float,StringValue) else 0 end) as [DISCOUNT_AMOUNT_ITEM]
           ,GETDATE() as [C_DATE]
           ,1 as [ACTIVE]
           ,-999999 as [BILL_BUY]
           ,max(case when name=''NOTE'' then convert(nvarchar(max),StringValue) else N'''' end) as [ITEM_NOTE_SALES]
           ,N'''' as [NOTE_PRINT]
           ,0 as [IS_PRINT]
           ,N'''' as [USER_PREPARE]
           ,N'''' as [USER_CUT]
           ,0 as [DISCOUNT_TYPE]
           ,0 as [IS_SERIAL]
           ,0 as [IS_TAX]
           ,max(case when name=''TAX_PERCENT_ITEM'' then convert(float,StringValue) else 0 end) as [TAX_PERCENT_ITEM]
           ,max(case when name=''TAX_AMO_ITEM'' then convert(float,StringValue) else 0 end) as [TAX_AMO_ITEM]
           ,max(case when name=''IS_MANDOOB'' then convert(bit,StringValue) else 0 end) as [IS_MANDOOB]
           ,max(case when name=''MANDOOB_PERCENT_ITEM'' then convert(nvarchar(max),StringValue) else 0 end) as [MANDOOB_PERCENT_ITEM]
           ,IIF(max(case when name=''IS_MINUS_MANDOOB'' then convert(int,StringValue) else 0 end)=0, (max(case when name=''totalNetProfitMandob'' then convert(float,StringValue) else 0 end)/ max(case when name=''QTY'' then convert(float,StringValue) else 0 end)),(max(case when name=''totalNetProfitMandob'' then convert(float,StringValue) else 0 end)/ max(case when name=''QTY'' then convert(float,StringValue) else 0 end))*-1) as [MANDOOB_AMO_ITEM]
           ,0 as [IS_ITEM_AREA]
           ,0 as [WIDTH_CM]
           ,0 as [LENGTH_CM]
           ,0 as [AREA_M2]
           ,1 as [QTY_AREA]
           ,0 as [QTY_XZ]
           ,0 as [UNIT_QTY_XZ]
           ,0 as [QTY_X1]
           ,0 as [UNIT_QTY_X1]
           ,0 as [QTY_XY]
           ,0 as [UNIT_QTY_XY]
           ,N'''' as [NOTE_PRINT_2]
           ,0 as [K_STORE_ITEM_CODE]
           ,0 as [K_STORE_COST]
           ,0 as [K_STORE_SELL]
           ,0 as [K_PRINT_ITEM_CODE]
           ,0 as [K_PRINT_COST]
           ,0 as [K_PRINT_SELL]
           ,0 as [K_MODEL_ITEM_CODE]
           ,0 as [K_MODEL_COST]
           ,0 as [K_MODEL_SELL]
           ,0 as [K_MOTOR_ITEM_CODE]
           ,0 as [K_MOTOR_COST]
           ,0 as [K_MOTOR_SELL]
           ,0 as [K_HABEL_ITEM_CODE]
           ,0 as [K_HABEL_COST]
           ,0 as [K_HABEL_SELL]
           ,0 as [K_STORE_TOTAL]
           ,0 as [K_PRINT_TOTAL]
           ,0 as [K_MODEL_TOTAL]
           ,0 as [K_MOTOR_TOTAL]
           ,0 as [K_HABEL_TOTAL]
           ,0 as [K_MODEL_TOTAL_COST]
           ,max(case when name=''QTY_FREE'' then convert(float,StringValue) else 0 end) as [QTY_FREE]
           ,max(case when name=''QTY'' then convert(float,StringValue) else 0 end)+max(case when name=''QTY_FREE'' then convert(float,StringValue) else 0 end)  as [TOTAL_QTY]



From parseJSON
(
       @DETAILS
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID
 
 ------------------------------------------ADD COST SHIP---------------------------------------------------------------
 SET @COST_SHIP_DELEVERY=(Select  max(case when name=''DELIVERYCOST'' then convert(float,StringValue) else 0 end) as [DELIVERYCOST] 
From parseJSON
(
       @INFO
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID)

IF @COST_SHIP_DELEVERY<>0
BEGIN
INSERT INTO [dbo].[T_SALES_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[TOTAL]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY]
           ,[ITEM_NOTE_SALES]
           ,[NOTE_PRINT]
           ,[IS_PRINT]
           ,[USER_PREPARE]
           ,[USER_CUT]
           ,[DISCOUNT_TYPE]
           ,[IS_SERIAL]
           ,[IS_TAX]
           ,[TAX_PERCENT_ITEM]
           ,[TAX_AMO_ITEM]
           ,[IS_MANDOOB]
           ,[MANDOOB_PERCENT_ITEM]
           ,[MANDOOB_AMO_ITEM]
           ,[IS_ITEM_AREA]
           ,[WIDTH_CM]
           ,[LENGTH_CM]
           ,[AREA_M2]
           ,[QTY_AREA]
           ,[QTY_XZ]
           ,[UNIT_QTY_XZ]
           ,[QTY_X1]
           ,[UNIT_QTY_X1]
           ,[QTY_XY]
           ,[UNIT_QTY_XY]
           ,[NOTE_PRINT_2]
           ,[K_STORE_ITEM_CODE]
           ,[K_STORE_COST]
           ,[K_STORE_SELL]
           ,[K_PRINT_ITEM_CODE]
           ,[K_PRINT_COST]
           ,[K_PRINT_SELL]
           ,[K_MODEL_ITEM_CODE]
           ,[K_MODEL_COST]
           ,[K_MODEL_SELL]
           ,[K_MOTOR_ITEM_CODE]
           ,[K_MOTOR_COST]
           ,[K_MOTOR_SELL]
           ,[K_HABEL_ITEM_CODE]
           ,[K_HABEL_COST]
           ,[K_HABEL_SELL]
           ,[K_STORE_TOTAL]
           ,[K_PRINT_TOTAL]
           ,[K_MODEL_TOTAL]
           ,[K_MOTOR_TOTAL]
           ,[K_HABEL_TOTAL]
           ,[K_MODEL_TOTAL_COST]
           ,[QTY_FREE]
           ,[TOTAL_QTY]
           ,[NOTE_PRINT_3]
           ,[NOTE_PRINT_4]
           ,[NOTE_PRINT_5]
           ,[CNY_IQ]
           ,[IS_TRANS]
           ,[WAJBA_EXPIRED]
           ,[MANDOOB_CODE]
           ,[MANDOOB_CODE_FINISH]
           ,[TOTAL_POINTS])
     VALUES
           (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max))  
           ,@BILL_NUMBER 
           ,-1
           ,N''اجور توصيل''
           ,1
           ,(SELECT UNIT_NAME  FROM T_ITEMS  WHERE ITEM_CODE=-1)
           ,1
           ,0
           ,-999999
           ,N''''
            ,N''''
           ,@CURRANCY_CODE_INVOICE
           ,@CURRANCY_EQUAL_INVOICE
           ,0
           ,@COST_SHIP_DELEVERY
           ,@COST_SHIP_DELEVERY
           ,0
           ,0
           ,GETDATE()
           ,1
           ,-999999
           ,N''''
           ,N''اجور خدمة التوصيل''
           ,0
           ,N''''
           ,N''''
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,1
           ,0
           ,1
           ,0
           ,1
           ,0
           ,1
           ,N''''
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,1
           ,N''''
           ,N''''
           ,N''''
           ,1
           ,0
           ,N''''
           ,1
           ,1
           ,0)

END

 -------------------------------------------------------------------------------------------------------

 DECLARE @TOTAL_COST FLOAT ,
 @TOTAL_MANDOOB_ITEM FLOAT,
 @TOTAL_TAX_ITEMS FLOAT,
 @NET_TOTAL FLOAT,
 @CASH_USA FLOAT,
 @CASH_IQ FLOAT,
 @TOTAL_DISCOUNT FLOAT,
 @MANDOOB_CODE INT,
 @SHIP_CODE INT,
@IVC_CODE INT,
 
@CLIENT_NAME NVARCHAR(MAX) ,
 @DESCRIPTION NVARCHAR(MAX)

  SELECT @IVC_CODE =IVC_CODE,@NET_TOTAL=ISNULL(NET_SALES,0),@CASH_USA=ISNULL(CASH_USA,0),@CASH_IQ=ISNULL(CASH_IQ,0) ,@MANDOOB_CODE=ISNULL(MANDOOB_CODE,1),@DESCRIPTION=DESCRIPTION,@SHIP_CODE=SHIP_CODE,@CLIENT_NAME=CLIENT_NAME,@TOTAL_DISCOUNT=TOTAL_DISCOUNT  FROM T_SALES  WHERE BILL_NUMBER=@BILL_NUMBER
 IF @IVC_CODE=2
 BEGIN
 UPDATE T_SALES SET CASH_USA=0,CASH_IQ=0 WHERE BILL_NUMBER=@BILL_NUMBER
 IF @CURRANCY_CODE_INVOICE=1
 BEGIN
  UPDATE T_SALES SET REMAIN_IQ=0,REMAIN_USA=@NET_TOTAL WHERE BILL_NUMBER=@BILL_NUMBER
 END
 ELSE
 BEGIN
 
 UPDATE T_SALES SET REMAIN_USA=0,REMAIN_IQ=@NET_TOTAL WHERE BILL_NUMBER=@BILL_NUMBER
 END
 SET @CASH_USA=0
 SET @CASH_IQ=0
 END
 
 SELECT @TOTAL_COST=ISNULL(SUM(TOTAL_COST),0),@TOTAL_MANDOOB_ITEM=ISNULL(SUM(TOTAL_MANDOOB_ITEM),0),@TOTAL_TAX_ITEMS=ISNULL(SUM(TOTAL_TAX_ITEM),0) FROM T_SALES_DETAILS WHERE BILL_NUMBER=@BILL_NUMBER
UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST,TOTAL_MANDOOB_ITEM=@TOTAL_MANDOOB_ITEM,TOTAL_TAX_ITEM=@TOTAL_TAX_ITEMS WHERE BILL_NUMBER=@BILL_NUMBER


 -------------------------------------------------------------------------------------------------------
DECLARE
@REGION_CODE INT,
@COST_SHIP FLOAT=0,
@COST_SHIP_CLIENT FLOAT=0
SELECT @REGION_CODE=REGION_CODE FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER
IF @REGION_CODE<>0
BEGIN
SELECT  @COST_SHIP_CLIENT=ISNULL(REGION_COST,0) FROM T_REGION_SHIP WHERE REGION_CODE=@REGION_CODE
SELECT @COST_SHIP= ISNULL(REGION_SELL,0) FROM T_REGION_SHIP WHERE REGION_CODE=@REGION_CODE
UPDATE T_SALES SET COST_SHIP=@COST_SHIP,COST_SHIP_CLIENT=@COST_SHIP_CLIENT WHERE BILL_NUMBER=@BILL_NUMBER
END

 -------------------------------------------------------------------------------------------------------
  DECLARE @CNU_EQUL_IQ FLOAT = (SELECT ISNULL(CURRANCY_EQUAL,1)  FROM T_CURRANNCY WHERE CURRANCY_CODE=2),
          @CNU_EQUL_USA As FLOAT = (SELECT ISNULL(CURRANCY_EQUAL,1)  FROM T_CURRANNCY WHERE CURRANCY_CODE=1)

 -------------------------------------------------------------------------------------------------------
DECLARE

@IS_COST_SHIP BIT,
@COST_SHIP_MANDOOB FLOAT=0,
@COST_SHIP_EXP FLOAT=0
SELECT @IVC_CODE=IVC_CODE FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER
IF @IVC_CODE=10 GOTO AFTER_OFFERS

 DECLARE @D_USA FLOAT=0, @C_USA FLOAT=0,  @D_IQ FLOAT=0, @C_IQ FLOAT=0, @CURR_EQUL FLOAT=0, @DOOB_USA FLOAT=0, @DOOB_IQ FLOAT=0, @TAX_USA FLOAT=0, @TAX_IQ FLOAT=0, @SHIP_USA FLOAT=0, @SHIP_IQ FLOAT=0, @SHIP_USA_CRE FLOAT=0, @SHIP_IQ_CRE FLOAT=0, @MANDOOB_SHIP_USA FLOAT=0, @MANDOOB_SHIP_IQ FLOAT=0,@DISC_USA FLOAT=0, @DISC_IQ FLOAT=0
   SELECT @IS_COST_SHIP=ISNULL(IS_COST_SHIP,0) FROM T_MANDOOB WHERE MANDOOB_CODE=@MANDOOB_CODE
   SET @COST_SHIP_EXP=@COST_SHIP
 If @IS_COST_SHIP = 1 
 BEGIN
             SET   @COST_SHIP_MANDOOB = @COST_SHIP
              SET  @COST_SHIP_EXP = 0
            End 

If @CURRANCY_CODE_INVOICE = 1 
BEGIN
                       SET @DOOB_USA = @TOTAL_MANDOOB_ITEM
                        SET @TAX_USA = @TOTAL_TAX_ITEMS
                        SET @D_USA = @NET_TOTAL
                       SET  @C_USA = @COST_SHIP_CLIENT + @CASH_USA + (@CASH_IQ / @CNU_EQUL_IQ)
                        SET  @D_IQ = 0
                        SET  @C_IQ = 0
                        SET  @SHIP_USA = @COST_SHIP
                        SET  @SHIP_IQ = 0
                        SET  @SHIP_USA_CRE = @COST_SHIP - @COST_SHIP_CLIENT
                        SET  @SHIP_IQ_CRE = 0

                        SET  @MANDOOB_SHIP_USA = @COST_SHIP_MANDOOB
                        SET  @MANDOOB_SHIP_IQ = 0
				 SET  @CURR_EQUL = @CNU_EQUL_IQ
				 set @DISC_USA=@TOTAL_DISCOUNT
				 set @DISC_IQ=0
END
ELSE 
If @CURRANCY_CODE_INVOICE = 2 
BEGIN
						 SET  @D_USA = 0
                         SET  @C_USA = 0
                         SET  @D_IQ = @NET_TOTAL
                         SET  @C_IQ = @COST_SHIP_CLIENT + @CASH_IQ + @CASH_USA / (1 / @CNU_EQUL_USA)
                         SET  @DOOB_IQ = @TOTAL_MANDOOB_ITEM
                        SET  @TAX_IQ = @TOTAL_TAX_ITEMS
                         SET  @SHIP_USA = 0
                         SET  @SHIP_IQ = @COST_SHIP_EXP
                         SET  @SHIP_USA_CRE = 0
                         SET  @SHIP_IQ_CRE = @COST_SHIP - @COST_SHIP_CLIENT
                         SET  @MANDOOB_SHIP_USA = 0
                         SET  @MANDOOB_SHIP_IQ = @COST_SHIP_MANDOOB
                  SET  @CURR_EQUL = @CNU_EQUL_USA

				   set @DISC_USA=0
				 set @DISC_IQ=@TOTAL_DISCOUNT
END 

 -------------------------------------------------------------------------------------------------------
 DECLARE @ACCOUNT_SHIP Int = 1,
         @IS_AMO_MANDOOB INT = 1,
         @IS_AMO_CLIENT As INT = 1

SELECT @ACCOUNT_SHIP=ISNULL(ACCOUNT_CODE,0),@IS_AMO_MANDOOB=IS_AMO_MANDOOB,@IS_AMO_CLIENT=IS_AMO_CLIENT FROM T_SALES_SHIPPING WHERE SHIP_CODE=@SHIP_CODE
 -------------------------------------------------------------------------------------------------------
  
 -- supplier
 SELECT @CLIENT_CODE=CLIENT_CODE FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER
          
	INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
	VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @CLIENT_CODE, N'''', @D_USA, @C_USA, @D_IQ, @C_IQ, @CURRANCY_CODE_INVOICE, @CURR_EQUL,  @DESCRIPTION, 0, @USER_CODE, GETDATE(), @IS_AMO_CLIENT)
                 
-------------------------------------------------------------------------------------------------------

--عمولات المندوب
            
DECLARE
  @MANDOOB_ACCOUNT INT ,
  @MANDOOB_NAME NVARCHAR(MAX)
			   SELECT TOP(1) @MANDOOB_ACCOUNT=ACCOUNT_CODE,@MANDOOB_NAME=MANDOOB_NAME  FROM T_MANDOOB WHERE MANDOOB_CODE=@MANDOOB_CODE
  If (@TOTAL_MANDOOB_ITEM <> 0 Or @COST_SHIP_MANDOOB <> 0) And @MANDOOB_ACCOUNT <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @MANDOOB_ACCOUNT, N'''', @MANDOOB_SHIP_USA, @DOOB_USA, @MANDOOB_SHIP_IQ, @DOOB_IQ, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''عمولة المندوب : ''+ @MANDOOB_NAME + N''/'' + N''للعميل : '' + @CLIENT_NAME, 0, @USER_CODE, GETDATE(), @IS_AMO_MANDOOB)
   
		 END
-------------------------------------------------------------------------------------------------------

--TAX
            
DECLARE
  @TAX_ACCOUNT INT=(SELECT TOP(1) ISNULL(CLIENT_CODE,0)  FROM T_CLIENT WHERE CLIENT_TYPE=8 AND CLIENT_ACTIVE=1)  
   If  @TOTAL_TAX_ITEMS <> 0   And @TAX_ACCOUNT <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @TAX_ACCOUNT, N'''', 0, @TAX_USA, 0, @TAX_IQ, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''ضريبة الفاتورة ''  + N''/'' + N''للعميل : '' + @CLIENT_NAME, 0, @USER_CODE, GETDATE(), 1)
   
		 END                     

-------------------------------------------------------------------------------------------------------

--COST_SHIP ACCOUNT
            
 SET @COST_SHIP_EXP=@COST_SHIP_EXP + @COST_SHIP - @COST_SHIP_CLIENT

   If  @COST_SHIP_EXP <> 0 And @ACCOUNT_SHIP <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @ACCOUNT_SHIP, N'''', @SHIP_USA, @SHIP_USA_CRE, @SHIP_IQ, @SHIP_IQ_CRE, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''كلفة توصيل الفاتورة ''  + N''/'' + N''للعميل : '' + @CLIENT_NAME, 0, @USER_CODE, GETDATE(), @IS_AMO_CLIENT)
   
		 END                     

-------------------------------------------------------------------------------------------------------

--CASH
            
 SET @COST_SHIP_EXP=@COST_SHIP_EXP + @COST_SHIP - @COST_SHIP_CLIENT

   If  @CASH_USA <> 0 OR @CASH_IQ <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @BOX_USER, N'''', @CASH_USA, 0, @CASH_IQ, 0, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''('' + N''العميل : '' + @CLIENT_NAME + N'')'' + @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)
   
		 END 
-------------------------------------------------------------------------------------------------------

-- DISCOUNT
            
 SET @COST_SHIP_EXP=@COST_SHIP_EXP + @COST_SHIP - @COST_SHIP_CLIENT

   If  @TOTAL_DISCOUNT<>0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, 4001, N'''', @DISC_USA, 0, @DISC_IQ, 0, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''('' + N''العميل : '' + @CLIENT_NAME + N'')'' + @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)
   
		 END 

-------------------------------------------------------------------------------------------------------

-- STORE BOX

INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[ACTIVE])

SELECT [BILL_BRANCH]
      ,[BILL_NUMBER]
	  ,(SELECT BILL_DATE FROM T_SALES WHERE BILL_NUMBER = @BILL_NUMBER)
	  ,2
	  ,0
	 ,[STORE_CODE]
	  ,NULL
	  ,[ITEM_CODE]
     ,ISNULL((SELECT TOP(1) UNIT_CODE FROM T_ITEM_UNIT WHERE (ITEM_CODE= (SELECT TOP(1) ITEM_CODE FROM [dbo].[T_SALES_DETAILS] WHERE BILL_NUMBER = @BILL_NUMBER AND ITEM_CODE=[T_SALES_DETAILS].ITEM_CODE AND UNIT_NAME LIKE [T_SALES_DETAILS].UNIT_NAME) )),1)
      ,0
	  ,[TOTAL_QTY]
      ,[UNIT_QTY]
      ,1
      
  FROM [dbo].[T_SALES_DETAILS] WHERE BILL_NUMBER = @BILL_NUMBER


 -------------------------------------------------------------------------------------------------------


-- FINISHED



AFTER_OFFERS:

  UPDATE [dbo].[T_APP_INVOICE] SET  [IS_INSERT] = 1, [BILL_BRANCH] = @COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), [BILL_NUMBER] = @BILL_NUMBER WHERE T_ID=@T_ID 
  
SET @SUBMIT_fLAG=1

RETTTTT:
COMMIT
	IF @@ERROR <>0
	BEGIN
	ROLLBACK 
 
	SET @SUBMIT_fLAG=0
	RETURN
	END

return
 
 

END	 ' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_INSERT_APP_INVOICE_MUSTAFA]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_INSERT_APP_INVOICE_MUSTAFA]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'












CREATE PROCEDURE [dbo].[P_API_INSERT_APP_INVOICE_MUSTAFA]
@T_ID INT,
@BILL_NUMBER INT OUTPUT,
@SUBMIT_FLAG INT OUTPUT

AS
DECLARE
@B_CODE INT,
@CURRANCY_CODE_INVOICE INT,
@CURRANCY_EQUAL_INVOICE FLOAT,
@CURRANCY_CODE_PRIMARY INT,
@COST_SHIP_DELEVERY FLOAT,
@BOX_USER INT,
@USER_CODE INT,
@INFO NVARCHAR(MAX),
@DETAILS NVARCHAR(MAX),
@USER_CREATE NVARCHAR(MAX),
@COMPANY_TITAL NVARCHAR(MAX)


begin 
BEGIN TRANSACTION;
SET @SUBMIT_FLAG=0
SELECT @INFO=INFO,@DETAILS=DETAILS,@B_CODE=B_CODE,@USER_CREATE=ISNULL(USER_CREATE,N''APPS'')  FROM T_APP_INVOICE WHERE T_ID=@T_ID  AND IS_INSERT=0
IF LEN(ISNULL(@DETAILS,N''''))<10 GOTO RETTTTT
IF @B_CODE<>2  GOTO RETTTTT
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
SELECT @CURRANCY_CODE_PRIMARY=CURRANCY_CODE  FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
 

SELECT TOP(1) @BOX_USER=ISNULL(BOX_CODE,5000),@USER_CODE=USER_CODE  FROM T_USERS WHERE USER_NAME LIKE @USER_CREATE AND ACTIVE=1
SET @BOX_USER=ISNULL(@BOX_USER,5000)
SET @USER_CODE=ISNULL(@USER_CODE,1)
SELECT @BILL_NUMBER=ISNULL(MAX(BILL_NUMBER),0) + 1 FROM T_SALES
SET @CURRANCY_CODE_INVOICE=(Select  max(case when name=''CURRANCY_CODE'' then convert(int,StringValue) else @CURRANCY_CODE_PRIMARY end) as [CURRANCY_CODE] 
From parseJSON
(
       @INFO
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID)

SET @CURRANCY_EQUAL_INVOICE=(Select  max(case when name=''CURRANCY_EQUAL'' then convert(int,StringValue) else 1 end) as [CURRANCY_EQUAL] 
From parseJSON
(
       @INFO
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID)
 -------------------------------------------------------------------------------------------------------

 

DECLARE @CLIENT_CODE INT;
DECLARE @CLIENT_BARCODE NVARCHAR(MAX);

SELECT @CLIENT_BARCODE = CASE WHEN name = ''CLIENT_BARCODE'' THEN CONVERT(NVARCHAR(MAX), StringValue)ELSE ''''END
FROM parseJSON(@INFO) AS info
WHERE info.name = ''CLIENT_BARCODE'';
SELECT 
    @CLIENT_CODE = CASE 
                    WHEN name = ''CLIENT_CODE'' THEN 
                        CASE WHEN CONVERT(INT, StringValue) = 0 THEN (SELECT CLIENT_CODE FROM T_CLIENT WHERE CLIENT_BARCODE = @CLIENT_BARCODE)ELSE CONVERT(INT, StringValue) 
                        END ELSE 0 END
FROM parseJSON(@INFO) AS info
WHERE info.name = ''CLIENT_CODE'';

INSERT INTO [dbo].[T_SALES]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_INVOICE]
           ,[BILL_DATE]
           ,[OFFER_CODE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[CLIENT_CODE]
           ,[CLIENT_NAME]
           ,[CLIENT_PHONE]
           ,[CLIENT_ADRESS]
           ,[MANDOOB_CODE]
           ,[DESCRIPTION]
           ,[TYPE_PRICE_SELL]
           ,[STORE_CODE]
           ,[USER_CREATE]
           ,[SECURETY_CODE]
           ,[TOTAL_SALES]
           ,[DISCOUNT_ITEMS]
           ,[DISCOUNT_PERCENT]
           ,[DISCOUNT_AMOUNT]
           ,[TOTAL_DISCOUNT]
           ,[NET_SALES]
           ,[TOTAL_COST]
           ,[IVC_CODE]
           ,[DAY_CASH]
           ,[DATE_CASH]
           ,[TOT_CONV]
           ,[ACCOUNT_CODE]
           ,[CASH_USA]
           ,[REMAIN_USA]
           ,[CASH_IQ]
           ,[REMAIN_IQ]
           ,[C_DATE]
           ,[C_UPDATE]
           ,[USER_UPDATE]
           ,[ACTIVE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[FLAG_CASH]
           ,[IS_OUT]
           ,[CURRANCY_SALES]
           ,[IS_TRANS]
           ,[CENTER_CODE]
           ,[QR_DATA]
           ,[ITEM_ID_PAYMENT]
           ,[TAG_PROCCESS_CODE]
           ,[LINK_ID_PAYMENT]
           ,[BILL_RETURN]
           ,[BILL_SANAD_CNY]
           ,[CNY_IQ]
           ,[IS_PREPARE]
           ,[DRIVER_CODE]
           ,[LAT]
           ,[LNG]
           ,[STATUS_SHIPING]
           ,[MOVE_CODE]
           ,[BILL_ORDER]
           ,[TOTAL_TAX_ITEM]
           ,[TOTAL_MANDOOB_ITEM]
           ,[TOTAL_ADD_COST]
           ,[TOTAL_ADD_AMO]
           ,[SHIP_CODE]
           ,[COST_SHIP]
           ,[IS_POINT]
           ,[COST_SHIP_CLIENT]
           ,[USER_TAG_CODE]
           ,[RELATION_BILL_CODE]
           ,[RELATION_B_CODE]
           ,[REGION_CODE]
           ,[COL_INT1]
           ,[COL_INT2]
           ,[COL_INT3]
           ,[COL_STR1]
           ,[COL_STR2]
           ,[COL_STR3]
           ,[IS_PDF]
           ,[PATH_PDF]
           ,[PATH_PDF_API])


      Select
			@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max))  as [BILL_BRANCH]
           ,@BILL_NUMBER as [BILL_NUMBER]
           ,max(case when name=''BILL_INVOICE'' then convert(nvarchar(max),StringValue) else N'''' end) as [BILL_INVOICE] 
           ,GETDATE() as [BILL_DATE]
           ,0 as [OFFER_CODE]
           , max(case when name=''CURRANCY_CODE'' then convert(int,StringValue) else @CURRANCY_CODE_PRIMARY end) as [CURRANCY_CODE]
           , max(case when name=''CURRANCY_EQUAL'' then convert(int,StringValue) else 1 end) as [CURRANCY_EQUAL]
           ,@CLIENT_CODE AS [CLIENT_CODE]
           ,max(case when name=''CLIENT_NAME'' then convert(nvarchar(max),StringValue) else N'''' end) as [CLIENT_NAME]
           ,max(case when name=''CLIENT_PHONE'' then convert(nvarchar(max),StringValue) else N'''' end) as [CLIENT_PHONE]
           ,max(case when name=''CLIENT_ADDRESS'' then convert(nvarchar(max),StringValue) else N'''' end) as [CLIENT_ADRESS]
           ,max(case when name=''MANDOOB_CODE'' then convert(int,StringValue) else 1 end) as [MANDOOB_CODE]
           ,max(case when name=''NOTE_ORDER'' then convert(nvarchar(max),StringValue) else N'''' end) as [DESCRIPTION]
           ,1 as [TYPE_PRICE_SELL]
           ,0 as [STORE_CODE]
           ,@USER_CREATE as [USER_CREATE]
           ,1 as [SECURETY_CODE]
           ,max(case when name=''TOTAL'' then convert(float,StringValue) else 0 end) as [TOTAL_SALES]
           ,max(case when name=''DISCOUNT_ITEMS'' then convert(float,StringValue) else 0 end) as [DISCOUNT_ITEMS]
           ,0 as [DISCOUNT_PERCENT]
           ,max(case when name=''TOTAL_DISCOUNT'' then convert(float,StringValue) else 0 end) as [DISCOUNT_AMOUNT]
           ,max(case when name=''TOTAL_DISCOUNT'' then convert(float,StringValue) else 0 end) + max(case when name=''DISCOUNT_ITEMS'' then convert(float,StringValue) else 0 end) as [TOTAL_DISCOUNT]
           ,(max(case when name=''TOTAL'' then convert(float,StringValue) else 0 end) - (max(case when name=''TOTAL_DISCOUNT'' then convert(float,StringValue) else 0 end) + max(case when name=''DISCOUNT_ITEMS'' then convert(float,StringValue) else 0 end))) as [NET_SALES]
           ,0 as [TOTAL_COST] -- FROM SUM
           ,max(case when name=''INVOICE_CODE'' then convert(int,StringValue) else 1 end) as [IVC_CODE]
           ,0 as [DAY_CASH]
           ,GETDATE() as [DATE_CASH]
           ,N'''' as [TOT_CONV]
           , @BOX_USER  as [ACCOUNT_CODE]
           ,IIF(@CURRANCY_CODE_INVOICE=1, max(case when name=''CASH_AMO'' then convert(float,StringValue) else 0 end),0) as [CASH_USA]
           ,IIF(@CURRANCY_CODE_INVOICE=1,max(case when name=''REMAIN_AMO'' then convert(float,StringValue) else 0 end),0) as [REMAIN_USA]
           ,IIF(@CURRANCY_CODE_INVOICE=2, max(case when name=''CASH_AMO'' then convert(float,StringValue) else 0 end),0) as [CASH_IQ]
           ,IIF(@CURRANCY_CODE_INVOICE=2,max(case when name=''REMAIN_AMO'' then convert(float,StringValue) else 0 end),0) as [REMAIN_IQ]
           ,GETDATE() as [C_DATE]
           ,N'''' as [C_UPDATE]
           ,N'''' as [USER_UPDATE]
           ,1 as [ACTIVE]
           ,0 as [IS_AVG_COST]
           ,0 as [AVG_COST]
           ,IIF( max(case when name=''REMAIN_AMO'' then convert(float,StringValue) else 0 end)=0,1,0) as [FLAG_CASH]
           ,1 as [IS_OUT]
           ,max(case when name=''CURRANCY_EQUAL'' then convert(int,StringValue) else 1 end) as [CURRANCY_SALES]
           ,0 as [IS_TRANS]
           ,0 as [CENTER_CODE]
           ,N'''' as [QR_DATA]
           ,N'''' as [ITEM_ID_PAYMENT]
           ,max(case when name=''INVOICE_STATUS'' then convert(int,StringValue) else 0 end)  as [TAG_PROCCESS_CODE]
           ,N'''' as [LINK_ID_PAYMENT]
           ,0 as [BILL_RETURN]
           ,0 as [BILL_SANAD_CNY]
           ,1 as [CNY_IQ]
           ,0 as [IS_PREPARE]
           ,max(case when name=''DRIVER_CODE'' then convert(int,StringValue) else 0 end) as [DRIVER_CODE]
           ,max(case when name=''LAT'' then convert(nvarchar(max),StringValue) else N'''' end) as [LAT]
           ,max(case when name=''LNG'' then convert(nvarchar(max),StringValue) else N'''' end) as [LNG]
           ,max(case when name=''STATUS_SHIPING'' then convert(int,StringValue) else 0 end) as [STATUS_SHIPING]
           ,0 as [MOVE_CODE]
           ,0 as [BILL_ORDER]
           ,0 as [TOTAL_TAX_ITEM]
           ,max(case when name=''TOTAL_MANDOOB_ITEM'' then convert(float,StringValue) else 0 end) as [TOTAL_MANDOOB_ITEM]
           ,max(case when name=''TOTAL_ADD_COST'' then convert(float,StringValue) else 0 end) as [TOTAL_ADD_COST]
           ,max(case when name=''TOTAL_ADD_AMO'' then convert(float,StringValue) else 0 end) as [TOTAL_ADD_AMO]
           ,max(case when name=''SHIP_CODE'' then convert(INT,StringValue) else 0 end) as [SHIP_CODE]
           ,max(case when name=''DELIVERYCOST'' then convert(float,StringValue) else 0 end) as [COST_SHIP]
           ,0 as [IS_POINT]
           ,max(case when name=''COST_SHIP_CLIENT'' then convert(float,StringValue) else 0 end) as [COST_SHIP_CLIENT]
           ,0 as [USER_TAG_CODE]
           ,0 as [RELATION_BILL_CODE]
           ,0 as [RELATION_B_CODE]
           ,max(case when name=''REGION_CODE'' then convert(int,StringValue) else 0 end) as [REGION_CODE]
           ,max(case when name=''COL_INT1'' then convert(int,StringValue) else 0 end) as [COL_INT1]
           ,max(case when name=''COL_INT2'' then convert(int,StringValue) else 0 end) as [COL_INT2]
           ,max(case when name=''COL_INT3'' then convert(int,StringValue) else 0 end) as [COL_INT3]
           ,max(case when name=''COL_STR1'' then convert(nvarchar(max),StringValue) else N'''' end) as [COL_STR1]
           ,max(case when name=''COL_STR2'' then convert(nvarchar(max),StringValue) else N'''' end) as [COL_STR2]
           ,max(case when name=''COL_STR3'' then convert(nvarchar(max),StringValue) else N'''' end) as [COL_STR3]
           ,0 as [IS_PDF]
           ,N'''' as [PATH_PDF]
           ,N'''' as [PATH_PDF_API]


From parseJSON
(
       @INFO
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID

 -------------------------------------------------------------------------------------------------------
 select top(1) @CURRANCY_CODE_INVOICE =CURRANCY_CODE,@CURRANCY_EQUAL_INVOICE=CURRANCY_EQUAL  from T_SALES where BILL_NUMBER=@BILL_NUMBER
INSERT INTO [dbo].[T_SALES_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[TOTAL]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY]
           ,[ITEM_NOTE_SALES]
           ,[NOTE_PRINT]
           ,[IS_PRINT]
           ,[USER_PREPARE]
           ,[USER_CUT]
           ,[DISCOUNT_TYPE]
           ,[IS_SERIAL]
           ,[IS_TAX]
           ,[TAX_PERCENT_ITEM]
           ,[TAX_AMO_ITEM]
           ,[IS_MANDOOB]
           ,[MANDOOB_PERCENT_ITEM]
           ,[MANDOOB_AMO_ITEM]
           ,[IS_ITEM_AREA]
           ,[WIDTH_CM]
           ,[LENGTH_CM]
           ,[AREA_M2]
           ,[QTY_AREA]
           ,[QTY_XZ]
           ,[UNIT_QTY_XZ]
           ,[QTY_X1]
           ,[UNIT_QTY_X1]
           ,[QTY_XY]
           ,[UNIT_QTY_XY]
           ,[NOTE_PRINT_2]
           ,[K_STORE_ITEM_CODE]
           ,[K_STORE_COST]
           ,[K_STORE_SELL]
           ,[K_PRINT_ITEM_CODE]
           ,[K_PRINT_COST]
           ,[K_PRINT_SELL]
           ,[K_MODEL_ITEM_CODE]
           ,[K_MODEL_COST]
           ,[K_MODEL_SELL]
           ,[K_MOTOR_ITEM_CODE]
           ,[K_MOTOR_COST]
           ,[K_MOTOR_SELL]
           ,[K_HABEL_ITEM_CODE]
           ,[K_HABEL_COST]
           ,[K_HABEL_SELL]
           ,[K_STORE_TOTAL]
           ,[K_PRINT_TOTAL]
           ,[K_MODEL_TOTAL]
           ,[K_MOTOR_TOTAL]
           ,[K_HABEL_TOTAL]
           ,[K_MODEL_TOTAL_COST]
           ,[QTY_FREE]
           ,[TOTAL_QTY])
 Select
       @COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max))  as [BILL_BRANCH]
           ,@BILL_NUMBER as [BILL_NUMBER]
           ,max(case when name=''ITEM_CODE'' then convert(int,StringValue) else -1 end) as [ITEM_CODE]
           ,max(case when name=''ITEM_NAME'' then convert(nvarchar(max),StringValue) else N'''' end) as [ITEM_NAME]
           ,max(case when name=''QTY'' then convert(float,StringValue) else 0 end) as [QTY]
           ,max(case when name=''UNIT_NAME'' then convert(nvarchar(max),StringValue) else N'''' end) as [UNIT_NAME]
           ,max(case when name=''UNIT_QTY'' then convert(float,StringValue) else 0 end) as [UNIT_QTY]
           ,max(case when name=''STORE_CODE'' then convert(int,StringValue) else 0 end) as [STORE_CODE]
           ,-999999 as [WAJBA_CODE]
           ,N'''' as [WAJBA_NAME]
           ,N'''' as [WAJBA_BALANCE]
           ,@CURRANCY_CODE_INVOICE as [CURRANCY_CODE]
           ,@CURRANCY_EQUAL_INVOICE as [CURRANCY_EQUAL]
           ,max(case when name=''PRICE_COST'' then convert(float,StringValue) else 0 end) as [COST]
           ,max(case when name=''PRICE'' then convert(float,StringValue) else 0 end) as [PRICE]
           ,(max(case when name=''PRICE'' then convert(float,StringValue) else 0 end) * max(case when name=''QTY'' then convert(float,StringValue) else 0 end)) as [TOTAL]
           ,max(case when name=''DISC_PERCENT'' then convert(float,StringValue) else 0 end) as [DISCOUNT_PERCENT_ITEM]
           ,max(case when name=''DISC_AMO'' then convert(float,StringValue) else 0 end) as [DISCOUNT_AMOUNT_ITEM]
           ,GETDATE() as [C_DATE]
           ,1 as [ACTIVE]
           ,-999999 as [BILL_BUY]
           ,max(case when name=''NOTE'' then convert(nvarchar(max),StringValue) else N'''' end) as [ITEM_NOTE_SALES]
           ,N'''' as [NOTE_PRINT]
           ,0 as [IS_PRINT]
           ,N'''' as [USER_PREPARE]
           ,N'''' as [USER_CUT]
           ,0 as [DISCOUNT_TYPE]
           ,0 as [IS_SERIAL]
           ,0 as [IS_TAX]
           ,max(case when name=''TAX_PERCENT_ITEM'' then convert(float,StringValue) else 0 end) as [TAX_PERCENT_ITEM]
           ,max(case when name=''TAX_AMO_ITEM'' then convert(float,StringValue) else 0 end) as [TAX_AMO_ITEM]
           ,max(case when name=''IS_MANDOOB'' then convert(bit,StringValue) else 0 end) as [IS_MANDOOB]
           ,max(case when name=''MANDOOB_PERCENT_ITEM'' then convert(nvarchar(max),StringValue) else 0 end) as [MANDOOB_PERCENT_ITEM]
           ,IIF(max(case when name=''IS_MINUS_MANDOOB'' then convert(int,StringValue) else 0 end)=0, (max(case when name=''totalNetProfitMandob'' then convert(float,StringValue) else 0 end)/ max(case when name=''QTY'' then convert(float,StringValue) else 0 end)),(max(case when name=''totalNetProfitMandob'' then convert(float,StringValue) else 0 end)/ max(case when name=''QTY'' then convert(float,StringValue) else 0 end))*-1) as [MANDOOB_AMO_ITEM]
           ,0 as [IS_ITEM_AREA]
           ,0 as [WIDTH_CM]
           ,0 as [LENGTH_CM]
           ,0 as [AREA_M2]
           ,1 as [QTY_AREA]
           ,0 as [QTY_XZ]
           ,0 as [UNIT_QTY_XZ]
           ,0 as [QTY_X1]
           ,0 as [UNIT_QTY_X1]
           ,0 as [QTY_XY]
           ,0 as [UNIT_QTY_XY]
           ,N'''' as [NOTE_PRINT_2]
           ,0 as [K_STORE_ITEM_CODE]
           ,0 as [K_STORE_COST]
           ,0 as [K_STORE_SELL]
           ,0 as [K_PRINT_ITEM_CODE]
           ,0 as [K_PRINT_COST]
           ,0 as [K_PRINT_SELL]
           ,0 as [K_MODEL_ITEM_CODE]
           ,0 as [K_MODEL_COST]
           ,0 as [K_MODEL_SELL]
           ,0 as [K_MOTOR_ITEM_CODE]
           ,0 as [K_MOTOR_COST]
           ,0 as [K_MOTOR_SELL]
           ,0 as [K_HABEL_ITEM_CODE]
           ,0 as [K_HABEL_COST]
           ,0 as [K_HABEL_SELL]
           ,0 as [K_STORE_TOTAL]
           ,0 as [K_PRINT_TOTAL]
           ,0 as [K_MODEL_TOTAL]
           ,0 as [K_MOTOR_TOTAL]
           ,0 as [K_HABEL_TOTAL]
           ,0 as [K_MODEL_TOTAL_COST]
           ,max(case when name=''QTY_FREE'' then convert(float,StringValue) else 0 end) as [QTY_FREE]
           ,max(case when name=''QTY'' then convert(float,StringValue) else 0 end)+max(case when name=''QTY_FREE'' then convert(float,StringValue) else 0 end)  as [TOTAL_QTY]



From parseJSON
(
       @DETAILS
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID
 
 ------------------------------------------ADD COST SHIP---------------------------------------------------------------
 SET @COST_SHIP_DELEVERY=(Select  max(case when name=''DELIVERYCOST'' then convert(float,StringValue) else 0 end) as [DELIVERYCOST] 
From parseJSON
(
       @INFO
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID)

IF @COST_SHIP_DELEVERY<>0
BEGIN
INSERT INTO [dbo].[T_SALES_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[TOTAL]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY]
           ,[ITEM_NOTE_SALES]
           ,[NOTE_PRINT]
           ,[IS_PRINT]
           ,[USER_PREPARE]
           ,[USER_CUT]
           ,[DISCOUNT_TYPE]
           ,[IS_SERIAL]
           ,[IS_TAX]
           ,[TAX_PERCENT_ITEM]
           ,[TAX_AMO_ITEM]
           ,[IS_MANDOOB]
           ,[MANDOOB_PERCENT_ITEM]
           ,[MANDOOB_AMO_ITEM]
           ,[IS_ITEM_AREA]
           ,[WIDTH_CM]
           ,[LENGTH_CM]
           ,[AREA_M2]
           ,[QTY_AREA]
           ,[QTY_XZ]
           ,[UNIT_QTY_XZ]
           ,[QTY_X1]
           ,[UNIT_QTY_X1]
           ,[QTY_XY]
           ,[UNIT_QTY_XY]
           ,[NOTE_PRINT_2]
           ,[K_STORE_ITEM_CODE]
           ,[K_STORE_COST]
           ,[K_STORE_SELL]
           ,[K_PRINT_ITEM_CODE]
           ,[K_PRINT_COST]
           ,[K_PRINT_SELL]
           ,[K_MODEL_ITEM_CODE]
           ,[K_MODEL_COST]
           ,[K_MODEL_SELL]
           ,[K_MOTOR_ITEM_CODE]
           ,[K_MOTOR_COST]
           ,[K_MOTOR_SELL]
           ,[K_HABEL_ITEM_CODE]
           ,[K_HABEL_COST]
           ,[K_HABEL_SELL]
           ,[K_STORE_TOTAL]
           ,[K_PRINT_TOTAL]
           ,[K_MODEL_TOTAL]
           ,[K_MOTOR_TOTAL]
           ,[K_HABEL_TOTAL]
           ,[K_MODEL_TOTAL_COST]
           ,[QTY_FREE]
           ,[TOTAL_QTY]
           ,[NOTE_PRINT_3]
           ,[NOTE_PRINT_4]
           ,[NOTE_PRINT_5]
           ,[CNY_IQ]
           ,[IS_TRANS]
           ,[WAJBA_EXPIRED]
           ,[MANDOOB_CODE]
           ,[MANDOOB_CODE_FINISH]
           ,[TOTAL_POINTS])
     VALUES
           (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max))  
           ,@BILL_NUMBER 
           ,-1
           ,N''اجور توصيل''
           ,1
           ,(SELECT UNIT_NAME  FROM T_ITEMS  WHERE ITEM_CODE=-1)
           ,1
           ,0
           ,-999999
           ,N''''
            ,N''''
           ,@CURRANCY_CODE_INVOICE
           ,@CURRANCY_EQUAL_INVOICE
           ,0
           ,@COST_SHIP_DELEVERY
           ,@COST_SHIP_DELEVERY
           ,0
           ,0
           ,GETDATE()
           ,1
           ,-999999
           ,N''''
           ,N''اجور خدمة التوصيل''
           ,0
           ,N''''
           ,N''''
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,1
           ,0
           ,1
           ,0
           ,1
           ,0
           ,1
           ,N''''
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,1
           ,N''''
           ,N''''
           ,N''''
           ,1
           ,0
           ,N''''
           ,1
           ,1
           ,0)

END

 -------------------------------------------------------------------------------------------------------

 DECLARE @TOTAL_COST FLOAT ,
 @TOTAL_MANDOOB_ITEM FLOAT,
 @TOTAL_TAX_ITEMS FLOAT,
 @NET_TOTAL FLOAT,
 @CASH_USA FLOAT,
 @CASH_IQ FLOAT,
 @TOTAL_DISCOUNT FLOAT,
 @MANDOOB_CODE INT,
 @SHIP_CODE INT,
@IVC_CODE INT,
 
@CLIENT_NAME NVARCHAR(MAX) ,
 @DESCRIPTION NVARCHAR(MAX)

  SELECT @IVC_CODE =IVC_CODE,@NET_TOTAL=ISNULL(NET_SALES,0),@CASH_USA=ISNULL(CASH_USA,0),@CASH_IQ=ISNULL(CASH_IQ,0) ,@MANDOOB_CODE=ISNULL(MANDOOB_CODE,1),@DESCRIPTION=DESCRIPTION,@SHIP_CODE=SHIP_CODE,@CLIENT_NAME=CLIENT_NAME,@TOTAL_DISCOUNT=TOTAL_DISCOUNT  FROM T_SALES  WHERE BILL_NUMBER=@BILL_NUMBER
 IF @IVC_CODE=2
 BEGIN
 UPDATE T_SALES SET CASH_USA=0,CASH_IQ=0 WHERE BILL_NUMBER=@BILL_NUMBER
 IF @CURRANCY_CODE_INVOICE=1
 BEGIN
  UPDATE T_SALES SET REMAIN_IQ=0,REMAIN_USA=@NET_TOTAL WHERE BILL_NUMBER=@BILL_NUMBER
 END
 ELSE
 BEGIN
 
 UPDATE T_SALES SET REMAIN_USA=0,REMAIN_IQ=@NET_TOTAL WHERE BILL_NUMBER=@BILL_NUMBER
 END
 SET @CASH_USA=0
 SET @CASH_IQ=0
 END
 
 SELECT @TOTAL_COST=ISNULL(SUM(TOTAL_COST),0),@TOTAL_MANDOOB_ITEM=ISNULL(SUM(TOTAL_MANDOOB_ITEM),0),@TOTAL_TAX_ITEMS=ISNULL(SUM(TOTAL_TAX_ITEM),0) FROM T_SALES_DETAILS WHERE BILL_NUMBER=@BILL_NUMBER
UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST,TOTAL_MANDOOB_ITEM=@TOTAL_MANDOOB_ITEM,TOTAL_TAX_ITEM=@TOTAL_TAX_ITEMS WHERE BILL_NUMBER=@BILL_NUMBER


 -------------------------------------------------------------------------------------------------------
DECLARE
@REGION_CODE INT,
@COST_SHIP FLOAT=0,
@COST_SHIP_CLIENT FLOAT=0
SELECT @REGION_CODE=REGION_CODE FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER
IF @REGION_CODE<>0
BEGIN
SELECT  @COST_SHIP_CLIENT=ISNULL(REGION_COST,0) FROM T_REGION_SHIP WHERE REGION_CODE=@REGION_CODE
SELECT @COST_SHIP= ISNULL(REGION_SELL,0) FROM T_REGION_SHIP WHERE REGION_CODE=@REGION_CODE
UPDATE T_SALES SET COST_SHIP=@COST_SHIP,COST_SHIP_CLIENT=@COST_SHIP_CLIENT WHERE BILL_NUMBER=@BILL_NUMBER
END

 -------------------------------------------------------------------------------------------------------
  DECLARE @CNU_EQUL_IQ FLOAT = (SELECT ISNULL(CURRANCY_EQUAL,1)  FROM T_CURRANNCY WHERE CURRANCY_CODE=2),
          @CNU_EQUL_USA As FLOAT = (SELECT ISNULL(CURRANCY_EQUAL,1)  FROM T_CURRANNCY WHERE CURRANCY_CODE=1)

 -------------------------------------------------------------------------------------------------------
DECLARE

@IS_COST_SHIP BIT,
@COST_SHIP_MANDOOB FLOAT=0,
@COST_SHIP_EXP FLOAT=0
SELECT @IVC_CODE=IVC_CODE FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER
IF @IVC_CODE=10 GOTO AFTER_OFFERS

 DECLARE @D_USA FLOAT=0, @C_USA FLOAT=0,  @D_IQ FLOAT=0, @C_IQ FLOAT=0, @CURR_EQUL FLOAT=0, @DOOB_USA FLOAT=0, @DOOB_IQ FLOAT=0, @TAX_USA FLOAT=0, @TAX_IQ FLOAT=0, @SHIP_USA FLOAT=0, @SHIP_IQ FLOAT=0, @SHIP_USA_CRE FLOAT=0, @SHIP_IQ_CRE FLOAT=0, @MANDOOB_SHIP_USA FLOAT=0, @MANDOOB_SHIP_IQ FLOAT=0,@DISC_USA FLOAT=0, @DISC_IQ FLOAT=0
   SELECT @IS_COST_SHIP=ISNULL(IS_COST_SHIP,0) FROM T_MANDOOB WHERE MANDOOB_CODE=@MANDOOB_CODE
   SET @COST_SHIP_EXP=@COST_SHIP
 If @IS_COST_SHIP = 1 
 BEGIN
             SET   @COST_SHIP_MANDOOB = @COST_SHIP
              SET  @COST_SHIP_EXP = 0
            End 

If @CURRANCY_CODE_INVOICE = 1 
BEGIN
                       SET @DOOB_USA = @TOTAL_MANDOOB_ITEM
                        SET @TAX_USA = @TOTAL_TAX_ITEMS
                        SET @D_USA = @NET_TOTAL
                       SET  @C_USA = @COST_SHIP_CLIENT + @CASH_USA + (@CASH_IQ / @CNU_EQUL_IQ)
                        SET  @D_IQ = 0
                        SET  @C_IQ = 0
                        SET  @SHIP_USA = @COST_SHIP
                        SET  @SHIP_IQ = 0
                        SET  @SHIP_USA_CRE = @COST_SHIP - @COST_SHIP_CLIENT
                        SET  @SHIP_IQ_CRE = 0

                        SET  @MANDOOB_SHIP_USA = @COST_SHIP_MANDOOB
                        SET  @MANDOOB_SHIP_IQ = 0
				 SET  @CURR_EQUL = @CNU_EQUL_IQ
				 set @DISC_USA=@TOTAL_DISCOUNT
				 set @DISC_IQ=0
END
ELSE 
If @CURRANCY_CODE_INVOICE = 2 
BEGIN
						 SET  @D_USA = 0
                         SET  @C_USA = 0
                         SET  @D_IQ = @NET_TOTAL
                         SET  @C_IQ = @COST_SHIP_CLIENT + @CASH_IQ + @CASH_USA / (1 / @CNU_EQUL_USA)
                         SET  @DOOB_IQ = @TOTAL_MANDOOB_ITEM
                        SET  @TAX_IQ = @TOTAL_TAX_ITEMS
                         SET  @SHIP_USA = 0
                         SET  @SHIP_IQ = @COST_SHIP_EXP
                         SET  @SHIP_USA_CRE = 0
                         SET  @SHIP_IQ_CRE = @COST_SHIP - @COST_SHIP_CLIENT
                         SET  @MANDOOB_SHIP_USA = 0
                         SET  @MANDOOB_SHIP_IQ = @COST_SHIP_MANDOOB
                  SET  @CURR_EQUL = @CNU_EQUL_USA

				   set @DISC_USA=0
				 set @DISC_IQ=@TOTAL_DISCOUNT
END 

 -------------------------------------------------------------------------------------------------------
 DECLARE @ACCOUNT_SHIP Int = 1,
         @IS_AMO_MANDOOB INT = 1,
         @IS_AMO_CLIENT As INT = 1

SELECT @ACCOUNT_SHIP=ISNULL(ACCOUNT_CODE,0),@IS_AMO_MANDOOB=IS_AMO_MANDOOB,@IS_AMO_CLIENT=IS_AMO_CLIENT FROM T_SALES_SHIPPING WHERE SHIP_CODE=@SHIP_CODE
 -------------------------------------------------------------------------------------------------------
  
 -- supplier
 SELECT @CLIENT_CODE=CLIENT_CODE FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER
          
	INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
	VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @CLIENT_CODE, N'''', @D_USA, @C_USA, @D_IQ, @C_IQ, @CURRANCY_CODE_INVOICE, @CURR_EQUL,  @DESCRIPTION, 0, @USER_CODE, GETDATE(), @IS_AMO_CLIENT)
                 
-------------------------------------------------------------------------------------------------------

--عمولات المندوب
            
DECLARE
  @MANDOOB_ACCOUNT INT ,
  @MANDOOB_NAME NVARCHAR(MAX)
			   SELECT TOP(1) @MANDOOB_ACCOUNT=ACCOUNT_CODE,@MANDOOB_NAME=MANDOOB_NAME  FROM T_MANDOOB WHERE MANDOOB_CODE=@MANDOOB_CODE
  If (@TOTAL_MANDOOB_ITEM <> 0 Or @COST_SHIP_MANDOOB <> 0) And @MANDOOB_ACCOUNT <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @MANDOOB_ACCOUNT, N'''', @MANDOOB_SHIP_USA, @DOOB_USA, @MANDOOB_SHIP_IQ, @DOOB_IQ, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''عمولة المندوب : ''+ @MANDOOB_NAME + N''/'' + N''للعميل : '' + @CLIENT_NAME, 0, @USER_CODE, GETDATE(), @IS_AMO_MANDOOB)
   
		 END
-------------------------------------------------------------------------------------------------------

--TAX
            
DECLARE
  @TAX_ACCOUNT INT=(SELECT TOP(1) ISNULL(CLIENT_CODE,0)  FROM T_CLIENT WHERE CLIENT_TYPE=8 AND CLIENT_ACTIVE=1)  
   If  @TOTAL_TAX_ITEMS <> 0   And @TAX_ACCOUNT <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @TAX_ACCOUNT, N'''', 0, @TAX_USA, 0, @TAX_IQ, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''ضريبة الفاتورة ''  + N''/'' + N''للعميل : '' + @CLIENT_NAME, 0, @USER_CODE, GETDATE(), 1)
   
		 END                     

-------------------------------------------------------------------------------------------------------

--COST_SHIP ACCOUNT
            
 SET @COST_SHIP_EXP=@COST_SHIP_EXP + @COST_SHIP - @COST_SHIP_CLIENT

   If  @COST_SHIP_EXP <> 0 And @ACCOUNT_SHIP <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @ACCOUNT_SHIP, N'''', @SHIP_USA, @SHIP_USA_CRE, @SHIP_IQ, @SHIP_IQ_CRE, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''كلفة توصيل الفاتورة ''  + N''/'' + N''للعميل : '' + @CLIENT_NAME, 0, @USER_CODE, GETDATE(), @IS_AMO_CLIENT)
   
		 END                     

-------------------------------------------------------------------------------------------------------

--CASH
            
 SET @COST_SHIP_EXP=@COST_SHIP_EXP + @COST_SHIP - @COST_SHIP_CLIENT

   If  @CASH_USA <> 0 OR @CASH_IQ <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @BOX_USER, N'''', @CASH_USA, 0, @CASH_IQ, 0, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''('' + N''العميل : '' + @CLIENT_NAME + N'')'' + @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)
   
		 END 
-------------------------------------------------------------------------------------------------------

-- DISCOUNT
            
 SET @COST_SHIP_EXP=@COST_SHIP_EXP + @COST_SHIP - @COST_SHIP_CLIENT

   If  @TOTAL_DISCOUNT<>0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, 4001, N'''', @DISC_USA, 0, @DISC_IQ, 0, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''('' + N''العميل : '' + @CLIENT_NAME + N'')'' + @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)
   
		 END 

-------------------------------------------------------------------------------------------------------

-- STORE BOX

INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[ACTIVE])

SELECT [BILL_BRANCH]
      ,[BILL_NUMBER]
	  ,(SELECT BILL_DATE FROM T_SALES WHERE BILL_NUMBER = @BILL_NUMBER)
	  ,2
	  ,0
	 ,[STORE_CODE]
	  ,NULL
	  ,[ITEM_CODE]
     ,ISNULL((SELECT TOP(1) UNIT_CODE FROM T_ITEM_UNIT WHERE (ITEM_CODE= (SELECT TOP(1) ITEM_CODE FROM [dbo].[T_SALES_DETAILS] WHERE BILL_NUMBER = @BILL_NUMBER AND ITEM_CODE=[T_SALES_DETAILS].ITEM_CODE AND UNIT_NAME LIKE [T_SALES_DETAILS].UNIT_NAME) )),1)
      ,0
	  ,[TOTAL_QTY]
      ,[UNIT_QTY]
      ,1
      
  FROM [dbo].[T_SALES_DETAILS] WHERE BILL_NUMBER = @BILL_NUMBER


 -------------------------------------------------------------------------------------------------------


-- FINISHED



AFTER_OFFERS:

  UPDATE [dbo].[T_APP_INVOICE] SET  [IS_INSERT] = 1, [BILL_BRANCH] = @COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), [BILL_NUMBER] = @BILL_NUMBER WHERE T_ID=@T_ID 
  
SET @SUBMIT_fLAG=1

RETTTTT:
COMMIT
	IF @@ERROR <>0
	BEGIN
	ROLLBACK 
 
	SET @SUBMIT_fLAG=0
	RETURN
	END

return
 
 

END	 ' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_INSERT_COUPON]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_INSERT_COUPON]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_INSERT_COUPON] 
		@COUPON_DISCOUNT_PERC float,
		
		@START_TIME datetime,
		@END_TIME datetime 

			 
 
	as
 DECLARE
 @BILL_COUPON INT,
 @length int=25,
 @CC_COUNT int,
		@COUPON_NO  nvarchar(max) 


BEGIN 

	-----------------------------------------------------
IF @COUPON_DISCOUNT_PERC>0
		BEGIN
NEXT_RND:
DECLARE @characters varchar(50) = ''ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'';
    DECLARE @random_string varchar(8000) = '''';
    DECLARE @counter int = 1;

    WHILE @counter <= @length
    BEGIN
        DECLARE @random_index int = CAST(RAND() * LEN(@characters) AS INT);
        DECLARE @random_character char(1) = SUBSTRING(@characters, @random_index, 1);

        SET @random_string += @random_character;
        SET @counter += 1;
    END

SELECT @CC_COUNT= COUNT(COUPON_CODE) FROM T_COUPON WHERE COUPON_NO LIKE @random_string
IF  @CC_COUNT=0
BEGIN
SET @COUPON_NO=@random_string
END
ELSE
BEGIN
GOTO NEXT_RND
END





 SELECT @BILL_COUPON =ISNULL(MAX(BILL_COUPON),0)+1 FROM T_COUPON




INSERT INTO [dbo].[T_COUPON] ([BILL_COUPON], [COUPON_NO], [COUPON_DISCOUNT_PERC], [COUPON_DISCOUNT_AMOUNT], [START_TIME], [END_TIME], [IS_USED], [BILL_NUMBER], [C_DATE]) VALUES (@BILL_COUPON, @COUPON_NO, @COUPON_DISCOUNT_PERC, 0, @START_TIME, @END_TIME, 0, 0, GETDATE())




	-----------------------------------------------------
 
 SELECT @COUPON_NO AS COUPON_NO
		SELECT 1 AS ID, N''successfully done , Inser Done ..  '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
		ELSE 
		BEGIN
		SELECT 0 AS ID, N''Error , Inser '' AS  N''Response'' FROM T_COUPON WHERE COUPON_CODE=-1
		RETURN
		END
	 
	
 



	end 

	

	


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_INSERT_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_INSERT_INVOICE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[P_API_INSERT_INVOICE]

@INFO NVARCHAR(MAX),
@DETAILS NVARCHAR(MAX),
@USER_CREATE NVARCHAR(MAX) 
 

AS
DECLARE
@BILL_NUMBER INT ,
@B_CODE INT,
@CURRANCY_CODE_INVOICE INT,
@CURRANCY_EQUAL_INVOICE FLOAT,
@CURRANCY_CODE_PRIMARY INT,
@BOX_USER INT,
@USER_CODE INT,


@COMPANY_TITAL NVARCHAR(MAX)


begin 
BEGIN TRANSACTION;
 
 
SET @B_CODE=2

IF LEN(ISNULL(@DETAILS,N''''))<10 GOTO RETTTTT
 
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
SELECT @CURRANCY_CODE_PRIMARY=CURRANCY_CODE  FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
 

SELECT TOP(1) @BOX_USER=ISNULL(BOX_CODE,5000),@USER_CODE=USER_CODE  FROM T_USERS WHERE USER_NAME LIKE @USER_CREATE AND ACTIVE=1
SET @BOX_USER=ISNULL(@BOX_USER,5000)
SET @USER_CODE=ISNULL(@USER_CODE,1)
SELECT @BILL_NUMBER=ISNULL(MAX(BILL_NUMBER),0) + 1 FROM T_SALES
SET @CURRANCY_CODE_INVOICE=(Select  max(case when name=''CURRANCY_CODE'' then convert(int,StringValue) else @CURRANCY_CODE_PRIMARY end) as [CURRANCY_CODE] 
From parseJSON
(
       @INFO
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID)
 -------------------------------------------------------------------------------------------------------
INSERT INTO [dbo].[T_SALES]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_INVOICE]
           ,[BILL_DATE]
           ,[OFFER_CODE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[CLIENT_CODE]
           ,[CLIENT_NAME]
           ,[CLIENT_PHONE]
           ,[CLIENT_ADRESS]
           ,[MANDOOB_CODE]
           ,[DESCRIPTION]
           ,[TYPE_PRICE_SELL]
           ,[STORE_CODE]
           ,[USER_CREATE]
           ,[SECURETY_CODE]
           ,[TOTAL_SALES]
           ,[DISCOUNT_ITEMS]
           ,[DISCOUNT_PERCENT]
           ,[DISCOUNT_AMOUNT]
           ,[TOTAL_DISCOUNT]
           ,[NET_SALES]
           ,[TOTAL_COST]
           ,[IVC_CODE]
           ,[DAY_CASH]
           ,[DATE_CASH]
           ,[TOT_CONV]
           ,[ACCOUNT_CODE]
           ,[CASH_USA]
           ,[REMAIN_USA]
           ,[CASH_IQ]
           ,[REMAIN_IQ]
           ,[C_DATE]
           ,[C_UPDATE]
           ,[USER_UPDATE]
           ,[ACTIVE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[FLAG_CASH]
           ,[IS_OUT]
           ,[CURRANCY_SALES]
           ,[IS_TRANS]
           ,[CENTER_CODE]
           ,[QR_DATA]
           ,[ITEM_ID_PAYMENT]
           ,[TAG_PROCCESS_CODE]
           ,[LINK_ID_PAYMENT]
           ,[BILL_RETURN]
           ,[BILL_SANAD_CNY]
           ,[CNY_IQ]
           ,[IS_PREPARE]
           ,[DRIVER_CODE]
           ,[LAT]
           ,[LNG]
           ,[STATUS_SHIPING]
           ,[MOVE_CODE]
           ,[BILL_ORDER]
           ,[TOTAL_TAX_ITEM]
           ,[TOTAL_MANDOOB_ITEM]
           ,[TOTAL_ADD_COST]
           ,[TOTAL_ADD_AMO]
           ,[SHIP_CODE]
           ,[COST_SHIP]
           ,[IS_POINT]
           ,[COST_SHIP_CLIENT]
           ,[USER_TAG_CODE]
           ,[RELATION_BILL_CODE]
           ,[RELATION_B_CODE]
           ,[REGION_CODE]
           ,[COL_INT1]
           ,[COL_INT2]
           ,[COL_INT3]
           ,[COL_STR1]
           ,[COL_STR2]
           ,[COL_STR3]
           ,[IS_PDF]
           ,[PATH_PDF]
           ,[PATH_PDF_API])
      Select
			@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max))  as [BILL_BRANCH]
           ,@BILL_NUMBER as [BILL_NUMBER]
           ,@BILL_NUMBER as [BILL_INVOICE]
           ,GETDATE() as [BILL_DATE]
           ,0 as [OFFER_CODE]
           , max(case when name=''CURRANCY_CODE'' then convert(int,StringValue) else @CURRANCY_CODE_PRIMARY end) as [CURRANCY_CODE]
           , max(case when name=''CURRANCY_EQUAL'' then convert(int,StringValue) else 1 end) as [CURRANCY_EQUAL]
           ,max(case when name=''CLIENT_CODE'' then convert(int,StringValue) else 0 end) as [CLIENT_CODE]
           ,max(case when name=''CLIENT_NAME'' then convert(nvarchar(max),StringValue) else N'''' end) as [CLIENT_NAME]
           ,max(case when name=''CLIENT_PHONE'' then convert(nvarchar(max),StringValue) else N'''' end) as [CLIENT_PHONE]
           ,max(case when name=''CLIENT_ADDRESS'' then convert(nvarchar(max),StringValue) else N'''' end) as [CLIENT_ADRESS]
           ,max(case when name=''MANDOOB_CODE'' then convert(int,StringValue) else 1 end) as [MANDOOB_CODE]
           ,max(case when name=''NOTE_ORDER'' then convert(nvarchar(max),StringValue) else N'''' end) as [DESCRIPTION]
           ,1 as [TYPE_PRICE_SELL]
           ,0 as [STORE_CODE]
           ,@USER_CREATE as [USER_CREATE]
           ,1 as [SECURETY_CODE]
           ,max(case when name=''TOTAL'' then convert(float,StringValue) else 0 end) as [TOTAL_SALES]
           ,0 as [DISCOUNT_ITEMS]
           ,0 as [DISCOUNT_PERCENT]
           ,max(case when name=''TOTAL_DISCOUNT'' then convert(float,StringValue) else 0 end) as [DISCOUNT_AMOUNT]
           ,max(case when name=''TOTAL_DISCOUNT'' then convert(float,StringValue) else 0 end) as [TOTAL_DISCOUNT]
           ,(max(case when name=''TOTAL'' then convert(float,StringValue) else 0 end) - max(case when name=''TOTAL_DISCOUNT'' then convert(float,StringValue) else 0 end)) as [NET_SALES]
           ,0 as [TOTAL_COST] -- FROM SUM
           ,max(case when name=''INVOICE_CODE'' then convert(int,StringValue) else 0 end) as [IVC_CODE]
           ,0 as [DAY_CASH]
           ,GETDATE() as [DATE_CASH]
           ,N'''' as [TOT_CONV]
           , @BOX_USER  as [ACCOUNT_CODE]
           ,IIF(@CURRANCY_CODE_INVOICE=1, max(case when name=''CASH_AMO'' then convert(float,StringValue) else 0 end),0) as [CASH_USA]
           ,IIF(@CURRANCY_CODE_INVOICE=1,max(case when name=''REMAIN_AMO'' then convert(float,StringValue) else 0 end),0) as [REMAIN_USA]
           ,IIF(@CURRANCY_CODE_INVOICE=2, max(case when name=''CASH_AMO'' then convert(float,StringValue) else 0 end),0) as [CASH_IQ]
           ,IIF(@CURRANCY_CODE_INVOICE=2,max(case when name=''REMAIN_AMO'' then convert(float,StringValue) else 0 end),0) as [REMAIN_IQ]
           ,GETDATE() as [C_DATE]
           ,N'''' as [C_UPDATE]
           ,N'''' as [USER_UPDATE]
           ,1 as [ACTIVE]
           ,0 as [IS_AVG_COST]
           ,0 as [AVG_COST]
           ,IIF( max(case when name=''REMAIN_AMO'' then convert(float,StringValue) else 0 end)=0,1,0) as [FLAG_CASH]
           ,1 as [IS_OUT]
           ,max(case when name=''CURRANCY_EQUAL'' then convert(int,StringValue) else 1 end) as [CURRANCY_SALES]
           ,0 as [IS_TRANS]
           ,0 as [CENTER_CODE]
           ,N'''' as [QR_DATA]
           ,N'''' as [ITEM_ID_PAYMENT]
           ,max(case when name=''INVOICE_STATUS'' then convert(int,StringValue) else 0 end)  as [TAG_PROCCESS_CODE]
           ,N'''' as [LINK_ID_PAYMENT]
           ,0 as [BILL_RETURN]
           ,0 as [BILL_SANAD_CNY]
           ,1 as [CNY_IQ]
           ,0 as [IS_PREPARE]
           ,max(case when name=''DRIVER_CODE'' then convert(int,StringValue) else 0 end) as [DRIVER_CODE]
           ,max(case when name=''LAT'' then convert(nvarchar(max),StringValue) else N'''' end) as [LAT]
           ,max(case when name=''LNG'' then convert(nvarchar(max),StringValue) else N'''' end) as [LNG]
           ,max(case when name=''STATUS_SHIPING'' then convert(int,StringValue) else 0 end) as [STATUS_SHIPING]
           ,0 as [MOVE_CODE]
           ,0 as [BILL_ORDER]
           ,0 as [TOTAL_TAX_ITEM]
           ,max(case when name=''TOTAL_MANDOOB_ITEM'' then convert(float,StringValue) else 0 end) as [TOTAL_MANDOOB_ITEM]
           ,max(case when name=''TOTAL_ADD_COST'' then convert(float,StringValue) else 0 end) as [TOTAL_ADD_COST]
           ,max(case when name=''TOTAL_ADD_AMO'' then convert(float,StringValue) else 0 end) as [TOTAL_ADD_AMO]
           ,max(case when name=''SHIP_CODE'' then convert(INT,StringValue) else 0 end) as [SHIP_CODE]
           ,max(case when name=''DELIVERYCOST'' then convert(float,StringValue) else 0 end) as [COST_SHIP]
           ,0 as [IS_POINT]
           ,max(case when name=''COST_SHIP_CLIENT'' then convert(float,StringValue) else 0 end) as [COST_SHIP_CLIENT]
           ,0 as [USER_TAG_CODE]
           ,0 as [RELATION_BILL_CODE]
           ,0 as [RELATION_B_CODE]
           ,max(case when name=''REGION_CODE'' then convert(int,StringValue) else 0 end) as [REGION_CODE]
           ,max(case when name=''COL_INT1'' then convert(int,StringValue) else 0 end) as [COL_INT1]
           ,max(case when name=''COL_INT2'' then convert(int,StringValue) else 0 end) as [COL_INT2]
           ,max(case when name=''COL_INT3'' then convert(int,StringValue) else 0 end) as [COL_INT3]
           ,max(case when name=''COL_STR1'' then convert(nvarchar(max),StringValue) else N'''' end) as [COL_STR1]
           ,max(case when name=''COL_STR2'' then convert(nvarchar(max),StringValue) else N'''' end) as [COL_STR2]
           ,max(case when name=''COL_STR3'' then convert(nvarchar(max),StringValue) else N'''' end) as [COL_STR3]
           ,0 as [IS_PDF]
           ,N'''' as [PATH_PDF]
           ,N'''' as [PATH_PDF_API]


From parseJSON
(
       @INFO
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID

 -------------------------------------------------------------------------------------------------------
 select top(1) @CURRANCY_CODE_INVOICE =CURRANCY_CODE,@CURRANCY_EQUAL_INVOICE=CURRANCY_EQUAL  from T_SALES where BILL_NUMBER=@BILL_NUMBER
INSERT INTO [dbo].[T_SALES_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[TOTAL]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY]
           ,[ITEM_NOTE_SALES]
           ,[NOTE_PRINT]
           ,[IS_PRINT]
           ,[USER_PREPARE]
           ,[USER_CUT]
           ,[DISCOUNT_TYPE]
           ,[IS_SERIAL]
           ,[IS_TAX]
           ,[TAX_PERCENT_ITEM]
           ,[TAX_AMO_ITEM]
           ,[IS_MANDOOB]
           ,[MANDOOB_PERCENT_ITEM]
           ,[MANDOOB_AMO_ITEM]
           ,[IS_ITEM_AREA]
           ,[WIDTH_CM]
           ,[LENGTH_CM]
           ,[AREA_M2]
           ,[QTY_AREA]
           ,[QTY_XZ]
           ,[UNIT_QTY_XZ]
           ,[QTY_X1]
           ,[UNIT_QTY_X1]
           ,[QTY_XY]
           ,[UNIT_QTY_XY]
           ,[NOTE_PRINT_2]
           ,[K_STORE_ITEM_CODE]
           ,[K_STORE_COST]
           ,[K_STORE_SELL]
           ,[K_PRINT_ITEM_CODE]
           ,[K_PRINT_COST]
           ,[K_PRINT_SELL]
           ,[K_MODEL_ITEM_CODE]
           ,[K_MODEL_COST]
           ,[K_MODEL_SELL]
           ,[K_MOTOR_ITEM_CODE]
           ,[K_MOTOR_COST]
           ,[K_MOTOR_SELL]
           ,[K_HABEL_ITEM_CODE]
           ,[K_HABEL_COST]
           ,[K_HABEL_SELL]
           ,[K_STORE_TOTAL]
           ,[K_PRINT_TOTAL]
           ,[K_MODEL_TOTAL]
           ,[K_MOTOR_TOTAL]
           ,[K_HABEL_TOTAL]
           ,[K_MODEL_TOTAL_COST]
           ,[QTY_FREE]
           ,[TOTAL_QTY])
 Select
       @COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max))  as [BILL_BRANCH]
           ,@BILL_NUMBER as [BILL_NUMBER]
           ,max(case when name=''ITEM_CODE'' then convert(int,StringValue) else -1 end) as [ITEM_CODE]
           ,max(case when name=''ITEM_NAME'' then convert(nvarchar(max),StringValue) else N'''' end) as [ITEM_NAME]
           ,max(case when name=''QTY'' then convert(float,StringValue) else 0 end) as [QTY]
           ,max(case when name=''UNIT_NAME'' then convert(nvarchar(max),StringValue) else N'''' end) as [UNIT_NAME]
           ,max(case when name=''UNIT_QTY'' then convert(float,StringValue) else 0 end) as [UNIT_QTY]
           ,max(case when name=''STORE_CODE'' then convert(int,StringValue) else 0 end) as [STORE_CODE]
           ,-999999 as [WAJBA_CODE]
           ,N'''' as [WAJBA_NAME]
           ,N'''' as [WAJBA_BALANCE]
           ,@CURRANCY_CODE_INVOICE as [CURRANCY_CODE]
           ,@CURRANCY_EQUAL_INVOICE as [CURRANCY_EQUAL]
           ,max(case when name=''PRICE_COST'' then convert(float,StringValue) else 0 end) as [COST]
           ,max(case when name=''PRICE'' then convert(float,StringValue) else 0 end) as [PRICE]
           ,(max(case when name=''PRICE'' then convert(float,StringValue) else 0 end) * max(case when name=''QTY'' then convert(float,StringValue) else 0 end)) as [TOTAL]
           ,max(case when name=''DISC_PERCENT'' then convert(float,StringValue) else 0 end) as [DISCOUNT_PERCENT_ITEM]
           ,max(case when name=''DISC_AMO'' then convert(float,StringValue) else 0 end) as [DISCOUNT_AMOUNT_ITEM]
           ,GETDATE() as [C_DATE]
           ,1 as [ACTIVE]
           ,-999999 as [BILL_BUY]
           ,max(case when name=''ITEM_NOTE'' then convert(nvarchar(max),StringValue) else N'''' end) as [ITEM_NOTE_SALES]
           ,max(case when name=''ITEM_NOTE'' then convert(nvarchar(max),StringValue) else N'''' end) as [NOTE_PRINT]
           ,0 as [IS_PRINT]
           ,N'''' as [USER_PREPARE]
           ,N'''' as [USER_CUT]
           ,0 as [DISCOUNT_TYPE]
           ,0 as [IS_SERIAL]
           ,0 as [IS_TAX]
           ,max(case when name=''TAX_PERCENT_ITEM'' then convert(float,StringValue) else 0 end) as [TAX_PERCENT_ITEM]
           ,max(case when name=''TAX_AMO_ITEM'' then convert(float,StringValue) else 0 end) as [TAX_AMO_ITEM]
           ,max(case when name=''IS_MANDOOB'' then convert(bit,StringValue) else 0 end) as [IS_MANDOOB]
           ,max(case when name=''MANDOOB_PERCENT_ITEM'' then convert(nvarchar(max),StringValue) else 0 end) as [MANDOOB_PERCENT_ITEM]
           ,IIF(max(case when name=''IS_MINUS_MANDOOB'' then convert(int,StringValue) else 0 end)=0, (max(case when name=''totalNetProfitMandob'' then convert(float,StringValue) else 0 end)/ max(case when name=''QTY'' then convert(float,StringValue) else 0 end)),(max(case when name=''totalNetProfitMandob'' then convert(float,StringValue) else 0 end)/ max(case when name=''QTY'' then convert(float,StringValue) else 0 end))*-1) as [MANDOOB_AMO_ITEM]
           ,0 as [IS_ITEM_AREA]
           ,0 as [WIDTH_CM]
           ,0 as [LENGTH_CM]
           ,0 as [AREA_M2]
           ,1 as [QTY_AREA]
           ,0 as [QTY_XZ]
           ,0 as [UNIT_QTY_XZ]
           ,0 as [QTY_X1]
           ,0 as [UNIT_QTY_X1]
           ,0 as [QTY_XY]
           ,0 as [UNIT_QTY_XY]
           ,N'''' as [NOTE_PRINT_2]
           ,0 as [K_STORE_ITEM_CODE]
           ,0 as [K_STORE_COST]
           ,0 as [K_STORE_SELL]
           ,0 as [K_PRINT_ITEM_CODE]
           ,0 as [K_PRINT_COST]
           ,0 as [K_PRINT_SELL]
           ,0 as [K_MODEL_ITEM_CODE]
           ,0 as [K_MODEL_COST]
           ,0 as [K_MODEL_SELL]
           ,0 as [K_MOTOR_ITEM_CODE]
           ,0 as [K_MOTOR_COST]
           ,0 as [K_MOTOR_SELL]
           ,0 as [K_HABEL_ITEM_CODE]
           ,0 as [K_HABEL_COST]
           ,0 as [K_HABEL_SELL]
           ,0 as [K_STORE_TOTAL]
           ,0 as [K_PRINT_TOTAL]
           ,0 as [K_MODEL_TOTAL]
           ,0 as [K_MOTOR_TOTAL]
           ,0 as [K_HABEL_TOTAL]
           ,0 as [K_MODEL_TOTAL_COST]
           ,max(case when name=''QTY_FREE'' then convert(float,StringValue) else 0 end) as [QTY_FREE]
           ,max(case when name=''QTY'' then convert(float,StringValue) else 0 end)+max(case when name=''QTY_FREE'' then convert(float,StringValue) else 0 end)  as [TOTAL_QTY]



From parseJSON
(
       @DETAILS
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID
 
 
 -------------------------------------------------------------------------------------------------------

 DECLARE @TOTAL_COST FLOAT ,
 @TOTAL_MANDOOB_ITEM FLOAT,
 @TOTAL_TAX_ITEMS FLOAT,
 @NET_TOTAL FLOAT,
 @CASH_USA FLOAT,
 @CASH_IQ FLOAT,
 @TOTAL_DISCOUNT FLOAT,
 @MANDOOB_CODE INT,
 @SHIP_CODE INT,
@IVC_CODE INT,
 
@CLIENT_NAME NVARCHAR(MAX) ,
 @DESCRIPTION NVARCHAR(MAX)

  SELECT @IVC_CODE =IVC_CODE,@NET_TOTAL=ISNULL(NET_SALES,0),@CASH_USA=ISNULL(CASH_USA,0),@CASH_IQ=ISNULL(CASH_IQ,0) ,@MANDOOB_CODE=ISNULL(MANDOOB_CODE,1),@DESCRIPTION=DESCRIPTION,@SHIP_CODE=SHIP_CODE,@CLIENT_NAME=CLIENT_NAME,@TOTAL_DISCOUNT=TOTAL_DISCOUNT  FROM T_SALES  WHERE BILL_NUMBER=@BILL_NUMBER
 IF @IVC_CODE=2
 BEGIN
 UPDATE T_SALES SET CASH_USA=0,CASH_IQ=0 WHERE BILL_NUMBER=@BILL_NUMBER
 IF @CURRANCY_CODE_INVOICE=1
 BEGIN
  UPDATE T_SALES SET REMAIN_IQ=0,REMAIN_USA=@NET_TOTAL WHERE BILL_NUMBER=@BILL_NUMBER
 END
 ELSE
 BEGIN
 
 UPDATE T_SALES SET REMAIN_USA=0,REMAIN_IQ=@NET_TOTAL WHERE BILL_NUMBER=@BILL_NUMBER
 END
 SET @CASH_USA=0
 SET @CASH_IQ=0
 END
 
 SELECT @TOTAL_COST=ISNULL(SUM(TOTAL_COST),0),@TOTAL_MANDOOB_ITEM=ISNULL(SUM(TOTAL_MANDOOB_ITEM),0),@TOTAL_TAX_ITEMS=ISNULL(SUM(TOTAL_TAX_ITEM),0) FROM T_SALES_DETAILS WHERE BILL_NUMBER=@BILL_NUMBER
UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST,TOTAL_MANDOOB_ITEM=@TOTAL_MANDOOB_ITEM,TOTAL_TAX_ITEM=@TOTAL_TAX_ITEMS WHERE BILL_NUMBER=@BILL_NUMBER


 -------------------------------------------------------------------------------------------------------
DECLARE
@REGION_CODE INT,
@COST_SHIP FLOAT=0,
@COST_SHIP_CLIENT FLOAT=0
SELECT @REGION_CODE=REGION_CODE FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER
IF @REGION_CODE<>0
BEGIN
SELECT  @COST_SHIP_CLIENT=ISNULL(REGION_COST,0) FROM T_REGION_SHIP WHERE REGION_CODE=@REGION_CODE
SELECT @COST_SHIP= ISNULL(REGION_SELL,0) FROM T_REGION_SHIP WHERE REGION_CODE=@REGION_CODE
UPDATE T_SALES SET COST_SHIP=@COST_SHIP,COST_SHIP_CLIENT=@COST_SHIP_CLIENT WHERE BILL_NUMBER=@BILL_NUMBER
END

 -------------------------------------------------------------------------------------------------------
  DECLARE @CNU_EQUL_IQ FLOAT = (SELECT ISNULL(CURRANCY_EQUAL,1)  FROM T_CURRANNCY WHERE CURRANCY_CODE=2),
          @CNU_EQUL_USA As FLOAT = (SELECT ISNULL(CURRANCY_EQUAL,1)  FROM T_CURRANNCY WHERE CURRANCY_CODE=1)

 -------------------------------------------------------------------------------------------------------
DECLARE

@IS_COST_SHIP BIT,
@COST_SHIP_MANDOOB FLOAT=0,
@COST_SHIP_EXP FLOAT=0
SELECT @IVC_CODE=IVC_CODE FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER
IF @IVC_CODE=10 GOTO AFTER_OFFERS

 DECLARE @D_USA FLOAT=0, @C_USA FLOAT=0,  @D_IQ FLOAT=0, @C_IQ FLOAT=0, @CURR_EQUL FLOAT=0, @DOOB_USA FLOAT=0, @DOOB_IQ FLOAT=0, @TAX_USA FLOAT=0, @TAX_IQ FLOAT=0, @SHIP_USA FLOAT=0, @SHIP_IQ FLOAT=0, @SHIP_USA_CRE FLOAT=0, @SHIP_IQ_CRE FLOAT=0, @MANDOOB_SHIP_USA FLOAT=0, @MANDOOB_SHIP_IQ FLOAT=0,@DISC_USA FLOAT=0, @DISC_IQ FLOAT=0
   SELECT @IS_COST_SHIP=ISNULL(IS_COST_SHIP,0) FROM T_MANDOOB WHERE MANDOOB_CODE=@MANDOOB_CODE
   SET @COST_SHIP_EXP=@COST_SHIP
 If @IS_COST_SHIP = 1 
 BEGIN
             SET   @COST_SHIP_MANDOOB = @COST_SHIP
              SET  @COST_SHIP_EXP = 0
            End 

If @CURRANCY_CODE_INVOICE = 1 
BEGIN
                       SET @DOOB_USA = @TOTAL_MANDOOB_ITEM
                        SET @TAX_USA = @TOTAL_TAX_ITEMS
                        SET @D_USA = @NET_TOTAL
                       SET  @C_USA = @COST_SHIP_CLIENT + @CASH_USA + (@CASH_IQ / @CNU_EQUL_IQ)
                        SET  @D_IQ = 0
                        SET  @C_IQ = 0
                        SET  @SHIP_USA = @COST_SHIP
                        SET  @SHIP_IQ = 0
                        SET  @SHIP_USA_CRE = @COST_SHIP - @COST_SHIP_CLIENT
                        SET  @SHIP_IQ_CRE = 0

                        SET  @MANDOOB_SHIP_USA = @COST_SHIP_MANDOOB
                        SET  @MANDOOB_SHIP_IQ = 0
				 SET  @CURR_EQUL = @CNU_EQUL_IQ
				 set @DISC_USA=@TOTAL_DISCOUNT
				 set @DISC_IQ=0
END
ELSE 
If @CURRANCY_CODE_INVOICE = 2 
BEGIN
						 SET  @D_USA = 0
                         SET  @C_USA = 0
                         SET  @D_IQ = @NET_TOTAL
                         SET  @C_IQ = @COST_SHIP_CLIENT + @CASH_IQ + @CASH_USA / (1 / @CNU_EQUL_USA)
                         SET  @DOOB_IQ = @TOTAL_MANDOOB_ITEM
                        SET  @TAX_IQ = @TOTAL_TAX_ITEMS
                         SET  @SHIP_USA = 0
                         SET  @SHIP_IQ = @COST_SHIP_EXP
                         SET  @SHIP_USA_CRE = 0
                         SET  @SHIP_IQ_CRE = @COST_SHIP - @COST_SHIP_CLIENT
                         SET  @MANDOOB_SHIP_USA = 0
                         SET  @MANDOOB_SHIP_IQ = @COST_SHIP_MANDOOB
                  SET  @CURR_EQUL = @CNU_EQUL_USA

				   set @DISC_USA=0
				 set @DISC_IQ=@TOTAL_DISCOUNT
END 

 -------------------------------------------------------------------------------------------------------
 DECLARE @ACCOUNT_SHIP Int = 1,
         @IS_AMO_MANDOOB INT = 1,
         @IS_AMO_CLIENT As INT = 1

SELECT @ACCOUNT_SHIP=ISNULL(ACCOUNT_CODE,0),@IS_AMO_MANDOOB=IS_AMO_MANDOOB,@IS_AMO_CLIENT=IS_AMO_CLIENT FROM T_SALES_SHIPPING WHERE SHIP_CODE=@SHIP_CODE
 -------------------------------------------------------------------------------------------------------
  
 -- supplier
 DECLARE
 @CLIENT_CODE INT 
 SELECT @CLIENT_CODE=CLIENT_CODE FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER
          
	INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
	VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @CLIENT_CODE, N'''', @D_USA, @C_USA, @D_IQ, @C_IQ, @CURRANCY_CODE_INVOICE, @CURR_EQUL,  @DESCRIPTION, 0, @USER_CODE, GETDATE(), @IS_AMO_CLIENT)
                 
-------------------------------------------------------------------------------------------------------

--عمولات المندوب
            
DECLARE
  @MANDOOB_ACCOUNT INT ,
  @MANDOOB_NAME NVARCHAR(MAX)
			   SELECT TOP(1) @MANDOOB_ACCOUNT=ACCOUNT_CODE,@MANDOOB_NAME=MANDOOB_NAME  FROM T_MANDOOB WHERE MANDOOB_CODE=@MANDOOB_CODE
  If (@TOTAL_MANDOOB_ITEM <> 0 Or @COST_SHIP_MANDOOB <> 0) And @MANDOOB_ACCOUNT <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @MANDOOB_ACCOUNT, N'''', @MANDOOB_SHIP_USA, @DOOB_USA, @MANDOOB_SHIP_IQ, @DOOB_IQ, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''عمولة المندوب : ''+ @MANDOOB_NAME + N''/'' + N''للعميل : '' + @CLIENT_NAME, 0, @USER_CODE, GETDATE(), @IS_AMO_MANDOOB)
   
		 END
-------------------------------------------------------------------------------------------------------

--TAX
            
DECLARE
  @TAX_ACCOUNT INT=(SELECT TOP(1) ISNULL(CLIENT_CODE,0)  FROM T_CLIENT WHERE CLIENT_TYPE=8 AND CLIENT_ACTIVE=1)  
   If  @TOTAL_TAX_ITEMS <> 0   And @TAX_ACCOUNT <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @TAX_ACCOUNT, N'''', 0, @TAX_USA, 0, @TAX_IQ, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''ضريبة الفاتورة ''  + N''/'' + N''للعميل : '' + @CLIENT_NAME, 0, @USER_CODE, GETDATE(), 1)
   
		 END                     

-------------------------------------------------------------------------------------------------------

--COST_SHIP ACCOUNT
            
 SET @COST_SHIP_EXP=@COST_SHIP_EXP + @COST_SHIP - @COST_SHIP_CLIENT

   If  @COST_SHIP_EXP <> 0 And @ACCOUNT_SHIP <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @ACCOUNT_SHIP, N'''', @SHIP_USA, @SHIP_USA_CRE, @SHIP_IQ, @SHIP_IQ_CRE, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''كلفة توصيل الفاتورة ''  + N''/'' + N''للعميل : '' + @CLIENT_NAME, 0, @USER_CODE, GETDATE(), @IS_AMO_CLIENT)
   
		 END                     

-------------------------------------------------------------------------------------------------------

--CASH
            
 SET @COST_SHIP_EXP=@COST_SHIP_EXP + @COST_SHIP - @COST_SHIP_CLIENT

   If  @CASH_USA <> 0 OR @CASH_IQ <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @BOX_USER, N'''', @CASH_USA, 0, @CASH_IQ, 0, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''('' + N''العميل : '' + @CLIENT_NAME + N'')'' + @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)
   
		 END 
-------------------------------------------------------------------------------------------------------

-- DISCOUNT
            
 SET @COST_SHIP_EXP=@COST_SHIP_EXP + @COST_SHIP - @COST_SHIP_CLIENT

   If  @TOTAL_DISCOUNT<>0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, 4001, N'''', @DISC_USA, 0, @DISC_IQ, 0, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''('' + N''العميل : '' + @CLIENT_NAME + N'')'' + @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)
   
		 END 

-------------------------------------------------------------------------------------------------------

-- STORE BOX

INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[ACTIVE])

SELECT [BILL_BRANCH]
      ,[BILL_NUMBER]
	  ,(SELECT BILL_DATE FROM T_SALES WHERE BILL_NUMBER = @BILL_NUMBER)
	  ,2
	  ,0
	 ,[STORE_CODE]
	  ,NULL
	  ,[ITEM_CODE]
     ,ISNULL((SELECT TOP(1) UNIT_CODE FROM T_ITEM_UNIT WHERE (ITEM_CODE= (SELECT TOP(1) ITEM_CODE FROM [dbo].[T_SALES_DETAILS] WHERE BILL_NUMBER = @BILL_NUMBER AND ITEM_CODE=[T_SALES_DETAILS].ITEM_CODE AND UNIT_NAME LIKE [T_SALES_DETAILS].UNIT_NAME) )),1)
      ,0
	  ,[TOTAL_QTY]
      ,[UNIT_QTY]
      ,1
      
  FROM [dbo].[T_SALES_DETAILS] WHERE BILL_NUMBER = @BILL_NUMBER


 -------------------------------------------------------------------------------------------------------


-- FINISHED



AFTER_OFFERS:

 
SELECT @BILL_NUMBER AS ID, N''عملية الاضافة , تمت بنجاح ..  '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000

RETTTTT:
COMMIT
	IF @@ERROR <>0
	BEGIN
	SELECT 0 AS ID, N''خطأ في عملية الاضافة ..  '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
	ROLLBACK 
 
SELECT 0 AS ID, N''خطأ في عملية الاضافة ..  '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
	RETURN
	END

return
 

END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_INSERT_NOTE_BILL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_INSERT_NOTE_BILL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_INSERT_NOTE_BILL] 

			@B_CODE  int,
           @BILL_NUMBER  int,
           @NOTE  nvarchar(max),
           @USER_CREATE  nvarchar(max), 
           @ACCOUNT_CODE  int,
           @REMAINDER_DATE  date,
           @IS_DONE  bit, 
           @NOTE_TYPE  nvarchar(max),
           @ATTACH_PATH  nvarchar(max),
           @MAIN_ID  int,
           @BY_APP  int,
           @BY_TRACKING  int,
           @ACTIVE  bit
 
	as
 

	-----------------------------------------------------
	 
	BEGIN 
		IF LEN(@NOTE)>0 OR  LEN(@ATTACH_PATH)>0
		BEGIN
		INSERT INTO [dbo].[T_NOTES]
           ([B_CODE]
           ,[BILL_NUMBER]
           ,[NOTE]
           ,[USER_CREATE]
           ,[C_DATE]
           ,[ACCOUNT_CODE]
           ,[REMAINDER_DATE]
           ,[IS_DONE]
           ,[MAWJOOD_ID_TASK]
           ,[NOTE_TYPE]
           ,[ATTACH_PATH]
           ,[MAIN_ID]
           ,[BY_APP]
           ,[BY_TRACKING]
           ,[ACTIVE])
     VALUES
           (@B_CODE 
           ,@BILL_NUMBER 
           ,@NOTE 
           ,@USER_CREATE 
           ,GETDATE() 
           ,@ACCOUNT_CODE 
           ,@REMAINDER_DATE 
           ,@IS_DONE 
           ,N'''' 
           ,@NOTE_TYPE 
           ,@ATTACH_PATH 
           ,@MAIN_ID 
           ,@BY_APP 
           ,@BY_TRACKING 
           ,@ACTIVE )

		SELECT 1 AS ID, N''successfully done , Inser Done ..  '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
		ELSE 
		BEGIN
		SELECT 0 AS ID, N''Error , Inser '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
	 
	
 



	end 

	

	

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_INSERT_ORDER_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_INSERT_ORDER_INVOICE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE proc [dbo].[P_API_INSERT_ORDER_INVOICE] 

			 @INFO nvarchar(max),
             @DETAILS nvarchar(max),
			 @USER_CREATE nvarchar(max),
			 @TOKEN_APP nvarchar(max),
             @B_CODE int

			 
 
	as
 DECLARE
 @BRANCH nvarchar(max)
 SELECT @BRANCH=COMPANY_TITAL FROM T_COMPANY  WHERE T_ID=1
	-----------------------------------------------------
	 
	BEGIN 
		IF LEN(@INFO)>0 OR  LEN(@DETAILS)>0
		BEGIN
	INSERT INTO [dbo].[T_APP_INVOICE]
           ([D_DATE]
           ,[D_TIME]
           ,[INFO]
           ,[DETAILS]
           ,[B_CODE]
           ,[IS_INSERT]
           ,[BILL_GIUD]
           ,[BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[CLIENT_NAME]
           ,[CLIENT_PHONE]
           ,[CLIENT_ADDRESS]
           ,[B_NAME]
           ,[USER_CREATE]
           ,[DEVICE_ID]
           ,[IS_ACCEPT]
           ,[TOKEN_APP]
           ,[BRANCH]
           ,[USER_NAME])
     VALUES
           (GETDATE()
           ,GETDATE()
           ,@INFO 
           ,@DETAILS 
           ,@B_CODE 
           ,0
           ,N''''
           ,N''''
           ,0
          ,N''''
           ,N''''
           ,N''''
           ,N''''
           ,@USER_CREATE 
           ,N''''
           ,0
           ,@TOKEN_APP 
           ,@BRANCH 
           ,@USER_CREATE)

		SELECT (SELECT MAX(T_ID) FROM T_APP_INVOICE ) AS ID, N''successfully done , Inser Done ..  '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
		ELSE 
		BEGIN
		SELECT 0 AS ID, N''Error , Inser '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
	 
	
 



	end 

	

	




' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MAINTENANCE_GET_ALL_USERS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MAINTENANCE_GET_ALL_USERS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_MAINTENANCE_GET_ALL_USERS]
 
AS
BEGIN
	SELECT USER_NAME,USER_PWD,PERMISSION,USER_CODE FROM T_USERS WHERE   ACTIVE =1
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MAINTENANCE_UPDATE_USER_PERMISSION]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MAINTENANCE_UPDATE_USER_PERMISSION]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_MAINTENANCE_UPDATE_USER_PERMISSION]
    @PERMISSION NVARCHAR(MAX),
    @USER_CODE INT 
AS
BEGIN
  IF @USER_CODE = 0
    BEGIN
        UPDATE T_USERS SET PERMISSION = @PERMISSION;
    END
    ELSE
    BEGIN
        UPDATE T_USERS SET PERMISSION = @PERMISSION  WHERE USER_CODE = @USER_CODE;
        IF @@ROWCOUNT = 0
        BEGIN
            RAISERROR('''', 16, 1);
            RETURN;
        END
    END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_ADD_CLIENTS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_ADD_CLIENTS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE [dbo].[P_API_MANDOOB_ADD_CLIENTS]
@CLIENT_CODE INT,
@CLIENT_NAME NVARCHAR(MAX),
@CLIENT_TYPE INT,
@MANDOOB_CODE INT,
@CLIENT_PHONE NVARCHAR(MAX),
@CLIENT_EMAILE NVARCHAR(MAX),
@CLIENT_REGION NVARCHAR(MAX),
@CLIENT_ADDRESS NVARCHAR(MAX),
@CLIENT_BARCODE NVARCHAR(MAX),
@CLIENT_NOTE NVARCHAR(MAX),
@CLIENT_BUSINESS NVARCHAR(MAX),
@DISCOUNT_PERCENT  float ,
@USER_CREATE NVARCHAR(MAX),
@LAT NVARCHAR(MAX),
@LNG NVARCHAR(MAX),
@TYPE_PRICE_CODE INT,
@BALANCE_FIRST_USA float ,
@BALANCE_FIRST_IQ float  


AS
declare
@COUNT_NAME  INT,
@USER_CODE  INT,
@CURRANCY_CODE  INT,
@CURRANCY_USA float	,
@CURRANCY_IQ float	,
@CURRANCY_EQUAL float	,
@COMPANY_TITAL   NVARCHAR(MAX),
@DFF int

BEGIN TRAN
BEGIN
 SET @MANDOOB_CODE=1
SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1

IF @CLIENT_CODE=2
BEGIN
SELECT @COUNT_NAME=COUNT(CLIENT_CODE)  FROM T_CLIENT WHERE CLIENT_PHONE=@CLIENT_PHONE
IF @COUNT_NAME>0
BEGIN
SELECT 0 AS ID, N''رقم الهاتف مضاف مسبقاً'' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
GOTO FINISH_ADD
END
ELSE
BEGIN
SET @CLIENT_NAME=@CLIENT_NAME + N'' - '' +@CLIENT_PHONE
END

SELECT @CLIENT_CODE= ISNULL(MAX(CLIENT_CODE),2100000) + 1 FROM T_CLIENT
END



IF @CLIENT_CODE=0
BEGIN
SELECT @COUNT_NAME=COUNT(CLIENT_CODE)  FROM T_CLIENT WHERE CLIENT_NAME=@CLIENT_NAME
IF @COUNT_NAME>0
BEGIN
SELECT 0 AS ID, N''اسم العميل مضاف مسبقاً'' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
GOTO FINISH_ADD
END
SELECT @CLIENT_CODE= ISNULL(MAX(CLIENT_CODE),2100000) + 1 FROM T_CLIENT
END

if not exists (select * from T_ACCOUNTS where ACCOUNT_CODE = @CLIENT_CODE )  INSERT INTO [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [C_DATE], [ACCOUNT_ACTIVE]) 
VALUES (@CLIENT_CODE, @CLIENT_NAME, 21, 1, 1, @CURRANCY_CODE, 2, 3, N'''', 3, 1, GETDATE(), 1)  
else 
UPDATE [dbo].[T_ACCOUNTS] SET [ACCOUNT_CODE] = @CLIENT_CODE, [ACCOUNT_NAME] = @CLIENT_NAME, [ACCOUNT_PARENT] = 21, [TYPE_ACCOUNT_CODE] = 1, [BRANCH_CODE] = 1, [CURRANCY_CODE] = @CURRANCY_CODE, [FINAL_CODE] = 2, [ACCOUNT_LEVEL] = 3, [ACCOUNT_NOTE] = N'''', [SECURETY_CODE] = 1, [ACCOUNT_ENTITY] = 1,  [ACCOUNT_ACTIVE] = 1  WHERE ACCOUNT_CODE=@CLIENT_CODE  


if not exists (select * from T_CLIENT where CLIENT_CODE = @CLIENT_CODE )  INSERT INTO [dbo].[T_CLIENT] ([CLIENT_CODE], [CLIENT_NAME], [CLIENT_TYPE], [ACCOUNT_CODE], [CURRANCY_CODE], [MANDOOB_CODE], [CLIENT_PHONE], [CLIENT_PHONE_SMS], [CLIENT_EMAILE], [CLIENT_REGION], [CLIENT_ADDRESS], [CLIENT_BARCODE], [CLIENT_CARD], [CLIENT_NOTE], [CLIENT_PIN_CODE], [DISCOUNT_PERCENT], [SECURETY_CODE], [MAX_DEBIT],  [CLIENT_BUSINESS],[CLIENT_ACTIVE], [C_DATE], [C_USER], [LAT], [LNG], [TYPE_PRICE_CODE])
 VALUES (@CLIENT_CODE, @CLIENT_NAME, @CLIENT_TYPE, @CLIENT_CODE, @CURRANCY_CODE, @MANDOOB_CODE, @CLIENT_PHONE, N'''', @CLIENT_EMAILE, @CLIENT_REGION, @CLIENT_ADDRESS, @CLIENT_BARCODE, N'''', @CLIENT_NOTE, N'''', @DISCOUNT_PERCENT, 1, 0, @CLIENT_BUSINESS, 1, GETDATE(), @USER_CREATE,@LAT,@LNG,@TYPE_PRICE_CODE)   
 else 
 UPDATE [dbo].[T_CLIENT] SET [CLIENT_CODE] = @CLIENT_CODE, [CLIENT_NAME] = @CLIENT_NAME, [CLIENT_TYPE] = @CLIENT_TYPE, [ACCOUNT_CODE] = @CLIENT_CODE, [CURRANCY_CODE] = @CURRANCY_CODE, [MANDOOB_CODE] = @MANDOOB_CODE, [CLIENT_PHONE] = @CLIENT_PHONE, [CLIENT_PHONE_SMS] = N'''', [CLIENT_EMAILE] = @CLIENT_EMAILE, [CLIENT_REGION] = @CLIENT_REGION, [CLIENT_ADDRESS] = @CLIENT_ADDRESS, [CLIENT_BARCODE] = @CLIENT_BARCODE, [CLIENT_CARD] = N'''', [CLIENT_NOTE] = @CLIENT_NOTE, [CLIENT_PIN_CODE] = N'''', [DISCOUNT_PERCENT] = @DISCOUNT_PERCENT, [SECURETY_CODE] = 1, [MAX_DEBIT] = 0, [CLIENT_BUSINESS] = @CLIENT_BUSINESS, [CLIENT_ACTIVE] = 1, [C_DATE] = GETDATE(), [C_USER] = @USER_CREATE, [LAT] = @LAT, [LNG] = @LNG, [TYPE_PRICE_CODE] = @TYPE_PRICE_CODE WHERE CLIENT_CODE=@CLIENT_CODE

 IF @BALANCE_FIRST_IQ<>0 OR @BALANCE_FIRST_USA <>0
 BEGIN
 DELETE FROM T_BOX WHERE BILL_NUMBER=0  AND B_CODE=13 AND  ACCOUNT_CODE=@CLIENT_CODE
 IF @CURRANCY_CODE=1
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=1/NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_IQ
END

ELSE
BEGIN
SELECT @CURRANCY_USA=NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_USA
END
SELECT TOP(1) @USER_CODE=ISNULL(USER_CODE,1) FROM T_USERS WHERE [USER_NAME] LIKE @USER_CREATE
INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE]) 
VALUES (@COMPANY_TITAL + N''0'', 0,N'''', (SELECT TOP(1)  ISNULL(MIN(BILL_DATE),GETDATE())  FROM T_BOX ), GETDATE(), 0, 13, 1, @CLIENT_CODE, N'''', @BALANCE_FIRST_USA, 0, @BALANCE_FIRST_IQ, 0, @CURRANCY_CODE, @CURRANCY_EQUAL,  N''الرصيد الافتتاحي'', 0, @USER_CODE, GETDATE(), 1)
 END

FINISH_ADD:
END	--END OF PROGRAM
commit
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_ADD_MANDOOB_VISITS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_ADD_MANDOOB_VISITS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_MANDOOB_ADD_MANDOOB_VISITS]
      @CLIENT_CODE  int 
           ,@CLIENT_BARCODE  nvarchar(50)  
           ,@LAT  nvarchar(max)   
           ,@LNG  nvarchar(max)  
           ,@USER_CODE  int  
           ,@MANDOOB_CODE  int  
           ,@D_DATE  date  
           ,@D_TIME  time(7) ,
        @NOTE  nvarchar(max)  



AS

IF @CLIENT_CODE = 0 
BEGIN
  SELECT @CLIENT_CODE = CLIENT_CODE FROM T_CLIENT WHERE CLIENT_BARCODE = @CLIENT_BARCODE;
END
 
BEGIN TRAN
BEGIN
INSERT INTO [dbo].[T_MANDOOB_VISITS]
           ([CLIENT_CODE]
           ,[CLIENT_BARCODE]
           ,[LAT]
           ,[LNG]
           ,[USER_CODE]
           ,[MANDOOB_CODE]
           ,[D_DATE]
           ,[D_TIME]
       ,[NOTE])
     VALUES
           (@CLIENT_CODE 
           ,@CLIENT_BARCODE 
           ,ISNULL(@LAT ,N'''')
           ,ISNULL(@LNG ,N'''')
           ,@USER_CODE 
           ,@MANDOOB_CODE 
           ,@D_DATE 
           ,@D_TIME 
       ,@NOTE)
 
  IF @@ROWCOUNT = 0
  BEGIN
  RAISERROR('''', 16, 1);
  RETURN;
  END

END
COMMIT
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_ADD_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_ADD_SANAD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_MANDOOB_ADD_SANAD]
@USER_CREATE NVARCHAR(MAX),
@MOVE_CODE INT,
@FROM_ACCOUNT INT ,
@TO_ACCOUNT INT ,
@AMO_USA float ,
@AMO_IQ float ,
@CLIENT_BARCODE VARCHAR(MAX) ,

@BILL_RELATION	int	,
@B_CODE_RELATION	int	,
@DESCRIPTION NVARCHAR(MAX) 
AS
declare
@BILL_NUMBER INT,
@BILL_BRANCH   NVARCHAR(MAX),
@BILL_DATE DATE = GETDATE(),
@BILL_TIME DATETIME = GETDATE(),
@FROM_ACC   NVARCHAR(MAX),
@TO_ACC   NVARCHAR(MAX),
@CURRANCY_CODE  INT,
@CURRANCY_USA float	,
@CURRANCY_IQ float	,
@CURRANCY_EQUAL float	,
@USER_CODE INT,
@COMPANY_TITAL   NVARCHAR(MAX)

IF @FROM_ACCOUNT =0 
BEGIN
	SELECT @FROM_ACCOUNT = CLIENT_CODE FROM T_CLIENT WHERE CLIENT_BARCODE = @CLIENT_BARCODE;
END
 
BEGIN TRAN
BEGIN
 
SELECT @BILL_NUMBER=ISNULL(MAX(BILL_NUMBER),0)+1 FROM T_SANAD  

SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
SELECT @FROM_ACC=ACCOUNT_NAME FROM T_ACCOUNTS WHERE ACCOUNT_CODE=@FROM_ACCOUNT
SELECT @TO_ACC=ACCOUNT_NAME FROM T_ACCOUNTS WHERE ACCOUNT_CODE=@TO_ACCOUNT
SET @BILL_BRANCH=@COMPANY_TITAL + CAST(@BILL_NUMBER AS nvarchar)
IF @CURRANCY_CODE=1
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=1/NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_IQ
END

ELSE
BEGIN
SELECT @CURRANCY_USA=NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_USA
END


 
if not exists (select * from T_SANAD where BILL_BRANCH = @BILL_BRANCH )  INSERT INTO [dbo].[T_SANAD] ([BILL_BRANCH],[BILL_NUMBER], [BILL_DATE], [BILL_TIME], [USER_CREATE], [CURRANCY_EQUAL], [MOVE_CODE], [FROM_ACCOUNT], [TO_ACCCOUNT], [FROM_ACC], [TO_ACC], [AMO_USA], [AMO_IQ], [CONV_USA], [CONV_IQ], [DESCRIPTION], [C_DATE],  [SECURETY_CODE], [SANAD_ACTIVE], [OFFER_CODE], [IS_TRANS],[BILL_RELATION],[B_CODE]) 
VALUES (@BILL_BRANCH,@BILL_NUMBER, @BILL_DATE, @BILL_TIME, @USER_CREATE, @CURRANCY_EQUAL, @MOVE_CODE, @FROM_ACCOUNT, @TO_ACCOUNT, @FROM_ACC, @TO_ACC, @AMO_USA, @AMO_IQ, N'''', N'''', @DESCRIPTION, GETDATE(),  1, 1, 1, 0,@BILL_RELATION,@B_CODE_RELATION) 
else 
UPDATE [dbo].[T_SANAD] SET [BILL_BRANCH] = @BILL_BRANCH,[BILL_NUMBER] = @BILL_NUMBER, [BILL_DATE] = @BILL_DATE, [BILL_TIME] = @BILL_TIME, [CURRANCY_EQUAL] = @CURRANCY_EQUAL, [MOVE_CODE] = @MOVE_CODE, [FROM_ACCOUNT] = @FROM_ACCOUNT, [TO_ACCCOUNT] = @TO_ACCOUNT, [FROM_ACC] = @FROM_ACC, [TO_ACC] = @TO_ACC, [AMO_USA] = @AMO_USA, [AMO_IQ] = @AMO_IQ, [CONV_USA] = N'''', [CONV_IQ] = N'''', [DESCRIPTION] = @DESCRIPTION, [C_UPDATE] = GETDATE(), [USER_UPDATE] = @USER_CREATE, [SECURETY_CODE] = 1, [SANAD_ACTIVE] = 1, [OFFER_CODE] = 1, [IS_TRANS] = 0  WHERE BILL_BRANCH=@BILL_BRANCH  

SELECT TOP(1) @USER_CODE=ISNULL(USER_CODE,1) FROM T_USERS WHERE [USER_NAME] LIKE @USER_CREATE
--DELETE FROM T_BOX WHERE BILL_BRANCH=@BILL_BRANCH AND B_CODE=5

-- FROM
INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
 VALUES (@BILL_BRANCH,@BILL_NUMBER, CAST(@BILL_NUMBER AS nvarchar), @BILL_DATE, @BILL_TIME, @MOVE_CODE, 5, 1, @FROM_ACCOUNT, N'''', 0, @AMO_USA, 0, @AMO_IQ, @CURRANCY_CODE, @CURRANCY_EQUAL,  @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)
-- TO
INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE]) 
VALUES (@BILL_BRANCH,@BILL_NUMBER, CAST(@BILL_NUMBER AS nvarchar), @BILL_DATE, @BILL_TIME, @MOVE_CODE, 5, 1, @TO_ACCOUNT, N'''', @AMO_USA, 0, @AMO_IQ, 0, @CURRANCY_CODE, @CURRANCY_EQUAL,  @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)


END	--END OF PROGRAM
commit































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_CHECK_DELIVERY_ORDERS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_CHECK_DELIVERY_ORDERS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_MANDOOB_CHECK_DELIVERY_ORDERS] 
    @MULTI_DELIVERY_ORDERS NVARCHAR(MAX)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @TempTable TABLE (BILL_NUMBER INT, TAG_PROCCESS_CODE INT);
    DECLARE @Start INT = 1, @End INT, @JSON NVARCHAR(MAX);
    DECLARE @BILL_NUMBER NVARCHAR(MAX), @TAG_PROCCESS_CODE NVARCHAR(MAX);

    SET @JSON = @MULTI_DELIVERY_ORDERS;
    WHILE CHARINDEX(''{'', @JSON, @Start) > 0
    BEGIN
        SET @Start = CHARINDEX(''{'', @JSON, @Start);
        SET @End = CHARINDEX(''}'', @JSON, @Start);
        DECLARE @CurrentJSON NVARCHAR(1000);
        SET @CurrentJSON = SUBSTRING(@JSON, @Start, @End - @Start + 1);
        SET @BILL_NUMBER = 
            CASE 
                WHEN CHARINDEX(''"BILL_NUMBER":'', @CurrentJSON) > 0 
                THEN LTRIM(RTRIM(
                    SUBSTRING(@CurrentJSON, 
                        CHARINDEX(''"BILL_NUMBER":'', @CurrentJSON) + 14, 
                        CHARINDEX('','', @CurrentJSON + '',"'', CHARINDEX(''"BILL_NUMBER":'', @CurrentJSON) + 14) 
                        - CHARINDEX(''"BILL_NUMBER":'', @CurrentJSON) - 14)
                ))
                ELSE NULL 
            END;

        SET @TAG_PROCCESS_CODE = 
            CASE 
                WHEN CHARINDEX(''"TAG_PROCCESS_CODE":'', @CurrentJSON) > 0 
                THEN LTRIM(RTRIM(
                    SUBSTRING(@CurrentJSON, 
                        CHARINDEX(''"TAG_PROCCESS_CODE":'', @CurrentJSON) + 20, 
                        CHARINDEX('','', @CurrentJSON + '',"'', CHARINDEX(''"TAG_PROCCESS_CODE":'', @CurrentJSON) + 20) 
                        - CHARINDEX(''"TAG_PROCCESS_CODE":'', @CurrentJSON) - 20)
                ))
                ELSE NULL 
            END;

        INSERT INTO @TempTable (BILL_NUMBER, TAG_PROCCESS_CODE) 
        VALUES (TRY_CONVERT(INT, @BILL_NUMBER), TRY_CONVERT(INT, @TAG_PROCCESS_CODE));
        SET @Start = @End + 1;
    END;
    SELECT T_SALES.BILL_NUMBER, T_SALES.TAG_PROCCESS_CODE FROM T_SALES INNER JOIN @TempTable T ON (T.BILL_NUMBER IS NOT NULL AND T.BILL_NUMBER = T_SALES.BILL_NUMBER) AND (T.TAG_PROCCESS_CODE IS NOT NULL AND T.TAG_PROCCESS_CODE = T_SALES.TAG_PROCCESS_CODE);
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_CHECK_INSERT_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_CHECK_INSERT_CLIENT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_MANDOOB_CHECK_INSERT_CLIENT] 
	@MULTI_BARCODE NVARCHAR(MAX)
AS
BEGIN 
	SET NOCOUNT ON 
	SELECT CLIENT_BARCODE FROM T_CLIENT WHERE CLIENT_BARCODE IN (SELECT * FROM dbo.splitstring(@MULTI_BARCODE)) 	
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_CHECK_INSERT_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_CHECK_INSERT_INVOICE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_MANDOOB_CHECK_INSERT_INVOICE] 
    @MULTI_BILL_INVOICE NVARCHAR(MAX)
AS
BEGIN 
    SET NOCOUNT ON;
   	SELECT BILL_GIUD FROM T_APP_INVOICE WHERE BILL_GIUD IN (SELECT * FROM dbo.splitstring(@MULTI_BILL_INVOICE)) 	
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_CHECK_INSERT_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_CHECK_INSERT_SANAD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_MANDOOB_CHECK_INSERT_SANAD] 
	@MULTI_SANAD_NOTE NVARCHAR(MAX)
AS
BEGIN 
	SET NOCOUNT ON 
	SELECT DESCRIPTION FROM T_SANAD WHERE DESCRIPTION IN (SELECT * FROM dbo.splitstring(@MULTI_SANAD_NOTE)) 	
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_CHECK_INSERT_VISIT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_CHECK_INSERT_VISIT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_MANDOOB_CHECK_INSERT_VISIT] 
    @CLIENT_CODE       INT, 
    @CLIENT_BARCODE    NVARCHAR(50),  
    @LAT               NVARCHAR(MAX),   
    @LNG               NVARCHAR(MAX),  
    @USER_CODE         INT,  
    @MANDOOB_CODE      INT,  
    @D_DATE            DATE,  
    @D_TIME            TIME(7),
    @NOTE              NVARCHAR(MAX)  
AS
BEGIN
    SET NOCOUNT ON;

    SELECT TOP(1) NOTE, CLIENT_CODE, CLIENT_BARCODE, D_DATE FROM T_MANDOOB_VISITS
    WHERE CLIENT_CODE = @CLIENT_CODE AND CLIENT_BARCODE = @CLIENT_BARCODE AND LAT = @LAT AND LNG = @LNG AND USER_CODE = @USER_CODE AND MANDOOB_CODE = @MANDOOB_CODE AND D_DATE = @D_DATE AND D_TIME = @D_TIME AND NOTE = @NOTE
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_DELETE_INVOICES_BEFORE_ACCEPT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_DELETE_INVOICES_BEFORE_ACCEPT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_MANDOOB_DELETE_INVOICES_BEFORE_ACCEPT]
@T_ID INT
AS
BEGIN
  DELETE FROM T_APP_INVOICE WHERE T_ID = @T_ID
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_ALL_INVOICES_AFTER_ACCEPT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_ALL_INVOICES_AFTER_ACCEPT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_MANDOOB_GET_ALL_INVOICES_AFTER_ACCEPT]
	@USER_NAME NVARCHAR(MAX),
	@D1 DATE = ''''
AS
BEGIN
  SELECT T_ID,INFO,DETAILS,D_TIME,USER_CREATE FROM T_APP_INVOICE WHERE IS_INSERT = 1 AND USER_CREATE=@USER_NAME AND D_DATE >= @D1 AND D_DATE <= CAST(GETDATE() AS DATE)
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_ALL_INVOICES_BEFORE_ACCEPT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_ALL_INVOICES_BEFORE_ACCEPT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_MANDOOB_GET_ALL_INVOICES_BEFORE_ACCEPT]
@USER_NAME NVARCHAR(MAX)
AS
BEGIN
  SELECT T_ID,INFO,DETAILS,D_TIME,USER_CREATE FROM T_APP_INVOICE WHERE IS_INSERT = 0 AND USER_CREATE=@USER_NAME
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_ALL_PERMISSIONS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_ALL_PERMISSIONS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE proc [dbo].[P_API_MANDOOB_GET_ALL_PERMISSIONS] 
AS	 
BEGIN   
	SELECT LEVEL_CODE,LEVEL_NAME,LEVEL_MANDOOB_APP FROM T_LEVEL 
END 

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_ALL_REGION_SHIP]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_ALL_REGION_SHIP]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE proc [dbo].[P_API_MANDOOB_GET_ALL_REGION_SHIP] 
AS	 
BEGIN   
	SELECT REGION_CODE,REGION_NAME,REGION_SELL,REGION_COST from T_REGION_SHIP WHERE ACTIVE =1
END 

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_ALL_SYSTEM_INVOICES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_ALL_SYSTEM_INVOICES]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_MANDOOB_GET_ALL_SYSTEM_INVOICES]
@USER_NAME NVARCHAR(MAX),
@D1 DATE = ''''
AS
BEGIN
	SELECT  BILL_NUMBER,BILL_DATE,T_SALES.CLIENT_NAME,T_SALES.CLIENT_PHONE,CLIENT_ADRESS,T_SALES.TOTAL_SALES,T_SALES.TOTAL_DISCOUNT,T_SALES.NET_SALES,CASH_IQ,CASH_USA,REMAIN_IQ,REMAIN_USA,CURRANCY_CODE
	FROM T_SALES  WHERE ACTIVE = 1 AND USER_CREATE = @USER_NAME AND  BILL_DATE >= @D1 AND BILL_DATE <= CAST(GETDATE() AS DATE) ORDER BY BILL_DATE DESC
	SELECT T_SALES_DETAILS.* FROM T_SALES_DETAILS INNER JOIN T_SALES ON T_SALES_DETAILS.BILL_NUMBER = T_SALES.BILL_NUMBER  WHERE T_SALES.ACTIVE = 1 AND T_SALES.USER_CREATE = @USER_NAME AND  BILL_DATE >= @D1 AND BILL_DATE <= CAST(GETDATE() AS DATE)
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_CLIENT_BALANCE_BY_MANDOOB]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_CLIENT_BALANCE_BY_MANDOOB]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE [dbo].[P_API_MANDOOB_GET_CLIENT_BALANCE_BY_MANDOOB] 
    @MANDOOB_CODE INT
AS
BEGIN
    IF @MANDOOB_CODE = -10
    BEGIN
        SELECT * FROM V_ACC_BALANCE_CLIENT WHERE TYPE_ACCOUNT_CODE IN(1,3) AND CAST(ACCOUNT_CODE AS INT) > 2100000;
    END
    ELSE
    BEGIN SELECT * FROM V_ACC_BALANCE_CLIENT WHERE  TYPE_ACCOUNT_CODE IN(1,3) AND CAST(ACCOUNT_CODE AS INT) > 2100000 AND (MANDOOB_CODE = @MANDOOB_CODE);
    END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_DRIVER_ORDERS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_DRIVER_ORDERS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_MANDOOB_GET_DRIVER_ORDERS] 
@DRIVER_CODE INT 
AS
BEGIN
 	SELECT * FROM T_TAG_PROCCESS WHERE FILTER_CODE =1
	SELECT TAG_PROCCESS_CODE, BILL_NUMBER,BILL_DATE,T_SALES.CLIENT_NAME,T_SALES.CLIENT_PHONE,CLIENT_ADRESS,T_SALES.LAT,T_SALES.LNG,T_CLIENT.CLIENT_BARCODE,T_CLIENT.CLIENT_CODE,T_CLIENT.CLIENT_BUSINESS,T_CLIENT.LAT AS CLIENT_LAT,T_CLIENT.LNG AS CLIENT_LNG
	FROM T_SALES INNER JOIN T_CLIENT ON T_CLIENT.CLIENT_CODE =T_SALES.CLIENT_CODE  WHERE ACTIVE = 1 AND DRIVER_CODE = @DRIVER_CODE ORDER BY BILL_DATE DESC
	SELECT T_SALES_DETAILS.* FROM T_SALES_DETAILS INNER JOIN T_SALES ON T_SALES_DETAILS.BILL_NUMBER = T_SALES.BILL_NUMBER  WHERE T_SALES.ACTIVE = 1 AND T_SALES.DRIVER_CODE = @DRIVER_CODE
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_ITEM_STORE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_ITEM_STORE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_MANDOOB_GET_ITEM_STORE] 
  @STORE_CODE int 
  AS
BEGIN 
  IF @STORE_CODE=-10
  BEGIN
	SELECT * FROM  V_ITEMS_BALANCE_MIN_PHARMA_GSTORE_MS	WHERE STORE_CODE IN ((SELECT STORE_CODE FROM T_STORE_TYPE WHERE IS_USED=1)) AND IS_HIDE = 0 ORDER BY SORT;
  END
  ELSE
  BEGIN
	SELECT * FROM V_ITEMS_BALANCE_MIN_PHARMA_GSTORE_MS WHERE STORE_CODE = @STORE_CODE AND IS_HIDE = 0 ORDER BY SORT ;
  END
  IF @@ROWCOUNT = 0
  BEGIN
  RAISERROR(''لا توجد منتجات في المخزن'', 16, 1);
  RETURN;
  END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_MANDOOB_VISITS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_MANDOOB_VISITS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE proc [dbo].[P_API_MANDOOB_GET_MANDOOB_VISITS] 
@USER_CODE INT 
AS
set nocount on
BEGIN  
SELECT    *  FROM   V_MANDOOB_VISITS WHERE  USER_CODE=@USER_CODE AND D_DATE=CAST(GETDATE() AS date) ORDER BY T_ID DESC
END 
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_OFFERS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_OFFERS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_MANDOOB_GET_OFFERS] 
AS
BEGIN
    SELECT * FROM T_OFFER WHERE END_DATE >= CAST(GETDATE() AS DATE)

    SELECT T_OFFERS_DETAILS.* FROM T_OFFERS_DETAILS INNER JOIN T_OFFER ON T_OFFER.OFFER_CODE = T_OFFERS_DETAILS.OFFER_CODE WHERE T_OFFER.END_DATE >= CAST(GETDATE() AS DATE)
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_PERMISSION]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_PERMISSION]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_MANDOOB_GET_PERMISSION]
@LEVEL_CODE INT
AS
BEGIN
  SELECT LEVEL_CODE ,LEVEL_MANDOOB_APP FROM T_LEVEL WHERE LEVEL_CODE = @LEVEL_CODE
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_REPORT_SALES_DETIALS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_REPORT_SALES_DETIALS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_MANDOOB_GET_REPORT_SALES_DETIALS]
	@USER_NAME NVARCHAR(MAX),@PageSize int, @PageNumber int, @D1 DATE = '''', @D2 DATE = '''' 
AS
BEGIN
	DECLARE @TotalRecords INT;DECLARE @TotalPages INT;DECLARE @Offset INT;
	SELECT @TotalRecords = COUNT(*) FROM V_SALES_DETAILS WHERE ACTIVE = 1 AND (@D1 IS NULL OR @D2 IS NULL OR BILL_DATE BETWEEN @D1 AND @D2)   AND USER_CREATE =@USER_NAME
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);
    SET @Offset = (@PageNumber - 1) * @PageSize;
	SELECT BILL_NUMBER,BILL_DATE,CLIENT_NAME,ITEM_NAME,QTY_FREE,QTY,TOTAL_QTY,PRICE,TOTAL,NET_TOTAL FROM V_SALES_DETAILS WHERE ACTIVE = 1 AND (@D1 IS NULL OR @D2 IS NULL OR BILL_DATE BETWEEN @D1 AND @D2) AND USER_CREATE =@USER_NAME  ORDER BY BILL_NUMBER DESC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY ;
END 
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_SALES_BY_BILL_NUMBER]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_SALES_BY_BILL_NUMBER]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_MANDOOB_GET_SALES_BY_BILL_NUMBER]
	@BILL_NUMBER int
AS
BEGIN
	SELECT  BILL_NUMBER,BILL_DATE,BILL_INVOICE,CLIENT_NAME,CLIENT_PHONE,CLIENT_ADRESS,NET_SALES,TOTAL_SALES,TOTAL_DISCOUNT
	FROM T_SALES  WHERE BILL_NUMBER = @BILL_NUMBER ORDER BY BILL_DATE DESC
	SELECT ITEM_NAME,UNIT_QTY,UNIT_NAME,QTY_FREE,TOTAL,QTY,PRICE FROM T_SALES_DETAILS  WHERE BILL_NUMBER = @BILL_NUMBER
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_SALES_DETAILS_ITEMS_MANDOOB]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_SALES_DETAILS_ITEMS_MANDOOB]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_MANDOOB_GET_SALES_DETAILS_ITEMS_MANDOOB]
@D1 DATE,@D2 DATE,@MANDOOB_CODE INT
AS

BEGIN
set @D1 = GETDATE()
set @D2 = GETDATE()

	SELECT ITEM_CODE, ITEM_NAME, ITEM_SIGN, CATEGORY_CODE, CATEGORY_NAME, TYPE_CODE, TYPE_NAME,  SUM(QTY) AS QTY, UNIT_NAME, SUM(TOTAL ) AS TOTAL, 
		SUM(DISCOUNT_AMOUNT_ITEM) AS DISCOUNT_AMOUNT_ITEM, SUM(TOTAL_COST ) AS TOTAL_COST, SUM(NET_TOTAL ) AS NET_TOTAL,SUM(  ARBAH_ITEM ) AS ARBAH_ITEM
		,MANDOOB_CODE,MANDOOB_NAME
		, SUM(QTY_FREE) AS  QTY_FREE  
		, SUM(TOTAL_QTY) AS  TOTAL_QTY FROM dbo.V_SALES_DETAILS WHERE V_SALES_DETAILS.BILL_DATE BETWEEN @D1 AND @D2 AND MANDOOB_CODE=@MANDOOB_CODE
	GROUP BY  ITEM_CODE, ITEM_NAME, ITEM_SIGN, CATEGORY_CODE, CATEGORY_NAME, TYPE_CODE, TYPE_NAME, UNIT_NAME,MANDOOB_CODE,MANDOOB_NAME
END	
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_GET_VISITS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_GET_VISITS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE proc [dbo].[P_API_MANDOOB_GET_VISITS] 
 @USER_CODE INT 
	as

	set nocount on
	 
	begin 
	 
	  
SELECT    *  FROM   V_MANDOOB_VISITS WHERE  USER_CODE=@USER_CODE AND D_DATE=CAST(GETDATE() AS date) ORDER BY T_ID DESC

		
    
	 
	 
	end 

	

	



' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_INSERT_APP_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_INSERT_APP_INVOICE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROC [dbo].[P_API_MANDOOB_INSERT_APP_INVOICE] 
@INFO nvarchar(max),
@DETAILS nvarchar(max),
@USER_CREATE nvarchar(max),
@TOKEN_APP nvarchar(max),
@B_CODE int,
@CHECK_CUSTOMER BIT,
@BILL_GIUD nvarchar(max)

AS
BEGIN
    DECLARE @BRANCH nvarchar(max), @CLIENT_PHONE NVARCHAR(MAX)

    SELECT @BRANCH = COMPANY_TITAL FROM T_COMPANY WHERE T_ID = 1

    -- Extract CLIENT_PHONE
    SET @CLIENT_PHONE = 
        SUBSTRING(
            @INFO, 
            CHARINDEX(''"CLIENT_PHONE":"'', @INFO) + LEN(''"CLIENT_PHONE":"''), 
            CHARINDEX(''"'', @INFO, CHARINDEX(''"CLIENT_PHONE":"'', @INFO) + LEN(''"CLIENT_PHONE":"'')) - 
            CHARINDEX(''"CLIENT_PHONE":"'', @INFO) - LEN(''"CLIENT_PHONE":"'')
        )

    -- Check condition based on @CHECK_CUSTOMER
    IF @CHECK_CUSTOMER = 1
    BEGIN
        -- Check if CLIENT_PHONE exists for today
        IF EXISTS (
            SELECT 1 
            FROM T_APP_INVOICE 
            WHERE INFO LIKE ''%"CLIENT_PHONE":"'' + @CLIENT_PHONE + ''%''
            AND CAST(D_DATE AS DATE) = CAST(GETDATE() AS DATE)
        )
        BEGIN
            RAISERROR(N''رقم العميل موجود بالفعل يرجى المحاولة لاحقا خلال 24 ساعة'', 16, 1)
            RETURN
        END
    END

    -- Check for duplicate INFO on the same day
    IF EXISTS (
        SELECT 1 
        FROM T_APP_INVOICE 
        WHERE INFO = @INFO 
        AND CAST(D_DATE AS DATE) = CAST(GETDATE() AS DATE)
    ) 
    BEGIN
        RETURN 
    END

    -- Insert data if INFO or DETAILS has data
    IF LEN(@INFO) > 0 OR LEN(@DETAILS) > 0 
    BEGIN
        INSERT INTO [dbo].[T_APP_INVOICE]
           ([D_DATE], [D_TIME], [INFO], [DETAILS], [B_CODE], [IS_INSERT], [BILL_GIUD], [BILL_BRANCH], [BILL_NUMBER],
            [CLIENT_NAME], [CLIENT_PHONE], [CLIENT_ADDRESS], [B_NAME], [USER_CREATE], [DEVICE_ID], [IS_ACCEPT],
            [TOKEN_APP], [BRANCH], [USER_NAME])
        VALUES
           (GETDATE(), GETDATE(), @INFO, @DETAILS, @B_CODE, 0, @BILL_GIUD, N'''', 0, N'''', N'''', N'''', N'''', @USER_CREATE, N'''', 0, @TOKEN_APP, @BRANCH, @USER_CREATE)

        SELECT (SELECT MAX(T_ID) FROM T_APP_INVOICE) AS ID, N''successfully done , Insert Done .. '' AS N''Response''
        FROM T_ITEMS WHERE ITEM_CODE = -1
        RETURN
    END
    ELSE 
    BEGIN
        SELECT 0 AS ID, N''Error , Insert Failed'' AS N''Response''
        FROM T_ITEMS WHERE ITEM_CODE = -1
        RETURN
    END
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_INSERT_CLIENTS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_INSERT_CLIENTS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE [dbo].[P_API_MANDOOB_INSERT_CLIENTS]
@CLIENT_CODE INT,
@CLIENT_NAME NVARCHAR(MAX),
@CLIENT_TYPE INT,
@MANDOOB_CODE INT,
@CLIENT_PHONE NVARCHAR(MAX),
@CLIENT_EMAILE NVARCHAR(MAX),
@CLIENT_REGION NVARCHAR(MAX),
@CLIENT_ADDRESS NVARCHAR(MAX),
@CLIENT_BARCODE NVARCHAR(MAX),
@CLIENT_NOTE NVARCHAR(MAX),
@CLIENT_BUSINESS NVARCHAR(MAX),
@DISCOUNT_PERCENT  float ,
@USER_CREATE NVARCHAR(MAX),
@LAT NVARCHAR(MAX),
@LNG NVARCHAR(MAX),
@TYPE_PRICE_CODE INT,
@BALANCE_FIRST_USA float ,
@BALANCE_FIRST_IQ float  


AS
declare
@COUNT_NAME  INT,
@USER_CODE  INT,
@CURRANCY_CODE  INT,
@CURRANCY_USA float	,
@CURRANCY_IQ float	,
@CURRANCY_EQUAL float	,
@COMPANY_TITAL   NVARCHAR(MAX),
@DFF int

BEGIN TRAN
BEGIN
SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1

IF @CLIENT_CODE=2
BEGIN
SELECT @COUNT_NAME=COUNT(CLIENT_CODE)  FROM T_CLIENT WHERE CLIENT_PHONE=@CLIENT_PHONE
IF @COUNT_NAME>0
BEGIN
SELECT 0 AS ID, N''رقم الهاتف مضاف مسبقاً'' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
GOTO FINISH_ADD
END
ELSE
BEGIN
SET @CLIENT_NAME=@CLIENT_NAME + N'' - '' +@CLIENT_PHONE
END

SELECT @CLIENT_CODE= ISNULL(MAX(CLIENT_CODE),2100000) + 1 FROM T_CLIENT
END



IF @CLIENT_CODE=0
BEGIN
SELECT @COUNT_NAME=COUNT(CLIENT_CODE)  FROM T_CLIENT WHERE CLIENT_NAME=@CLIENT_NAME
IF @COUNT_NAME>0
BEGIN
SELECT 0 AS ID, N''اسم العميل مضاف مسبقاً'' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
GOTO FINISH_ADD
END
SELECT @CLIENT_CODE= ISNULL(MAX(CLIENT_CODE),2100000) + 1 FROM T_CLIENT
END

if not exists (select * from T_ACCOUNTS where ACCOUNT_CODE = @CLIENT_CODE )  INSERT INTO [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [C_DATE], [ACCOUNT_ACTIVE]) 
VALUES (@CLIENT_CODE, @CLIENT_NAME, 21, 1, 1, @CURRANCY_CODE, 2, 3, N'''', 1, 1, GETDATE(), 1)  
else 
UPDATE [dbo].[T_ACCOUNTS] SET [ACCOUNT_CODE] = @CLIENT_CODE, [ACCOUNT_NAME] = @CLIENT_NAME, [ACCOUNT_PARENT] = 21, [TYPE_ACCOUNT_CODE] = 1, [BRANCH_CODE] = 1, [CURRANCY_CODE] = @CURRANCY_CODE, [FINAL_CODE] = 2, [ACCOUNT_LEVEL] = 3, [ACCOUNT_NOTE] = N'''', [SECURETY_CODE] = 1, [ACCOUNT_ENTITY] = 1,  [ACCOUNT_ACTIVE] = 1  WHERE ACCOUNT_CODE=@CLIENT_CODE  


if not exists (select * from T_CLIENT where CLIENT_CODE = @CLIENT_CODE )  INSERT INTO [dbo].[T_CLIENT] ([CLIENT_CODE], [CLIENT_NAME], [CLIENT_TYPE], [ACCOUNT_CODE], [CURRANCY_CODE], [MANDOOB_CODE], [CLIENT_PHONE], [CLIENT_PHONE_SMS], [CLIENT_EMAILE], [CLIENT_REGION], [CLIENT_ADDRESS], [CLIENT_BARCODE], [CLIENT_CARD], [CLIENT_NOTE], [CLIENT_PIN_CODE], [DISCOUNT_PERCENT], [SECURETY_CODE], [MAX_DEBIT],  [CLIENT_BUSINESS],[CLIENT_ACTIVE], [C_DATE], [C_USER], [LAT], [LNG], [TYPE_PRICE_CODE])
 VALUES (@CLIENT_CODE, @CLIENT_NAME, @CLIENT_TYPE, @CLIENT_CODE, @CURRANCY_CODE, @MANDOOB_CODE, @CLIENT_PHONE, N'''', @CLIENT_EMAILE, @CLIENT_REGION, @CLIENT_ADDRESS, @CLIENT_BARCODE, N'''', @CLIENT_NOTE, N'''', @DISCOUNT_PERCENT,1, 0, @CLIENT_BUSINESS, 1, GETDATE(), @USER_CREATE,@LAT,@LNG,@TYPE_PRICE_CODE)   
 else 
 UPDATE [dbo].[T_CLIENT] SET [CLIENT_CODE] = @CLIENT_CODE, [CLIENT_NAME] = @CLIENT_NAME, [CLIENT_TYPE] = @CLIENT_TYPE, [ACCOUNT_CODE] = @CLIENT_CODE, [CURRANCY_CODE] = @CURRANCY_CODE, [MANDOOB_CODE] = @MANDOOB_CODE, [CLIENT_PHONE] = @CLIENT_PHONE, [CLIENT_PHONE_SMS] = N'''', [CLIENT_EMAILE] = @CLIENT_EMAILE, [CLIENT_REGION] = @CLIENT_REGION, [CLIENT_ADDRESS] = @CLIENT_ADDRESS, [CLIENT_BARCODE] = @CLIENT_BARCODE, [CLIENT_CARD] = N'''', [CLIENT_NOTE] = @CLIENT_NOTE, [CLIENT_PIN_CODE] = N'''', [DISCOUNT_PERCENT] = @DISCOUNT_PERCENT, [SECURETY_CODE] = 1, [MAX_DEBIT] = 0, [CLIENT_BUSINESS] = @CLIENT_BUSINESS, [CLIENT_ACTIVE] = 1, [C_DATE] = GETDATE(), [C_USER] = @USER_CREATE, [LAT] = @LAT, [LNG] = @LNG, [TYPE_PRICE_CODE] = @TYPE_PRICE_CODE WHERE CLIENT_CODE=@CLIENT_CODE

 IF @BALANCE_FIRST_IQ<>0 OR @BALANCE_FIRST_USA <>0
 BEGIN
 DELETE FROM T_BOX WHERE BILL_NUMBER=0  AND B_CODE=13 AND  ACCOUNT_CODE=@CLIENT_CODE
 IF @CURRANCY_CODE=1
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=1/NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_IQ
END

ELSE
BEGIN
SELECT @CURRANCY_USA=NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_USA
END
SELECT TOP(1) @USER_CODE=ISNULL(USER_CODE,1) FROM T_USERS WHERE [USER_NAME] LIKE @USER_CREATE
INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE]) 
VALUES (@COMPANY_TITAL + N''0'', 0,N'''', (SELECT TOP(1)  ISNULL(MIN(BILL_DATE),GETDATE())  FROM T_BOX ), GETDATE(), 0, 13, 1, @CLIENT_CODE, N'''', @BALANCE_FIRST_USA, 0, @BALANCE_FIRST_IQ, 0, @CURRANCY_CODE, @CURRANCY_EQUAL,  N''الرصيد الافتتاحي'', 0, @USER_CODE, GETDATE(), 1)
 END

FINISH_ADD:
END	--END OF PROGRAM
commit
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_INSERT_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_INSERT_INVOICE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_MANDOOB_INSERT_INVOICE]

@INFO NVARCHAR(MAX),
@DETAILS NVARCHAR(MAX),
@USER_CREATE NVARCHAR(MAX)  
 

AS
DECLARE
@BILL_NUMBER INT ,
@B_CODE INT,
@CURRANCY_CODE_INVOICE INT,
@CURRANCY_EQUAL_INVOICE FLOAT,
@CURRANCY_CODE_PRIMARY INT,
@BOX_USER INT,
@USER_CODE INT,
@CLIENT_CODE_AA INT,
@CLIENT_BARCODE NVARCHAR(MAX),
@COMPANY_TITAL NVARCHAR(MAX)


begin 
BEGIN TRANSACTION;
 
 
SET @B_CODE=2

IF LEN(ISNULL(@DETAILS,N''''))<10 GOTO RETTTTT
 
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
SELECT @CURRANCY_CODE_PRIMARY=CURRANCY_CODE  FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
 

SELECT TOP(1) @BOX_USER=ISNULL(BOX_CODE,5000),@USER_CODE=USER_CODE  FROM T_USERS WHERE USER_NAME LIKE @USER_CREATE AND ACTIVE=1
SET @BOX_USER=ISNULL(@BOX_USER,5000)
SET @USER_CODE=ISNULL(@USER_CODE,1)
SELECT @BILL_NUMBER=ISNULL(MAX(BILL_NUMBER),0) + 1 FROM T_SALES
SET @CURRANCY_CODE_INVOICE=(Select  max(case when name=''CURRANCY_CODE'' then convert(int,StringValue) else @CURRANCY_CODE_PRIMARY end) as [CURRANCY_CODE] 
From parseJSON
(
       @INFO
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID)
SET @CLIENT_CODE_AA=(Select  max(case when name=''CLIENT_CODE'' then convert(int,StringValue) else 0 end)  
From parseJSON
(
       @INFO
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID)
IF @CLIENT_CODE_AA=0
BEGIN
SET @CLIENT_BARCODE=(Select  max(case when name=''CLIENT_BARCODE'' then convert(NVARCHAR(MAX),StringValue) else N'''' end)  
From parseJSON
(
       @INFO
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID)

 SELECT TOP(1)@CLIENT_CODE_AA=CLIENT_CODE FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE

END

 -------------------------------------------------------------------------------------------------------
INSERT INTO [dbo].[T_SALES]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_INVOICE]
           ,[BILL_DATE]
           ,[OFFER_CODE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[CLIENT_CODE]
           ,[CLIENT_NAME]
           ,[CLIENT_PHONE]
           ,[CLIENT_ADRESS]
           ,[MANDOOB_CODE]
           ,[DESCRIPTION]
           ,[TYPE_PRICE_SELL]
           ,[STORE_CODE]
           ,[USER_CREATE]
           ,[SECURETY_CODE]
           ,[TOTAL_SALES]
           ,[DISCOUNT_ITEMS]
           ,[DISCOUNT_PERCENT]
           ,[DISCOUNT_AMOUNT]
           ,[TOTAL_DISCOUNT]
           ,[NET_SALES]
           ,[TOTAL_COST]
           ,[IVC_CODE]
           ,[DAY_CASH]
           ,[DATE_CASH]
           ,[TOT_CONV]
           ,[ACCOUNT_CODE]
           ,[CASH_USA]
           ,[REMAIN_USA]
           ,[CASH_IQ]
           ,[REMAIN_IQ]
           ,[C_DATE]
           ,[C_UPDATE]
           ,[USER_UPDATE]
           ,[ACTIVE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[FLAG_CASH]
           ,[IS_OUT]
           ,[CURRANCY_SALES]
           ,[IS_TRANS]
           ,[CENTER_CODE]
           ,[QR_DATA]
           ,[ITEM_ID_PAYMENT]
           ,[TAG_PROCCESS_CODE]
           ,[LINK_ID_PAYMENT]
           ,[BILL_RETURN]
           ,[BILL_SANAD_CNY]
           ,[CNY_IQ]
           ,[IS_PREPARE]
           ,[DRIVER_CODE]
           ,[LAT]
           ,[LNG]
           ,[STATUS_SHIPING]
           ,[MOVE_CODE]
           ,[BILL_ORDER]
           ,[TOTAL_TAX_ITEM]
           ,[TOTAL_MANDOOB_ITEM]
           ,[TOTAL_ADD_COST]
           ,[TOTAL_ADD_AMO]
           ,[SHIP_CODE]
           ,[COST_SHIP]
           ,[IS_POINT]
           ,[COST_SHIP_CLIENT]
           ,[USER_TAG_CODE]
           ,[RELATION_BILL_CODE]
           ,[RELATION_B_CODE]
           ,[REGION_CODE]
           ,[COL_INT1]
           ,[COL_INT2]
           ,[COL_INT3]
           ,[COL_STR1]
           ,[COL_STR2]
           ,[COL_STR3]
           ,[IS_PDF]
           ,[PATH_PDF]
           ,[PATH_PDF_API])
      Select
			@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max))  as [BILL_BRANCH]
           ,@BILL_NUMBER as [BILL_NUMBER]
           ,@BILL_NUMBER as [BILL_INVOICE]
           ,GETDATE() as [BILL_DATE]
           ,0 as [OFFER_CODE]
           , max(case when name=''CURRANCY_CODE'' then convert(int,StringValue) else @CURRANCY_CODE_PRIMARY end) as [CURRANCY_CODE]
           , max(case when name=''CURRANCY_EQUAL'' then convert(int,StringValue) else 1 end) as [CURRANCY_EQUAL]
           ,@CLIENT_CODE_AA as [CLIENT_CODE]
           ,max(case when name=''CLIENT_NAME'' then convert(nvarchar(max),StringValue) else N'''' end) as [CLIENT_NAME]
           ,max(case when name=''CLIENT_PHONE'' then convert(nvarchar(max),StringValue) else N'''' end) as [CLIENT_PHONE]
           ,max(case when name=''CLIENT_ADDRESS'' then convert(nvarchar(max),StringValue) else N'''' end) as [CLIENT_ADRESS]
           ,max(case when name=''MANDOOB_CODE'' then convert(int,StringValue) else 1 end) as [MANDOOB_CODE]
           ,max(case when name=''NOTE_ORDER'' then convert(nvarchar(max),StringValue) else N'''' end) as [DESCRIPTION]
           ,1 as [TYPE_PRICE_SELL]
           ,0 as [STORE_CODE]
           ,@USER_CREATE as [USER_CREATE]
           ,1 as [SECURETY_CODE]
           ,max(case when name=''TOTAL'' then convert(float,StringValue) else 0 end) as [TOTAL_SALES]
           ,0 as [DISCOUNT_ITEMS]
           ,0 as [DISCOUNT_PERCENT]
           ,max(case when name=''TOTAL_DISCOUNT'' then convert(float,StringValue) else 0 end) as [DISCOUNT_AMOUNT]
           ,max(case when name=''TOTAL_DISCOUNT'' then convert(float,StringValue) else 0 end) as [TOTAL_DISCOUNT]
           ,(max(case when name=''TOTAL'' then convert(float,StringValue) else 0 end) - max(case when name=''TOTAL_DISCOUNT'' then convert(float,StringValue) else 0 end)) as [NET_SALES]
           ,0 as [TOTAL_COST] -- FROM SUM
           ,max(case when name=''INVOICE_CODE'' then convert(int,StringValue) else 0 end) as [IVC_CODE]
           ,0 as [DAY_CASH]
           ,GETDATE() as [DATE_CASH]
           ,N'''' as [TOT_CONV]
           , @BOX_USER  as [ACCOUNT_CODE]
           ,IIF(@CURRANCY_CODE_INVOICE=1, max(case when name=''CASH_AMO'' then convert(float,StringValue) else 0 end),0) as [CASH_USA]
           ,IIF(@CURRANCY_CODE_INVOICE=1,max(case when name=''REMAIN_AMO'' then convert(float,StringValue) else 0 end),0) as [REMAIN_USA]
           ,IIF(@CURRANCY_CODE_INVOICE=2, max(case when name=''CASH_AMO'' then convert(float,StringValue) else 0 end),0) as [CASH_IQ]
           ,IIF(@CURRANCY_CODE_INVOICE=2,max(case when name=''REMAIN_AMO'' then convert(float,StringValue) else 0 end),0) as [REMAIN_IQ]
           ,GETDATE() as [C_DATE]
           ,N'''' as [C_UPDATE]
           ,N'''' as [USER_UPDATE]
           ,1 as [ACTIVE]
           ,0 as [IS_AVG_COST]
           ,0 as [AVG_COST]
           ,IIF( max(case when name=''REMAIN_AMO'' then convert(float,StringValue) else 0 end)=0,1,0) as [FLAG_CASH]
           ,1 as [IS_OUT]
           ,max(case when name=''CURRANCY_EQUAL'' then convert(int,StringValue) else 1 end) as [CURRANCY_SALES]
           ,0 as [IS_TRANS]
           ,0 as [CENTER_CODE]
           ,N'''' as [QR_DATA]
           ,N'''' as [ITEM_ID_PAYMENT]
           ,max(case when name=''INVOICE_STATUS'' then convert(int,StringValue) else 0 end)  as [TAG_PROCCESS_CODE]
           ,N'''' as [LINK_ID_PAYMENT]
           ,0 as [BILL_RETURN]
           ,0 as [BILL_SANAD_CNY]
           ,1 as [CNY_IQ]
           ,0 as [IS_PREPARE]
           ,max(case when name=''DRIVER_CODE'' then convert(int,StringValue) else 0 end) as [DRIVER_CODE]
           ,max(case when name=''LAT'' then convert(nvarchar(max),StringValue) else N'''' end) as [LAT]
           ,max(case when name=''LNG'' then convert(nvarchar(max),StringValue) else N'''' end) as [LNG]
           ,max(case when name=''STATUS_SHIPING'' then convert(int,StringValue) else 0 end) as [STATUS_SHIPING]
           ,0 as [MOVE_CODE]
           ,0 as [BILL_ORDER]
           ,0 as [TOTAL_TAX_ITEM]
           ,max(case when name=''TOTAL_MANDOOB_ITEM'' then convert(float,StringValue) else 0 end) as [TOTAL_MANDOOB_ITEM]
           ,max(case when name=''TOTAL_ADD_COST'' then convert(float,StringValue) else 0 end) as [TOTAL_ADD_COST]
           ,max(case when name=''TOTAL_ADD_AMO'' then convert(float,StringValue) else 0 end) as [TOTAL_ADD_AMO]
           ,max(case when name=''SHIP_CODE'' then convert(INT,StringValue) else 0 end) as [SHIP_CODE]
           ,max(case when name=''DELIVERYCOST'' then convert(float,StringValue) else 0 end) as [COST_SHIP]
           ,0 as [IS_POINT]
           ,max(case when name=''COST_SHIP_CLIENT'' then convert(float,StringValue) else 0 end) as [COST_SHIP_CLIENT]
           ,0 as [USER_TAG_CODE]
           ,0 as [RELATION_BILL_CODE]
           ,0 as [RELATION_B_CODE]
           ,max(case when name=''REGION_CODE'' then convert(int,StringValue) else 0 end) as [REGION_CODE]
           ,max(case when name=''COL_INT1'' then convert(int,StringValue) else 0 end) as [COL_INT1]
           ,max(case when name=''COL_INT2'' then convert(int,StringValue) else 0 end) as [COL_INT2]
           ,max(case when name=''COL_INT3'' then convert(int,StringValue) else 0 end) as [COL_INT3]
           ,max(case when name=''COL_STR1'' then convert(nvarchar(max),StringValue) else N'''' end) as [COL_STR1]
           ,max(case when name=''COL_STR2'' then convert(nvarchar(max),StringValue) else N'''' end) as [COL_STR2]
           ,max(case when name=''COL_STR3'' then convert(nvarchar(max),StringValue) else N'''' end) as [COL_STR3]
           ,0 as [IS_PDF]
           ,N'''' as [PATH_PDF]
           ,N'''' as [PATH_PDF_API]


From parseJSON
(
       @INFO
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID

 -------------------------------------------------------------------------------------------------------
 select top(1) @CURRANCY_CODE_INVOICE =CURRANCY_CODE,@CURRANCY_EQUAL_INVOICE=CURRANCY_EQUAL  from T_SALES where BILL_NUMBER=@BILL_NUMBER
INSERT INTO [dbo].[T_SALES_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[TOTAL]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY]
           ,[ITEM_NOTE_SALES]
           ,[NOTE_PRINT]
           ,[IS_PRINT]
           ,[USER_PREPARE]
           ,[USER_CUT]
           ,[DISCOUNT_TYPE]
           ,[IS_SERIAL]
           ,[IS_TAX]
           ,[TAX_PERCENT_ITEM]
           ,[TAX_AMO_ITEM]
           ,[IS_MANDOOB]
           ,[MANDOOB_PERCENT_ITEM]
           ,[MANDOOB_AMO_ITEM]
           ,[IS_ITEM_AREA]
           ,[WIDTH_CM]
           ,[LENGTH_CM]
           ,[AREA_M2]
           ,[QTY_AREA]
           ,[QTY_XZ]
           ,[UNIT_QTY_XZ]
           ,[QTY_X1]
           ,[UNIT_QTY_X1]
           ,[QTY_XY]
           ,[UNIT_QTY_XY]
           ,[NOTE_PRINT_2]
           ,[K_STORE_ITEM_CODE]
           ,[K_STORE_COST]
           ,[K_STORE_SELL]
           ,[K_PRINT_ITEM_CODE]
           ,[K_PRINT_COST]
           ,[K_PRINT_SELL]
           ,[K_MODEL_ITEM_CODE]
           ,[K_MODEL_COST]
           ,[K_MODEL_SELL]
           ,[K_MOTOR_ITEM_CODE]
           ,[K_MOTOR_COST]
           ,[K_MOTOR_SELL]
           ,[K_HABEL_ITEM_CODE]
           ,[K_HABEL_COST]
           ,[K_HABEL_SELL]
           ,[K_STORE_TOTAL]
           ,[K_PRINT_TOTAL]
           ,[K_MODEL_TOTAL]
           ,[K_MOTOR_TOTAL]
           ,[K_HABEL_TOTAL]
           ,[K_MODEL_TOTAL_COST]
           ,[QTY_FREE]
           ,[TOTAL_QTY])
 Select
       @COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max))  as [BILL_BRANCH]
           ,@BILL_NUMBER as [BILL_NUMBER]
           ,max(case when name=''ITEM_CODE'' then convert(int,StringValue) else -1 end) as [ITEM_CODE]
           ,max(case when name=''ITEM_NAME'' then convert(nvarchar(max),StringValue) else N'''' end) as [ITEM_NAME]
           ,max(case when name=''QTY'' then convert(float,StringValue) else 0 end) as [QTY]
           ,max(case when name=''UNIT_NAME'' then convert(nvarchar(max),StringValue) else N'''' end) as [UNIT_NAME]
           ,max(case when name=''UNIT_QTY'' then convert(float,StringValue) else 0 end) as [UNIT_QTY]
           ,max(case when name=''STORE_CODE'' then convert(int,StringValue) else 0 end) as [STORE_CODE]
           ,-999999 as [WAJBA_CODE]
           ,N'''' as [WAJBA_NAME]
           ,N'''' as [WAJBA_BALANCE]
           ,@CURRANCY_CODE_INVOICE as [CURRANCY_CODE]
           ,@CURRANCY_EQUAL_INVOICE as [CURRANCY_EQUAL]
           ,max(case when name=''PRICE_COST'' then convert(float,StringValue) else 0 end) as [COST]
           ,max(case when name=''PRICE'' then convert(float,StringValue) else 0 end) as [PRICE]
           ,(max(case when name=''PRICE'' then convert(float,StringValue) else 0 end) * max(case when name=''QTY'' then convert(float,StringValue) else 0 end)) as [TOTAL]
           ,max(case when name=''DISC_PERCENT'' then convert(float,StringValue) else 0 end) as [DISCOUNT_PERCENT_ITEM]
           ,max(case when name=''DISC_AMO'' then convert(float,StringValue) else 0 end) as [DISCOUNT_AMOUNT_ITEM]
           ,GETDATE() as [C_DATE]
           ,1 as [ACTIVE]
           ,-999999 as [BILL_BUY]
           ,max(case when name=''NOTE'' then convert(nvarchar(max),StringValue) else N'''' end) as [ITEM_NOTE_SALES]
           ,N'''' as [NOTE_PRINT]
           ,0 as [IS_PRINT]
           ,N'''' as [USER_PREPARE]
           ,N'''' as [USER_CUT]
           ,0 as [DISCOUNT_TYPE]
           ,0 as [IS_SERIAL]
           ,0 as [IS_TAX]
           ,max(case when name=''TAX_PERCENT_ITEM'' then convert(float,StringValue) else 0 end) as [TAX_PERCENT_ITEM]
           ,max(case when name=''TAX_AMO_ITEM'' then convert(float,StringValue) else 0 end) as [TAX_AMO_ITEM]
           ,max(case when name=''IS_MANDOOB'' then convert(bit,StringValue) else 0 end) as [IS_MANDOOB]
           ,max(case when name=''MANDOOB_PERCENT_ITEM'' then convert(nvarchar(max),StringValue) else 0 end) as [MANDOOB_PERCENT_ITEM]
           ,IIF(max(case when name=''IS_MINUS_MANDOOB'' then convert(int,StringValue) else 0 end)=0, (max(case when name=''totalNetProfitMandob'' then convert(float,StringValue) else 0 end)/ max(case when name=''QTY'' then convert(float,StringValue) else 0 end)),(max(case when name=''totalNetProfitMandob'' then convert(float,StringValue) else 0 end)/ max(case when name=''QTY'' then convert(float,StringValue) else 0 end))*-1) as [MANDOOB_AMO_ITEM]
           ,0 as [IS_ITEM_AREA]
           ,0 as [WIDTH_CM]
           ,0 as [LENGTH_CM]
           ,0 as [AREA_M2]
           ,1 as [QTY_AREA]
           ,0 as [QTY_XZ]
           ,0 as [UNIT_QTY_XZ]
           ,0 as [QTY_X1]
           ,0 as [UNIT_QTY_X1]
           ,0 as [QTY_XY]
           ,0 as [UNIT_QTY_XY]
           ,N'''' as [NOTE_PRINT_2]
           ,0 as [K_STORE_ITEM_CODE]
           ,0 as [K_STORE_COST]
           ,0 as [K_STORE_SELL]
           ,0 as [K_PRINT_ITEM_CODE]
           ,0 as [K_PRINT_COST]
           ,0 as [K_PRINT_SELL]
           ,0 as [K_MODEL_ITEM_CODE]
           ,0 as [K_MODEL_COST]
           ,0 as [K_MODEL_SELL]
           ,0 as [K_MOTOR_ITEM_CODE]
           ,0 as [K_MOTOR_COST]
           ,0 as [K_MOTOR_SELL]
           ,0 as [K_HABEL_ITEM_CODE]
           ,0 as [K_HABEL_COST]
           ,0 as [K_HABEL_SELL]
           ,0 as [K_STORE_TOTAL]
           ,0 as [K_PRINT_TOTAL]
           ,0 as [K_MODEL_TOTAL]
           ,0 as [K_MOTOR_TOTAL]
           ,0 as [K_HABEL_TOTAL]
           ,0 as [K_MODEL_TOTAL_COST]
           ,max(case when name=''QTY_FREE'' then convert(float,StringValue) else 0 end) as [QTY_FREE]
           ,max(case when name=''QTY'' then convert(float,StringValue) else 0 end)+max(case when name=''QTY_FREE'' then convert(float,StringValue) else 0 end)  as [TOTAL_QTY]



From parseJSON
(
       @DETAILS
)
where ValueType = ''string'' OR ValueType = ''boolean'' OR ValueType = ''INT''OR ValueType = ''real''
group by parent_ID
 
 
 -------------------------------------------------------------------------------------------------------

 DECLARE @TOTAL_COST FLOAT ,
 @TOTAL_MANDOOB_ITEM FLOAT,
 @TOTAL_TAX_ITEMS FLOAT,
 @NET_TOTAL FLOAT,
 @CASH_USA FLOAT,
 @CASH_IQ FLOAT,
 @TOTAL_DISCOUNT FLOAT,
 @MANDOOB_CODE INT,
 @SHIP_CODE INT,
@IVC_CODE INT,
 
@CLIENT_NAME NVARCHAR(MAX) ,
 @DESCRIPTION NVARCHAR(MAX)

  SELECT @IVC_CODE =IVC_CODE,@NET_TOTAL=ISNULL(NET_SALES,0),@CASH_USA=ISNULL(CASH_USA,0),@CASH_IQ=ISNULL(CASH_IQ,0) ,@MANDOOB_CODE=ISNULL(MANDOOB_CODE,1),@DESCRIPTION=DESCRIPTION,@SHIP_CODE=SHIP_CODE,@CLIENT_NAME=CLIENT_NAME,@TOTAL_DISCOUNT=TOTAL_DISCOUNT  FROM T_SALES  WHERE BILL_NUMBER=@BILL_NUMBER
 IF @IVC_CODE=2
 BEGIN
 UPDATE T_SALES SET CASH_USA=0,CASH_IQ=0 WHERE BILL_NUMBER=@BILL_NUMBER
 IF @CURRANCY_CODE_INVOICE=1
 BEGIN
  UPDATE T_SALES SET REMAIN_IQ=0,REMAIN_USA=@NET_TOTAL WHERE BILL_NUMBER=@BILL_NUMBER
 END
 ELSE
 BEGIN
 
 UPDATE T_SALES SET REMAIN_USA=0,REMAIN_IQ=@NET_TOTAL WHERE BILL_NUMBER=@BILL_NUMBER
 END
 SET @CASH_USA=0
 SET @CASH_IQ=0
 END
 
 SELECT @TOTAL_COST=ISNULL(SUM(TOTAL_COST),0),@TOTAL_MANDOOB_ITEM=ISNULL(SUM(TOTAL_MANDOOB_ITEM),0),@TOTAL_TAX_ITEMS=ISNULL(SUM(TOTAL_TAX_ITEM),0) FROM T_SALES_DETAILS WHERE BILL_NUMBER=@BILL_NUMBER
UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST,TOTAL_MANDOOB_ITEM=@TOTAL_MANDOOB_ITEM,TOTAL_TAX_ITEM=@TOTAL_TAX_ITEMS WHERE BILL_NUMBER=@BILL_NUMBER


 -------------------------------------------------------------------------------------------------------
DECLARE
@REGION_CODE INT,
@COST_SHIP FLOAT=0,
@COST_SHIP_CLIENT FLOAT=0
SELECT @REGION_CODE=REGION_CODE FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER
IF @REGION_CODE<>0
BEGIN
SELECT  @COST_SHIP_CLIENT=ISNULL(REGION_COST,0) FROM T_REGION_SHIP WHERE REGION_CODE=@REGION_CODE
SELECT @COST_SHIP= ISNULL(REGION_SELL,0) FROM T_REGION_SHIP WHERE REGION_CODE=@REGION_CODE
UPDATE T_SALES SET COST_SHIP=@COST_SHIP,COST_SHIP_CLIENT=@COST_SHIP_CLIENT WHERE BILL_NUMBER=@BILL_NUMBER
END

 -------------------------------------------------------------------------------------------------------
  DECLARE @CNU_EQUL_IQ FLOAT = (SELECT ISNULL(CURRANCY_EQUAL,1)  FROM T_CURRANNCY WHERE CURRANCY_CODE=2),
          @CNU_EQUL_USA As FLOAT = (SELECT ISNULL(CURRANCY_EQUAL,1)  FROM T_CURRANNCY WHERE CURRANCY_CODE=1)

 -------------------------------------------------------------------------------------------------------
DECLARE

@IS_COST_SHIP BIT,
@COST_SHIP_MANDOOB FLOAT=0,
@COST_SHIP_EXP FLOAT=0
SELECT @IVC_CODE=IVC_CODE FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER
IF @IVC_CODE=10 GOTO AFTER_OFFERS

 DECLARE @D_USA FLOAT=0, @C_USA FLOAT=0,  @D_IQ FLOAT=0, @C_IQ FLOAT=0, @CURR_EQUL FLOAT=0, @DOOB_USA FLOAT=0, @DOOB_IQ FLOAT=0, @TAX_USA FLOAT=0, @TAX_IQ FLOAT=0, @SHIP_USA FLOAT=0, @SHIP_IQ FLOAT=0, @SHIP_USA_CRE FLOAT=0, @SHIP_IQ_CRE FLOAT=0, @MANDOOB_SHIP_USA FLOAT=0, @MANDOOB_SHIP_IQ FLOAT=0,@DISC_USA FLOAT=0, @DISC_IQ FLOAT=0
   SELECT @IS_COST_SHIP=ISNULL(IS_COST_SHIP,0) FROM T_MANDOOB WHERE MANDOOB_CODE=@MANDOOB_CODE
   SET @COST_SHIP_EXP=@COST_SHIP
 If @IS_COST_SHIP = 1 
 BEGIN
             SET   @COST_SHIP_MANDOOB = @COST_SHIP
              SET  @COST_SHIP_EXP = 0
            End 

If @CURRANCY_CODE_INVOICE = 1 
BEGIN
                       SET @DOOB_USA = @TOTAL_MANDOOB_ITEM
                        SET @TAX_USA = @TOTAL_TAX_ITEMS
                        SET @D_USA = @NET_TOTAL
                       SET  @C_USA = @COST_SHIP_CLIENT + @CASH_USA + (@CASH_IQ / @CNU_EQUL_IQ)
                        SET  @D_IQ = 0
                        SET  @C_IQ = 0
                        SET  @SHIP_USA = @COST_SHIP
                        SET  @SHIP_IQ = 0
                        SET  @SHIP_USA_CRE = @COST_SHIP - @COST_SHIP_CLIENT
                        SET  @SHIP_IQ_CRE = 0

                        SET  @MANDOOB_SHIP_USA = @COST_SHIP_MANDOOB
                        SET  @MANDOOB_SHIP_IQ = 0
				 SET  @CURR_EQUL = @CNU_EQUL_IQ
				 set @DISC_USA=@TOTAL_DISCOUNT
				 set @DISC_IQ=0
END
ELSE 
If @CURRANCY_CODE_INVOICE = 2 
BEGIN
						 SET  @D_USA = 0
                         SET  @C_USA = 0
                         SET  @D_IQ = @NET_TOTAL
                         SET  @C_IQ = @COST_SHIP_CLIENT + @CASH_IQ + @CASH_USA / (1 / @CNU_EQUL_USA)
                         SET  @DOOB_IQ = @TOTAL_MANDOOB_ITEM
                        SET  @TAX_IQ = @TOTAL_TAX_ITEMS
                         SET  @SHIP_USA = 0
                         SET  @SHIP_IQ = @COST_SHIP_EXP
                         SET  @SHIP_USA_CRE = 0
                         SET  @SHIP_IQ_CRE = @COST_SHIP - @COST_SHIP_CLIENT
                         SET  @MANDOOB_SHIP_USA = 0
                         SET  @MANDOOB_SHIP_IQ = @COST_SHIP_MANDOOB
                  SET  @CURR_EQUL = @CNU_EQUL_USA

				   set @DISC_USA=0
				 set @DISC_IQ=@TOTAL_DISCOUNT
END 

 -------------------------------------------------------------------------------------------------------
 DECLARE @ACCOUNT_SHIP Int = 1,
         @IS_AMO_MANDOOB INT = 1,
         @IS_AMO_CLIENT As INT = 1

SELECT @ACCOUNT_SHIP=ISNULL(ACCOUNT_CODE,0),@IS_AMO_MANDOOB=IS_AMO_MANDOOB,@IS_AMO_CLIENT=IS_AMO_CLIENT FROM T_SALES_SHIPPING WHERE SHIP_CODE=@SHIP_CODE
 -------------------------------------------------------------------------------------------------------
  
 -- supplier
 DECLARE
 @CLIENT_CODE INT 
 SELECT @CLIENT_CODE=CLIENT_CODE FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER
          
	INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
	VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @CLIENT_CODE, N'''', @D_USA, @C_USA, @D_IQ, @C_IQ, @CURRANCY_CODE_INVOICE, @CURR_EQUL,  @DESCRIPTION, 0, @USER_CODE, GETDATE(), @IS_AMO_CLIENT)
                 
-------------------------------------------------------------------------------------------------------

--              
            
DECLARE
  @MANDOOB_ACCOUNT INT ,
  @MANDOOB_NAME NVARCHAR(MAX)
			   SELECT TOP(1) @MANDOOB_ACCOUNT=ACCOUNT_CODE,@MANDOOB_NAME=MANDOOB_NAME  FROM T_MANDOOB WHERE MANDOOB_CODE=@MANDOOB_CODE
  If (@TOTAL_MANDOOB_ITEM <> 0 Or @COST_SHIP_MANDOOB <> 0) And @MANDOOB_ACCOUNT <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @MANDOOB_ACCOUNT, N'''', @MANDOOB_SHIP_USA, @DOOB_USA, @MANDOOB_SHIP_IQ, @DOOB_IQ, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''              : ''+ @MANDOOB_NAME + N''/'' + N''       : '' + @CLIENT_NAME, 0, @USER_CODE, GETDATE(), @IS_AMO_MANDOOB)
   
		 END
-------------------------------------------------------------------------------------------------------

--TAX
            
DECLARE
  @TAX_ACCOUNT INT=(SELECT TOP(1) ISNULL(CLIENT_CODE,0)  FROM T_CLIENT WHERE CLIENT_TYPE=8 AND CLIENT_ACTIVE=1)  
   If  @TOTAL_TAX_ITEMS <> 0   And @TAX_ACCOUNT <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @TAX_ACCOUNT, N'''', 0, @TAX_USA, 0, @TAX_IQ, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''               ''  + N''/'' + N''       : '' + @CLIENT_NAME, 0, @USER_CODE, GETDATE(), 1)
   
		 END                     

-------------------------------------------------------------------------------------------------------

--COST_SHIP ACCOUNT
            
 SET @COST_SHIP_EXP=@COST_SHIP_EXP + @COST_SHIP - @COST_SHIP_CLIENT

   If  @COST_SHIP_EXP <> 0 And @ACCOUNT_SHIP <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @ACCOUNT_SHIP, N'''', @SHIP_USA, @SHIP_USA_CRE, @SHIP_IQ, @SHIP_IQ_CRE, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''                    ''  + N''/'' + N''       : '' + @CLIENT_NAME, 0, @USER_CODE, GETDATE(), @IS_AMO_CLIENT)
   
		 END                     

-------------------------------------------------------------------------------------------------------

--CASH
            
 SET @COST_SHIP_EXP=@COST_SHIP_EXP + @COST_SHIP - @COST_SHIP_CLIENT

   If  @CASH_USA <> 0 OR @CASH_IQ <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @BOX_USER, N'''', @CASH_USA, 0, @CASH_IQ, 0, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''('' + N''       : '' + @CLIENT_NAME + N'')'' + @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)
   
		 END 
-------------------------------------------------------------------------------------------------------

-- DISCOUNT
            
 SET @COST_SHIP_EXP=@COST_SHIP_EXP + @COST_SHIP - @COST_SHIP_CLIENT

   If  @TOTAL_DISCOUNT<>0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, 4001, N'''', @DISC_USA, 0, @DISC_IQ, 0, @CURRANCY_CODE_INVOICE, @CURR_EQUL, N''('' + N''       : '' + @CLIENT_NAME + N'')'' + @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)
   
		 END 

-------------------------------------------------------------------------------------------------------

-- STORE BOX

INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[ACTIVE])

SELECT [BILL_BRANCH]
      ,[BILL_NUMBER]
	  ,(SELECT BILL_DATE FROM T_SALES WHERE BILL_NUMBER = @BILL_NUMBER)
	  ,2
	  ,0
	 ,[STORE_CODE]
	  ,NULL
	  ,[ITEM_CODE]
     ,ISNULL((SELECT TOP(1) UNIT_CODE FROM T_ITEM_UNIT WHERE (ITEM_CODE= (SELECT TOP(1) ITEM_CODE FROM [dbo].[T_SALES_DETAILS] WHERE BILL_NUMBER = @BILL_NUMBER AND ITEM_CODE=[T_SALES_DETAILS].ITEM_CODE AND UNIT_NAME LIKE [T_SALES_DETAILS].UNIT_NAME) )),1)
      ,0
	  ,[TOTAL_QTY]
      ,[UNIT_QTY]
      ,1
      
  FROM [dbo].[T_SALES_DETAILS] WHERE BILL_NUMBER = @BILL_NUMBER


 -------------------------------------------------------------------------------------------------------


-- FINISHED



AFTER_OFFERS:

 
SELECT @BILL_NUMBER AS ID, N''عملية الاضافة , تمت بنجاح ..  '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000

RETTTTT:
COMMIT
	IF @@ERROR <>0
	BEGIN
	SELECT 0 AS ID, N''خطأ في عملية الاضافة ..  '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
	ROLLBACK 
 
SELECT 0 AS ID, N''خطأ في عملية الاضافة ..  '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
	RETURN
	END

return
 

END	--END OF PROGRAM
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_INSERT_MANDOOB_VISITS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_INSERT_MANDOOB_VISITS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_MANDOOB_INSERT_MANDOOB_VISITS]
      @CLIENT_CODE  int 
           ,@CLIENT_BARCODE  nvarchar(50)  
           ,@LAT  nvarchar(max)   
           ,@LNG  nvarchar(max)  
           ,@USER_CODE  int  
           ,@MANDOOB_CODE  int  
           ,@D_DATE  date  
           ,@D_TIME  time(7) ,
        @NOTE  nvarchar(max)  



AS

IF @CLIENT_CODE = 0 
BEGIN
  SELECT @CLIENT_CODE = CLIENT_CODE FROM T_CLIENT WHERE CLIENT_BARCODE = @CLIENT_BARCODE;
END
 
BEGIN TRAN
BEGIN
INSERT INTO [dbo].[T_MANDOOB_VISITS]
           ([CLIENT_CODE]
           ,[CLIENT_BARCODE]
           ,[LAT]
           ,[LNG]
           ,[USER_CODE]
           ,[MANDOOB_CODE]
           ,[D_DATE]
           ,[D_TIME]
       ,[NOTE])
     VALUES
           (@CLIENT_CODE 
           ,@CLIENT_BARCODE 
           ,ISNULL(@LAT ,N'''')
           ,ISNULL(@LNG ,N'''')
           ,@USER_CODE 
           ,@MANDOOB_CODE 
           ,@D_DATE 
           ,@D_TIME 
       ,@NOTE)
 
  IF @@ROWCOUNT = 0
  BEGIN
  RAISERROR(''حدث خطأ اثناء اضافة الزيارات'', 16, 1);
  RETURN;
  END

END
COMMIT
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_INSERT_PERMISSION]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_INSERT_PERMISSION]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_MANDOOB_INSERT_PERMISSION]
      @LEVEL_CODE  int ,@LEVEL_NAME  nvarchar(MAX),@LEVEL_MANDOOB_APP  nvarchar(max)   
AS

IF @LEVEL_CODE = 0 
BEGIN
	SELECT @LEVEL_CODE = MAX(LEVEL_CODE) +1 FROM T_LEVEL
	INSERT INTO T_LEVEL (LEVEL_CODE,LEVEL_NAME,LEVEL_MANDOOB_APP) VALUES (@LEVEL_CODE,@LEVEL_NAME,@LEVEL_MANDOOB_APP)
END

ELSE 
BEGIN
	UPDATE T_LEVEL SET LEVEL_NAME=@LEVEL_NAME , LEVEL_MANDOOB_APP =@LEVEL_MANDOOB_APP WHERE LEVEL_CODE=@LEVEL_CODE
END
IF @@ROWCOUNT = 0
BEGIN
RAISERROR(''حدث خطأ اثناء تحديث الصلاحيات'', 16, 1);
RETURN;
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_INSERT_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_INSERT_SANAD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_MANDOOB_INSERT_SANAD]
@USER_CREATE NVARCHAR(MAX),
@MOVE_CODE INT,
@FROM_ACCOUNT INT ,
@TO_ACCOUNT INT ,
@AMO_USA float ,
@AMO_IQ float ,
@CLIENT_BARCODE VARCHAR(MAX) ,

@BILL_RELATION	int	,
@B_CODE_RELATION	int	,
@DESCRIPTION NVARCHAR(MAX) 
AS
declare
@BILL_NUMBER INT,
@BILL_BRANCH   NVARCHAR(MAX),
@BILL_DATE DATE = GETDATE(),
@BILL_TIME DATETIME = GETDATE(),
@FROM_ACC   NVARCHAR(MAX),
@TO_ACC   NVARCHAR(MAX),
@CURRANCY_CODE  INT,
@CURRANCY_USA float	,
@CURRANCY_IQ float	,
@CURRANCY_EQUAL float	,
@USER_CODE INT,
@COMPANY_TITAL   NVARCHAR(MAX)

IF @FROM_ACCOUNT =0 
BEGIN
	SELECT @FROM_ACCOUNT = CLIENT_CODE FROM T_CLIENT WHERE CLIENT_BARCODE = @CLIENT_BARCODE;
END
 
BEGIN TRAN
BEGIN
 
SELECT @BILL_NUMBER=ISNULL(MAX(BILL_NUMBER),0)+1 FROM T_SANAD  

SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
SELECT @FROM_ACC=ACCOUNT_NAME FROM T_ACCOUNTS WHERE ACCOUNT_CODE=@FROM_ACCOUNT
SELECT @TO_ACC=ACCOUNT_NAME FROM T_ACCOUNTS WHERE ACCOUNT_CODE=@TO_ACCOUNT
SET @BILL_BRANCH=@COMPANY_TITAL + CAST(@BILL_NUMBER AS nvarchar)
IF @CURRANCY_CODE=1
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=1/NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_IQ
END

ELSE
BEGIN
SELECT @CURRANCY_USA=NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_USA
END


 
if not exists (select * from T_SANAD where BILL_BRANCH = @BILL_BRANCH )  INSERT INTO [dbo].[T_SANAD] ([BILL_BRANCH],[BILL_NUMBER], [BILL_DATE], [BILL_TIME], [USER_CREATE], [CURRANCY_EQUAL], [MOVE_CODE], [FROM_ACCOUNT], [TO_ACCCOUNT], [FROM_ACC], [TO_ACC], [AMO_USA], [AMO_IQ], [CONV_USA], [CONV_IQ], [DESCRIPTION], [C_DATE],  [SECURETY_CODE], [SANAD_ACTIVE], [OFFER_CODE], [IS_TRANS],[BILL_RELATION],[B_CODE]) 
VALUES (@BILL_BRANCH,@BILL_NUMBER, @BILL_DATE, @BILL_TIME, @USER_CREATE, @CURRANCY_EQUAL, @MOVE_CODE, @FROM_ACCOUNT, @TO_ACCOUNT, @FROM_ACC, @TO_ACC, @AMO_USA, @AMO_IQ, N'''', N'''', @DESCRIPTION, GETDATE(),  1, 1, 1, 0,@BILL_RELATION,@B_CODE_RELATION) 
else 
UPDATE [dbo].[T_SANAD] SET [BILL_BRANCH] = @BILL_BRANCH,[BILL_NUMBER] = @BILL_NUMBER, [BILL_DATE] = @BILL_DATE, [BILL_TIME] = @BILL_TIME, [CURRANCY_EQUAL] = @CURRANCY_EQUAL, [MOVE_CODE] = @MOVE_CODE, [FROM_ACCOUNT] = @FROM_ACCOUNT, [TO_ACCCOUNT] = @TO_ACCOUNT, [FROM_ACC] = @FROM_ACC, [TO_ACC] = @TO_ACC, [AMO_USA] = @AMO_USA, [AMO_IQ] = @AMO_IQ, [CONV_USA] = N'''', [CONV_IQ] = N'''', [DESCRIPTION] = @DESCRIPTION, [C_UPDATE] = GETDATE(), [USER_UPDATE] = @USER_CREATE, [SECURETY_CODE] = 1, [SANAD_ACTIVE] = 1, [OFFER_CODE] = 1, [IS_TRANS] = 0  WHERE BILL_BRANCH=@BILL_BRANCH  

SELECT TOP(1) @USER_CODE=ISNULL(USER_CODE,1) FROM T_USERS WHERE [USER_NAME] LIKE @USER_CREATE
--DELETE FROM T_BOX WHERE BILL_BRANCH=@BILL_BRANCH AND B_CODE=5

-- FROM
INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
 VALUES (@BILL_BRANCH,@BILL_NUMBER, CAST(@BILL_NUMBER AS nvarchar), @BILL_DATE, @BILL_TIME, @MOVE_CODE, 5, 1, @FROM_ACCOUNT, N'''', 0, @AMO_USA, 0, @AMO_IQ, @CURRANCY_CODE, @CURRANCY_EQUAL,  @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)
-- TO
INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE]) 
VALUES (@BILL_BRANCH,@BILL_NUMBER, CAST(@BILL_NUMBER AS nvarchar), @BILL_DATE, @BILL_TIME, @MOVE_CODE, 5, 1, @TO_ACCOUNT, N'''', @AMO_USA, 0, @AMO_IQ, 0, @CURRANCY_CODE, @CURRANCY_EQUAL,  @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)


END	--END OF PROGRAM
commit































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_LOGIN]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_LOGIN]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_MANDOOB_LOGIN] 
  @USER_NAME VARCHAR(MAX), 
  @USER_PWD VARCHAR(MAX)
  AS
BEGIN 
	DECLARE @CHANGE_STATUS_TO_PREVIOUS_STATUS BIT = 0 ,@IS_TRY BIT

	SELECT @IS_TRY = IS_TRY FROM T_USERS WHERE USER_NAME = @USER_NAME AND USER_PWD = @USER_PWD;
	IF @IS_TRY = 1
	BEGIN
    RAISERROR(''انتهت الفترة التجريبية لاستخدام التطبيق'', 16, 1);
    RETURN;
	END
	SELECT  U.*, C.CURRANCY_CODE FROM T_USERS AS U CROSS APPLY  (SELECT CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY = 1) AS C WHERE U.USER_NAME = @USER_NAME AND U.USER_PWD = @USER_PWD AND U.ACTIVE =1 AND IS_TRY = 0
	IF @@ROWCOUNT = 0
	BEGIN
	RAISERROR(''يرجى التحقق من اسم المستخدم او كلمة المرور '', 16, 1);
	RETURN;
	END


	SELECT L.LEVEL_CODE ,L.LEVEL_MANDOOB_APP,@CHANGE_STATUS_TO_PREVIOUS_STATUS AS CHANGE_STATUS_TO_PREVIOUS_STATUS FROM T_LEVEL AS L INNER JOIN T_USERS AS U  ON L.LEVEL_CODE = U.LEVEL_CODE  WHERE U.USER_NAME =@USER_NAME AND U.USER_PWD = @USER_PWD 
	IF @@ROWCOUNT = 0
	BEGIN
	RAISERROR(''حدث خطأ اثناء جلب الصلاحيات'', 16, 1);
	RETURN;
	END
	SELECT COMPANY_NAME,COMPANY_PHONE,COMPANY_ADDRESS FROM T_COMPANY2 WHERE COMPANY_CODE=1
	IF @@ROWCOUNT = 0
	BEGIN
	RAISERROR(''حدث خطأ اثناء جلب معلومات الشركة'', 16, 1);
	RETURN;
	END
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_MANDOOB_UPDATE_DELIVERY_ORDERS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_MANDOOB_UPDATE_DELIVERY_ORDERS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_MANDOOB_UPDATE_DELIVERY_ORDERS] 
@TAG_PROCCESS_CODE INT ,@BILL_NUMBER INT
AS
BEGIN
UPDATE T_SALES SET TAG_PROCCESS_CODE = @TAG_PROCCESS_CODE WHERE BILL_NUMBER = @BILL_NUMBER
	IF @@ROWCOUNT = 0
	BEGIN
	RAISERROR(''لم يتم العثور على الفاتورة'', 16, 1);
	RETURN;
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_PLAY_CARD_ADD_BALANCE_CARD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_PLAY_CARD_ADD_BALANCE_CARD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'





CREATE proc [dbo].[P_API_PLAY_CARD_ADD_BALANCE_CARD] 
 
	 
	@CLIENT_BARCODE NVARCHAR(MAX) ,
@ID_AMOUNT INT ,
@USER_CODE  INT
	as

	set nocount on
	 
	begin 
	 
DECLARE  @COUNT_CLIENT INT	,@CURRANCY_CODE_PRIMARY INT,@BILL_INSERTED INT	,@CLIENT_CODE INT,@BOX_NAME NVARCHAR(MAX),@USER_BOX INT ,@CLIENT_NAME NVARCHAR(MAX),@COMPANY_TITAL NVARCHAR(MAX),@BILL_BRANCH NVARCHAR(MAX),@USER_CREATE NVARCHAR(MAX)

SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
SELECT @CURRANCY_CODE_PRIMARY=CURRANCY_CODE  FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1 

 SELECT @COUNT_CLIENT=COUNT(CLIENT_CODE) FROM T_CLIENT WHERE CLIENT_ACTIVE=1 AND CLIENT_BARCODE LIKE @CLIENT_BARCODE  
 IF @COUNT_CLIENT=0
 BEGIN

 SELECT 0 AS ID, N''Error , البطاقة غير مسجلة'' AS  N''Response''  FROM T_CLIENT WHERE CLIENT_CODE=2100000

 RETURN
 END
 else if @COUNT_CLIENT>0
 begin

 Select @BILL_INSERTED=ISNULL(MAX(BILL_NUMBER),0) + 1 FROM T_SANAD_CNY 
 SELECT TOP(1) @CLIENT_CODE=CLIENT_CODE, @CLIENT_NAME=CLIENT_NAME  FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE ORDER BY CLIENT_CODE DESC

  SELECT TOP(1) @CLIENT_CODE= CLIENT_CODE  FROM T_CLIENT WHERE CLIENT_ACTIVE=1 AND CLIENT_BARCODE LIKE @CLIENT_BARCODE   ORDER BY CLIENT_CODE DESC
 SELECT TOP(1) @USER_BOX= BOX_CODE,@USER_CREATE=USER_NAME  FROM T_USERS WHERE USER_CODE=@USER_CODE

 declare
  @A_USA_OUT int= 0 
                    ,@A_IQ_OUT float = 0
                    ,@A_USA_IN float = 0
                    ,@A_IQ_IN float= 0
                    ,@A_SMAH_USA_OUT float= 0
                    ,@A_SMAH_IQ_OUT float= 0
                    ,@A_SMAH_USA_IN float= 0
                    ,@A_SMAH_IQ_IN float= 0

  	 ,@MOVE_SMAH_OUT int = 0

	 select @A_IQ_OUT=AMO,@A_IQ_IN=AMO,@A_SMAH_IQ_OUT=FREE_AMO  from T_AMOUNT_CARD where T_ID=@ID_AMOUNT 
                If @A_SMAH_IQ_OUT <> 0  set  @MOVE_SMAH_OUT = 201

                  

       set @BILL_BRANCH=@COMPANY_TITAL+ CAST(@BILL_INSERTED AS nvarchar(max))         
 SELECT @BOX_NAME=ACCOUNT_NAME FROM T_ACCOUNTS WHERE ACCOUNT_CODE=@USER_BOX
INSERT INTO [dbo].[T_SANAD_CNY] ([BILL_BRANCH], [BILL_NUMBER], [BILL_DATE], [BILL_TIME], [USER_CREATE], [CURRANCY_EQUAL], [MOVE_CODE], [FROM_ACCOUNT], [TO_ACCCOUNT], [FROM_ACC], [TO_ACC], [AMO_USA_OUT], [AMO_IQ_OUT], [AMO_USA_IN], [AMO_IQ_IN], [MOVE_CODE_SMAH_OUT], [AMO_USA_SMAH_OUT], [AMO_IQ_SMAH_OUT], [MOVE_CODE_SMAH_IN], [AMO_USA_SMAH_IN], [AMO_IQ_SMAH_IN], [CONV_USA], [CONV_IQ], [DESCRIPTION], [C_DATE], [SECURETY_CODE], [SANAD_ACTIVE],  [OFFER_CODE],[IS_TRANS],  [BILL_SALES_BRANCH],[DISCOUNT_PERC], [CURRANCR_BUY], [TOTAL_BUY])
  VALUES (@BILL_BRANCH, @BILL_INSERTED, getdate(), getdate(), @USER_CREATE, 1, 2, @CLIENT_CODE, @USER_BOX, @CLIENT_NAME, @BOX_NAME, @A_USA_OUT, @A_IQ_OUT, @A_USA_IN, @A_IQ_IN, @MOVE_SMAH_OUT, @A_SMAH_USA_OUT, @A_SMAH_IQ_OUT, 0, @A_SMAH_USA_IN, @A_SMAH_IQ_IN, N'''',  N'''', N''تعبئة البطاقة للعميل : '' + @CLIENT_NAME, getdate(), 1, 1, 1,0, N''0'',0, 0, 0) 


INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
 VALUES (@BILL_BRANCH,@BILL_INSERTED, @BILL_INSERTED,getdate(), getdate(), 2, 15, 1, @CLIENT_CODE, N'''', 0, @A_USA_OUT, 0, @A_IQ_OUT, @CURRANCY_CODE_PRIMARY, 1,  N''تعبئة البطاقة للعميل : '' + @CLIENT_NAME, 0, @USER_CODE, getdate(), 1)

 INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE]) 
 VALUES (@BILL_BRANCH,@BILL_INSERTED, @BILL_INSERTED, getdate(), getdate(), 2, 15, 1, @USER_BOX, N'''',  @A_USA_IN, 0, @A_IQ_IN, 0, @CURRANCY_CODE_PRIMARY, 1,  N''تعبئة البطاقة للعميل : '' + @CLIENT_NAME, 0, @USER_CODE,  getdate(), 1)  

     If @A_SMAH_USA_OUT <> 0 Or @A_SMAH_IQ_OUT <> 0  
	 BEGIN

                        If @MOVE_SMAH_OUT = 201 
						BEGIN
                          INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
						   VALUES (@BILL_BRANCH, @BILL_INSERTED, @BILL_INSERTED, getdate(), getdate(), 2, 15, 1, @CLIENT_CODE, N'''', 0, @A_SMAH_USA_OUT, 0, @A_SMAH_IQ_OUT, @CURRANCY_CODE_PRIMARY, 1, N''سماح له - '' + N''تعبئة البطاقة للعميل : '' + @CLIENT_NAME, 0, @USER_CODE,getdate(), 1)  
                            
                           INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH], [BILL_NUMBER],[BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
						    VALUES (@BILL_BRANCH,@BILL_INSERTED, @BILL_INSERTED, getdate(), getdate(), 2, 15, 1, 4000, N'''', @A_SMAH_USA_OUT, 0, @A_SMAH_IQ_OUT, 0, @CURRANCY_CODE_PRIMARY, 1,   N''سماح له - '' + N''تعبئة البطاقة للعميل : '' + @CLIENT_NAME, 0, @USER_CODE, getdate(), 1)  
							 

                        End  
        End  



		SELECT 1 AS ID, N''عملية الشحن , تمت بنجاح ..  '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
		 
	 RETURN
		END
		ELSE 
		BEGIN
		SELECT 2 AS ID, N''Error , فشل في عملية الشحن '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
		 RETURN
		END	 
	 
	end 
	
	

	





' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_PLAY_CARD_CLIENT_PLAYER]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_PLAY_CARD_CLIENT_PLAYER]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE PROCEDURE [dbo].[P_API_PLAY_CARD_CLIENT_PLAYER]
@CLIENT_BARCODE NVARCHAR(MAX),
@ITEM_BARCODE  NVARCHAR(MAX),
@USER_CODE INT



AS
DECLARE 
@ITEM_PRICE float ,
@ITEM_COST float ,
@CLIENT_CODE INT,
@CC_COUNT INT,
@CC_ITEM INT,
@UNIT_CODE INT,
@CC_COUNT_TIME INT,
@ITEM_NAME  NVARCHAR(MAX),
@UNIT_NAME  NVARCHAR(MAX),
@FROM_TIME TIME(7),
@TO_TIME TIME(7),
@ITEM_CODE INT,
@CLIENT_TYPE_CODE INT,
@BALANCE float  ,
@SUBMIT_MSG  NVARCHAR(MAX),
@SUBMIT_FLAG INT  



BEGIN TRAN
BEGIN
SET @SUBMIT_FLAG=0
SET @SUBMIT_MSG=N''البطاقة غير معرفة''
SET @BALANCE=0
--------------------------CHECK PIN CODE------------------------------------------------
SELECT @CC_COUNT=COUNT(CLIENT_CODE )FROM T_CLIENT WHERE CLIENT_PIN_CODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1

IF @CC_COUNT>0
BEGIN

SELECT TOP(1)@CLIENT_CODE=CLIENT_CODE, @FROM_TIME=FROM_TIME,@TO_TIME=TO_TIME FROM T_CLIENT WHERE CLIENT_PIN_CODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1

SELECT @CC_COUNT_TIME=COUNT(CLIENT_CODE ) FROM T_CLIENT WHERE CONVERT(time, GETDATE()) BETWEEN @FROM_TIME AND @TO_TIME
IF @CC_COUNT_TIME=0
BEGIN

SET @SUBMIT_FLAG=0
 SET @SUBMIT_MSG=N''البطاقة غير معرفة''
GOTO FINSHSH

END

ELSE
BEGIN
SET @BALANCE=1000000
GOTO JUMP_PIN_CODE
END

END
----------------------END------CHECK PIN CODE------------------------------------------------
SELECT @CC_COUNT=COUNT(CLIENT_CODE )FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1

IF @CC_COUNT=0
BEGIN

SET @SUBMIT_FLAG=0
GOTO FINSHSH

END

ELSE

BEGIN
SELECT TOP(1) @CLIENT_CODE=ISNULL(CLIENT_CODE ,0),@CLIENT_TYPE_CODE=CLIENT_TYPE FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1
IF @CLIENT_TYPE_CODE=9 -- MASTER
BEGIN
SET @SUBMIT_FLAG=1 -- MASTER
SET @SUBMIT_MSG=N''تمت العملية بنجاح''
GOTO FINSHSH
END

SELECT TOP(1)  @BALANCE=ISNULL(BALANCE_CUR ,0)*-1  FROM   V_ACC3  WHERE   ACCOUNT_CODE=@CLIENT_CODE 
JUMP_PIN_CODE:
SELECT @CC_ITEM=count(ITEM_CODE)  FROM T_ITEMS WHERE ACTIVE=1 AND ITEM_CODE>0 AND ITEM_BARCODE LIKE @ITEM_BARCODE
if @CC_ITEM=0
begin
SET @SUBMIT_FLAG=0
SET @SUBMIT_MSG=N''رمز اللعبة غير مدخل''
GOTO FINSHSH
end
ELSE
BEGIN

SELECT @ITEM_PRICE=ISNULL(SELL,0),@ITEM_COST=ISNULL(COST,0),@ITEM_CODE=ITEM_CODE,@ITEM_NAME=ITEM_NAME  FROM T_ITEMS WHERE ACTIVE=1 AND ITEM_CODE>0 AND ITEM_BARCODE LIKE @ITEM_BARCODE
SELECT @UNIT_NAME=UNIT_NAME,@UNIT_CODE=UNIT_CODE  FROM T_ITEM_BARCODE WHERE ITEM_BARCODE LIKE @ITEM_BARCODE

IF @BALANCE<@ITEM_PRICE
BEGIN

SET @SUBMIT_FLAG=2
SET @SUBMIT_MSG=N''رصيد البطاقة غير كافي''
GOTO FINSHSH

END
ELSE
BEGIN
DECLARE
@CURRANCY_CODE INT,
@CURRANCY_USA float	,
@CURRANCY_IQ float	,
@CURRANCY_EQUAL float	,
@MAX_BILL INT,
@USER_CREATE nvarchar(MAX),	
@CLIENT_NAME nvarchar(MAX),	
@COMPANY_TITAL NVARCHAR(MAX)
SELECT @COMPANY_TITAL=COMPANY_TITAL FROM T_COMPANY WHERE T_ID=1
SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
SELECT @CLIENT_NAME=CLIENT_NAME FROM T_CLIENT WHERE CLIENT_CODE=@CLIENT_CODE
SELECT @USER_CREATE=[USER_NAME] FROM T_USERS WHERE  USER_CODE=@USER_CODE


SELECT @MAX_BILL=ISNULL(MAX(BILL_NUMBER),0) + 1 FROM T_SALES
INSERT INTO [dbo].[T_SALES]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_INVOICE]
           ,[BILL_DATE]
           ,[OFFER_CODE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[CLIENT_CODE]
           ,[CLIENT_NAME]
           ,[CLIENT_PHONE]
           ,[CLIENT_ADRESS]
           ,[MANDOOB_CODE]
           ,[DESCRIPTION]
           ,[TYPE_PRICE_SELL]
           ,[STORE_CODE]
           ,[USER_CREATE]
           ,[SECURETY_CODE]
           ,[TOTAL_SALES]
           ,[DISCOUNT_ITEMS]
           ,[DISCOUNT_PERCENT]
           ,[DISCOUNT_AMOUNT]
           ,[TOTAL_DISCOUNT]
           ,[NET_SALES]
           ,[TOTAL_COST]
           ,[IVC_CODE]
           ,[DAY_CASH]
           ,[DATE_CASH]
           ,[TOT_CONV]
           ,[ACCOUNT_CODE]
           ,[CASH_USA]
           ,[REMAIN_USA]
           ,[CASH_IQ]
           ,[REMAIN_IQ]
           ,[C_DATE]
           ,[C_UPDATE]
           ,[USER_UPDATE]
           ,[ACTIVE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[FLAG_CASH]
           ,[IS_OUT]
           ,[CURRANCY_SALES])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,NULL
           ,GETDATE()
           ,1
           ,@CURRANCY_CODE
           ,1
           ,@CLIENT_CODE
           ,@CLIENT_NAME
            ,NULL
           ,NULL
           ,0
           ,NULL
           ,1
           ,0
           ,@USER_CREATE
           ,1
           ,@ITEM_PRICE
           ,0
           ,0
           ,0
           ,0
           ,@ITEM_PRICE
           ,@ITEM_COST
           ,2
           ,0
           ,GETDATE()
           ,NULL
           ,5000
           ,0
           ,0
           ,0
           ,0
           ,GETDATE()
           ,NULL
           ,NULL
           ,1
           ,0
           ,0
           ,1
           ,0
           ,1)



IF @CURRANCY_CODE=1
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=1/NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_IQ
INSERT INTO [dbo].[T_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_STR]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[MOVE_CODE]
           ,[B_CODE]
           ,[BRANCH_CODE]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_DESCRIPTION]
           ,[DEBIT]
           ,[CREDIT]
           ,[DEBIT_IQ]
           ,[CREDIT_IQ]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[DESCRIPTION]
           ,[DEAL_CODE]
           ,[USER_CODE]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,@MAX_BILL
           ,GETDATE()
          ,GETDATE()
           ,0
           ,2
           ,1
           ,@CLIENT_CODE
           ,NULL
           ,@ITEM_PRICE
           ,0
           ,0
           ,0
           ,@CURRANCY_CODE
           ,@CURRANCY_EQUAL
           ,NULL
           ,0
           ,@USER_CODE
           ,GETDATE()
           ,1)


END

ELSE
BEGIN
SELECT @CURRANCY_USA=NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_USA

INSERT INTO [dbo].[T_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_STR]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[MOVE_CODE]
           ,[B_CODE]
           ,[BRANCH_CODE]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_DESCRIPTION]
           ,[DEBIT]
           ,[CREDIT]
           ,[DEBIT_IQ]
           ,[CREDIT_IQ]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[DESCRIPTION]
           ,[DEAL_CODE]
           ,[USER_CODE]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,@MAX_BILL
           ,GETDATE()
          ,GETDATE()
           ,0
           ,2
           ,1
           ,@CLIENT_CODE
           ,NULL
           ,0
           ,0
           ,@ITEM_PRICE
           ,0
           ,@CURRANCY_CODE
           ,@CURRANCY_EQUAL
           ,NULL
           ,0
           ,@USER_CODE
           ,GETDATE()
           ,1)

END


INSERT INTO [dbo].[T_SALES_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[TOTAL]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY]
           ,[ITEM_NOTE_SALES])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
           ,@ITEM_CODE
           ,@ITEM_NAME
           ,1
           ,@UNIT_NAME
           ,1
           ,0
           ,-999999
           ,NULL
           ,NULL
           ,@CURRANCY_CODE
           ,1
           ,@ITEM_COST
           ,@ITEM_PRICE
           ,@ITEM_PRICE
           ,0
           ,0
           ,GETDATE()
           ,1
           ,-999999
           ,NULL)
INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[C_DATE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
           ,GETDATE()
           ,2
           ,-999999
           ,0
           ,GETDATE()
           ,@ITEM_CODE
           ,@UNIT_CODE
           ,0
           ,1
           ,1
           ,GETDATE()
           ,0
           ,0
           ,1)
SELECT TOP(1)  @BALANCE=ISNULL(BALANCE_CUR ,0)*-1  FROM   V_ACC3  WHERE   ACCOUNT_CODE=@CLIENT_CODE 
 --****************************************************

SET @SUBMIT_FLAG=1
SET @SUBMIT_MSG=N''تمت العملية بنجاح''
END

END

END


FINSHSH:
SELECT @SUBMIT_FLAG AS SUBMIT_FLAG,@SUBMIT_MSG AS SUBMIT_MSG ,@BALANCE AS BALANCE



END	--END OF PROGRAM
commit




























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_PLAY_CARD_GET_AMOUNT_CARD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_PLAY_CARD_GET_AMOUNT_CARD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'





CREATE proc [dbo].[P_API_PLAY_CARD_GET_AMOUNT_CARD] 
 
	 
	 

	as

	set nocount on
	 
	begin 
	 
SELECT * FROM T_AMOUNT_CARD

	end 
	
	

	





' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_PLAY_CARD_GET_BALANCE_CARD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_PLAY_CARD_GET_BALANCE_CARD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




CREATE proc [dbo].[P_API_PLAY_CARD_GET_BALANCE_CARD] 
 
	 
	@CLIENT_BARCODE NVARCHAR(MAX) 

	as

	set nocount on
	 
	begin 
	 
DECLARE  @COUNT_CLIENT INT	,@CLIENT_CODE INT 
 


 SELECT @COUNT_CLIENT=COUNT(CLIENT_CODE) FROM T_CLIENT WHERE CLIENT_ACTIVE=1 AND CLIENT_BARCODE LIKE @CLIENT_BARCODE  
 IF @COUNT_CLIENT=0
 BEGIN

 SELECT 0 AS ID, N''Error , البطاقة غير مسجلة'' AS  N''Response''  FROM T_CLIENT WHERE CLIENT_CODE=2100000

 RETURN
 END
 else if @COUNT_CLIENT>0
 begin

  SELECT TOP(1) @CLIENT_CODE= CLIENT_CODE  FROM T_CLIENT WHERE CLIENT_ACTIVE=1 AND CLIENT_BARCODE LIKE @CLIENT_BARCODE   ORDER BY CLIENT_CODE DESC

 SELECT ACCOUNT_NAME ,ISNULL(BALANCE_CUR,0)*-1 AS BALANCE_CUR   FROM V_ACC_B WHERE ACCOUNT_CODE=@CLIENT_CODE   
		
 
		SELECT 1 AS ID, N''successfully done , Get Data ..  '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
	 RETURN
		END
		ELSE 
		BEGIN
		SELECT 2 AS ID, N''Error , Get Data '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
		 RETURN
		END	 
	 
	end 
	
	

	




' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_PLAY_CARD_GET_ITEM]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_PLAY_CARD_GET_ITEM]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE proc [dbo].[P_API_PLAY_CARD_GET_ITEM] 
 
	as

	set nocount on
	 
	begin 
	 
	  
SELECT  *  FROM   V_ITEMS_BALANCE_MIN_PHARMA   

		
    
	 
	 
	end 

	

	
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_PLAY_CARD_GET_USER_CODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_PLAY_CARD_GET_USER_CODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_PLAY_CARD_GET_USER_CODE] 
 @USER_NAME NVARCHAR(MAX),
@USER_PWD  NVARCHAR(MAX)
	as

	set nocount on
	 
	begin 
	 
	  
SELECT    *  FROM   T_USERS WHERE  USER_NAME=@USER_NAME AND USER_PWD=@USER_PWD

		
    
	 
	 
	end 

	

	

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_PRICE_CHECKER_GET_ITEM_BY_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_PRICE_CHECKER_GET_ITEM_BY_BARCODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE proc [dbo].[P_API_PRICE_CHECKER_GET_ITEM_BY_BARCODE] 
@ITEM_BARCODE NVARCHAR(MAX)
  AS
DECLARE @ITEM_CODE INT,@SHOW_BALANC AS BIT = 0,@SHOW_UNIT2 AS BIT = 1,@ALERT AS BIT = 0,@REFRESH_TIME AS INT = 5
BEGIN 

  SELECT TOP(1) @ITEM_CODE=  ITEM_CODE FROM T_ITEM_BARCODE WHERE ITEM_BARCODE=@ITEM_BARCODE
  IF @@ROWCOUNT = 0
  BEGIN
  RAISERROR(N''المادة غير معرفة'', 16, 1);
  RETURN;
  END
  SELECT ITEM_CODE,ITEM_NAME,PRICE_SALE_1,SELL2,UNIT2_QTY,BALANCE,UNIT_NAME,CONCAT(UNIT2_NAME, '' * '', UNIT2_QTY, '' '', UNIT_NAME) AS UNIT2_NAME FROM V_ITEMS_BALANCE_MIN_PHARMA WHERE ITEM_CODE=@ITEM_CODE and UNIT_CODE=1
  SELECT @SHOW_BALANC  AS SHOW_BALANCE, @SHOW_UNIT2 AS SHOW_UNIT2 ,@ALERT AS ALERT,@REFRESH_TIME AS REFRESH
  IF @@ROWCOUNT = 0
  BEGIN
  RAISERROR(N''المادة غير معرفة'', 16, 1);
  RETURN;
  END

END' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_RETURN_BILL_NUMBER]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_RETURN_BILL_NUMBER]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[P_API_RETURN_BILL_NUMBER]
@BILL_NUMBER_RETURN INT,
@USER_CREATE NVARCHAR(MAX)
AS
DECLARE
@BILL_NUMBER INT,
@B_CODE INT,
 @COUNT_BILL INT,
@CURRANCY_EQUAL_PRIMARY FLOAT,
@CURRANCY_CODE_PRIMARY INT,
@BOX_USER INT,
@USER_CODE INT,
 

@COMPANY_TITAL NVARCHAR(MAX),
@BILL_BRANCH NVARCHAR(MAX) 

begin 
BEGIN TRANSACTION;
 
 SELECT @COUNT_BILL=COUNT(BILL_NUMBER)  FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER_RETURN
IF @COUNT_BILL=0
BEGIN
SELECT 0 AS ID, N''رقم الفاتورة غير معرف مسبقاً'' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
GOTO RETTTTT
END
 
 
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
SELECT @CURRANCY_CODE_PRIMARY=CURRANCY_CODE  FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
 

SELECT TOP(1) @BOX_USER=ISNULL(BOX_CODE,5000),@USER_CODE=USER_CODE  FROM T_USERS WHERE USER_NAME LIKE @USER_CREATE AND ACTIVE=1
SET @BOX_USER=ISNULL(@BOX_USER,5000)
SET @USER_CODE=ISNULL(@USER_CODE,1)
SELECT @BILL_NUMBER=ISNULL(MAX(BILL_NUMBER),0) + 1 FROM T_SALES
 SET @BILL_BRANCH=@COMPANY_TITAL+ CAST(@BILL_NUMBER AS VARCHAR) 
 -------------------------------------------------------------------------------------------------------
INSERT INTO T_SALES (BILL_BRANCH,BILL_NUMBER,BILL_INVOICE,BILL_DATE,OFFER_CODE,CURRANCY_CODE,CURRANCY_EQUAL,CLIENT_CODE,CLIENT_NAME,CLIENT_PHONE,CLIENT_ADRESS,MANDOOB_CODE,DESCRIPTION,TYPE_PRICE_SELL,STORE_CODE,USER_CREATE,SECURETY_CODE,TOTAL_SALES,DISCOUNT_ITEMS,DISCOUNT_PERCENT,DISCOUNT_AMOUNT,TOTAL_DISCOUNT,NET_SALES,TOTAL_COST,IVC_CODE,DAY_CASH,DATE_CASH,TOT_CONV,ACCOUNT_CODE,CASH_USA,REMAIN_USA,CASH_IQ,REMAIN_IQ,C_DATE,ACTIVE,BILL_RETURN,CURRANCY_SALES) 
                                                    SELECT @BILL_BRANCH,@BILL_NUMBER,CAST(@BILL_NUMBER_RETURN AS VARCHAR)+N''-R'' ,GETDATE(),22,CURRANCY_CODE,CURRANCY_EQUAL,CLIENT_CODE,CLIENT_NAME,CLIENT_PHONE,CLIENT_ADRESS,MANDOOB_CODE,N''مرتجع من الفاتورة رقم : ''+CAST(@BILL_NUMBER_RETURN AS VARCHAR),TYPE_PRICE_SELL,STORE_CODE,@USER_CREATE,SECURETY_CODE,TOTAL_SALES,DISCOUNT_ITEMS,0          ,       0      ,DISCOUNT_ITEMS,NET_SALES*-1,TOTAL_COST*-1,IVC_CODE,DAY_CASH,GETDATE(),TOT_CONV,@BOX_USER,CASH_USA*-1,REMAIN_USA,CASH_IQ *-1,REMAIN_IQ,GETDATE(),1 ,@BILL_NUMBER_RETURN,CURRANCY_SALES FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER_RETURN
 -------------------------------------------------------------------------------------------------------
 
INSERT INTO T_SALES_DETAILS (BILL_BRANCH,BILL_NUMBER,ITEM_CODE,ITEM_NAME,QTY,UNIT_NAME,UNIT_QTY,STORE_CODE,WAJBA_CODE,WAJBA_NAME,WAJBA_BALANCE,CURRANCY_CODE,CURRANCY_EQUAL,COST,PRICE,TOTAL,DISCOUNT_PERCENT_ITEM,DISCOUNT_AMOUNT_ITEM,C_DATE,ACTIVE,BILL_BUY,ITEM_NOTE_SALES,NOTE_PRINT,IS_PRINT,USER_PREPARE,USER_CUT,DISCOUNT_TYPE,IS_SERIAL,IS_ITEM_AREA,QTY_XZ,QTY_X1,QTY_XY) 
                                                                        SELECT @BILL_BRANCH,@BILL_NUMBER,ITEM_CODE,ITEM_NAME,QTY*-1,UNIT_NAME,UNIT_QTY,STORE_CODE,WAJBA_CODE,WAJBA_NAME,WAJBA_BALANCE,CURRANCY_CODE,CURRANCY_EQUAL,COST,PRICE,TOTAL*-1,DISCOUNT_PERCENT_ITEM,DISCOUNT_AMOUNT_ITEM,GETDATE(),ACTIVE,BILL_BUY,ITEM_NOTE_SALES,NOTE_PRINT,IS_PRINT,USER_PREPARE,USER_CUT,DISCOUNT_TYPE,IS_SERIAL,IS_ITEM_AREA,QTY_XZ*-1,QTY_X1*-1,QTY_XY*-1 FROM T_SALES_DETAILS WHERE BILL_NUMBER=@BILL_NUMBER_RETURN AND ACTIVE=1
 -------------------------------------------------------------------------------------------------------

 DECLARE @TOTAL_COST FLOAT ,
 @TOTAL_MANDOOB_ITEM FLOAT,
 @TOTAL_TAX_ITEMS FLOAT,
 @NET_TOTAL FLOAT,
 @CASH_USA FLOAT,
 @CASH_IQ FLOAT,
 @TOTAL_DISCOUNT FLOAT,
 @MANDOOB_CODE INT,
 @SHIP_CODE INT,
@IVC_CODE INT,
 
@CLIENT_NAME NVARCHAR(MAX) ,
 @DESCRIPTION NVARCHAR(MAX)

  SELECT @IVC_CODE =IVC_CODE,@NET_TOTAL=ISNULL(NET_SALES,0),@CASH_USA=ISNULL(CASH_USA,0),@CASH_IQ=ISNULL(CASH_IQ,0) ,@MANDOOB_CODE=ISNULL(MANDOOB_CODE,1),@DESCRIPTION=DESCRIPTION,@SHIP_CODE=SHIP_CODE,@CLIENT_NAME=CLIENT_NAME,@TOTAL_DISCOUNT=TOTAL_DISCOUNT  FROM T_SALES  WHERE BILL_NUMBER=@BILL_NUMBER
 IF @IVC_CODE=2
 BEGIN
 UPDATE T_SALES SET CASH_USA=0,CASH_IQ=0 WHERE BILL_NUMBER=@BILL_NUMBER
 IF @CURRANCY_CODE_PRIMARY=1
 BEGIN
  UPDATE T_SALES SET REMAIN_IQ=0,REMAIN_USA=@NET_TOTAL WHERE BILL_NUMBER=@BILL_NUMBER
 END
 ELSE
 BEGIN
 
 UPDATE T_SALES SET REMAIN_USA=0,REMAIN_IQ=@NET_TOTAL WHERE BILL_NUMBER=@BILL_NUMBER
 END
 SET @CASH_USA=0
 SET @CASH_IQ=0
 END
 
 SELECT @TOTAL_COST=ISNULL(SUM(TOTAL_COST),0),@TOTAL_MANDOOB_ITEM=ISNULL(SUM(TOTAL_MANDOOB_ITEM),0),@TOTAL_TAX_ITEMS=ISNULL(SUM(TOTAL_TAX_ITEM),0) FROM T_SALES_DETAILS WHERE BILL_NUMBER=@BILL_NUMBER
UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST,TOTAL_MANDOOB_ITEM=@TOTAL_MANDOOB_ITEM,TOTAL_TAX_ITEM=@TOTAL_TAX_ITEMS WHERE BILL_NUMBER=@BILL_NUMBER


 -------------------------------------------------------------------------------------------------------
DECLARE
@REGION_CODE INT,
@COST_SHIP FLOAT=0,
@COST_SHIP_CLIENT FLOAT=0
SELECT @REGION_CODE=REGION_CODE FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER
IF @REGION_CODE<>0
BEGIN
SELECT  @COST_SHIP_CLIENT=ISNULL(REGION_COST,0) FROM T_REGION_SHIP WHERE REGION_CODE=@REGION_CODE
SELECT @COST_SHIP= ISNULL(REGION_SELL,0) FROM T_REGION_SHIP WHERE REGION_CODE=@REGION_CODE
UPDATE T_SALES SET COST_SHIP=@COST_SHIP,COST_SHIP_CLIENT=@COST_SHIP_CLIENT WHERE BILL_NUMBER=@BILL_NUMBER
END

 -------------------------------------------------------------------------------------------------------
  DECLARE @CNU_EQUL_IQ FLOAT = (SELECT ISNULL(CURRANCY_EQUAL,1)  FROM T_CURRANNCY WHERE CURRANCY_CODE=2),
          @CNU_EQUL_USA As FLOAT = (SELECT ISNULL(CURRANCY_EQUAL,1)  FROM T_CURRANNCY WHERE CURRANCY_CODE=1)

 -------------------------------------------------------------------------------------------------------
DECLARE

@IS_COST_SHIP BIT,
@COST_SHIP_MANDOOB FLOAT=0,
@COST_SHIP_EXP FLOAT=0
SELECT @IVC_CODE=IVC_CODE FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER
IF @IVC_CODE=10 GOTO AFTER_OFFERS

 DECLARE @D_USA FLOAT=0, @C_USA FLOAT=0,  @D_IQ FLOAT=0, @C_IQ FLOAT=0, @CURR_EQUL FLOAT=0, @DOOB_USA FLOAT=0, @DOOB_IQ FLOAT=0, @TAX_USA FLOAT=0, @TAX_IQ FLOAT=0, @SHIP_USA FLOAT=0, @SHIP_IQ FLOAT=0, @SHIP_USA_CRE FLOAT=0, @SHIP_IQ_CRE FLOAT=0, @MANDOOB_SHIP_USA FLOAT=0, @MANDOOB_SHIP_IQ FLOAT=0,@DISC_USA FLOAT=0, @DISC_IQ FLOAT=0
   SELECT @IS_COST_SHIP=ISNULL(IS_COST_SHIP,0) FROM T_MANDOOB WHERE MANDOOB_CODE=@MANDOOB_CODE
   SET @COST_SHIP_EXP=@COST_SHIP
 If @IS_COST_SHIP = 1 
 BEGIN
             SET   @COST_SHIP_MANDOOB = @COST_SHIP
              SET  @COST_SHIP_EXP = 0
            End 

If @CURRANCY_CODE_PRIMARY = 1 
BEGIN
                       SET @DOOB_USA = @TOTAL_MANDOOB_ITEM
                        SET @TAX_USA = @TOTAL_TAX_ITEMS
                        SET @D_USA = @NET_TOTAL
                       SET  @C_USA = @COST_SHIP_CLIENT + @CASH_USA + (@CASH_IQ / @CNU_EQUL_IQ)
                        SET  @D_IQ = 0
                        SET  @C_IQ = 0
                        SET  @SHIP_USA = @COST_SHIP
                        SET  @SHIP_IQ = 0
                        SET  @SHIP_USA_CRE = @COST_SHIP - @COST_SHIP_CLIENT
                        SET  @SHIP_IQ_CRE = 0

                        SET  @MANDOOB_SHIP_USA = @COST_SHIP_MANDOOB
                        SET  @MANDOOB_SHIP_IQ = 0
				 SET  @CURR_EQUL = @CNU_EQUL_IQ
				 set @DISC_USA=@TOTAL_DISCOUNT
				 set @DISC_IQ=0
END
ELSE 
If @CURRANCY_CODE_PRIMARY = 2 
BEGIN
						 SET  @D_USA = 0
                         SET  @C_USA = 0
                         SET  @D_IQ = @NET_TOTAL
                         SET  @C_IQ = @COST_SHIP_CLIENT + @CASH_IQ + @CASH_USA / (1 / @CNU_EQUL_USA)
                         SET  @DOOB_IQ = @TOTAL_MANDOOB_ITEM
                        SET  @TAX_IQ = @TOTAL_TAX_ITEMS
                         SET  @SHIP_USA = 0
                         SET  @SHIP_IQ = @COST_SHIP_EXP
                         SET  @SHIP_USA_CRE = 0
                         SET  @SHIP_IQ_CRE = @COST_SHIP - @COST_SHIP_CLIENT
                         SET  @MANDOOB_SHIP_USA = 0
                         SET  @MANDOOB_SHIP_IQ = @COST_SHIP_MANDOOB
                  SET  @CURR_EQUL = @CNU_EQUL_USA

				   set @DISC_USA=0
				 set @DISC_IQ=@TOTAL_DISCOUNT
END 

 -------------------------------------------------------------------------------------------------------
 DECLARE @ACCOUNT_SHIP Int = 1,
         @IS_AMO_MANDOOB INT = 1,
         @IS_AMO_CLIENT As INT = 1

SELECT @ACCOUNT_SHIP=ISNULL(ACCOUNT_CODE,0),@IS_AMO_MANDOOB=IS_AMO_MANDOOB,@IS_AMO_CLIENT=IS_AMO_CLIENT FROM T_SALES_SHIPPING WHERE SHIP_CODE=@SHIP_CODE
 -------------------------------------------------------------------------------------------------------
  
 -- supplier
 DECLARE
 @CLIENT_CODE INT 
 SELECT @CLIENT_CODE=CLIENT_CODE FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER
          
	INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
	VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @CLIENT_CODE, N'''', @D_USA, @C_USA, @D_IQ, @C_IQ, @CURRANCY_CODE_PRIMARY, @CURR_EQUL,  @DESCRIPTION, 0, @USER_CODE, GETDATE(), @IS_AMO_CLIENT)
                 
-------------------------------------------------------------------------------------------------------

--عمولات المندوب
            
DECLARE
  @MANDOOB_ACCOUNT INT ,
  @MANDOOB_NAME NVARCHAR(MAX)
			   SELECT TOP(1) @MANDOOB_ACCOUNT=ACCOUNT_CODE,@MANDOOB_NAME=MANDOOB_NAME  FROM T_MANDOOB WHERE MANDOOB_CODE=@MANDOOB_CODE
  If (@TOTAL_MANDOOB_ITEM <> 0 Or @COST_SHIP_MANDOOB <> 0) And @MANDOOB_ACCOUNT <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @MANDOOB_ACCOUNT, N'''', @MANDOOB_SHIP_USA, @DOOB_USA, @MANDOOB_SHIP_IQ, @DOOB_IQ, @CURRANCY_CODE_PRIMARY, @CURR_EQUL, N''عمولة المندوب : ''+ @MANDOOB_NAME + N''/'' + N''للعميل : '' + @CLIENT_NAME, 0, @USER_CODE, GETDATE(), @IS_AMO_MANDOOB)
   
		 END
-------------------------------------------------------------------------------------------------------

--TAX
            
DECLARE
  @TAX_ACCOUNT INT=(SELECT TOP(1) ISNULL(CLIENT_CODE,0)  FROM T_CLIENT WHERE CLIENT_TYPE=8 AND CLIENT_ACTIVE=1)  
   If  @TOTAL_TAX_ITEMS <> 0   And @TAX_ACCOUNT <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @TAX_ACCOUNT, N'''', 0, @TAX_USA, 0, @TAX_IQ, @CURRANCY_CODE_PRIMARY, @CURR_EQUL, N''ضريبة الفاتورة ''  + N''/'' + N''للعميل : '' + @CLIENT_NAME, 0, @USER_CODE, GETDATE(), 1)
   
		 END                     

-------------------------------------------------------------------------------------------------------

--COST_SHIP ACCOUNT
            
 SET @COST_SHIP_EXP=@COST_SHIP_EXP + @COST_SHIP - @COST_SHIP_CLIENT

   If  @COST_SHIP_EXP <> 0 And @ACCOUNT_SHIP <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @ACCOUNT_SHIP, N'''', @SHIP_USA, @SHIP_USA_CRE, @SHIP_IQ, @SHIP_IQ_CRE, @CURRANCY_CODE_PRIMARY, @CURR_EQUL, N''كلفة توصيل الفاتورة ''  + N''/'' + N''للعميل : '' + @CLIENT_NAME, 0, @USER_CODE, GETDATE(), @IS_AMO_CLIENT)
   
		 END                     

-------------------------------------------------------------------------------------------------------

--CASH
            
 SET @COST_SHIP_EXP=@COST_SHIP_EXP + @COST_SHIP - @COST_SHIP_CLIENT

   If  @CASH_USA <> 0 OR @CASH_IQ <> 0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, @BOX_USER, N'''', @CASH_USA, 0, @CASH_IQ, 0, @CURRANCY_CODE_PRIMARY, @CURR_EQUL, N''('' + N''العميل : '' + @CLIENT_NAME + N'')'' + @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)
   
		 END 
-------------------------------------------------------------------------------------------------------

-- DISCOUNT
            
 SET @COST_SHIP_EXP=@COST_SHIP_EXP + @COST_SHIP - @COST_SHIP_CLIENT

   If  @TOTAL_DISCOUNT<>0 
		 BEGIN

				INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
				VALUES (@COMPANY_TITAL+ CAST(@BILL_NUMBER AS nvarchar(max)), @BILL_NUMBER, @BILL_NUMBER, GETDATE(), GETDATE(), 0, 2, 1, 4001, N'''', @DISC_USA, 0, @DISC_IQ, 0, @CURRANCY_CODE_PRIMARY, @CURR_EQUL, N''('' + N''العميل : '' + @CLIENT_NAME + N'')'' + @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)
   
		 END 

-------------------------------------------------------------------------------------------------------

-- STORE BOX

INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[ACTIVE])

SELECT [BILL_BRANCH]
      ,[BILL_NUMBER]
	  ,(SELECT BILL_DATE FROM T_SALES WHERE BILL_NUMBER = @BILL_NUMBER)
	  ,2
	  ,0
	 ,[STORE_CODE]
	  ,NULL
	  ,[ITEM_CODE]
     ,ISNULL((SELECT TOP(1) UNIT_CODE FROM T_ITEM_UNIT WHERE (ITEM_CODE= (SELECT TOP(1) ITEM_CODE FROM [dbo].[T_SALES_DETAILS] WHERE BILL_NUMBER = @BILL_NUMBER AND ITEM_CODE=[T_SALES_DETAILS].ITEM_CODE AND UNIT_NAME LIKE [T_SALES_DETAILS].UNIT_NAME) )),1)
      ,0
	  ,[TOTAL_QTY]
      ,[UNIT_QTY]
      ,1
      
  FROM [dbo].[T_SALES_DETAILS] WHERE BILL_NUMBER = @BILL_NUMBER


 -------------------------------------------------------------------------------------------------------


-- FINISHED

SELECT 1 AS ID, N''عملية الاسترجاع , تمت بنجاح ..  '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000


AFTER_OFFERS:

   


RETTTTT:
COMMIT
	IF @@ERROR <>0
	BEGIN
	ROLLBACK 
 
	SELECT 0 AS ID, N''خطأ في عملية الاسترجاع ..  '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000

	RETURN
	END

return
 

END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_ACCOUNT_PARENT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_ACCOUNT_PARENT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE proc [dbo].[P_API_SPEEDOO_PHONE_GET_ACCOUNT_PARENT] 

@PageSize int,
@PageNumber int ,
@ACCOUNT_PARENT INT,
@ACCOUNT_NAME NVARCHAR(MAX)
AS
	DECLARE @TotalRecords INT;DECLARE @TotalPages INT;DECLARE @Offset INT;

BEGIN 
IF OBJECT_ID(''tempdb..#TEMP_MAIN_ACC2'') IS NOT NULL DROP Table #TEMP_MAIN_ACC2
	SELECT GETDATE() AS BILL_DATE , ACCOUNT_CODE , ACCOUNT_NAME , BALANCE AS BALANCE_USA,BALANCE_IQ AS BALANCE_IQ,CURRANCY_CODE INTO #TEMP_MAIN_ACC2 FROM  [dbo].[V_ACC_B] WHERE ACCOUNT_PARENT=@ACCOUNT_PARENT and ACCOUNT_CODE<> 2100000 AND (@ACCOUNT_NAME = '''' OR ACCOUNT_NAME LIKE ''%'' + @ACCOUNT_NAME + ''%'');
	SELECT @TotalRecords = COUNT(*) FROM #TEMP_MAIN_ACC2;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    set @Offset  = (@PageNumber - 1) * @PageSize;

    SELECT *FROM #TEMP_MAIN_ACC2 ORDER BY ACCOUNT_NAME ASC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_ACCOUNT_TYPE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_ACCOUNT_TYPE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE proc [dbo].[P_API_SPEEDOO_PHONE_GET_ACCOUNT_TYPE] AS
BEGIN 
	SELECT TYPE_ACCOUNT_CODE, TYPE_ACCOUNT_NAME FROM T_ACCOUNT_TYPE WHERE FINAL_CODE=1 AND TYPE_ACCOUNT_CODE < 22 ORDER BY TYPE_ACCOUNT_CODE DESC
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_BUY_BY_DATE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_BUY_BY_DATE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE proc [dbo].[P_API_SPEEDOO_PHONE_GET_BUY_BY_DATE] 
@PageSize int, @PageNumber int, @active bit = 1, @D1 DATE = '''', @D2 DATE = '''' , @IVC_CODE INT = -1, @INVOICE_INFO NVARCHAR(MAX)
AS
BEGIN
	DECLARE @TotalRecords INT;DECLARE @TotalPages INT;DECLARE @Offset INT;

	
IF LEN(@INVOICE_INFO ) > 0 
	BEGIN
	SELECT ISNULL(SUM(NET_BUY),0) AS TOTAL_BUY  FROM T_BUY WHERE 
		(CLIENT_NAME  LIKE ''%'' + @INVOICE_INFO + ''%'' OR
		CONVERT(NVARCHAR, BILL_NUMBER)  LIKE ''%'' + @INVOICE_INFO + ''%'') 
		AND (@IVC_CODE = -1 OR IVC_CODE = @IVC_CODE)

	SELECT @TotalRecords = COUNT(*) FROM V_BUY WHERE 
		(CLIENT_NAME  LIKE ''%'' + @INVOICE_INFO + ''%'' OR
		CONVERT(NVARCHAR, BILL_NUMBER)  LIKE ''%'' + @INVOICE_INFO + ''%'') 
		AND (@IVC_CODE = -1 OR IVC_CODE = @IVC_CODE) 
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);
    SET @Offset = (@PageNumber - 1) * @PageSize;
    SELECT BILL_NUMBER,BILL_DATE,CAST(CLIENT_NAME AS VARCHAR(MAX)) AS CLIENT_NAME,DESCRIPTION,TOTAL_BUY,NET_BUY,IVC_CODE,IVC_NAME,C_DATE,DISCOUNT_AMOUNT FROM V_BUY  WHERE 
		(CLIENT_NAME  LIKE ''%'' + @INVOICE_INFO + ''%'' OR
		CONVERT(NVARCHAR, BILL_NUMBER)  LIKE ''%'' + @INVOICE_INFO + ''%'') 
		AND (@IVC_CODE = -1 OR IVC_CODE = @IVC_CODE)
		AND (@IVC_CODE = -1 OR IVC_CODE = @IVC_CODE)  
	
	ORDER BY BILL_NUMBER DESC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY ;
	END
ELSE 
	BEGIN
		SELECT ISNULL(SUM(NET_BUY),0) AS TOTAL_BUY  FROM T_BUY WHERE ACTIVE=1 AND TOTAL_COST>=0 AND BILL_DATE BETWEEN @D1 AND @D2 AND (@IVC_CODE = -1 OR IVC_CODE = @IVC_CODE)
		SELECT @TotalRecords = COUNT(*) FROM V_BUY WHERE ACTIVE = @active AND (@D1 IS NULL OR @D2 IS NULL OR BILL_DATE BETWEEN @D1 AND @D2) AND (@IVC_CODE = -1 OR IVC_CODE = @IVC_CODE) 
		SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);
		SET @Offset = (@PageNumber - 1) * @PageSize;
		SELECT BILL_NUMBER,BILL_DATE,CAST(CLIENT_NAME AS VARCHAR(MAX)) AS CLIENT_NAME,DESCRIPTION,TOTAL_BUY,NET_BUY,IVC_CODE,IVC_NAME,C_DATE,DISCOUNT_AMOUNT FROM V_BUY  WHERE ACTIVE = @active AND (@D1 IS NULL OR @D2 IS NULL OR BILL_DATE BETWEEN @D1 AND @D2) AND (@IVC_CODE = -1 OR IVC_CODE = @IVC_CODE)  ORDER BY BILL_NUMBER DESC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY ;
	END 
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_BUY_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_BUY_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE proc [dbo].[P_API_SPEEDOO_PHONE_GET_BUY_DETAILS] 
@BILL_NUMBER INT
AS
BEGIN
	SELECT ITEM_NAME,QTY,UNIT_NAME,PRICE,TOTAL_COST FROM V_BUY_DETAILS  WHERE BILL_NUMBER=@BILL_NUMBER
	IF @@ROWCOUNT = 0
	BEGIN
	RAISERROR(''الفاتورة غير موجودة'', 16, 1);
	RETURN;
	END
END 
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_CLIENT_BALANCE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_CLIENT_BALANCE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE proc [dbo].[P_API_SPEEDOO_PHONE_GET_CLIENT_BALANCE] 
@PageSize int,
@PageNumber int ,
@ACCOUNT_NAME  NVARCHAR(MAX)
AS
BEGIN
SELECT CLIENT_CODE AS ACCOUNT_CODE,CLIENT_NAME AS ACCOUNT_NAME,CLIENT_PHONE,CLIENT_REGION FROM   T_CLIENT   WHERE CLIENT_ACTIVE=1 AND  CAST (CLIENT_CODE AS INT) >2100000 AND LEN(CLIENT_NAME)>0 AND ( CLIENT_NAME LIKE ''%'' + @ACCOUNT_NAME + ''%'') ORDER BY CLIENT_NAME ASC
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_CLIENT_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_CLIENT_SANAD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_SPEEDOO_PHONE_GET_CLIENT_SANAD] 
@PageSize int,@PageNumber int ,@CLIENT_CODE INT
AS
DECLARE @TotalRecords INT;DECLARE @TotalPages INT;DECLARE @Offset INT;
BEGIN 	 
	SELECT X.BILL_NUMBER,X.BILL_DATE ,X.B_CODE,BT.B_NAME,BT.B_COLOR,X.MOVE_CODE,MO.MOVE_NAME,X.ACCOUNT_CODE,X.DEBIT,X.CREDIT ,X.DEBIT_IQ,X.CREDIT_IQ,X.[DESCRIPTION],US.[USER_NAME]  into #tempBOX  FROM T_BOX X 
	 LEFT OUTER JOIN
	 T_MOVE  MO ON X.MOVE_CODE =MO.MOVE_CODE LEFT OUTER JOIN
	 T_BILL_TYPE  BT ON X.B_CODE =BT.B_CODE  LEFT OUTER JOIN
	 T_USERS  US ON X.USER_CODE =US.USER_CODE WHERE X.ACCOUNT_CODE=@CLIENT_CODE  AND( X.B_CODE=5 OR  X.B_CODE=15 OR  X.B_CODE=28 OR X.B_CODE=70 OR  X.B_CODE=71 )   AND X.ACTIVE=1 ORDER BY BILL_DATE DESC
	
    SELECT @TotalRecords = COUNT(*) FROM #tempBOX;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    SET @Offset  = (@PageNumber - 1) * @PageSize;
    SELECT * FROM #tempBOX ORDER BY BILL_DATE DESC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
END 
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_DASHBORD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_DASHBORD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_DASHBORD]
@D1 DATE,
@D2 DATE 


AS
DECLARE
 
@CURRANCY_CODE	int	,
@CURRANCY_USA	float	,
@CURRANCY_IQ	float	,
@CURRANCY_EQUAL	float	
BEGIN
 

SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1

IF @CURRANCY_CODE=1
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=1/CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_IQ
END

ELSE
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_USA
END


SELECT ISNULL(SUM(S.NET_SALES),0)  AS NET_SALES,ISNULL(SUM(S.NET_SALES-S.TOTAL_COST),0)  AS TOTAL_ARBAH

,(SELECT ISNULL(SUM(NET_BUY),0) FROM T_BUY WHERE ACTIVE=1 AND TOTAL_COST>=0 AND BILL_DATE BETWEEN @D1 AND @D2 )  AS TOTAL_BUY
,COUNT(S.BILL_NUMBER)  AS COUNT_SALES
,(SELECT COUNT(ITEM_CODE) FROM T_ITEMS WHERE ACTIVE=1 AND ITEM_CODE>0  )  AS COUNT_ITEMS
,(SELECT COUNT(ACCOUNT_CODE) FROM V_ACC_BALANCE_CLIENT  WHERE ACCOUNT_CODE> 2100000    )  AS COUNT_CLIENT
,(SELECT  ISNULL(SUM(DEBIT-CREDIT),0)*@CURRANCY_USA+ISNULL(SUM(DEBIT_IQ-CREDIT_IQ),0)*@CURRANCY_IQ  FROM T_BOX WHERE ACTIVE=1 AND BILL_DATE BETWEEN @D1 AND @D2 AND ACCOUNT_CODE BETWEEN 300 AND 399 )  AS TOTAL_EXPENSES
,(SELECT CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1    )  AS CURRANCY_PRIMARY

FROM V_SALES S WHERE BILL_DATE BETWEEN @D1 AND @D2 
 

END	
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_FILL_REPORT_ACCOUNT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_FILL_REPORT_ACCOUNT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_FILL_REPORT_ACCOUNT]
    @IDD INT,
    @ACCOUNT_CODE INT,
    @D1 DATE,
    @D2 DATE,
    @CNY_CODE INT,
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET @SUBMIT_FLAG = 0;

    ------------------------------------------------------------------------
    -- 1) جلب المعلومات الأساسية عن الحساب والعميل والمندوب ونوع الفاتورة الافتراضي
    ------------------------------------------------------------------------
    DECLARE 
        @ACCOUNT_NAME        NVARCHAR(MAX),
        @CLIENT_PHONE_SMS    NVARCHAR(MAX),
        @CLIENT_REGION       NVARCHAR(MAX),
        @MANDOOB_CODE        INT,
        @MANDOOB_NAME        NVARCHAR(MAX),
        @B_NAME              NVARCHAR(MAX),
        @B_COLOR             NVARCHAR(MAX);

    SELECT @ACCOUNT_NAME = ACCOUNT_NAME
      FROM T_ACCOUNTS
     WHERE ACCOUNT_CODE = @ACCOUNT_CODE;

    SELECT 
        @CLIENT_PHONE_SMS = CLIENT_FULL_PHONE,
        @CLIENT_REGION    = CLIENT_REGION,
        @MANDOOB_CODE     = MANDOOB_CODE
    FROM T_CLIENT
    WHERE CLIENT_CODE = @ACCOUNT_CODE;

    SELECT @MANDOOB_NAME = MANDOOB_NAME
      FROM T_MANDOOB
     WHERE MANDOOB_CODE = @MANDOOB_CODE;

    SELECT 
        @B_NAME  = B_NAME,
        @B_COLOR = B_COLOR
    FROM T_BILL_TYPE
    WHERE B_CODE = 0;  -- (الفاتورة الافتراضية)

    ------------------------------------------------------------------------
    -- 2) جلب الرصيد الافتتاحي (ما قبل الفترة المحددة أو ما قبل IDD)
    ------------------------------------------------------------------------
    DECLARE 
        @BalanceFirstUSA  DECIMAL(18,4) = 0,
        @BalanceFirstIQ   DECIMAL(18,4) = 0,
        @BalanceFirstCur  DECIMAL(18,4) = 0;

    SELECT 
        @BalanceFirstUSA = ISNULL(SUM(DEBIT - CREDIT), 0),
        @BalanceFirstIQ  = ISNULL(SUM(DEBIT_IQ - CREDIT_IQ), 0),
        @BalanceFirstCur = ISNULL(SUM(DEBIT_CUR - CREDIT_CUR), 0)
    FROM T_BOX
    WHERE ACCOUNT_CODE = @ACCOUNT_CODE
      AND ACTIVE = 1
      AND (
           (@IDD = 0 AND BILL_DATE < @D1)
           OR (@IDD <> 0 AND T_ID_BOX <= @IDD)
          );

    ------------------------------------------------------------------------
    -- 3) جدول مؤقت لحفظ النتائج
    ------------------------------------------------------------------------
    IF OBJECT_ID(''tempdb..#TMP_REPORT_ACCOUNT'') IS NOT NULL
       DROP TABLE #TMP_REPORT_ACCOUNT;

    CREATE TABLE #TMP_REPORT_ACCOUNT
    (
        T_ID_BOX            INT NOT NULL PRIMARY KEY,
        BILL_BRANCH         NVARCHAR(50),
        BILL_NUMBER         NVARCHAR(50),
        BILL_DATE           DATE,
        BILL_TIME           DATETIME,
        B_CODE              INT,
        B_NAME              NVARCHAR(MAX),
        MOVE_CODE           INT,
        MOVE_NAME           NVARCHAR(MAX),
        ACCOUNT_CODE        INT,
        ACCOUNT_NAME        NVARCHAR(MAX),
        ACCOUNT_FULL_NAME   NVARCHAR(MAX),
        ACCOUNT_DESCRIPTION NVARCHAR(MAX),
        AMO_DEBIT           DECIMAL(18,4),
        AMO_CREDIT          DECIMAL(18,4),
        BALANCE_USA         DECIMAL(18,4),
        AMO_DEBIT_IQ        DECIMAL(18,4),
        AMO_CREDIT_IQ       DECIMAL(18,4),
        BALANCE_IQ          DECIMAL(18,4),
        AMO_DEBIT_CUR       DECIMAL(18,3),
        AMO_CREDIT_CUR      DECIMAL(18,3),
        BALANCE_CUR         DECIMAL(18,3),
        DESCRIPTION         NVARCHAR(MAX),
        USER_CODE           INT,
        USER_NAME           NVARCHAR(MAX),
        DEAL_CODE           INT,
        DEAL_NAME           NVARCHAR(MAX),
        BRANCH_CODE         INT,
        BRANCH_NAME         NVARCHAR(MAX),
        MANDOB_NAME         NVARCHAR(MAX),
        CLIENT_REGION       NVARCHAR(MAX),
        CLIENT_PHONE_SMS    NVARCHAR(MAX),
        B_COLOR             NVARCHAR(MAX),
        CHECKED             BIT,
        ID_BOX              INT
    );

    ------------------------------------------------------------------------
    -- 4) إدخال "رصيد سابق" كسجل أولي في كشف الحساب
    ------------------------------------------------------------------------
    INSERT INTO #TMP_REPORT_ACCOUNT
    (
        T_ID_BOX, BILL_BRANCH, BILL_NUMBER, BILL_DATE, BILL_TIME,
        B_CODE, B_NAME, MOVE_CODE, MOVE_NAME, ACCOUNT_CODE, ACCOUNT_NAME, ACCOUNT_FULL_NAME,
        ACCOUNT_DESCRIPTION, AMO_DEBIT, AMO_CREDIT, BALANCE_USA,
        AMO_DEBIT_IQ, AMO_CREDIT_IQ, BALANCE_IQ,
        AMO_DEBIT_CUR, AMO_CREDIT_CUR, BALANCE_CUR,
        DESCRIPTION, USER_CODE, USER_NAME, DEAL_CODE, DEAL_NAME,
        BRANCH_CODE, BRANCH_NAME, MANDOB_NAME, CLIENT_REGION, CLIENT_PHONE_SMS,
        B_COLOR, CHECKED, ID_BOX
    )
    SELECT
        0 AS T_ID_BOX,
        NULL AS BILL_BRANCH,
        ''0'' AS BILL_NUMBER,
        CONVERT(NVARCHAR(MAX), @D1, 111) AS BILL_DATE,
        NULL AS BILL_TIME,
        0 AS B_CODE,
        @B_NAME AS B_NAME,
        0 AS MOVE_CODE,
        NULL AS MOVE_NAME,
        @ACCOUNT_CODE,
        @ACCOUNT_NAME,
        NULL,
        NULL,
        NULL, NULL,
        iif(@CNY_CODE = 1,@BalanceFirstUSA,0),
        NULL, NULL,
         iif(@CNY_CODE = 2,@BalanceFirstIQ,0),
        NULL, NULL,
        @BalanceFirstCur,
        N''رصيد سابق ماقبل الفترة'',
        0, NULL,
        0, NULL,
        0, NULL,
        @MANDOOB_NAME,
        @CLIENT_REGION,
        @CLIENT_PHONE_SMS,
        @B_COLOR,
        0,
        0;

    ------------------------------------------------------------------------
    -- 5) جلب الحركات التفصيلية من T_BOX حسب قيمة @IDD
    ------------------------------------------------------------------------
    IF (@IDD = 0)
    BEGIN
        -- إذا @IDD=0: نعتمد التاريخ Between @D1 AND @D2
        WITH BaseData AS
        (
            SELECT
                T_ID_BOX,
                BILL_BRANCH,
                BILL_NUMBER,
                BILL_DATE,
                BILL_TIME,
                MOVE_CODE,
                B_CODE,
                BRANCH_CODE,
                ACCOUNT_CODE,
                ACCOUNT_DESCRIPTION,
                DEBIT,
                CREDIT,
                DEBIT_IQ,
                CREDIT_IQ,
                DEBIT_CUR,
                CREDIT_CUR,
                DESCRIPTION,
                USER_CODE,
                DEAL_CODE,
                CHECKED,
                ACTIVE
            FROM T_BOX
            WHERE ACTIVE = 1
              AND ACCOUNT_CODE = @ACCOUNT_CODE
              AND BILL_DATE BETWEEN @D1 AND @D2
        )
        INSERT INTO #TMP_REPORT_ACCOUNT
        SELECT
            ROW_NUMBER() OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) AS T_ID_BOX,
            bd.BILL_BRANCH,
            CONVERT(NVARCHAR(MAX), bd.BILL_NUMBER),
            CONVERT(NVARCHAR(MAX), bd.BILL_DATE, 111),
            bd.BILL_TIME,
            bd.B_CODE,
            bt.B_NAME,
            bd.MOVE_CODE,
            mv.MOVE_NAME,
            bd.ACCOUNT_CODE,
            @ACCOUNT_NAME,
            NULL AS ACCOUNT_FULL_NAME,
            bd.ACCOUNT_DESCRIPTION,
            bd.DEBIT AS AMO_DEBIT,
            bd.CREDIT AS AMO_CREDIT,
            SUM(bd.DEBIT - bd.CREDIT) OVER 
                (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + @BalanceFirstUSA AS BALANCE_USA,
            bd.DEBIT_IQ AS AMO_DEBIT_IQ,
            bd.CREDIT_IQ AS AMO_CREDIT_IQ,
            SUM(bd.DEBIT_IQ - bd.CREDIT_IQ) OVER 
                (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + @BalanceFirstIQ AS BALANCE_IQ,
            bd.DEBIT_CUR AS AMO_DEBIT_CUR,
            bd.CREDIT_CUR AS AMO_CREDIT_CUR,
            SUM(CAST(bd.DEBIT_CUR AS DECIMAL(18,3)) - CAST(bd.CREDIT_CUR AS DECIMAL(18,3)))
                OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + @BalanceFirstCur AS BALANCE_CUR,
            bd.DESCRIPTION,
            bd.USER_CODE,
            us.USER_NAME,
            bd.DEAL_CODE,
            dl.DEAL_NAME,
            bd.BRANCH_CODE,
            NULL AS BRANCH_NAME,
            @MANDOOB_NAME,
            @CLIENT_REGION,
            @CLIENT_PHONE_SMS,
            bt.B_COLOR,
            bd.CHECKED,
            bd.T_ID_BOX AS ID_BOX
        FROM BaseData bd
        LEFT JOIN T_DEAL       dl ON bd.DEAL_CODE = dl.DEAL_CODE
        LEFT JOIN T_MOVE       mv ON bd.MOVE_CODE = mv.MOVE_CODE
        LEFT JOIN T_BILL_TYPE  bt ON bd.B_CODE    = bt.B_CODE
        LEFT JOIN T_USERS      us ON bd.USER_CODE = us.USER_CODE
        WHERE bd.ACTIVE = 1;
    END
    ELSE
    BEGIN
        -- إذا @IDD <> 0: نعتمد T_ID_BOX > @IDD
        WITH BaseData AS
        (
            SELECT
                T_ID_BOX,
                BILL_BRANCH,
                BILL_NUMBER,
                BILL_DATE,
                BILL_TIME,
                MOVE_CODE,
                B_CODE,
                BRANCH_CODE,
                ACCOUNT_CODE,
                ACCOUNT_DESCRIPTION,
                DEBIT,
                CREDIT,
                DEBIT_IQ,
                CREDIT_IQ,
                DEBIT_CUR,
                CREDIT_CUR,
                DESCRIPTION,
                USER_CODE,
                DEAL_CODE,
                CHECKED,
                ACTIVE
            FROM T_BOX
            WHERE ACTIVE = 1
              AND ACCOUNT_CODE = @ACCOUNT_CODE
              AND T_ID_BOX > @IDD
        )
        INSERT INTO #TMP_REPORT_ACCOUNT
        SELECT
            ROW_NUMBER() OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) AS T_ID_BOX,
            bd.BILL_BRANCH,
            CONVERT(NVARCHAR(MAX), bd.BILL_NUMBER),
            CONVERT(NVARCHAR(MAX), bd.BILL_DATE, 111),
            bd.BILL_TIME,
            bd.B_CODE,
            bt.B_NAME,
            bd.MOVE_CODE,
            mv.MOVE_NAME,
            bd.ACCOUNT_CODE,
            @ACCOUNT_NAME,
            NULL AS ACCOUNT_FULL_NAME,
            bd.ACCOUNT_DESCRIPTION,
            bd.DEBIT AS AMO_DEBIT,
            bd.CREDIT AS AMO_CREDIT,
            SUM(bd.DEBIT - bd.CREDIT) OVER 
                (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + @BalanceFirstUSA AS BALANCE_USA,
            bd.DEBIT_IQ AS AMO_DEBIT_IQ,
            bd.CREDIT_IQ AS AMO_CREDIT_IQ,
            SUM(bd.DEBIT_IQ - bd.CREDIT_IQ) OVER 
                (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + @BalanceFirstIQ AS BALANCE_IQ,
            bd.DEBIT_CUR AS AMO_DEBIT_CUR,
            bd.CREDIT_CUR AS AMO_CREDIT_CUR,
            SUM(CAST(bd.DEBIT_CUR AS DECIMAL(18,3)) - CAST(bd.CREDIT_CUR AS DECIMAL(18,3)))
                OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + @BalanceFirstCur AS BALANCE_CUR,
            bd.DESCRIPTION,
            bd.USER_CODE,
            us.USER_NAME,
            bd.DEAL_CODE,
            dl.DEAL_NAME,
            bd.BRANCH_CODE,
            NULL AS BRANCH_NAME,
            @MANDOOB_NAME,
            @CLIENT_REGION,
            @CLIENT_PHONE_SMS,
            bt.B_COLOR,
            bd.CHECKED,
            bd.T_ID_BOX AS ID_BOX
        FROM BaseData bd
        LEFT JOIN T_DEAL       dl ON bd.DEAL_CODE = dl.DEAL_CODE
        LEFT JOIN T_MOVE       mv ON bd.MOVE_CODE = mv.MOVE_CODE
        LEFT JOIN T_BILL_TYPE  bt ON bd.B_CODE    = bt.B_CODE
        LEFT JOIN T_USERS      us ON bd.USER_CODE = us.USER_CODE
        WHERE bd.ACTIVE = 1;
    END

    ------------------------------------------------------------------------
    -- 6) ترشيح السجلات بناءً على قيمة @CNY_CODE
    --    1 = عملة USD   2 = عملة IQD  (حسب ما ورد في الإجراء الأصلي)
    ------------------------------------------------------------------------
    IF (@CNY_CODE = 1)
    BEGIN
        DELETE FROM #TMP_REPORT_ACCOUNT
         WHERE (AMO_DEBIT = 0 AND AMO_CREDIT = 0 AND BILL_NUMBER <> ''0'');
    END
    ELSE IF (@CNY_CODE = 2)
    BEGIN
        DELETE FROM #TMP_REPORT_ACCOUNT
         WHERE (AMO_DEBIT_IQ = 0 AND AMO_CREDIT_IQ = 0 AND BILL_NUMBER <> ''0'');
    END

    ------------------------------------------------------------------------
    -- 7) إرجاع النتائج 
    ------------------------------------------------------------------------
DROP TABLE T_BOX_REPORT_ACCOUNT;

-- 1) Create the new table using SELECT INTO
SELECT *
INTO T_BOX_REPORT_ACCOUNT
FROM #TMP_REPORT_ACCOUNT   ORDER BY T_ID_BOX;

-- 1) التحقق إن كان القيد موجودًا
IF NOT EXISTS 
(
    SELECT 1
    FROM sys.key_constraints
    WHERE 
        [type] = ''PK''
        AND [name] = ''PK_T_BOX_REPORT_ACCOUNT''
        AND [parent_object_id] = OBJECT_ID(''dbo.T_BOX_REPORT_ACCOUNT'', ''U'')
)
BEGIN
   -- 3) الآن يمكنك إضافة المفتاح الرئيسي على الحقل المطلوب
ALTER TABLE dbo.T_BOX_REPORT_ACCOUNT
ADD CONSTRAINT PK_T_BOX_REPORT_ACCOUNT
PRIMARY KEY (T_ID_BOX);
END
 

------------------------------------------------------------------------
    -- 7) إرجاع النتائج 
    ------------------------------------------------------------------------
    SELECT *
    FROM #TMP_REPORT_ACCOUNT
    ORDER BY T_ID_BOX;

    SET @SUBMIT_FLAG = 1;
    SET NOCOUNT OFF;
END;

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_FILL_REPORT_ACCOUNT_ADVANCE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_FILL_REPORT_ACCOUNT_ADVANCE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_FILL_REPORT_ACCOUNT_ADVANCE]

@IDD INT,
@ACCOUNT_CODE INT, 
@D1 DATE,
@D2 DATE,
@CNY_CODE INT,
@SUBMIT_FLAG INT OUTPUT

AS

IF @IDD=0
BEGIN
DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID_BOX FROM T_BOX  WHERE ACTIVE=1and ACCOUNT_CODE=@ACCOUNT_CODE AND  BILL_DATE BETWEEN @D1 AND @D2  order by BILL_DATE asc;
END
ELSE
BEGIN
DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID_BOX FROM T_BOX  WHERE ACTIVE=1and ACCOUNT_CODE=@ACCOUNT_CODE AND  T_ID_BOX>@IDD	  order by BILL_DATE asc;
END


DECLARE
@T_ID_BOX_CURCOR INT,
@ID_REPORT numeric(18, 0),
@BILL_DATE_ID DATE,
@BILL_TIME DATETIME,
@CR_USA float,
@DE_USA  float,
@CR_IQ float,
@DE_IQ  float,
@CR_CUR float,
@DE_CUR  float,
@REMAIN_USA float,
@REMAIN_IQ float,
@REMAIN_CUR float,
@BILL_NUMBER	INT	,
@BILL_DATE DATE,
@B_CODE	int,
@B_NAME	nvarchar(MAX)	,
@MOVE_CODE	int,
@MOVE_NAME	nvarchar(MAX)	,
@ACCOUNT_NAME	nvarchar(MAX)	,
@ACCOUNT_DESCRIPTION	nvarchar(MAX)	,
@DESCRIPTION	nvarchar(MAX)	,
@CURRANCY_CODE	int	,
@CURRANCY_NAME	nvarchar(MAX),
@CURRANCY_EQUAL	float	,
@BALANCE_USA_ID	float	,
@USER_CODE	int	,
@USER_NAME	nvarchar(MAX)	,
@BALANCEEE		float	,
@BALANCEEE_IQ		float	,
@BALANCEEE_FIRST		float	,
@BALANCEEE_FIRST_IQ		float	,
@BALANCEEE_CUR		float	,
@BALANCEEE_FIRST_CUR		float	,
@MANDOB_CODE	int	,
@MANDOB_NAME  nvarchar(max), 
@CLIENT_REGION  nvarchar(max), 
@CLIENT_PHONE_SMS nvarchar(max), 
@DEAL_CODE	int	,
@DEAL_NAME	nvarchar(MAX)	,
@B_COLOR	nvarchar(MAX),

@ITEM_NAME	nvarchar(MAX)	,
@QTY	float	,
@PRICE	float	,
@TOTAL	float	,


@CHECKED	int	

BEGIN
SET @SUBMIT_FLAG=0

SELECT @ACCOUNT_NAME=ACCOUNT_NAME  FROM T_ACCOUNTS WHERE ACCOUNT_CODE=@ACCOUNT_CODE
SELECT @CLIENT_PHONE_SMS=CLIENT_FULL_PHONE ,@CLIENT_REGION=CLIENT_REGION,@MANDOB_CODE=MANDOOB_CODE FROM T_CLIENT WHERE CLIENT_CODE=@ACCOUNT_CODE
SELECT @MANDOB_NAME=MANDOOB_NAME FROM T_MANDOOB WHERE MANDOOB_CODE=@MANDOB_CODE

 SELECT @B_NAME=B_NAME,@B_COLOR=B_COLOR  FROM T_BILL_TYPE WHERE B_CODE=0


IF @IDD=0
BEGIN

SELECT @BALANCEEE_FIRST =ISNULL(SUM(DEBIT -CREDIT ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1
SELECT @BALANCEEE_FIRST_IQ =ISNULL(SUM(DEBIT_IQ -CREDIT_IQ ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1
SELECT @BALANCEEE_FIRST_CUR=ISNULL(SUM(DEBIT_CUR -CREDIT_CUR ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1

END
ELSE
BEGIN
SELECT @BALANCEEE_FIRST =ISNULL(SUM(DEBIT -CREDIT ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD  and ACTIVE=1
SELECT @BALANCEEE_FIRST_IQ =ISNULL(SUM(DEBIT_IQ -CREDIT_IQ ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD and ACTIVE=1
SELECT @BALANCEEE_FIRST_CUR=ISNULL(SUM(DEBIT_CUR -CREDIT_CUR ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD  and ACTIVE=1
END


DELETE FROM T_BOX_REPORT_ACCOUNT
DELETE FROM T_BOX_REPORT_ACCOUNT_DETAILS
SET @ID_REPORT=0

INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT]
           ([T_ID_BOX]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[B_CODE]
           ,[B_NAME]
           ,[MOVE_CODE]
           ,[MOVE_NAME]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_NAME]
           ,[ACCOUNT_DESCRIPTION]
           ,[AMO_DEBIT]
           ,[AMO_CREDIT]
           ,[BALANCE_USA]
           ,[AMO_DEBIT_IQ]
           ,[AMO_CREDIT_IQ]
           ,[BALANCE_IQ]
           ,[AMO_DEBIT_CUR]
           ,[AMO_CREDIT_CUR]
           ,[BALANCE_CUR]
           ,[DESCRIPTION]
           ,[USER_CODE]
           ,[USER_NAME]
            ,[DEAL_CODE]
           ,[DEAL_NAME]
           ,[BRANCH_CODE]
           ,[BRANCH_NAME]
           ,[MANDOB_NAME]
           ,[CLIENT_REGION]
           ,[CLIENT_PHONE_SMS]
		   ,[B_COLOR]
		  ,[CHECKED]
		   ,[ID_BOX])
     VALUES
           (@ID_REPORT
           ,0
           ,@D1
           ,N'' ''
           ,0
           ,@B_NAME
           ,0
           ,N'' ''
           ,@ACCOUNT_CODE
           ,@ACCOUNT_NAME
           ,@ACCOUNT_DESCRIPTION
           ,NULL
           ,NULL
           ,@BALANCEEE_FIRST
           ,NULL
           ,NULL
           ,@BALANCEEE_FIRST_IQ
           ,NULL
           ,NULL
           ,@BALANCEEE_FIRST_CUR
           ,N''رصيد سابق ماقبل الفترة''
           ,0
           ,NULL
           ,0
           ,NULL
           ,0
           ,NULL
           ,@MANDOB_NAME
           ,@CLIENT_REGION
           ,@CLIENT_PHONE_SMS
		   ,@B_COLOR
		   ,0
		   ,0)

     INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT_DETAILS]
           ([ID_REPORT]
           ,[ITEM_NAME]
           ,[QTY]
           ,[PRICE]
           ,[TOTAL])
     VALUES
           (@ID_REPORT
           ,NULL
           ,NULL
           ,NULL
           ,NULL)

OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN
SET @BALANCEEE_IQ=0 
 SET @REMAIN_IQ=0
 SET @BALANCEEE=0 
 SET @REMAIN_USA=0

SET @ID_REPORT=@ID_REPORT+1
SELECT @DE_USA=DEBIT,@CR_USA=CREDIT, @DE_IQ=DEBIT_IQ,@CR_IQ=CREDIT_IQ, @BILL_DATE=BILL_DATE,@BILL_NUMBER=BILL_NUMBER,@BILL_TIME=BILL_TIME
 ,@B_CODE=B_CODE,@ACCOUNT_DESCRIPTION=ACCOUNT_DESCRIPTION,@DESCRIPTION=DESCRIPTION,@CURRANCY_CODE=CURRANCY_CODE,@CURRANCY_EQUAL=CURRANCY_EQUAL
 ,@USER_CODE=USER_CODE,@DEAL_CODE=DEAL_CODE,@CHECKED=CHECKED FROM T_BOX WHERE T_ID_BOX=@T_ID_BOX_CURCOR
 SELECT @DEAL_NAME=DEAL_NAME  FROM T_DEAL WHERE DEAL_CODE=@DEAL_CODE
 SELECT @MOVE_NAME=MOVE_NAME  FROM T_MOVE WHERE MOVE_CODE=@MOVE_CODE
  SELECT @B_NAME=B_NAME,@B_COLOR=B_COLOR  FROM T_BILL_TYPE WHERE B_CODE=@B_CODE
   SELECT @CURRANCY_NAME=CURRANCY_NAME FROM T_CURRANNCY WHERE CURRANCY_CODE=@CURRANCY_CODE
 SELECT @USER_NAME=USER_NAME FROM T_USERS WHERE USER_CODE=@USER_CODE
-----++++ BEGIN

 SELECT @BALANCEEE =ISNULL(SUM(AMO_DEBIT -AMO_CREDIT ),0) FROM T_BOX_REPORT_ACCOUNT WHERE   T_ID_BOX <= @ID_REPORT 
 SELECT @BALANCEEE_IQ =ISNULL(SUM(AMO_DEBIT_IQ -AMO_CREDIT_IQ ),0) FROM T_BOX_REPORT_ACCOUNT WHERE   T_ID_BOX <= @ID_REPORT 
 SELECT @BALANCEEE_CUR =ISNULL(SUM(AMO_DEBIT_CUR -AMO_CREDIT_CUR ),0) FROM T_BOX_REPORT_ACCOUNT WHERE   T_ID_BOX <= @ID_REPORT 
 
 SET @REMAIN_USA=(@DE_USA-@CR_USA)+@BALANCEEE_FIRST
 SET @REMAIN_IQ=(@DE_IQ-@CR_IQ)+@BALANCEEE_FIRST_IQ
 SET @REMAIN_CUR=(@DE_CUR-@CR_CUR)+@BALANCEEE_FIRST_CUR
INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT]
           ([T_ID_BOX]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[B_CODE]
           ,[B_NAME]
           ,[MOVE_CODE]
           ,[MOVE_NAME]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_NAME]
           ,[ACCOUNT_DESCRIPTION]
           ,[AMO_DEBIT]
           ,[AMO_CREDIT]
           ,[BALANCE_USA]
           ,[AMO_DEBIT_IQ]
           ,[AMO_CREDIT_IQ]
           ,[BALANCE_IQ]
           ,[AMO_DEBIT_CUR]
           ,[AMO_CREDIT_CUR]
           ,[BALANCE_CUR]
           ,[DESCRIPTION]
           ,[USER_CODE]
           ,[USER_NAME]
           ,[DEAL_CODE]
           ,[DEAL_NAME]
           ,[BRANCH_CODE]
           ,[BRANCH_NAME]
           ,[MANDOB_NAME]
           ,[CLIENT_REGION]
           ,[CLIENT_PHONE_SMS]
		   ,[B_COLOR]
		   ,[CHECKED]
		   ,[ID_BOX])
     VALUES
           (@ID_REPORT
           ,@BILL_NUMBER
           ,@BILL_DATE
           ,@BILL_TIME
           ,@B_CODE
           ,@B_NAME
           ,@MOVE_CODE
           ,@MOVE_NAME
           ,@ACCOUNT_CODE
           ,@ACCOUNT_NAME
           ,@ACCOUNT_DESCRIPTION
           ,@DE_USA
           ,@CR_USA
           ,@BALANCEEE +@REMAIN_USA
           ,@DE_IQ
           ,@CR_IQ
           ,@BALANCEEE_IQ +@REMAIN_IQ
			,@DE_CUR
           ,@CR_CUR
           ,@BALANCEEE_CUR +@REMAIN_CUR
           ,@DESCRIPTION
           ,@USER_CODE
           ,@USER_NAME
           ,@DEAL_CODE
           ,@DEAL_NAME
           ,0
           ,NULL
           ,@MANDOB_NAME
           ,@CLIENT_REGION
           ,@CLIENT_PHONE_SMS
		   ,@B_COLOR
		   ,@CHECKED
		   ,@T_ID_BOX_CURCOR);

IF @B_CODE=2
BEGIN

 INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT_DETAILS]
           ([ID_REPORT]
           ,[ITEM_NAME]
           ,[QTY]
           ,[PRICE]
           ,[TOTAL]
		   ,[MANDOOB_NAME]
           ,[WIDTH_CM]
           ,[LENGTH_CM]
           ,[AREA_M2]
           ,[DRIVER_NAME]
           ,[NOTE_PRINT])
  SELECT 
           @ID_REPORT
           ,ITEM_NAME
           ,QTY
           ,PRICE
           ,NET_TOTAL
		   ,[MANDOOB_NAME]
           ,[WIDTH_CM]
           ,[LENGTH_CM]
           ,[AREA_M2]
           ,[DRIVER_NAME]
           ,[NOTE_PRINT] FROM V_SALES_INVOICE_DETAILS WHERE BILL_NUMBER=@BILL_NUMBER AND ACTIVE=1
END
ELSE IF @B_CODE=1
BEGIN
INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT_DETAILS]
           ([ID_REPORT]
           ,[ITEM_NAME]
           ,[QTY]
           ,[PRICE]
           ,[TOTAL]
		   ,[MANDOOB_NAME]
           ,[WIDTH_CM]
           ,[LENGTH_CM]
           ,[AREA_M2]
           ,[DRIVER_NAME]
           ,[NOTE_PRINT])
  SELECT 
           @ID_REPORT
           ,ITEM_NAME
           ,QTY
           ,PRICE
           ,NET_TOTAL
		   ,[MANDOOB_NAME]
           ,[WIDTH_CM]
           ,[LENGTH_CM]
           ,[AREA_M2]
           ,[DRIVER_NAME]
           ,[NOTE_PRINT] FROM V_SALES_INVOICE_DETAILS WHERE BILL_NUMBER=@BILL_NUMBER AND ACTIVE=1
END
ELSE IF @B_CODE=21
BEGIN
INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT_DETAILS]
           ([ID_REPORT]
           ,[ITEM_NAME]
           ,[QTY]
           ,[PRICE]
           ,[TOTAL] )
  SELECT 
           @ID_REPORT
           ,ITEM_NAME
           ,QTY
           ,PRICE
           ,TOTAL FROM V_BUY_DETAILS WHERE BILL_NUMBER=@BILL_NUMBER
END
ELSE IF @B_CODE=22
BEGIN
INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT_DETAILS]
           ([ID_REPORT]
           ,[ITEM_NAME]
           ,[QTY]
           ,[PRICE]
           ,[TOTAL] )
  SELECT 
           @ID_REPORT
           ,ITEM_NAME
           ,QTY
           ,PRICE
           ,TOTAL FROM V_BUY_DETAILS_RETURN WHERE BILL_NUMBER=@BILL_NUMBER
END



FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR

IF @CNY_CODE=1
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE AMO_DEBIT=0 AND AMO_CREDIT=0
END
IF @CNY_CODE=2
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE AMO_DEBIT_IQ=0 AND AMO_CREDIT_IQ=0
END


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_ITEM]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE proc [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM] 
@PageSize int,@PageNumber int ,@ITEM_NAME NVARCHAR(MAX)
AS
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
BEGIN 
	SELECT * into #tempSale FROM   V_ITEMS_BALANCE_MIN_PHARMA   WHERE  (@ITEM_NAME = '''' OR @ITEM_NAME LIKE ''%'' + @ITEM_NAME + ''%'')   
    SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    SET @Offset  = (@PageNumber - 1) * @PageSize;
    SELECT * FROM #tempSale ORDER BY ITEM_NAME ASC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_BY_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_BY_BARCODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE proc [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_BY_BARCODE] 
@ITEM_BARCODE NVARCHAR(MAX)
AS
BEGIN 
	DECLARE @ITEM_CODE INT;
	SELECT @ITEM_CODE= ITEM_CODE FROM T_ITEM_BARCODE WHERE ITEM_BARCODE=@ITEM_BARCODE 
	SELECT * FROM V_ITEMS_BALANCE_MIN_PHARMA  WHERE ITEM_CODE=@ITEM_CODE
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_BY_ITEM_NAME]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_BY_ITEM_NAME]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE proc [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_BY_ITEM_NAME] 
@ITEM_NAME NVARCHAR(MAX)
AS
BEGIN 
	SELECT *  FROM V_ITEMS_BALANCE_MIN_PHARMA  WHERE ITEM_NAME LIKE  ''%'' + @ITEM_NAME + ''%''
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_MOVE_AVG]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_MOVE_AVG]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'






CREATE PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_MOVE_AVG]


@ITEM_CODE INT 

AS
DECLARE 
@BILL_SEQ decimal(18, 0)

 
IF OBJECT_ID(''tempdb..#TEMP_AVG_ITEM'') IS NOT NULL DROP Table #TEMP_AVG_ITEM
SELECT CAST( ROW_NUMBER() OVER (ORDER BY BILL_DATE ASC,BILL_NUMBER ASC) AS FLOAT) AS RowNum, x.* INTO #TEMP_AVG_ITEM FROM 
( SELECT 0 AS SEQ,ITEM_CODE, ITEM_NAME,N'''' AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST AS PRICE,TOTAL_COST AS TOTAL,''2000-01-01'' AS BILL_DATE,BILL_NUMBER,BILL_BRANCH,0 AS B_CODE,N''رصيد اولي'' AS B_NAME,(N''رصيد اولي للمادة'') AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG ,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID  FROM V_BUY_DETAILS_FIRST WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT 1 AS SEQ,ITEM_CODE, ITEM_NAME,ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,BILL_DATE,BILL_NUMBER,BILL_BRANCH,21 AS B_CODE,N''مشتريات'' AS B_NAME,(N''المورد :''+CLIENT_NAME) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS int) AS PROCCESS_ID FROM V_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE AND QTY<>0
UNION 
SELECT 2 AS SEQ,ITEM_CODE, ITEM_NAME,ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,TOTAL_QTY AS QTY,UNIT_NAME,UNIT_QTY,(TOTAL_QTY*UNIT_QTY)AS QTY_MIN,(TOTAL_QTY*UNIT_QTY)*-1 AS QTY_MIN_BALANCE ,PRICE,TOTAL,BILL_DATE,BILL_NUMBER,BILL_BRANCH,2 AS B_CODE ,N''مبيعات'' AS B_NAME ,(N''العميل :''+CLIENT_NAME) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID FROM V_SALES_DETAILS WHERE ITEM_CODE=@ITEM_CODE 
 UNION 
SELECT 3 AS SEQ,ITEM_CODE, ITEM_NAME,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,24 AS B_CODE,N''تصحيح مخزني او تلف'' AS B_NAME,IIF(QTY<0,N''تلف'' ,N''اضافة عدد'') AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG ,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID FROM V_BUY_DETAILS_CORRECT WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT 4 AS SEQ,ITEM_CODE_FACTORY, ITEM_NAME_FACTORY,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,11 AS B_CODE,N''تصنيع'' AS B_NAME,N''تصنيع'' AS DESCRIPTION_TYPE,BILL_NUMBER AS GUID_ID,0 AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID FROM V_FACTORY WHERE ITEM_CODE_FACTORY=@ITEM_CODE
UNION 
SELECT 5 AS SEQ,ITEM_CODE, ITEM_NAME,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,(TOT_QTY_MIN/UNIT_QTY) AS QTY,UNIT_NAME,UNIT_QTY,(TOT_QTY_MIN)AS QTY_MIN,(TOT_QTY_MIN)*-1 AS QTY_MIN_BALANCE ,PRICE,(PRICE*TOT_QTY_MIN) AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,12 AS B_CODE,N''استهلاك في التصنيع'' AS B_NAME,(N''استهلاك في التصنيع للمادة : ''+ITEM_NAME_FACTORY) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID FROM V_FACTORY_DETAILS WHERE ITEM_CODE=@ITEM_CODE
 )x ORDER BY SEQ ASC,BILL_DATE ASC,BILL_NUMBER ASC


UPDATE #TEMP_AVG_ITEM SET PROCCESS_ID=RowNum
--SELECT * FROM #TEMP_AVG_ITEM

DECLARE
@LOOP_COUNT INT


SET @LOOP_COUNT=0
LOOP_FIRST:
SET @LOOP_COUNT+=1
 --UPDATE #TEMP_AVG_ITEM SET RowNum=0,PROCCESS_ID=0 WHERE B_CODE=0
DECLARE BOX_CURSOR CURSOR FOR SELECT  RowNum FROM #TEMP_AVG_ITEM   ORDER BY PROCCESS_ID ASC

DECLARE
@T_ID_BOX_CURCOR numeric(18, 2),
@B_CODE INT,
@GUID_ID numeric(18, 2),
@MAX_ID numeric(18, 2),
@BILL_BRANCH NVARCHAR(30),
@QTY FLOAT,
@COST FLOAT,
@COSTIFZERO FLOAT,
@TOTAL_AVG_COST	FLOAT	,
@TOTAL_BALANCE	FLOAT	,
@TOTAL_BALANCE_BEFORE	FLOAT	,
@COST_BEFORE FLOAT,
@TOTAL FLOAT,
@BALANCE_QTY FLOAT,
@BALANCE_QTY_BEFORE FLOAT,
@PROCCESS_IDD numeric(18, 2),
@PROCCESS_NEW numeric(18, 2),

@TOTAL_COST	FLOAT	

BEGIN



OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN

SELECT @B_CODE=B_CODE,@GUID_ID=GUID_ID,@BILL_BRANCH=BILL_BRANCH,@QTY=QTY_MIN_BALANCE,@COST=PRICE,@TOTAL=TOTAL,@COST=AVG_COST,@TOTAL_AVG_COST=TOTAL_AVG,@PROCCESS_IDD=PROCCESS_ID FROM #TEMP_AVG_ITEM WHERE RowNum=@T_ID_BOX_CURCOR
  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''SELECT '' 
 

 IF @B_CODE=0
 BEGIN 
UPDATE #TEMP_AVG_ITEM SET AVG_COST=PRICE,TOTAL_AVG=TOTAL,BALANCE_MIN_AVG=QTY_MIN_BALANCE,TOTAL_BALANCE=TOTAL WHERE RowNum=@T_ID_BOX_CURCOR

END
ELSE IF @B_CODE=2
 BEGIN 
 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

 IF (@BALANCE_QTY_BEFORE)=0
 BEGIN 
 SET @COST=@COST
 SET @TOTAL_AVG_COST=@COST*@QTY
 END
  ELSE
 BEGIN

 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

 END
 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

----UPDATE T_SALES_DETAILS SET [COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL] WHERE T_ID=@GUID_ID
----SET @TOTAL_COST=ISNULL((SELECT  SUM(TOTAL_COST) FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH),0)
----UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST WHERE BILL_BRANCH LIKE @BILL_BRANCH

END
ELSE IF @B_CODE=21
 BEGIN 

SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
 SELECT @COST =PRICE,@COSTIFZERO= AVG_COST , @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY

  IF @BALANCE_QTY=0
 BEGIN 
SET @COST=@COSTIFZERO

 IF @LOOP_COUNT=1 
  BEGIN
 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''ZERO '' 
  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
 set @LOOP_COUNT=0
 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR
 GOTO LOOP_FIRST
 END
 
 
 END
  ELSE IF @BALANCE_QTY>0

 

 IF @BALANCE_QTY_BEFORE<0
 BEGIN 
 IF @LOOP_COUNT=1
  BEGIN
 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
    --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MORE'' 
  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
 set @LOOP_COUNT=0
 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR
 GOTO LOOP_FIRST
 END


 END
 ELSE
  BEGIN

 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
   
 END

 

 ELSE IF @BALANCE_QTY<0 OR @BALANCE_QTY_BEFORE<0
 BEGIN
 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
  
IF @LOOP_COUNT=1
  BEGIN
 SET @PROCCESS_NEW=(SELECT  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MINNNN'' 
  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
 set @LOOP_COUNT=0
 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR
 GOTO LOOP_FIRST
 END


 END
 
 

 
 SET @TOTAL_AVG_COST=@COST*@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

END

ELSE IF @B_CODE=24
 BEGIN 
 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

 IF (@BALANCE_QTY_BEFORE)=0
 BEGIN 
 SET @COST=@COST
 SET @TOTAL_AVG_COST=@COST*@QTY
 END
  ELSE
 BEGIN

 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

 END
 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

----UPDATE T_BUY_DETAILS SET [PRICE_BUY]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[PRICE]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[TOTAL]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL]*QTY,[COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[TOTAL_COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL]*QTY WHERE T_ID=@GUID_ID

END
ELSE IF @B_CODE=11
 BEGIN 

SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
 SELECT @COST =PRICE,@COSTIFZERO= AVG_COST ,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 



 
 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
   IF @BALANCE_QTY=0
 BEGIN 
SET @COST=@COSTIFZERO
 --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''ZERO'' 
 IF @LOOP_COUNT=1
  BEGIN
 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
 set @LOOP_COUNT=0
 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR
 GOTO LOOP_FIRST
 END
 
 
 END
  ELSE IF @BALANCE_QTY>0
 IF @BALANCE_QTY_BEFORE<0
 BEGIN 
 IF @LOOP_COUNT=1
  BEGIN
 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
 set @LOOP_COUNT=0
 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR
 GOTO LOOP_FIRST
 END


 END
 ELSE
  BEGIN
  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MORE'' 
 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
   
 END
 ELSE IF @BALANCE_QTY<0 OR @BALANCE_QTY_BEFORE<0
 BEGIN
 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MINNNN'' 
IF @LOOP_COUNT=1
  BEGIN
 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
 set @LOOP_COUNT=0
 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR
 GOTO LOOP_FIRST
 END


 END
 

 
 SET @TOTAL_AVG_COST=@COST*@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

END
ELSE IF @B_CODE=12
 BEGIN 
 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

 IF (@BALANCE_QTY_BEFORE)=0
 BEGIN 
 SET @COST=@COST
 SET @TOTAL_AVG_COST=@COST*@QTY
 END
  ELSE
 BEGIN

 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

 END
 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

--UPDATE T_FACTORY_DETAILS SET [PRICE]=@COST*[UNIT_QTY],TOTAL=@COST*[UNIT_QTY] WHERE T_ID=@GUID_ID
--SET @TOTAL_COST=ISNULL((SELECT  SUM(TOTAL_COST) FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH),0)
--UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST WHERE BILL_BRANCH LIKE @BILL_BRANCH

END
---------------****************

 
FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


DECLARE ITEMS_CURSOR CURSOR FOR SELECT  UNIT_GUID FROM T_ITEM_UNIT  WHERE ITEM_CODE=@ITEM_CODE   ;

DECLARE
@T_ID_GUID_CURCOR INT,
@QTY_UU FLOAT,
@COST_MIN FLOAT,
@AVG_COST FLOAT,
@BILL_SELECT NVARCHAR(30)

 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0) FROM #TEMP_AVG_ITEM 
 SELECT @AVG_COST =AVG_COST FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID


OPEN ITEMS_CURSOR

FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN



SELECT @QTY_UU=UNIT_QTY FROM  T_ITEM_UNIT WHERE UNIT_GUID=@T_ID_GUID_CURCOR
SELECT TOP (1) @BILL_SELECT=ISNULL(BILL_BRANCH,N''0'') FROM  T_BUY_DETAILS WHERE ACTIVE=1 AND ITEM_CODE=@ITEM_CODE ORDER BY BILL_NUMBER DESC

 
--END




FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR

END

CLOSE ITEMS_CURSOR
DEALLOCATE ITEMS_CURSOR

SELECT * FROM #TEMP_AVG_ITEM ORDER BY PROCCESS_ID ASC


END	--END OF PROGRAM





















' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_STORE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_STORE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE proc [dbo].[P_API_SPEEDOO_PHONE_GET_ITEM_STORE] 
    @PageSize int,
    @PageNumber int ,
    @STORE_CODE int ,
    @ITEM_NAME NVARCHAR(MAX)
AS
	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
BEGIN 
	SELECT *  into #tempSale FROM   V_ITEMS_BALANCE_MIN_PHARMA_GSTORE   WHERE  (@ITEM_NAME = '''' OR @ITEM_NAME LIKE ''%'' + @ITEM_NAME + ''%'') AND (@STORE_CODE = -10 AND STORE_CODE IN (SELECT STORE_CODE FROM T_STORE_TYPE WHERE IS_USED = 1) OR @STORE_CODE != -10 AND STORE_CODE = @STORE_CODE);
	SELECT @TotalRecords = COUNT(*) FROM #tempSale;    
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);   
    SET @Offset  = (@PageNumber - 1) * @PageSize;
    SELECT * FROM #tempSale ORDER BY ITEM_NAME ASC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_MOVE_LIST]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_MOVE_LIST]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_SPEEDOO_PHONE_GET_MOVE_LIST] AS
BEGIN 
	SELECT    MOVE_CODE, MOVE_NAME FROM T_MOVE WHERE MOVE_CODE < 100 OR MOVE_CODE >=300 
END 
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_SALES_BY_DATE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_SALES_BY_DATE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE proc [dbo].[P_API_SPEEDOO_PHONE_GET_SALES_BY_DATE] 
@PageSize int,@PageNumber int,@active bit = 1,@D1 DATE = '''',@D2 DATE = '''' ,@IVC_CODE INT = -1 ,@USER_CREATE NVARCHAR(MAX),@INVOICE_INFO NVARCHAR(MAX)
AS
BEGIN
	DECLARE @TotalRecords INT;DECLARE @TotalPages INT;DECLARE @Offset INT;

IF LEN(@INVOICE_INFO) > 0
	BEGIN
		SELECT ISNULL(SUM(S.NET_SALES),0)  AS NET_SALES FROM V_SALES S WHERE 
				(CLIENT_ADRESS  LIKE ''%'' + @INVOICE_INFO + ''%'' OR
				CLIENT_PHONE  LIKE ''%'' + @INVOICE_INFO + ''%'' OR
				CLIENT_NAME  LIKE ''%'' + @INVOICE_INFO + ''%'' OR
				CONVERT(NVARCHAR, BILL_NUMBER)  LIKE ''%'' + @INVOICE_INFO + ''%'')
				AND (@IVC_CODE = -1 OR IVC_CODE = @IVC_CODE)
		SELECT BILL_NUMBER,BILL_DATE,CLIENT_NAME,TOTAL_SALES,TOTAL_DISCOUNT,NET_SALES,IVC_CODE,IVC_NAME,C_DATE,PATH_PDF,MANDOOB_NAME INTO #tempSale FROM V_SALES_API WHERE 
				(CLIENT_ADRESS  LIKE ''%'' + @INVOICE_INFO + ''%'' OR
				CLIENT_PHONE  LIKE ''%'' + @INVOICE_INFO + ''%'' OR
				CLIENT_NAME  LIKE ''%'' + @INVOICE_INFO + ''%'' OR
				CONVERT(NVARCHAR, BILL_NUMBER)  LIKE ''%'' + @INVOICE_INFO + ''%'' )
				AND (@IVC_CODE = -1 OR IVC_CODE = @IVC_CODE) AND (@USER_CREATE = '''' OR USER_CREATE  LIKE ''%'' + @USER_CREATE + ''%'');
		SELECT @TotalRecords = COUNT(*) FROM #tempSale;
		SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);
		SET @Offset = (@PageNumber - 1) * @PageSize;
		SELECT * FROM #tempSale  ORDER BY BILL_NUMBER DESC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	END
ELSE
	BEGIN
		SELECT ISNULL(SUM(S.NET_SALES),0)  AS NET_SALES FROM V_SALES S WHERE BILL_DATE BETWEEN @D1 AND @D2 AND (@IVC_CODE = -1 OR IVC_CODE = @IVC_CODE)
		SELECT BILL_NUMBER,BILL_DATE,CLIENT_NAME,TOTAL_SALES,TOTAL_DISCOUNT,NET_SALES,IVC_CODE,IVC_NAME,C_DATE,PATH_PDF,MANDOOB_NAME INTO #tempSale1 FROM V_SALES_API WHERE ACTIVE = @active AND (@D1 IS NULL OR @D2 IS NULL OR BILL_DATE BETWEEN @D1 AND @D2) AND (@IVC_CODE = -1 OR IVC_CODE = @IVC_CODE) AND (@USER_CREATE = '''' OR USER_CREATE  LIKE ''%'' + @USER_CREATE + ''%'');
		SELECT @TotalRecords = COUNT(*) FROM #tempSale1;
		SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);
		SET @Offset = (@PageNumber - 1) * @PageSize;
		SELECT * FROM #tempSale1  ORDER BY BILL_NUMBER DESC OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_SALES_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_SALES_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE proc [dbo].[P_API_SPEEDOO_PHONE_GET_SALES_DETAILS] 
@BILL_NUMBER INT
AS
BEGIN
	SELECT ITEM_NAME,QTY,UNIT_NAME,PRICE,NET_TOTAL FROM T_SALES_DETAILS  WHERE BILL_NUMBER=@BILL_NUMBER
	IF @@ROWCOUNT = 0
	BEGIN
	RAISERROR(''الفاتورة غير موجودة'', 16, 1);
	RETURN;
	END
END 
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_TYPE_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_TYPE_INVOICE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE proc [dbo].[P_API_SPEEDOO_PHONE_GET_TYPE_INVOICE] 
AS
BEGIN
SELECT  CAST(-1 AS INT) AS IVC_CODE,N''الكل'' AS IVC_NAME UNION 
SELECT   CAST(IVC_CODE AS INT) AS IVC_CODE ,IVC_NAME  FROM T_IVC_TYPE  WHERE IVC_CODE<>0
END 
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_GET_USER_CODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_GET_USER_CODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_SPEEDOO_PHONE_GET_USER_CODE] 
	@USER_NAME NVARCHAR(MAX),
	@USER_PWD  NVARCHAR(MAX)
AS
BEGIN   
	SELECT T_USERS.* FROM T_USERS  WHERE  USER_NAME=@USER_NAME AND USER_PWD=@USER_PWD

	SELECT T_LEVEL.* FROM T_USERS INNER JOIN T_LEVEL ON T_LEVEL.LEVEL_CODE = T_USERS.LEVEL_CODE WHERE  USER_NAME=@USER_NAME AND USER_PWD=@USER_PWD
	IF @@ROWCOUNT = 0
	BEGIN
	RAISERROR(''يرجى التحقق من معلومات الحساب'', 16, 1);
	RETURN;
	END
END 
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_INSERT_APP_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_INSERT_APP_INVOICE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE proc [dbo].[P_API_SPEEDOO_PHONE_INSERT_APP_INVOICE] 
@INFO nvarchar(max),@DETAILS nvarchar(max),@USER_CREATE nvarchar(max),@TOKEN_APP nvarchar(max),@B_CODE int
AS
DECLARE
@BRANCH nvarchar(max)
SELECT @BRANCH=COMPANY_TITAL FROM T_COMPANY  WHERE T_ID=1
	----------------------------------------------------- 
BEGIN 
		IF LEN(@INFO)>0 OR  LEN(@DETAILS)>0
		BEGIN
	INSERT INTO [dbo].[T_APP_INVOICE]
           ([D_DATE]
           ,[D_TIME]
           ,[INFO]
           ,[DETAILS]
           ,[B_CODE]
           ,[IS_INSERT]
           ,[BILL_GIUD]
           ,[BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[CLIENT_NAME]
           ,[CLIENT_PHONE]
           ,[CLIENT_ADDRESS]
           ,[B_NAME]
           ,[USER_CREATE]
           ,[DEVICE_ID]
           ,[IS_ACCEPT]
           ,[TOKEN_APP]
           ,[BRANCH]
           ,[USER_NAME])
     VALUES
           (GETDATE()
           ,GETDATE()
           ,@INFO 
           ,@DETAILS 
           ,@B_CODE 
           ,0
           ,N''''
           ,N''''
           ,0
          ,N''''
           ,N''''
           ,N''''
           ,N''''
           ,@USER_CREATE 
           ,N''''
           ,0
           ,@TOKEN_APP 
           ,@BRANCH 
           ,@USER_CREATE)

		SELECT (SELECT MAX(T_ID) FROM T_APP_INVOICE ) AS ID, N''successfully done , Inser Done ..  '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
		ELSE 
		BEGIN
		SELECT 0 AS ID, N''Error , Inser '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
	 
	
 



	end 
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_INSERT_NOTE_BILL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_INSERT_NOTE_BILL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_SPEEDOO_PHONE_INSERT_NOTE_BILL] 
@B_CODE  int,
@BILL_NUMBER  int,
@NOTE  nvarchar(max),
@USER_CREATE  nvarchar(max), 
@ACCOUNT_CODE  int,
@REMAINDER_DATE  date,
@IS_DONE  bit, 
@NOTE_TYPE  nvarchar(max),
@ATTACH_PATH  nvarchar(max),
@MAIN_ID  int,
@BY_APP  int,
@BY_TRACKING  int,
@ACTIVE  bit

AS
BEGIN 
		INSERT INTO [dbo].[T_NOTES]
           ([B_CODE]
           ,[BILL_NUMBER]
           ,[NOTE]
           ,[USER_CREATE]
           ,[C_DATE]
           ,[ACCOUNT_CODE]
           ,[REMAINDER_DATE]
           ,[IS_DONE]
           ,[MAWJOOD_ID_TASK]
           ,[NOTE_TYPE]
           ,[ATTACH_PATH]
           ,[MAIN_ID]
           ,[BY_APP]
           ,[BY_TRACKING]
           ,[ACTIVE])
     VALUES
           (@B_CODE 
           ,@BILL_NUMBER 
           ,@NOTE 
           ,@USER_CREATE 
           ,GETDATE() 
           ,@ACCOUNT_CODE 
           ,@REMAINDER_DATE 
           ,@IS_DONE 
           ,N'''' 
           ,@NOTE_TYPE 
           ,@ATTACH_PATH 
           ,@MAIN_ID 
           ,@BY_APP 
           ,@BY_TRACKING 
           ,@ACTIVE )

END 
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_SPEEDOO_PHONE_INSERT_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_SPEEDOO_PHONE_INSERT_SANAD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_SPEEDOO_PHONE_INSERT_SANAD]


@USER_CREATE NVARCHAR(MAX),
@MOVE_CODE INT,
@FROM_ACCOUNT INT ,
@TO_ACCOUNT INT ,
@AMO_USA float ,
@AMO_IQ float ,
@BILL_RELATION	int	,
@B_CODE_RELATION	int	,
@DESCRIPTION NVARCHAR(MAX) 

 



AS
DECLARE
@BILL_NUMBER INT,
@BILL_BRANCH   NVARCHAR(MAX),
@BILL_DATE DATE = GETDATE(),
@BILL_TIME DATETIME = GETDATE(),
@FROM_ACC   NVARCHAR(MAX),
@TO_ACC   NVARCHAR(MAX),
@CURRANCY_CODE  INT,
@CURRANCY_USA float	,
@CURRANCY_IQ float	,
@CURRANCY_EQUAL float	,
@USER_CODE INT,
@COMPANY_TITAL   NVARCHAR(MAX)

BEGIN TRAN
BEGIN
 
SELECT @BILL_NUMBER=ISNULL(MAX(BILL_NUMBER),0)+1 FROM T_SANAD  

SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
SELECT @FROM_ACC=ACCOUNT_NAME FROM T_ACCOUNTS WHERE ACCOUNT_CODE=@FROM_ACCOUNT
SELECT @TO_ACC=ACCOUNT_NAME FROM T_ACCOUNTS WHERE ACCOUNT_CODE=@TO_ACCOUNT
SET @BILL_BRANCH=@COMPANY_TITAL + CAST(@BILL_NUMBER AS nvarchar)
IF @CURRANCY_CODE=1
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=1/NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_IQ
END

ELSE
BEGIN
SELECT @CURRANCY_USA=NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_USA
END


 
if not exists (select * from T_SANAD where BILL_BRANCH = @BILL_BRANCH )  INSERT INTO [dbo].[T_SANAD] ([BILL_BRANCH],[BILL_NUMBER], [BILL_DATE], [BILL_TIME], [USER_CREATE], [CURRANCY_EQUAL], [MOVE_CODE], [FROM_ACCOUNT], [TO_ACCCOUNT], [FROM_ACC], [TO_ACC], [AMO_USA], [AMO_IQ], [CONV_USA], [CONV_IQ], [DESCRIPTION], [C_DATE],  [SECURETY_CODE], [SANAD_ACTIVE], [OFFER_CODE], [IS_TRANS],[BILL_RELATION],[B_CODE]) 
VALUES (@BILL_BRANCH,@BILL_NUMBER, @BILL_DATE, @BILL_TIME, @USER_CREATE, @CURRANCY_EQUAL, @MOVE_CODE, @FROM_ACCOUNT, @TO_ACCOUNT, @FROM_ACC, @TO_ACC, @AMO_USA, @AMO_IQ, N'''', N'''', @DESCRIPTION, GETDATE(),  1, 1, 1, 0,@BILL_RELATION,@B_CODE_RELATION) 
else 
UPDATE [dbo].[T_SANAD] SET [BILL_BRANCH] = @BILL_BRANCH,[BILL_NUMBER] = @BILL_NUMBER, [BILL_DATE] = @BILL_DATE, [BILL_TIME] = @BILL_TIME, [CURRANCY_EQUAL] = @CURRANCY_EQUAL, [MOVE_CODE] = @MOVE_CODE, [FROM_ACCOUNT] = @FROM_ACCOUNT, [TO_ACCCOUNT] = @TO_ACCOUNT, [FROM_ACC] = @FROM_ACC, [TO_ACC] = @TO_ACC, [AMO_USA] = @AMO_USA, [AMO_IQ] = @AMO_IQ, [CONV_USA] = N'''', [CONV_IQ] = N'''', [DESCRIPTION] = @DESCRIPTION, [C_UPDATE] = GETDATE(), [USER_UPDATE] = @USER_CREATE, [SECURETY_CODE] = 1, [SANAD_ACTIVE] = 1, [OFFER_CODE] = 1, [IS_TRANS] = 0  WHERE BILL_BRANCH=@BILL_BRANCH  

SELECT TOP(1) @USER_CODE=ISNULL(USER_CODE,1) FROM T_USERS WHERE [USER_NAME] LIKE @USER_CREATE
--DELETE FROM T_BOX WHERE BILL_BRANCH=@BILL_BRANCH AND B_CODE=5

-- FROM
INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
 VALUES (@BILL_BRANCH,@BILL_NUMBER, CAST(@BILL_NUMBER AS nvarchar), @BILL_DATE, @BILL_TIME, @MOVE_CODE, 5, 1, @FROM_ACCOUNT, N'''', 0, @AMO_USA, 0, @AMO_IQ, @CURRANCY_CODE, @CURRANCY_EQUAL,  @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)
-- TO
INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE]) 
VALUES (@BILL_BRANCH,@BILL_NUMBER, CAST(@BILL_NUMBER AS nvarchar), @BILL_DATE, @BILL_TIME, @MOVE_CODE, 5, 1, @TO_ACCOUNT, N'''', @AMO_USA, 0, @AMO_IQ, 0, @CURRANCY_CODE, @CURRANCY_EQUAL,  @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)




 	SELECT @BILL_NUMBER AS ID, N''عملية الاضافة , تمت بنجاح ..  '' AS  N''Response'' FROM T_CLIENT WHERE CLIENT_CODE=2100000
	 

END	--END OF PROGRAM
commit































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_DELETE_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_DELETE_CATEGORY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_STORES_DELETE_CATEGORY]
	@CATEGORY_CODE INT
AS
BEGIN

	UPDATE T_ITEM_CATEGORY SET ACTIVE = 0  WHERE CATEGORY_CODE =@CATEGORY_CODE
	IF @@ROWCOUNT = 0
	BEGIN
	RAISERROR(N'''', 16, 1);
	RETURN;
	END

END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_DELETE_ITEMS_MISWAK_INFO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_DELETE_ITEMS_MISWAK_INFO]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_STORES_DELETE_ITEMS_MISWAK_INFO]
    @ID INT
AS
BEGIN
	DELETE FROM T_ITEM_MISWAK_INFO WHERE T_ID =@ID
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_DELETED_BARCODE_BY_ITEMCODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_DELETED_BARCODE_BY_ITEMCODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_STORES_DELETED_BARCODE_BY_ITEMCODE]
	@ID INT
AS
BEGIN
	DELETE   T_ITEM_BARCODE WHERE T_ID=@ID
	IF @@ROWCOUNT = 0
	BEGIN
	RAISERROR(N'''', 16, 1);
	RETURN;
	END

END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GENERATE_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GENERATE_BARCODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_STORES_GENERATE_BARCODE] 
    @ITEM_CODE INT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ITEM_BARCODE  VARCHAR(20);   -- لا نستخدم FLOAT
        DECLARE @UNIT_CODE     INT;
        DECLARE @UNIT_NAME     NVARCHAR(100);
        DECLARE @CATEGORY_CODE INT;

        -- جلب بيانات أساسية من T_ITEMS
        SELECT 
            @CATEGORY_CODE = CATEGORY_CODE,
            @UNIT_NAME     = UNIT_NAME
        FROM dbo.T_ITEMS WITH (NOLOCK)
        WHERE ITEM_CODE = @ITEM_CODE;

        IF @CATEGORY_CODE IS NULL
            THROW 50010, N''ITEM_CODE غير موجود في T_ITEMS.'', 1;

        -- استدعاء مولّد الباركود وتمرير كود الفئة
        EXEC dbo.P_GENERATE_BARCODE
             @CATEGORY_CODE = @CATEGORY_CODE,
             @ITEM_BARCODE  = @ITEM_BARCODE OUTPUT;

        -- تحقّق سريع من عدم التكرار (حماية إضافية ضد سباق نادر)
        IF EXISTS (SELECT 1 FROM dbo.T_ITEM_BARCODE WHERE ITEM_BARCODE = @ITEM_BARCODE)
            THROW 50011, N''تم توليد باركود مستخدم مسبقاً بسبب سباق. أعد المحاولة.'', 1;

        -- إن عندك منطق لوحدة افتراضية غيّر هنا. حالياً 1 ثابت + اسم الوحدة من T_ITEMS
        SET @UNIT_CODE = 1;

        BEGIN TRAN;

            UPDATE dbo.T_ITEMS
            SET ITEM_BARCODE = @ITEM_BARCODE
            WHERE ITEM_CODE = @ITEM_CODE;

            INSERT INTO dbo.T_ITEM_BARCODE
                (C_DATE, ITEM_CODE, ITEM_BARCODE, TYPE_VAL, UNIT_CODE, UNIT_NAME)
            VALUES
                (GETDATE(), @ITEM_CODE, @ITEM_BARCODE, 0, @UNIT_CODE, @UNIT_NAME);

        COMMIT;

        -- إرجاع النتيجة للمستدعي
        SELECT @ITEM_BARCODE AS ITEM_BARCODE;
    END TRY
    BEGIN CATCH
        IF XACT_STATE() <> 0 ROLLBACK;

        DECLARE 
            @msg   NVARCHAR(4000) = ERROR_MESSAGE(),
            @num   INT            = ERROR_NUMBER(),
            @state INT            = ERROR_STATE(),
            @sev   INT            = ERROR_SEVERITY(),
            @line  INT            = ERROR_LINE();

        RAISERROR(N''P_API_STORES_GENERATE_BARCODE failed: %s (Err %d, State %d, Line %d)'',
                  @sev, 1, @msg, @num, @state, @line);
    END CATCH
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_BARCODE_BY_ITEMCODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_BARCODE_BY_ITEMCODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_STORES_GET_ALL_BARCODE_BY_ITEMCODE]
	@ITEM_CODE INT
AS
BEGIN
	SELECT ITEM_BARCODE,T_ID FROM  T_ITEM_BARCODE WHERE ITEM_CODE=@ITEM_CODE

END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_CATEGORY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_STORES_GET_ALL_CATEGORY]
AS
BEGIN
	SELECT CATEGORY_CODE, CATEGORY_NAME FROM  T_ITEM_CATEGORY WHERE ACTIVE =1 AND SHOW_MENU = 1
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_CLIENT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_STORES_GET_ALL_CLIENT] AS
BEGIN
	--SELECT * FROM T_ACCOUNTS WHERE ACCOUNT_PARENT =22 OR ACCOUNT_PARENT =23 AND ACCOUNT_ACTIVE =1 
	 SELECT ACCOUNT_CODE,ACCOUNT_NAME,CLIENT_PHONE,CLIENT_ADDRESS FROM V_ACC_BALANCE_CLIENT WHERE TYPE_ACCOUNT_CODE IN(1,3) AND CAST(ACCOUNT_CODE AS INT) > 2100000;
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_INFO_BY_ITEMCODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_INFO_BY_ITEMCODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_STORES_GET_ALL_INFO_BY_ITEMCODE] 
@ITEM_CODE INT
AS
BEGIN
 	SELECT ITEM_CODE,ITEM_NAME,CATEGORY_CODE,TYPE_CODE,COST,SELL,ITEM_NOTE,ITEM_BARCODE,QTY_MIN,UNIT2_NAME,UNIT2_QTY,SELL2,SELL_G,SELL_W,SELL2_G,SELL2_W,UNIT_NAME  FROM T_ITEMS WHERE ITEM_CODE = @ITEM_CODE
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_ITEM_TYPE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_ITEM_TYPE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_STORES_GET_ALL_ITEM_TYPE] AS
BEGIN
	 SELECT * FROM T_ITEM_TYPE
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_ITEMS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_STORES_GET_ALL_ITEMS] AS
BEGIN
 	SELECT   ITEM_CODE,ITEM_NAME,ITEM_BARCODE,UNIT2_QTY,UNIT_NAME,UNIT2_NAME FROM V_ITEMS_BALANCE_MIN_PHARMA

END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_MISWAK_INFO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_MISWAK_INFO]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_STORES_GET_ALL_MISWAK_INFO]
AS
BEGIN
	SELECT * FROM T_ITEM_MISWAK_INFO 

END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_STORE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_STORE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_STORES_GET_ALL_STORE] 
	@PageSize INT,
	@PageNumber INT,
	@ITEM_NAME NVARCHAR(MAX)
AS
BEGIN

SELECT @PageSize =APP_VIEW_COUNT FROM T_APP_VIEW_COUNT WHERE ID = 1 
	SET NOCOUNT ON;

	DECLARE @TotalRecords INT;
    DECLARE @TotalPages INT;
	DECLARE @Offset INT;
	SET @Offset = (@PageNumber - 1) * @PageSize;
	SELECT ITEM_CODE,ITEM_NAME,ITEM_BARCODE,BALANCE_PHARMA,UNIT_NAME,UNIT2_NAME,UNIT2_QTY ,CATEGORY_CODE,PRICE_SALE_1 FROM V_ITEMS_BALANCE_MIN_PHARMA WHERE @ITEM_NAME IS NULL OR @ITEM_NAME = '''' OR ITEM_NAME LIKE ''%'' + @ITEM_NAME + ''%''ORDER BY ITEM_NAME ASC OFFSET @Offset ROWS 
	FETCH NEXT @PageSize ROWS ONLY;
	SELECT @TotalRecords = COUNT(*) FROM V_ITEMS_BALANCE_MIN_PHARMA WHERE @ITEM_NAME IS NULL OR @ITEM_NAME = '''' OR ITEM_NAME LIKE ''%'' + @ITEM_NAME + ''%'';
    SET @TotalPages = CEILING(CAST(@TotalRecords AS FLOAT) / @PageSize);
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_STORE_DELETED_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_STORE_DELETED_ITEMS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_STORES_GET_ALL_STORE_DELETED_ITEMS] AS
BEGIN
	SELECT	ITEM_CODE,ITEM_NAME,ITEM_BARCODE	FROM	T_ITEMS  WHERE ACTIVE =0
 
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_STORE_EXPIRE_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_STORE_EXPIRE_ITEMS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_STORES_GET_ALL_STORE_EXPIRE_ITEMS] AS
BEGIN
	SELECT  ITEM_CODE,ITEM_NAME,CATEGORY_CODE,QTY,EXP_DATE FROM   V_BUY_DETAILS_EXPIRED_REMAIN WHERE ITEM_CODE>0 AND REMAIN_BUY_MIN>0 ORDER BY ITEM_NAME ASC
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_STORE_NEGATIVE_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_STORE_NEGATIVE_ITEMS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_STORES_GET_ALL_STORE_NEGATIVE_ITEMS] AS
BEGIN
	SELECT	dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.ITEM_CODE, dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.ITEM_BARCODE, dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.ITEM_NAME, dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.CATEGORY_CODE,   dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.UNIT_CODE, dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.UNIT_NAME, dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.BALANCE_PHARMA,V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.PRICE_SALE_1,   dbo.T_ITEMS.QTY_MIN
	FROM	dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE LEFT OUTER JOIN dbo.T_ITEMS ON dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE
	WHERE	 (dbo.T_ITEMS.QTY_MIN > dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.BALANCE_PHARMA)  AND V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.TYPE_CODE<>5 AND BALANCE_PHARMA <0
	ORDER BY   dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.ITEM_CODE
END

--V_ITEMS_BALANCE_MIN_PHARMA_GSTORE
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_STORE_QTYMIN_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_STORE_QTYMIN_ITEMS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_STORES_GET_ALL_STORE_QTYMIN_ITEMS] AS
	BEGIN


	SELECT dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.ITEM_CODE, dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.ITEM_BARCODE, dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.ITEM_NAME, dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.CATEGORY_CODE,   dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.UNIT_CODE, dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.UNIT_NAME, dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.BALANCE_PHARMA,V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.PRICE_SALE_1,   dbo.T_ITEMS.QTY_MIN
	FROM dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE LEFT OUTER JOIN dbo.T_ITEMS ON dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE
	WHERE (dbo.T_ITEMS.QTY_MIN > dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.BALANCE_PHARMA) AND (dbo.T_ITEMS.QTY_MIN > dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.BALANCE_PHARMA) AND V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.TYPE_CODE<>5
	ORDER BY dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.ITEM_CODE
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_STORE_REPORT_STORE_REPORT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_STORE_REPORT_STORE_REPORT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_STORES_GET_ALL_STORE_REPORT_STORE_REPORT] AS
BEGIN
 	SELECT   ITEM_CODE,ITEM_NAME,ITEM_BARCODE,BALANCE_PHARMA,UNIT_NAME FROM V_ITEMS_BALANCE_MIN_PHARMA

END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ALL_STORE_WAJBA_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ALL_STORE_WAJBA_ITEMS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_STORES_GET_ALL_STORE_WAJBA_ITEMS] 
@ITEM_WAJBA_CODE INT 

AS
BEGIN
	SELECT  * FROM   V_BUY_DETAILS_EXPIRED_REMAIN WHERE ITEM_CODE= @ITEM_WAJBA_CODE ORDER BY BILL_NUMBER DESC
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_DASBOARD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_DASBOARD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_STORES_GET_DASBOARD] AS
BEGIN
SELECT 

    (SELECT COUNT(*)FROM T_ITEMS WHERE ACTIVE = 1) AS QTY_ITEMS,

    (SELECT COUNT(*) FROM dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE LEFT OUTER JOIN dbo.T_ITEMS ON dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE WHERE dbo.T_ITEMS.QTY_MIN > dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.BALANCE_PHARMA AND V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.TYPE_CODE <> 5) AS QTY_MINIMUM,
    
    (SELECT COUNT(*)FROM dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE LEFT OUTER JOIN dbo.T_ITEMS ON dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE WHERE dbo.T_ITEMS.QTY_MIN > dbo.V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.BALANCE_PHARMA AND V_ITEMS_BALANCE_MIN_PHARMA_GSTORE.TYPE_CODE <> 5 AND BALANCE_PHARMA < 0) AS QTY_NEGATIVE,
     
    (SELECT COUNT(*) FROM V_BUY_DETAILS_EXPIRED_REMAIN WHERE ITEM_CODE > 0 AND REMAIN_BUY_MIN > 0) AS QTY_EXPIRE,

    (SELECT COUNT(*)FROM T_ITEMS WHERE ACTIVE = 0) AS QTY_DELETED;

 
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_EXPIRE_STORE_REPORT_STORE_REPORT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_EXPIRE_STORE_REPORT_STORE_REPORT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_STORES_GET_EXPIRE_STORE_REPORT_STORE_REPORT] AS
BEGIN

	SELECT  BILL_NUMBER,ITEM_NAME,REMAIN_BUY,CLIENT_NAME,EXP_DATE,UNIT_NAME FROM   V_BUY_DETAILS_EXPIRED_REMAIN WHERE ITEM_CODE>0 AND REMAIN_BUY_MIN>0 ORDER BY ITEM_NAME ASC
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_ITEM_MOVE_AVG]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_ITEM_MOVE_AVG]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_STORES_GET_ITEM_MOVE_AVG]


@ITEM_CODE INT 

AS
DECLARE 
@BILL_SEQ decimal(18, 0)

 
IF OBJECT_ID(''tempdb..#TEMP_AVG_ITEM'') IS NOT NULL DROP Table #TEMP_AVG_ITEM
SELECT CAST( ROW_NUMBER() OVER (ORDER BY BILL_DATE ASC,BILL_NUMBER ASC) AS FLOAT) AS RowNum, x.* INTO #TEMP_AVG_ITEM FROM 
( SELECT 0 AS SEQ,ITEM_CODE, ITEM_NAME,N'''' AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST AS PRICE,TOTAL_COST AS TOTAL,''2000-01-01'' AS BILL_DATE,BILL_NUMBER,BILL_BRANCH,0 AS B_CODE,N''رصيد اولي'' AS B_NAME,(N''رصيد اولي للمادة'') AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG ,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID  FROM V_BUY_DETAILS_FIRST WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT 1 AS SEQ,ITEM_CODE, ITEM_NAME,ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,BILL_DATE,BILL_NUMBER,BILL_BRANCH,21 AS B_CODE,N''مشتريات'' AS B_NAME,(N''المورد :''+CLIENT_NAME) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS int) AS PROCCESS_ID FROM V_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE AND QTY<>0
UNION 
SELECT 2 AS SEQ,ITEM_CODE, ITEM_NAME,ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,TOTAL_QTY AS QTY,UNIT_NAME,UNIT_QTY,(TOTAL_QTY*UNIT_QTY)AS QTY_MIN,(TOTAL_QTY*UNIT_QTY)*-1 AS QTY_MIN_BALANCE ,PRICE,TOTAL,BILL_DATE,BILL_NUMBER,BILL_BRANCH,2 AS B_CODE ,N''مبيعات'' AS B_NAME ,(N''العميل :''+CLIENT_NAME) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID FROM V_SALES_DETAILS WHERE ITEM_CODE=@ITEM_CODE 
 UNION 
SELECT 3 AS SEQ,ITEM_CODE, ITEM_NAME,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,24 AS B_CODE,N''تصحيح مخزني او تلف'' AS B_NAME,IIF(QTY<0,N''تلف'' ,N''اضافة عدد'') AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG ,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID FROM V_BUY_DETAILS_CORRECT WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT 4 AS SEQ,ITEM_CODE_FACTORY, ITEM_NAME_FACTORY,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,11 AS B_CODE,N''تصنيع'' AS B_NAME,N''تصنيع'' AS DESCRIPTION_TYPE,BILL_NUMBER AS GUID_ID,0 AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID FROM V_FACTORY WHERE ITEM_CODE_FACTORY=@ITEM_CODE
UNION 
SELECT 5 AS SEQ,ITEM_CODE, ITEM_NAME,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,(TOT_QTY_MIN/UNIT_QTY) AS QTY,UNIT_NAME,UNIT_QTY,(TOT_QTY_MIN)AS QTY_MIN,(TOT_QTY_MIN)*-1 AS QTY_MIN_BALANCE ,PRICE,(PRICE*TOT_QTY_MIN) AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,12 AS B_CODE,N''استهلاك في التصنيع'' AS B_NAME,(N''استهلاك في التصنيع للمادة : ''+ITEM_NAME_FACTORY) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID FROM V_FACTORY_DETAILS WHERE ITEM_CODE=@ITEM_CODE
 )x ORDER BY SEQ ASC,BILL_DATE ASC,BILL_NUMBER ASC


UPDATE #TEMP_AVG_ITEM SET PROCCESS_ID=RowNum
--SELECT * FROM #TEMP_AVG_ITEM

DECLARE
@LOOP_COUNT INT


SET @LOOP_COUNT=0
LOOP_FIRST:
SET @LOOP_COUNT+=1
 --UPDATE #TEMP_AVG_ITEM SET RowNum=0,PROCCESS_ID=0 WHERE B_CODE=0
DECLARE BOX_CURSOR CURSOR FOR SELECT  RowNum FROM #TEMP_AVG_ITEM   ORDER BY PROCCESS_ID ASC

DECLARE
@T_ID_BOX_CURCOR numeric(18, 2),
@B_CODE INT,
@GUID_ID numeric(18, 2),
@MAX_ID numeric(18, 2),
@BILL_BRANCH NVARCHAR(30),
@QTY FLOAT,
@COST FLOAT,
@COSTIFZERO FLOAT,
@TOTAL_AVG_COST	FLOAT	,
@TOTAL_BALANCE	FLOAT	,
@TOTAL_BALANCE_BEFORE	FLOAT	,
@COST_BEFORE FLOAT,
@TOTAL FLOAT,
@BALANCE_QTY FLOAT,
@BALANCE_QTY_BEFORE FLOAT,
@PROCCESS_IDD numeric(18, 2),
@PROCCESS_NEW numeric(18, 2),

@TOTAL_COST	FLOAT	

BEGIN



OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN

SELECT @B_CODE=B_CODE,@GUID_ID=GUID_ID,@BILL_BRANCH=BILL_BRANCH,@QTY=QTY_MIN_BALANCE,@COST=PRICE,@TOTAL=TOTAL,@COST=AVG_COST,@TOTAL_AVG_COST=TOTAL_AVG,@PROCCESS_IDD=PROCCESS_ID FROM #TEMP_AVG_ITEM WHERE RowNum=@T_ID_BOX_CURCOR
  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''SELECT '' 
 

 IF @B_CODE=0
 BEGIN 
UPDATE #TEMP_AVG_ITEM SET AVG_COST=PRICE,TOTAL_AVG=TOTAL,BALANCE_MIN_AVG=QTY_MIN_BALANCE,TOTAL_BALANCE=TOTAL WHERE RowNum=@T_ID_BOX_CURCOR

END
ELSE IF @B_CODE=2
 BEGIN 
 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

 IF (@BALANCE_QTY_BEFORE)=0
 BEGIN 
 SET @COST=@COST
 SET @TOTAL_AVG_COST=@COST*@QTY
 END
  ELSE
 BEGIN

 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

 END
 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

----UPDATE T_SALES_DETAILS SET [COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL] WHERE T_ID=@GUID_ID
----SET @TOTAL_COST=ISNULL((SELECT  SUM(TOTAL_COST) FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH),0)
----UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST WHERE BILL_BRANCH LIKE @BILL_BRANCH

END
ELSE IF @B_CODE=21
 BEGIN 

SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
 SELECT @COST =PRICE,@COSTIFZERO= AVG_COST , @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY

  IF @BALANCE_QTY=0
 BEGIN 
SET @COST=@COSTIFZERO

 IF @LOOP_COUNT=1 
  BEGIN
 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''ZERO '' 
  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
 set @LOOP_COUNT=0
 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR
 GOTO LOOP_FIRST
 END
 
 
 END
  ELSE IF @BALANCE_QTY>0

 

 IF @BALANCE_QTY_BEFORE<0
 BEGIN 
 IF @LOOP_COUNT=1
  BEGIN
 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
    --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MORE'' 
  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
 set @LOOP_COUNT=0
 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR
 GOTO LOOP_FIRST
 END


 END
 ELSE
  BEGIN

 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
   
 END

 

 ELSE IF @BALANCE_QTY<0 OR @BALANCE_QTY_BEFORE<0
 BEGIN
 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
  
IF @LOOP_COUNT=1
  BEGIN
 SET @PROCCESS_NEW=(SELECT  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MINNNN'' 
  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
 set @LOOP_COUNT=0
 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR
 GOTO LOOP_FIRST
 END


 END
 
 

 
 SET @TOTAL_AVG_COST=@COST*@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

END

ELSE IF @B_CODE=24
 BEGIN 
 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

 IF (@BALANCE_QTY_BEFORE)=0
 BEGIN 
 SET @COST=@COST
 SET @TOTAL_AVG_COST=@COST*@QTY
 END
  ELSE
 BEGIN

 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

 END
 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

----UPDATE T_BUY_DETAILS SET [PRICE_BUY]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[PRICE]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[TOTAL]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL]*QTY,[COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[TOTAL_COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL]*QTY WHERE T_ID=@GUID_ID

END
ELSE IF @B_CODE=11
 BEGIN 

SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
 SELECT @COST =PRICE,@COSTIFZERO= AVG_COST ,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 



 
 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
   IF @BALANCE_QTY=0
 BEGIN 
SET @COST=@COSTIFZERO
 --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''ZERO'' 
 IF @LOOP_COUNT=1
  BEGIN
 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
 set @LOOP_COUNT=0
 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR
 GOTO LOOP_FIRST
 END
 
 
 END
  ELSE IF @BALANCE_QTY>0
 IF @BALANCE_QTY_BEFORE<0
 BEGIN 
 IF @LOOP_COUNT=1
  BEGIN
 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
 set @LOOP_COUNT=0
 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR
 GOTO LOOP_FIRST
 END


 END
 ELSE
  BEGIN
  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MORE'' 
 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
   
 END
 ELSE IF @BALANCE_QTY<0 OR @BALANCE_QTY_BEFORE<0
 BEGIN
 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MINNNN'' 
IF @LOOP_COUNT=1
  BEGIN
 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
 set @LOOP_COUNT=0
 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR
 GOTO LOOP_FIRST
 END


 END
 

 
 SET @TOTAL_AVG_COST=@COST*@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

END
ELSE IF @B_CODE=12
 BEGIN 
	SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
	SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR 
	SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

 IF (@BALANCE_QTY_BEFORE)=0
 BEGIN 
 SET @COST=@COST
 SET @TOTAL_AVG_COST=@COST*@QTY
 END
 ELSE
 BEGIN

 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

 END
 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

END
---------------****************
FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR

DECLARE ITEMS_CURSOR CURSOR FOR SELECT  UNIT_GUID FROM T_ITEM_UNIT  WHERE ITEM_CODE=@ITEM_CODE   ;

DECLARE
@T_ID_GUID_CURCOR INT,
@QTY_UU FLOAT,
@COST_MIN FLOAT,
@AVG_COST FLOAT,
@BILL_SELECT NVARCHAR(30)

 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0) FROM #TEMP_AVG_ITEM 
 SELECT @AVG_COST =AVG_COST FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

OPEN ITEMS_CURSOR

FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN

SELECT @QTY_UU=UNIT_QTY FROM  T_ITEM_UNIT WHERE UNIT_GUID=@T_ID_GUID_CURCOR
SELECT TOP (1) @BILL_SELECT=ISNULL(BILL_BRANCH,N''0'') FROM  T_BUY_DETAILS WHERE ACTIVE=1 AND ITEM_CODE=@ITEM_CODE ORDER BY BILL_NUMBER DESC

--END
FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR
END
CLOSE ITEMS_CURSOR
DEALLOCATE ITEMS_CURSOR
SELECT * FROM #TEMP_AVG_ITEM ORDER BY PROCCESS_ID ASC
END	--END OF PROGRAM

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_GET_NEGTIVE_STORE_REPORT_STORE_REPORT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_GET_NEGTIVE_STORE_REPORT_STORE_REPORT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_STORES_GET_NEGTIVE_STORE_REPORT_STORE_REPORT] AS
BEGIN

	SELECT  ITEM_CODE,ITEM_NAME,ITEM_BARCODE,BALANCE,UNIT_QTY,UNIT_NAME FROM  dbo.V_STORE_BOX   WHERE BALANCE <0
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_INSERT_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_INSERT_CATEGORY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_STORES_INSERT_CATEGORY]
    @CATEGORY_NAME VARCHAR(MAX)
AS
BEGIN

	DECLARE @COUNT INT
	DECLARE @ID INT
	SELECT @COUNT = COUNT(*) FROM T_ITEM_CATEGORY WHERE CATEGORY_NAME = @CATEGORY_NAME AND ACTIVE = 1
	IF @COUNT = 0 
	BEGIN
	SELECT @ID = ISNULL(MAX(CATEGORY_CODE), 0) + 1 FROM T_ITEM_CATEGORY;
	INSERT INTO T_ITEM_CATEGORY (CATEGORY_CODE , CATEGORY_NAME , CATEGORY_NAME_EN ,ACTIVE , SHOW_MENU ,CATEGORY_IMAGE_PATH,PRINTER_ID ) VALUES (@ID,@CATEGORY_NAME,'''',1,1,'''',0)
	END
	ELSE 
    BEGIN	
	IF @@ROWCOUNT = 0
	BEGIN
	RAISERROR(N''المجموعة موجودة بالفعل'', 16, 1);
	RETURN;
	END
	END
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_INSERT_DATA]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_INSERT_DATA]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE PROCEDURE [dbo].[P_API_STORES_INSERT_DATA]
    @B_CODE INT,
	@INFO NVARCHAR(MAX),
	@DETAILS  NVARCHAR(MAX),
	@USER_CREATE   NVARCHAR(MAX)
AS
BEGIN
	INSERT INTO T_API_ADD_MULTI (D_DATE_TIME , B_CODE , INFO ,DETAILS , IS_INSERT ,DATE_INSERT,BILL_NUMBER,USER_CREATE ) VALUES (GETDATE(),@B_CODE,@INFO,@DETAILS,0,GETDATE(),0,@USER_CREATE)
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_INSERT_ITEM_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_INSERT_ITEM_BARCODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_STORES_INSERT_ITEM_BARCODE]
    @ITEM_CODE INT,
	@ITEM_BARCODE VARCHAR(MAX)
AS
BEGIN
	DECLARE @TYPE_VAL INT;
	SET @TYPE_VAL =1;
	DECLARE @UNIT_CODE INT;
    DECLARE @UNIT_NAME NVARCHAR(100);
    SELECT @UNIT_CODE = 1, @UNIT_NAME = UNIT_NAME FROM T_ITEMS WHERE ITEM_CODE = @ITEM_CODE;
	INSERT INTO T_ITEM_BARCODE (C_DATE,ITEM_CODE,ITEM_BARCODE,TYPE_VAL,UNIT_CODE,UNIT_NAME) VALUES (GETDATE(), @ITEM_CODE, @ITEM_BARCODE, @TYPE_VAL, @UNIT_CODE, @UNIT_NAME);
 
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_INSERT_MISWAK_INFO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_INSERT_MISWAK_INFO]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_STORES_INSERT_MISWAK_INFO]
    @ITEM_CODE INT,
	@ITEM_NAME VARCHAR(MAX),
	@QTY FLOAT,
	@INFO_NOTE VARCHAR(MAX),
	@USER_CREATE VARCHAR(MAX)
AS
BEGIN
	INSERT INTO T_ITEM_MISWAK_INFO (ITEM_CODE , ITEM_NAME , QTY ,ACTIVE , INFO_NOTE ,USER_CREATE,C_DATE ) VALUES (@ITEM_CODE,@ITEM_NAME,@QTY,1,@INFO_NOTE,@USER_CREATE,GETDATE())
	IF @@ROWCOUNT = 0
	BEGIN
	RAISERROR(N'''', 16, 1);
	RETURN;
	END
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_UPDATE_BARCODE_BY_ITEMCODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_UPDATE_BARCODE_BY_ITEMCODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_STORES_UPDATE_BARCODE_BY_ITEMCODE]
	@ID INT,
	@ITEM_BARCODE VARCHAR(MAX)
AS
BEGIN
	UPDATE	T_ITEM_BARCODE SET ITEM_BARCODE=@ITEM_BARCODE WHERE T_ID=@ID
	IF @@ROWCOUNT = 0
	BEGIN
	RAISERROR(N'''', 16, 1);
	RETURN;
	END

END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_UPDATE_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_UPDATE_CATEGORY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_STORES_UPDATE_CATEGORY]
    @CATEGORY_NAME VARCHAR(MAX),
	@CATEGORY_CODE INT
AS
BEGIN
	DECLARE @COUNT INT
	DECLARE @ID INT
	SELECT @COUNT = COUNT(*) FROM T_ITEM_CATEGORY WHERE CATEGORY_NAME = @CATEGORY_NAME AND ACTIVE = 1
	IF @COUNT = 0 
	BEGIN
	SELECT @ID = ISNULL(MAX(CATEGORY_CODE), 0) + 1 FROM T_ITEM_CATEGORY;
	UPDATE T_ITEM_CATEGORY SET CATEGORY_NAME =@CATEGORY_NAME WHERE CATEGORY_CODE =@CATEGORY_CODE
	END
	ELSE 
    BEGIN	
	IF @@ROWCOUNT = 0
	BEGIN
	RAISERROR(N''المجموعة موجودة بالفعل'', 16, 1);
	RETURN;
	END
	END
 
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_UPDATE_ENABLE_ITEM]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_UPDATE_ENABLE_ITEM]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
create PROCEDURE [dbo].[P_API_STORES_UPDATE_ENABLE_ITEM]
	@ITEM_CODE INT
AS
BEGIN
	UPDATE	T_ITEMS SET ACTIVE=1 WHERE ITEM_CODE=@ITEM_CODE
	IF @@ROWCOUNT = 0
	BEGIN
	RAISERROR(N'''', 16, 1);
	RETURN;
	END

END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_UPDATE_ITEMS_FEATURES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_UPDATE_ITEMS_FEATURES]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_STORES_UPDATE_ITEMS_FEATURES]
	@ITEM_CODE INT,
	@IS_DISCOUNT BIT,
	@IS_HIDE BIT ,
	@IS_SERIAL BIT,
	@SHOW_MENU BIT
AS
BEGIN
	UPDATE	T_ITEMS SET IS_DISCOUNT = @IS_DISCOUNT , IS_HIDE = @IS_HIDE,IS_SERIAL = @IS_SERIAL , SHOW_MENU =@SHOW_MENU WHERE ITEM_CODE=@ITEM_CODE 
	IF @@ROWCOUNT = 0
	BEGIN
	RAISERROR(N'''', 16, 1);
	RETURN;
	END

END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_STORES_UPDATE_ITEMS_MISWAK_INFO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_STORES_UPDATE_ITEMS_MISWAK_INFO]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_API_STORES_UPDATE_ITEMS_MISWAK_INFO]
    @ID INT,
	@QTY FLOAT,
	@INFO_NOTE VARCHAR(MAX),
	@USER_UPDATE VARCHAR(MAX)
AS
BEGIN
	UPDATE  T_ITEM_MISWAK_INFO SET QTY = @QTY ,USER_UPDATE= @USER_UPDATE,C_UPDATE = GETDATE() , INFO_NOTE =@INFO_NOTE WHERE T_ID = @ID
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_TABOOR_DELETE_ORDERS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_TABOOR_DELETE_ORDERS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_TABOOR_DELETE_ORDERS]
    @ORDER_NO INT 
AS
BEGIN
	DELETE T_TABOOR_ORDERS WHERE ORDER_NO = @ORDER_NO  
	IF @@ROWCOUNT = 0
	BEGIN
		RAISERROR(''يرجى التأكد من رقم الفاتورة'', 16, 1);
		RETURN;
	END
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_TABOOR_GET_ORDERS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_TABOOR_GET_ORDERS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_TABOOR_GET_ORDERS]
AS
BEGIN
    DECLARE @REFRESH_TIME INT =5;
	SELECT * FROM T_TABOOR_ORDERS 
	SELECT * FROM T_TABOOR_ORDER_TYPES 
	SELECT TIME_RESET  AS REFRESH FROM T_TABOOR_TIME_RESET WHERE ID =3
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_TABOOR_GET_TIME_RESET]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_TABOOR_GET_TIME_RESET]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROC [dbo].[P_API_TABOOR_GET_TIME_RESET] AS 
BEGIN 
	SELECT * FROM T_TABOOR_TIME_RESET
END 
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_TABOOR_GET_TYPES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_TABOOR_GET_TYPES]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROC [dbo].[P_API_TABOOR_GET_TYPES] AS 
BEGIN 
	SELECT * FROM T_TABOOR_ORDER_TYPES
END 
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_TABOOR_INSERT_ORDERS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_TABOOR_INSERT_ORDERS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_TABOOR_INSERT_ORDERS]
    @ORDER_NO INT 
AS
BEGIN
    DECLARE @LASTCREATEDATE DATETIME;
	DECLARE @LASTHOURS INT;
	DECLARE @LASTMINUTE INT;

    SELECT TOP 1 @LASTCREATEDATE = CREATE_DATE  FROM T_TABOOR_ORDERS ORDER BY ID DESC;
	SELECT  @LASTHOURS = TIME_RESET FROM T_TABOOR_TIME_RESET WHERE ID =1;
	SELECT  @LASTMINUTE = TIME_RESET FROM T_TABOOR_TIME_RESET WHERE ID =2;
	DELETE FROM T_TABOOR_ORDERS WHERE FINISH_DATE IS NOT NULL AND DATEADD(MINUTE, @LASTMINUTE, FINISH_DATE) <= GETDATE();
	DELETE FROM T_TABOOR_ORDERS WHERE CREATE_DATE IS NOT NULL AND DATEADD(HOUR, @LASTHOURS, @LASTCREATEDATE) <= GETDATE()OR @LASTCREATEDATE > GETDATE()
	INSERT INTO T_TABOOR_ORDERS (ORDER_TYPE,CREATE_DATE,ORDER_NO) VALUES(1,GETDATE(),@ORDER_NO)
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_TABOOR_UPDATE_ORDERS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_TABOOR_UPDATE_ORDERS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_API_TABOOR_UPDATE_ORDERS]
    @ORDER_NO INT 
AS
BEGIN
	UPDATE T_TABOOR_ORDERS SET  ORDER_TYPE =2 ,FINISH_DATE =GETDATE() WHERE ORDER_NO = @ORDER_NO  
	IF @@ROWCOUNT = 0
	BEGIN
		RAISERROR(''يرجى التأكد من رقم الفاتورة'', 16, 1);
		RETURN;
	END
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_TABOOR_UPDATE_TIME_RESET]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_TABOOR_UPDATE_TIME_RESET]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROC [dbo].[P_API_TABOOR_UPDATE_TIME_RESET] 
@TIME_RESET float,
@ID INT
AS 
BEGIN 
	UPDATE  T_TABOOR_TIME_RESET SET TIME_RESET = @TIME_RESET WHERE ID =@ID
	IF @@ROWCOUNT = 0
	BEGIN
		RAISERROR(''يرجى التأكد من العملية'', 16, 1);
		RETURN;
	END
END 
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_TABOOR_UPDATE_TYPES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_TABOOR_UPDATE_TYPES]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROC [dbo].[P_API_TABOOR_UPDATE_TYPES] 
@TYPE NVARCHAR(MAX),
@SORT INT,
@BG_COLOR NVARCHAR(MAX),
@CARD_RADIUS  NVARCHAR(MAX),
@BG_IMAGE_POSITION  NVARCHAR(MAX),
@BG_IMAGE_SIZE NVARCHAR(MAX),
@HEADER_FONTSIZE FLOAT,
@HEADER_COLOR NVARCHAR(MAX),
@CARD_BGCOLOR NVARCHAR(MAX),
@CARD_THICKNESS_HEIGHT INT,
@CARD_THICKNESS_COLOR NVARCHAR(MAX),
@CARD_SHADOW_COLOR NVARCHAR(MAX),
@CARD_SHADOW_ELEVATION INT,
@CARD_FONTCOLOR NVARCHAR(MAX),
@CARD_FONTSIZE FLOAT,
@CARD_SUBTITLE NVARCHAR(MAX),
@CARD_SUBTITLE_COLOR NVARCHAR(MAX),
@CARD_SUBTITLE_FONTSIZE FLOAT,
@MAX_ROW INT,
@MAX_COLUMN INT,
@BG_IMAGE_OPACITY FLOAT,
@BG_IMAGE NVARCHAR(MAX),
@SHOW_IMG BIT,
@ID INT
AS 
BEGIN 
	UPDATE  T_TABOOR_ORDER_TYPES SET SHOW_IMG=@SHOW_IMG,  CARD_RADIUS=@CARD_RADIUS ,BG_IMAGE_POSITION= @BG_IMAGE_POSITION,BG_IMAGE_SIZE=@BG_IMAGE_SIZE, TYPE = @TYPE,SORT = @SORT,BG_COLOR = @BG_COLOR,HEADER_FONTSIZE = @HEADER_FONTSIZE,HEADER_COLOR = @HEADER_COLOR,CARD_BGCOLOR = @CARD_BGCOLOR, CARD_THICKNESS_HEIGHT = @CARD_THICKNESS_HEIGHT,CARD_THICKNESS_COLOR = @CARD_THICKNESS_COLOR,CARD_SHADOW_COLOR = @CARD_SHADOW_COLOR,CARD_SHADOW_ELEVATION = @CARD_SHADOW_ELEVATION,CARD_FONTCOLOR = @CARD_FONTCOLOR,CARD_FONTSIZE = @CARD_FONTSIZE,CARD_SUBTITLE = @CARD_SUBTITLE, CARD_SUBTITLE_COLOR = @CARD_SUBTITLE_COLOR,CARD_SUBTITLE_FONTSIZE = @CARD_SUBTITLE_FONTSIZE,MAX_ROW = @MAX_ROW,MAX_COLUMN = @MAX_COLUMN,BG_IMAGE = @BG_IMAGE ,BG_IMAGE_OPACITY=@BG_IMAGE_OPACITY WHERE ID =@ID
	IF @@ROWCOUNT = 0
	BEGIN
		RAISERROR(''يرجى التأكد من العملية'', 16, 1);
		RETURN;
	END
END 
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_UPDATE_EXPIRED_BUY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_UPDATE_EXPIRED_BUY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE proc [dbo].[P_API_UPDATE_EXPIRED_BUY] 
@T_ID INT,
@EXP_DATE DATE 
	as
	DECLARE
	@CC_COUNT INT
	 
	begin 
	 
	UPDATE T_BUY_DETAILS SET EXP_DATE=@EXP_DATE WHERE T_ID=@T_ID
 
	SELECT 1 AS ID, N''successfully done'' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1

	end 

	

	
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_UPDATE_ITEM_UNIT_AND_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_UPDATE_ITEM_UNIT_AND_CATEGORY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE proc [dbo].[P_API_UPDATE_ITEM_UNIT_AND_CATEGORY] 
@TYPE_PROCCESS INT,
@ITEM_CODE INT,
@CATEGORY_CODE INT,
		@UNIT_NAME_1 NVARCHAR(MAX),
		@UNIT_NAME_2 NVARCHAR(MAX),
	@UNIT_2_QTY INT
	 
	as
	DECLARE
	@CC_COUNT INT
	 
	begin 


	-----------------------------------------------------
	IF @TYPE_PROCCESS=1 --UPDATE ITEM_NAME
	BEGIN 
		IF LEN(@UNIT_NAME_1)>0
		BEGIN
		 
		SELECT 1 AS ID, N''successfully done , UPDATE ITEM_NAME '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
		ELSE 
		BEGIN
		SELECT 1 AS ID, N''Error , UPDATE ITEM_NAME '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
	END
	
		
	-----------------------------------------------------

		 
-----------------------------------------------------
 



	end 

	

	

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_API_UPDATE_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_API_UPDATE_ITEMS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE proc [dbo].[P_API_UPDATE_ITEMS] 
@TYPE_PROCCESS INT,
@ITEM_CODE INT,
		@ITEM_NAME NVARCHAR(MAX),
	@T_ID_BARCODE INT,
	@UNIT_CODE  INT,
	@UNIT_NAME  NVARCHAR(MAX),
	 @BARCODE NVARCHAR(MAX)
	as
	DECLARE
	@CC_COUNT INT
	 
	begin 


	-----------------------------------------------------
	IF @TYPE_PROCCESS=1 --UPDATE ITEM_NAME
	BEGIN 
		IF LEN(@ITEM_NAME)>0
		BEGIN
		UPDATE T_ITEMS SET ITEM_NAME=@ITEM_NAME WHERE ITEM_CODE=@ITEM_CODE
		SELECT 1 AS ID, N''successfully done , UPDATE ITEM_NAME '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
		ELSE 
		BEGIN
		SELECT 1 AS ID, N''Error , UPDATE ITEM_NAME '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
	END
	
		
	-----------------------------------------------------

		IF @TYPE_PROCCESS=2 --UPDATE BARCODE
		BEGIN 
IF LEN(@BARCODE)>0 AND @T_ID_BARCODE>0 AND @ITEM_CODE >0
	BEGIN
		UPDATE T_ITEM_BARCODE SET ITEM_BARCODE=@BARCODE WHERE T_ID=@T_ID_BARCODE
		 SELECT @CC_COUNT=TYPE_VAL FROM T_ITEM_BARCODE WHERE T_ID=@T_ID_BARCODE
		 IF @CC_COUNT=0
			 BEGIN
			 UPDATE T_ITEMS SET ITEM_BARCODE=@BARCODE WHERE ITEM_CODE=@ITEM_CODE
			 END
			 SELECT 1 AS ID, N''successfully done , UPDATE BARCODE '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		 END
		 ELSE 
		BEGIN
		SELECT 1 AS ID, N''Error , UPDATE BARCODE '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END

	END

-----------------------------------------------------

	IF @TYPE_PROCCESS=3 --UPDATE UNIT NAME BARCODE
	BEGIN 
			IF LEN(@UNIT_NAME)>0 AND @T_ID_BARCODE>0  AND @ITEM_CODE >0
				BEGIN
				UPDATE T_ITEM_BARCODE SET  UNIT_NAME=@UNIT_NAME WHERE T_ID=@T_ID_BARCODE
			UPDATE T_ITEMS  SET  UNIT_NAME=@UNIT_NAME WHERE ITEM_CODE=@ITEM_CODE
			SELECT 1 AS ID, N''successfully done , UPDATE UNIT NAME BARCODE '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
			RETURN
				END
				ELSE 
		BEGIN
		SELECT 1 AS ID, N''Error , UPDATE UNIT NAME BARCODE '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
	END
	
-----------------------------------------------------

	IF @TYPE_PROCCESS=4 --ADD BARCODE
	BEGIN 
			IF @UNIT_CODE<>0
			BEGIN
					SELECT @CC_COUNT=COUNT(T_ID) FROM T_ITEM_BARCODE WHERE ITEM_BARCODE LIKE @BARCODE
					 IF @CC_COUNT<>0
					 BEGIN
	 					SELECT 0 AS ID, N''Duplicate barcode'' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
					 RETURN
					 END

			 IF NOT EXISTS (select [T_ID] from [T_ITEM_BARCODE] where [ITEM_BARCODE] = @BARCODE ) INSERT [dbo].[T_ITEM_BARCODE] (  [ITEM_CODE], [TYPE_VAL], [ITEM_BARCODE], [UNIT_CODE], [UNIT_NAME], [C_DATE]) VALUES (  @ITEM_CODE, 1, @BARCODE, @UNIT_CODE, @UNIT_NAME, GETDATE())
			 SELECT 1 AS ID, N''successfully done , ADD BARCODE'' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
			 RETURN
			END
	END
	
-----------------------------------------------------
IF @TYPE_PROCCESS=5 --DELETE BARCODE
	BEGIN 
			IF LEN(@BARCODE)>0  AND @ITEM_CODE >0
				BEGIN

					DELETE FROM T_ITEM_BARCODE WHERE ITEM_BARCODE LIKE @BARCODE AND ITEM_CODE=@ITEM_CODE
				 SELECT 1 AS ID, N''successfully done , DELETE BARCODE '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
			RETURN
				END
				ELSE 
		BEGIN
		SELECT 1 AS ID, N''Error , DELETE BARCODE '' AS  N''Response'' FROM T_ITEMS WHERE ITEM_CODE=-1
		RETURN
		END
	END
	
-----------------------------------------------------
	



	end 

	

	
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_CalculateBillPoints]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_CalculateBillPoints]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_CalculateBillPoints]

    @BillNumber INT,
 @BILL_DATE DATE,
 @USER_CREATE NVARCHAR(100),
 @ACCOUNT_CODE INT,
 @FLAG INT
AS
    DECLARE
  @TotalPoints FLOAT
BEGIN

IF @ACCOUNT_CODE=2100000
BEGIN
DELETE FROM T_POINTS WHERE BILL_NUMBER=@BillNumber AND B_CODE=2
RETURN
END
    -- إنشاء جدول مؤقت لتخزين التفاصيل مع النقاط المحسوبة
    CREATE TABLE #BillPoints (
        BILL_NUMBER INT,
        ITEM_CODE INT,
        ITEM_NAME NVARCHAR(255) COLLATE Arabic_CI_AS,
        QTY FLOAT,
        UNIT_NAME NVARCHAR(50) COLLATE Arabic_CI_AS,
        UNIT_QTY FLOAT,
        POINT_OF_UNIT1 FLOAT,
        POINT_OF_UNIT2 FLOAT,
        TOTAL_POINT FLOAT
    );

    -- إدراج البيانات مع حساب النقاط
    INSERT INTO #BillPoints (BILL_NUMBER, ITEM_CODE, ITEM_NAME, QTY, UNIT_NAME, UNIT_QTY, POINT_OF_UNIT1, POINT_OF_UNIT2, TOTAL_POINT)
    SELECT 
        TS.BILL_NUMBER, 
        TS.ITEM_CODE, 
        TS.ITEM_NAME, 
        TS.QTY, 
        TS.UNIT_NAME, 
        TS.UNIT_QTY, 
        IT.POINT_OF_UNIT1, 
        IT.POINT_OF_UNIT2,
        CASE 
      WHEN TS.UNIT_QTY > 1 AND IT.POINT_OF_UNIT2=0 THEN TS.QTY * TS.UNIT_QTY * IT.POINT_OF_UNIT1
            WHEN TS.UNIT_QTY = 1 THEN TS.QTY * IT.POINT_OF_UNIT1
            WHEN TS.UNIT_QTY > 1 THEN TS.QTY * IT.POINT_OF_UNIT2
            ELSE 0
        END AS TOTAL_POINT
    FROM 
        dbo.T_SALES_DETAILS TS
    INNER JOIN 
        dbo.T_ITEMS IT 
    ON 
        TS.ITEM_CODE = IT.ITEM_CODE
    WHERE 
        TS.BILL_NUMBER = @BillNumber;

    -- حساب مجمل النقاط للفاتورة

    SELECT @TotalPoints = ISNULL(SUM(TOTAL_POINT),0) FROM #BillPoints ;

IF EXISTS (
    SELECT 1
    FROM dbo.T_POINTS
    WHERE BILL_NUMBER = @BillNumber AND B_CODE = 2
)
BEGIN
    -- إذا كانت البيانات موجودة، قم بالتحديث
    UPDATE dbo.T_POINTS
    SET   ACCOUNT_CODE =@ACCOUNT_CODE
       , POINT_IN =@TotalPoints
       , POINT_OUT = 0
           WHERE 
        BILL_NUMBER = @BillNumber AND B_CODE = 2 
END
ELSE
BEGIN
    -- إذا لم تكن البيانات موجودة، قم بالإدراج
    INSERT INTO dbo.T_POINTS
        (BILL_NUMBER, BILL_DATE, BILL_TIME, B_CODE, USER_CREATE, ACCOUNT_CODE, POINT_IN, POINT_OUT, NOTES, C_DATE)
    VALUES
        (@BillNumber, @BILL_DATE, GETDATE(), 2, @USER_CREATE, @ACCOUNT_CODE, @TotalPoints, 0, N'''', GETDATE()) 
END

UPDATE T_SALES_DETAILS SET TOTAL_POINTS=(SELECT ISNULL(TOTAL_POINT,0) FROM #BillPoints WHERE ITEM_CODE=T_SALES_DETAILS.ITEM_CODE AND QTY=T_SALES_DETAILS.QTY AND UNIT_NAME=T_SALES_DETAILS.UNIT_NAME)WHERE  BILL_NUMBER=@BillNumber 


IF @FLAG=1
BEGIN
  -- عرض النتائج
    SELECT 
        BILL_NUMBER AS N''رقم القائمة'', 
        ITEM_NAME AS N''اسم المادة'',
        QTY AS N''الكمية'',
        UNIT_NAME AS N''الوحدة'',
        UNIT_QTY AS N''التعبئة'',
        POINT_OF_UNIT1 AS N''نقاط الوحدة 1'',
        POINT_OF_UNIT2 AS N''نقاط الوحدة 2'',
        TOTAL_POINT AS N''اجمالي النقاط ''
    FROM 
        #BillPoints;

    -- عرض مجمل النقاط
    SELECT @BillNumber AS N''رقم القائمة'', @TotalPoints AS N''اجمالي النقاط '';
END
  

    -- حذف الجدول المؤقت
    DROP TABLE #BillPoints;
END' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_CalculateBillPointsSummary]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_CalculateBillPointsSummary]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_CalculateBillPointsSummary]
    @BILL_BRANCH NVARCHAR(100)  
AS
DECLARE
@BillNumber INT,
@account_code int
BEGIN
    -- التأكد من تشغيل المعاملات
    SET NOCOUNT ON;

	SELECT @BillNumber= CAST(SUBSTRING(@BILL_BRANCH, PATINDEX(''%[0-9]%'', @BILL_BRANCH), LEN(@BILL_BRANCH)) AS INT)  ;
	select top(1) @account_code=ACCOUNT_CODE     FROM dbo.T_POINTS  WHERE B_CODE = 2 AND BILL_NUMBER = @BillNumber;
    -- حساب الرصيد السابق (عدا الفاتورة الحالية)
    DECLARE @PreviousBalance FLOAT;
   
 set @PreviousBalance=( SELECT   ISNULL(SUM(POINT_BALANCE), 0)  FROM dbo.T_POINTS  WHERE ACCOUNT_CODE=@account_code ) 
 -( SELECT   ISNULL(SUM(POINT_BALANCE), 0)  FROM dbo.T_POINTS  WHERE ACCOUNT_CODE=@account_code and ( BILL_NUMBER = @BillNumber and B_CODE = 2 ) );

    -- حساب نقاط الفاتورة الحالية
    DECLARE @CurrentBillPoints FLOAT;
    SELECT @CurrentBillPoints = ISNULL(SUM(POINT_BALANCE), 0)
    FROM dbo.T_POINTS
    WHERE ACCOUNT_CODE=@account_code and B_CODE = 2 AND BILL_NUMBER = @BillNumber;

    -- حساب الرصيد الحالي (الرصيد السابق + نقاط الفاتورة الحالية)
    DECLARE @CurrentBalance FLOAT;
    SET @CurrentBalance = @PreviousBalance + @CurrentBillPoints;

    -- عرض النتائج
    SELECT
		@BILL_BRANCH AS BILL_BRANCH,
		@BillNumber AS BILL_NUMBER,
        @PreviousBalance AS PreviousBalance,  -- الرصيد السابق
        @CurrentBillPoints AS CurrentBillPoints,  -- نقاط الفاتورة الحالية
        @CurrentBalance AS CurrentBalance;  -- الرصيد الحالي
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_CHECK_EXIST_COLUMNS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_CHECK_EXIST_COLUMNS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE PROCEDURE [dbo].[P_CHECK_EXIST_COLUMNS]

	
@SUBMIT_FLAG INT OUTPUT
AS
BEGIN
SET @SUBMIT_FLAG=0


--update T_ITEMS set IMAGE=NULL WHERE IMAGE IS NOT NULL

---------------------------------------------------------------------
------DECLARE BOX_CURSOR CURSOR FOR SELECT  BILL_NUMBER FROM T_SALES WHERE ACTIVE=1  ;
------DECLARE
------@T_ID_BOX_CURCOR NUMERIC(18,0)
------OPEN BOX_CURSOR

------FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR
------WHILE @@FETCH_STATUS = 0
------BEGIN
------UPDATE T_SALES SET TOTAL_SALES=(SELECT ISNULL(SUM(NET_TOTAL),0) FROM T_SALES_DETAILS WHERE BILL_NUMBER=@T_ID_BOX_CURCOR) WHERE BILL_NUMBER=@T_ID_BOX_CURCOR

------FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

------END

------CLOSE BOX_CURSOR
------DEALLOCATE BOX_CURSOR

------UPDATE T_SALES SET [NET_SALES]=[TOTAL_SALES]-[DISCOUNT_AMOUNT] 

 
--UPDATE T_ITEMS
--SET IMG_URL = REPLACE(IMG_URL, ''قديمة'', ''جديدة'')
--WHERE IMG_URL LIKE ''%قديمة%''

--DROP INDEX IDX_T_SALES_DETAILS_BILL_BRANCH_BILL_NUMBER ON T_SALES_DETAILS;
--DROP INDEX IDX_T_SALES_DETAILS_BRANCH_ITEM ON T_SALES_DETAILS;



--CREATE INDEX IDX_T_SALES_DETAILS_BILL_BRANCH_BILL_NUMBER ON T_SALES_DETAILS (BILL_BRANCH, BILL_NUMBER);
--CREATE INDEX IDX_T_SALES_DETAILS_BRANCH_ITEM ON T_SALES_DETAILS (BILL_BRANCH, ITEM_CODE);

DELETE FROM T_SALES
WHERE OFFER_CODE = 99
  AND CAST(BILL_DATE AS DATE) <> CAST(GETDATE() AS DATE);

UPDATE T_STORE_BOX SET B_CODE=12 WHERE B_CODE=11 AND ST_OUT<>0
UPDATE T_BUY SET EXP_CASH=0 WHERE EXP_CASH IS NULL
UPDATE T_BUY SET EXP_PERCENT=0 WHERE EXP_PERCENT IS NULL
UPDATE T_BILL_TYPE SET FLAG=1 WHERE B_CODE=55 OR B_CODE=61 OR B_CODE=65
update T_ITEMS SET SELL=0 ,COST=0 WHERE ITEM_CODE<=0
update T_ITEM_UNIT SET PRICE_COST=0 ,PRICE_SALE_1=0,PRICE_SALE_2=0,PRICE_SALE_3=0,PRICE_AVG_COST=0 WHERE ITEM_CODE<=0

UPDate T_ACCOUNTS set ACCOUNT_NAME=N''صندوق بطاقة سويج SWITCH POS'' WHERE ACCOUNT_NAME=N''صندوف بطاقة سويج SWITCH POS''
UPDate T_ACCOUNTS set ACCOUNT_NAME=N''صندوق بطاقة الرافدين كي كارد POS'' WHERE ACCOUNT_NAME=N''صندوف بطاقة الرافدين كي كارد POS''

       --///////////////////////////////////////////////////////////////T_AKSAT//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_AKSAT'' AND [COLUMN_NAME] = N''T_ID_R'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE [T_AKSAT] ADD [T_ID_R] INT NULL
 ALTER TABLE [dbo].T_AKSAT ADD  CONSTRAINT [DF_T_AKSAT_T_ID_R]  DEFAULT ((0)) FOR [T_ID_R]
 

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_AKSAT] SET [T_ID_R]=0 WHERE T_ID_R IS NULL '')
 END



      --///////////////////////////////////////////////////////////////T_AKSAT_ITEM_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_AKSAT_ITEM_DETAILS'' AND [COLUMN_NAME] = N''IS_FORWORD'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE [T_AKSAT_ITEM_DETAILS] ADD [IS_FORWORD] INT NULL
 ALTER TABLE [dbo].T_AKSAT_ITEM_DETAILS ADD  CONSTRAINT [DF_T_AKSAT_ITEM_DETAILS_IS_FORWORD]  DEFAULT ((0)) FOR [IS_FORWORD]
 

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_AKSAT_ITEM_DETAILS] SET [IS_FORWORD]=0 WHERE IS_FORWORD IS NULL '')
 END


---------------------------------------------------------------------
      --///////////////////////////////////////////////////////////////T_LEVEL //////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_LEVEL'' AND [COLUMN_NAME] = N''LEVEL_MANDOOB_APP'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_LEVEL ADD [LEVEL_MANDOOB_APP] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    

---------------------------------------------------------------------
      --///////////////////////////////////////////////////////////////TB_HOUSE //////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''TB_HOUSE'' AND [COLUMN_NAME] = N''AVG_DEGREE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE TB_HOUSE ADD [AVG_DEGREE] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
      --///////////////////////////////////////////////////////////////TB_HOUSE //////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''TB_HOUSE'' AND [COLUMN_NAME] = N''HOUSE_NOTE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE TB_HOUSE ADD [HOUSE_NOTE] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
    
      --///////////////////////////////////////////////////////////////TB_HOUSE //////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''TB_HOUSE'' AND [COLUMN_NAME] = N''HOUSE_PHONE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE TB_HOUSE ADD [HOUSE_PHONE] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
      --///////////////////////////////////////////////////////////////TB_HOUSE //////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''TB_HOUSE'' AND [COLUMN_NAME] = N''HOUSE_ADRESS'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE TB_HOUSE ADD [HOUSE_ADRESS] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
      --///////////////////////////////////////////////////////////////TB_HOUSE //////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''TB_HOUSE'' AND [COLUMN_NAME] = N''HOUSE_FROM_SCHOOL'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE TB_HOUSE ADD [HOUSE_FROM_SCHOOL] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    



      --///////////////////////////////////////////////////////////////T_APP_INVOICE //////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_APP_INVOICE'' AND [COLUMN_NAME] = N''BILL_NUMBER'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_APP_INVOICE ADD [BILL_NUMBER] INT NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
      --///////////////////////////////////////////////////////////////T_APP_INVOICE //////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_APP_INVOICE'' AND [COLUMN_NAME] = N''CLIENT_NAME'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_APP_INVOICE ADD [CLIENT_NAME] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
      --///////////////////////////////////////////////////////////////T_APP_INVOICE //////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_APP_INVOICE'' AND [COLUMN_NAME] = N''CLIENT_PHONE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_APP_INVOICE ADD [CLIENT_PHONE] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
    
      --///////////////////////////////////////////////////////////////T_APP_INVOICE //////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_APP_INVOICE'' AND [COLUMN_NAME] = N''CLIENT_ADDRESS'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_APP_INVOICE ADD [CLIENT_ADDRESS] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
      --///////////////////////////////////////////////////////////////T_APP_INVOICE //////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_APP_INVOICE'' AND [COLUMN_NAME] = N''B_NAME'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_APP_INVOICE ADD [B_NAME] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
      --///////////////////////////////////////////////////////////////T_APP_INVOICE //////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_APP_INVOICE'' AND [COLUMN_NAME] = N''USER_CREATE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_APP_INVOICE ADD [USER_CREATE] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
      --///////////////////////////////////////////////////////////////T_APP_INVOICE //////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_APP_INVOICE'' AND [COLUMN_NAME] = N''DEVICE_ID'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_APP_INVOICE ADD [DEVICE_ID] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
      --///////////////////////////////////////////////////////////////T_APP_INVOICE //////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_APP_INVOICE'' AND [COLUMN_NAME] = N''IS_ACCEPT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_APP_INVOICE ADD [IS_ACCEPT] INT NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
      --///////////////////////////////////////////////////////////////T_APP_INVOICE //////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_APP_INVOICE'' AND [COLUMN_NAME] = N''TOKEN_APP'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_APP_INVOICE ADD [TOKEN_APP] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        
      --///////////////////////////////////////////////////////////////T_APP_INVOICE //////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_APP_INVOICE'' AND [COLUMN_NAME] = N''BRANCH'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_APP_INVOICE ADD [BRANCH] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        

      --///////////////////////////////////////////////////////////////T_APP_INVOICE //////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_APP_INVOICE'' AND [COLUMN_NAME] = N''USER_NAME'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_APP_INVOICE ADD [USER_NAME] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        








      --///////////////////////////////////////////////////////////////T_BOX_REPORT_ACCOUNT_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BOX_REPORT_ACCOUNT_DETAILS'' AND [COLUMN_NAME] = N''MANDOOB_NAME'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BOX_REPORT_ACCOUNT_DETAILS ADD [MANDOOB_NAME] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    




      --///////////////////////////////////////////////////////////////T_BOX_REPORT_ACCOUNT_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BOX_REPORT_ACCOUNT_DETAILS'' AND [COLUMN_NAME] = N''WIDTH_CM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BOX_REPORT_ACCOUNT_DETAILS ADD [WIDTH_CM] FLOAT NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    

      --///////////////////////////////////////////////////////////////T_BOX_REPORT_ACCOUNT_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BOX_REPORT_ACCOUNT_DETAILS'' AND [COLUMN_NAME] = N''LENGTH_CM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BOX_REPORT_ACCOUNT_DETAILS ADD [LENGTH_CM] FLOAT NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
      --///////////////////////////////////////////////////////////////T_BOX_REPORT_ACCOUNT_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BOX_REPORT_ACCOUNT_DETAILS'' AND [COLUMN_NAME] = N''AREA_M2'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BOX_REPORT_ACCOUNT_DETAILS ADD [AREA_M2] FLOAT NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
      --///////////////////////////////////////////////////////////////T_BOX_REPORT_ACCOUNT_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BOX_REPORT_ACCOUNT_DETAILS'' AND [COLUMN_NAME] = N''DRIVER_NAME'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BOX_REPORT_ACCOUNT_DETAILS ADD [DRIVER_NAME] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
      --///////////////////////////////////////////////////////////////T_BOX_REPORT_ACCOUNT_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BOX_REPORT_ACCOUNT_DETAILS'' AND [COLUMN_NAME] = N''NOTE_PRINT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BOX_REPORT_ACCOUNT_DETAILS ADD [NOTE_PRINT] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
      --///////////////////////////////////////////////////////////////T_BOX_REPORT_ACCOUNT_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BOX_REPORT_ACCOUNT_DETAILS'' AND [COLUMN_NAME] = N''COL_STR1'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BOX_REPORT_ACCOUNT_DETAILS ADD [COL_STR1] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
      --///////////////////////////////////////////////////////////////T_BOX_REPORT_ACCOUNT_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BOX_REPORT_ACCOUNT_DETAILS'' AND [COLUMN_NAME] = N''COL_STR2'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BOX_REPORT_ACCOUNT_DETAILS ADD [COL_STR2] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END      
      --///////////////////////////////////////////////////////////////T_BOX_REPORT_ACCOUNT_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BOX_REPORT_ACCOUNT_DETAILS'' AND [COLUMN_NAME] = N''COL_STR3'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BOX_REPORT_ACCOUNT_DETAILS ADD [COL_STR3] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END      
      --///////////////////////////////////////////////////////////////T_BOX_REPORT_ACCOUNT_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BOX_REPORT_ACCOUNT_DETAILS'' AND [COLUMN_NAME] = N''COL_INT1'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BOX_REPORT_ACCOUNT_DETAILS ADD [COL_INT1] INT NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
      --///////////////////////////////////////////////////////////////T_BOX_REPORT_ACCOUNT_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BOX_REPORT_ACCOUNT_DETAILS'' AND [COLUMN_NAME] = N''COL_INT2'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BOX_REPORT_ACCOUNT_DETAILS ADD [COL_INT2] INT NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
      --///////////////////////////////////////////////////////////////T_BOX_REPORT_ACCOUNT_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BOX_REPORT_ACCOUNT_DETAILS'' AND [COLUMN_NAME] = N''COL_INT3'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BOX_REPORT_ACCOUNT_DETAILS ADD [COL_INT3] INT NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
      --///////////////////////////////////////////////////////////////T_BOX_REPORT_ACCOUNT_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BOX_REPORT_ACCOUNT_DETAILS'' AND [COLUMN_NAME] = N''NOTE_PRINT_2'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BOX_REPORT_ACCOUNT_DETAILS ADD [NOTE_PRINT_2] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END    

      --///////////////////////////////////////////////////////////////T_BOX_REPORT_ACCOUNT_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BOX_REPORT_ACCOUNT_DETAILS'' AND [COLUMN_NAME] = N''ITEM_NOTE_SALES'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BOX_REPORT_ACCOUNT_DETAILS ADD [ITEM_NOTE_SALES] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END    



 
      --///////////////////////////////////////////////////////////////TH_ROOM_BOOKING_STATE//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_PRINT_SYNCH'' AND [COLUMN_NAME] = N''QTY'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE [T_PRINT_SYNCH] ADD [QTY] FLOAT NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_PRINT_SYNCH] SET [QTY]=0 WHERE QTY IS NULL '')
 END

---------------------------------------------------------------------
      --///////////////////////////////////////////////////////////////TH_ROOM_BOOKING_STATE//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''TH_ROOM_BOOKING_STATE'' AND [COLUMN_NAME] = N''ROOM_STATUS_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE [TH_ROOM_BOOKING_STATE] ADD [ROOM_STATUS_CODE] INT NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [TH_ROOM_BOOKING_STATE] SET [ROOM_STATUS_CODE]=2 WHERE ROOM_STATUS_CODE IS NULL '')
 END

---------------------------------------------------------------------
      --///////////////////////////////////////////////////////////////TH_ROOM_BOOKING//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''TH_ROOM_BOOKING'' AND [COLUMN_NAME] = N''IS_USED'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE [TH_ROOM_BOOKING] ADD [IS_USED] INT NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [TH_ROOM_BOOKING] SET [IS_USED]=1 WHERE IS_USED IS NULL '')
 END

      --///////////////////////////////////////////////////////////////T_FORM_APP//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_FORM_APP'' AND [COLUMN_NAME] = N''GROUP_SCREEN'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_FORM_APP ADD [GROUP_SCREEN] INT NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_FORM_APP] SET [GROUP_SCREEN]=0 WHERE GROUP_SCREEN IS NULL '')
 END

       --///////////////////////////////////////////////////////////////T_FORM_APP//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_FORM_APP'' AND [COLUMN_NAME] = N''BACK_COLOR'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_FORM_APP ADD [BACK_COLOR]INT NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_FORM_APP] SET [BACK_COLOR]=-1 WHERE BACK_COLOR IS NULL '')
 END
       --///////////////////////////////////////////////////////////////T_FORM_APP//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_FORM_APP'' AND [COLUMN_NAME] = N''FONT_COLOR'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_FORM_APP ADD [FONT_COLOR] INT NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_FORM_APP] SET [FONT_COLOR]=0 WHERE FONT_COLOR IS NULL '')
 END
        --///////////////////////////////////////////////////////////////T_FORM_APP//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_FORM_APP'' AND [COLUMN_NAME] = N''FONT_NAME'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_FORM_APP ADD [FONT_NAME] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_FORM_APP] SET [FONT_NAME]=''''''+N''Sultan bold''+'''''' WHERE FONT_NAME IS NULL '')
 END

       --///////////////////////////////////////////////////////////////T_FORM_APP//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_FORM_APP'' AND [COLUMN_NAME] = N''FONT_SIZE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_FORM_APP ADD [FONT_SIZE] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_FORM_APP] SET [FONT_SIZE]=''''''+N''14.25''+'''''' WHERE FONT_SIZE IS NULL '')
 END

       --///////////////////////////////////////////////////////////////T_FORM_APP//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_FORM_APP'' AND [COLUMN_NAME] = N''BUTTON_SIZE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_FORM_APP ADD [BUTTON_SIZE] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_FORM_APP] SET [BUTTON_SIZE]=0 WHERE BUTTON_SIZE IS NULL '')
 END

      --///////////////////////////////////////////////////////////////T_FORM_APP//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_FORM_APP'' AND [COLUMN_NAME] = N''XML_PRIMARY'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_FORM_APP ADD [XML_PRIMARY] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_FORM_APP] SET [XML_PRIMARY]='''''' + N'''' + '''''' WHERE XML_PRIMARY IS NULL '')
 END


       --///////////////////////////////////////////////////////////////T_MAINTENANCE//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_MAINTENANCE'' AND [COLUMN_NAME] = N''AMO_CASH'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_MAINTENANCE ADD [AMO_CASH] float NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_MAINTENANCE] SET [AMO_CASH]=0 WHERE AMO_CASH IS NULL '')
 END

 ---------------------------------------------------------------------
       --///////////////////////////////////////////////////////////////T_MAINTENANCE//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_MAINTENANCE'' AND [COLUMN_NAME] = N''AMO_REMAIN'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_MAINTENANCE ADD [AMO_REMAIN] float NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_MAINTENANCE] SET [AMO_REMAIN]=[AMO_TOTAL] WHERE AMO_REMAIN IS NULL '')
 END
 ---------------------------------------------------------------------
       --///////////////////////////////////////////////////////////////T_MAINTENANCE//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_MAINTENANCE'' AND [COLUMN_NAME] = N''T_ID_ERROR'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_MAINTENANCE ADD [T_ID_ERROR] int NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_MAINTENANCE] SET [T_ID_ERROR]=0 WHERE T_ID_ERROR IS NULL '')
 END

       --///////////////////////////////////////////////////////////////T_REPORT_SPECIAL//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_REPORT_SPECIAL'' AND [COLUMN_NAME] = N''SUMMARY_COL'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_REPORT_SPECIAL ADD [SUMMARY_COL] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
       --///////////////////////////////////////////////////////////////T_REPORT_SPECIAL//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_REPORT_SPECIAL'' AND [COLUMN_NAME] = N''MULTILINE_COL'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_REPORT_SPECIAL ADD [MULTILINE_COL] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
       --///////////////////////////////////////////////////////////////T_SUBSCRIPTION//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SUBSCRIPTION'' AND [COLUMN_NAME] = N''GATE_NAME'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SUBSCRIPTION ADD [GATE_NAME] NVARCHAR(MAX) NULL
  

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_SUBSCRIPTION] SET [GATE_NAME]=[GATE_SN] WHERE GATE_NAME IS NULL '')
 END




       --///////////////////////////////////////////////////////////////T_GATE//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_GATE'' AND [COLUMN_NAME] = N''GATE_NO'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_GATE ADD [GATE_NO] INT NULL
  ALTER TABLE [dbo].[T_GATE] ADD  CONSTRAINT [DF_T_GATE_GATE_NO]  DEFAULT ((1)) FOR [GATE_NO]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_GATE] SET [GATE_NO]=1 WHERE GATE_NO IS NULL '')
 END




       --///////////////////////////////////////////////////////////////T_REPORT//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_REPORT'' AND [COLUMN_NAME] = N''IS_SHOW'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_REPORT ADD [IS_SHOW] BIT NULL
  ALTER TABLE [dbo].[T_REPORT] ADD  CONSTRAINT [DF_T_REPORT_IS_SHOW]  DEFAULT ((1)) FOR [IS_SHOW]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_REPORT] SET [IS_SHOW]=1 WHERE IS_SHOW IS NULL '')
 END
       --///////////////////////////////////////////////////////////////T_REPORT//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_REPORT'' AND [COLUMN_NAME] = N''ID_GROUP'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_REPORT ADD [ID_GROUP] INT NULL
  ALTER TABLE [dbo].[T_REPORT] ADD  CONSTRAINT [DF_T_REPORT_ID_GROUP]  DEFAULT ((0)) FOR [ID_GROUP]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_REPORT] SET [ID_GROUP]=0 WHERE ID_GROUP IS NULL '')
 END
       --///////////////////////////////////////////////////////////////T_REPORT//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_REPORT'' AND [COLUMN_NAME] = N''PARAM_SELECT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_REPORT ADD [PARAM_SELECT] NVARCHAR(MAX) NULL
 
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
 
--////////////////////////////////////////////////////////////TA_CARS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''TA_CARS'' AND [COLUMN_NAME] = N''ENGINE_NO'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE TA_CARS ADD [ENGINE_NO] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  	
--////////////////////////////////////////////////////////////TA_CARS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''TA_CARS'' AND [COLUMN_NAME] = N''DISTANCE_NO'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE TA_CARS ADD [DISTANCE_NO] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
--////////////////////////////////////////////////////////////TA_CARS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''TA_CARS'' AND [COLUMN_NAME] = N''MANAGER_NAME'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE TA_CARS ADD [MANAGER_NAME] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  	
--////////////////////////////////////////////////////////////TA_CARS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''TA_CARS'' AND [COLUMN_NAME] = N''MR_DRIVER'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE TA_CARS ADD [MR_DRIVER] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  	
--////////////////////////////////////////////////////////////TA_CARS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''TA_CARS'' AND [COLUMN_NAME] = N''TRANSPORTER_NAME'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE TA_CARS ADD [TRANSPORTER_NAME] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  	

  	
--////////////////////////////////////////////////////////////TA_CARS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''TA_CARS'' AND [COLUMN_NAME] = N''TRANSPORTER_CAR_NO'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE TA_CARS ADD [TRANSPORTER_CAR_NO] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  	


--////////////////////////////////////////////////////////////TA_CARS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''TA_CARS'' AND [COLUMN_NAME] = N''FROM_ZONE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE TA_CARS ADD [FROM_ZONE] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 

  --////////////////////////////////////////////////////////////TA_CARS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''TA_CARS'' AND [COLUMN_NAME] = N''TO_ZONE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE TA_CARS ADD [TO_ZONE] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  	
--////////////////////////////////////////////////////////////T_AKSAT_ITEMS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEM_SERIAL'' AND [COLUMN_NAME] = N''IS_SALE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEM_SERIAL ADD [IS_SALE] BIT NULL
 ALTER TABLE [dbo].[T_ITEM_SERIAL] ADD  CONSTRAINT [DF_T_ITEM_SERIAL_IS_SALE]  DEFAULT ((0)) FOR [IS_SALE]

    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
 else
 begin
  EXEC(''UPDATE [T_ITEM_SERIAL] SET [IS_SALE]=0 WHERE IS_SALE IS NULL'')
 end	


--////////////////////////////////////////////////////////////T_AKSAT_ITEMS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_AKSAT_ITEMS'' AND [COLUMN_NAME] = N''F_NET_SALARY'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_AKSAT_ITEMS ADD [F_NET_SALARY] FLOAT NULL
 ALTER TABLE [dbo].[T_AKSAT_ITEMS] ADD  CONSTRAINT [DF_T_AKSAT_ITEMS_F_NET_SALARY]  DEFAULT ((0)) FOR [F_NET_SALARY]

    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
 else
 begin
  EXEC(''UPDATE [T_AKSAT_ITEMS] SET [F_NET_SALARY]=0 WHERE F_NET_SALARY IS NULL'')
 end	


--////////////////////////////////////////////////////////////T_AKSAT_ITEMS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_AKSAT_ITEMS'' AND [COLUMN_NAME] = N''F_EMOLA_CARD'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_AKSAT_ITEMS ADD [F_EMOLA_CARD] FLOAT NULL
 ALTER TABLE [dbo].[T_AKSAT_ITEMS] ADD  CONSTRAINT [DF_T_AKSAT_ITEMS_F_EMOLA_CARD]  DEFAULT ((0)) FOR [F_EMOLA_CARD]

    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
 else
 begin
  EXEC(''UPDATE [T_AKSAT_ITEMS] SET [F_EMOLA_CARD]=0 WHERE F_EMOLA_CARD IS NULL'')
 end	

--////////////////////////////////////////////////////////////T_AKSAT_ITEMS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_AKSAT_ITEMS'' AND [COLUMN_NAME] = N''F_NET_CASH'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_AKSAT_ITEMS ADD [F_NET_CASH] FLOAT NULL
 ALTER TABLE [dbo].[T_AKSAT_ITEMS] ADD  CONSTRAINT [DF_T_AKSAT_ITEMS_F_NET_CASH]  DEFAULT ((0)) FOR [F_NET_CASH]

    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
 else
 begin
  EXEC(''UPDATE [T_AKSAT_ITEMS] SET [F_NET_CASH]=0 WHERE F_NET_CASH IS NULL'')
 end	

--////////////////////////////////////////////////////////////T_AKSAT_ITEMS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_AKSAT_ITEMS'' AND [COLUMN_NAME] = N''F_NET_RETURN'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_AKSAT_ITEMS ADD [F_NET_RETURN] FLOAT NULL
 ALTER TABLE [dbo].[T_AKSAT_ITEMS] ADD  CONSTRAINT [DF_T_AKSAT_ITEMS_F_NET_RETURN]  DEFAULT ((0)) FOR [F_NET_RETURN]

    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
 else
 begin
  EXEC(''UPDATE [T_AKSAT_ITEMS] SET [F_NET_RETURN]=0 WHERE F_NET_RETURN IS NULL'')
 end	



--////////////////////////////////////////////////////////////T_KAFEL/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_KAFEL'' AND [COLUMN_NAME] = N''PHONE2'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_KAFEL ADD [PHONE2] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  	
--////////////////////////////////////////////////////////////T_KAFEL/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_KAFEL'' AND [COLUMN_NAME] = N''OFFICE_NAME'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_KAFEL ADD [OFFICE_NAME] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  	
--////////////////////////////////////////////////////////////T_KAFEL/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_KAFEL'' AND [COLUMN_NAME] = N''QISM_NAME'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_KAFEL ADD [QISM_NAME] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
--////////////////////////////////////////////////////////////T_KAFEL/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_KAFEL'' AND [COLUMN_NAME] = N''KAFEL_BUSINESS'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_KAFEL ADD [KAFEL_BUSINESS] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  	
--////////////////////////////////////////////////////////////T_KAFEL/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_KAFEL'' AND [COLUMN_NAME] = N''HAWIA'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_KAFEL ADD [HAWIA] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  
  --////////////////////////////////////////////////////////////T_KAFEL/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_KAFEL'' AND [COLUMN_NAME] = N''HAWIA_FROM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_KAFEL ADD [HAWIA_FROM] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  
    --////////////////////////////////////////////////////////////T_KAFEL/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_KAFEL'' AND [COLUMN_NAME] = N''HAWIA_NO'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_KAFEL ADD [HAWIA_NO] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
 --////////////////////////////////////////////////////////////T_KAFEL/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_KAFEL'' AND [COLUMN_NAME] = N''NOTE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_KAFEL ADD [NOTE] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  	
--///// 				
--////////////////////////////////////////////////////////////T_MANDOOB/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_MANDOOB'' AND [COLUMN_NAME] = N''ACCOUNT_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_MANDOOB ADD [ACCOUNT_CODE] INT NULL
 ALTER TABLE [dbo].[T_MANDOOB] ADD  CONSTRAINT [DF_T_MANDOOB_ACCOUNT_CODE]  DEFAULT ((0)) FOR [ACCOUNT_CODE]

    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
 else
 begin
  EXEC(''UPDATE [T_MANDOOB] SET [ACCOUNT_CODE]=0 WHERE ACCOUNT_CODE IS NULL'')
 end	

 --////////////////////////////////////////////////////////////T_MANDOOB/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_MANDOOB'' AND [COLUMN_NAME] = N''IS_COST_SHIP'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_MANDOOB ADD [IS_COST_SHIP] BIT NULL
 ALTER TABLE [dbo].[T_MANDOOB] ADD  CONSTRAINT [DF_T_MANDOOB_IS_COST_SHIP]  DEFAULT ((0)) FOR [IS_COST_SHIP]

    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
 else
 begin
  EXEC(''UPDATE [T_MANDOOB] SET [IS_COST_SHIP]=0 WHERE IS_COST_SHIP IS NULL'')
 end	

 
--////////////////////////////////////////////////////////////T_MANDOOB/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_MANDOOB'' AND [COLUMN_NAME] = N''PIN_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_MANDOOB ADD [PIN_CODE] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  
 

--////////////////////////////////////////////////////////////T_EMPLOYEE/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_EMPLOYEE'' AND [COLUMN_NAME] = N''ACCOUNT_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_EMPLOYEE ADD [ACCOUNT_CODE] INT NULL
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
 else
 begin
  EXEC(''UPDATE [T_EMPLOYEE] SET [ACCOUNT_CODE]=0 WHERE ACCOUNT_CODE IS NULL'')
 end	

--////////////////////////////////////////////////////////////T_EMPLOYEE/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_EMPLOYEE'' AND [COLUMN_NAME] = N''ACCOUNT_CODE_SELFA'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_EMPLOYEE ADD [ACCOUNT_CODE_SELFA] INT NULL
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
 else
 begin
  EXEC(''UPDATE [T_EMPLOYEE] SET [ACCOUNT_CODE_SELFA]=0 WHERE ACCOUNT_CODE_SELFA IS NULL'')
 end	



--////////////////////////////////////////////////////////////T_CONFIGRATION/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_CONFIGRATION'' AND [COLUMN_NAME] = N''TELE_MAIN'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_CONFIGRATION ADD [TELE_MAIN] NVARCHAR(MAX) NULL
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
 


--////////////////////////////////////////////////////////////TA_STUDENT/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''TA_STUDENT'' AND [COLUMN_NAME] = N''ACCOUNT_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE TA_STUDENT ADD [ACCOUNT_CODE] INT NULL
  ALTER TABLE [dbo].TA_STUDENT ADD  CONSTRAINT [DF_TA_STUDENT_ACCOUNT_CODE]  DEFAULT ((0)) FOR [ACCOUNT_CODE]
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  ELSE
  BEGIN 
   EXEC(''UPDATE [TA_STUDENT] SET [ACCOUNT_CODE]=0 WHERE ACCOUNT_CODE IS NULL'')
  END

  --////////////////////////////////////////////////////////////TA_STUDENT/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''TA_STUDENT'' AND [COLUMN_NAME] = N''TOTAL_AMO'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE TA_STUDENT ADD [TOTAL_AMO] FLOAT NULL
  ALTER TABLE [dbo].TA_STUDENT ADD  CONSTRAINT [DF_TA_STUDENT_TOTAL_AMO]  DEFAULT ((0)) FOR [TOTAL_AMO]
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  ELSE
  BEGIN 
   EXEC(''UPDATE [TA_STUDENT] SET [TOTAL_AMO]=0 WHERE TOTAL_AMO IS NULL'')
  END

 

--////////////////////////////////////////////////////////////T_TAG_PROCCESS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_TAG_PROCCESS'' AND [COLUMN_NAME] = N''ACCOUNT_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_TAG_PROCCESS ADD [ACCOUNT_CODE] INT NULL
  ALTER TABLE [dbo].T_TAG_PROCCESS ADD  CONSTRAINT [DF_T_TAG_PROCCESS_ACCOUNT_CODE]  DEFAULT ((0)) FOR [ACCOUNT_CODE]
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  ELSE
  BEGIN 
   EXEC(''UPDATE [T_TAG_PROCCESS] SET [ACCOUNT_CODE]=0 WHERE ACCOUNT_CODE IS NULL'')
  END


--////////////////////////////////////////////////////////////T_BILL_TYPE/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BILL_TYPE'' AND [COLUMN_NAME] = N''FLAG'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BILL_TYPE ADD [FLAG] INT NULL
   COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 

--////////////////////////////////////////////////////////////T_NOTES/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_NOTES'' AND [COLUMN_NAME] = N''MAWJOOD_ID_TASK'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_NOTES ADD [MAWJOOD_ID_TASK] NVARCHAR(MAX) NULL
   COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
--////////////////////////////////////////////////////////////T_ITEM_MISWAK_INFO/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEM_MISWAK_INFO'' AND [COLUMN_NAME] = N''INFO_NOTE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEM_MISWAK_INFO ADD [INFO_NOTE] NVARCHAR(MAX) NULL
   COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
--////////////////////////////////////////////////////////////T_ITEM_MISWAK_INFO/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEM_MISWAK_INFO'' AND [COLUMN_NAME] = N''USER_CREATE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEM_MISWAK_INFO ADD [USER_CREATE] NVARCHAR(MAX) NULL
   COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 

--////////////////////////////////////////////////////////////T_ITEM_MISWAK_INFO/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEM_MISWAK_INFO'' AND [COLUMN_NAME] = N''USER_UPDATE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEM_MISWAK_INFO ADD [USER_UPDATE] NVARCHAR(MAX) NULL
   COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 


--////////////////////////////////////////////////////////////T_ITEM_MISWAK_INFO/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEM_MISWAK_INFO'' AND [COLUMN_NAME] = N''C_DATE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEM_MISWAK_INFO ADD [C_DATE] DATETIME NULL
 ALTER TABLE [dbo].[T_ITEM_MISWAK_INFO] ADD  CONSTRAINT [DF_T_ITEM_MISWAK_INFO_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
   COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 


--////////////////////////////////////////////////////////////T_ITEM_MISWAK_INFO/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEM_MISWAK_INFO'' AND [COLUMN_NAME] = N''C_UPDATE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEM_MISWAK_INFO ADD [C_UPDATE] DATETIME NULL
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 





--////////////////////////////////////////////////////////////T_BOX/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BOX'' AND [COLUMN_NAME] = N''BILL_RELATION'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BOX ADD [BILL_RELATION] INT NULL
   COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
--////////////////////////////////////////////////////////////T_BOX/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BOX'' AND [COLUMN_NAME] = N''B_RELATION'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BOX ADD [B_RELATION] INT NULL
  
  COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 

--////////////////////////////////////////////////////////////T_BOX/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BOX'' AND [COLUMN_NAME] = N''DATE_RELATION'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BOX ADD [DATE_RELATION] DATE NULL
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
--////////////////////////////////////////////////////////////T_BOX/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BOX'' AND [COLUMN_NAME] = N''FLAG_RELATION'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BOX ADD [FLAG_RELATION] INT NULL
 ALTER TABLE [dbo].[T_BOX] ADD  CONSTRAINT [DF_T_BOX_FLAG_RELATION]  DEFAULT ((0)) FOR [FLAG_RELATION]

  COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
     ELSE
BEGIN 

  EXEC(''UPDATE [T_BOX] SET [FLAG_RELATION]=0 WHERE FLAG_RELATION IS NULL '')
END  

--////////////////////////////////////////////////////////////T_USERS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_USERS'' AND [COLUMN_NAME] = N''LEVEL_APP'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_USERS ADD [LEVEL_APP] INT NULL

  COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  ELSE
  BEGIN 
   EXEC(''UPDATE [T_USERS] SET [LEVEL_APP]=1 WHERE LEVEL_APP IS NULL'')
  END


--///////////////////////////////////////////////////////////////T_STORE_TRANSFARE_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_STORE_TRANSFARE_DETAILS'' AND [COLUMN_NAME] = N''IS_PRINT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_STORE_TRANSFARE_DETAILS ADD [IS_PRINT] BIT NULL
 ALTER TABLE [dbo].[T_STORE_TRANSFARE_DETAILS] ADD  CONSTRAINT [DF_T_STORE_TRANSFARE_DETAILS_IS_PRINT]  DEFAULT ((0)) FOR [IS_PRINT]


COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    ELSE
  BEGIN 

   EXEC(''UPDATE [T_STORE_TRANSFARE_DETAILS] SET [IS_PRINT]=0 WHERE IS_PRINT IS NULL'')
  END

--///////////////////////////////////////////////////////////////T_PRINTER//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_PRINTER'' AND [COLUMN_NAME] = N''STORE_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_PRINTER ADD [STORE_CODE] INT NULL

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    ELSE
  BEGIN 
   EXEC(''UPDATE [T_PRINTER] SET [STORE_CODE]=0 WHERE STORE_CODE IS NULL'')

  END
--///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''ITEM_PARENT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [ITEM_PARENT] INT NULL

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
      ELSE
  BEGIN 

    EXEC(''UPDATE [T_ITEMS] SET [ITEM_PARENT]=[ITEM_CODE] WHERE ITEM_PARENT IS NULL '')
  END 
--///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''ITEM_SUB_PARENT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [ITEM_SUB_PARENT] INT NULL
 
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        ELSE
  BEGIN 
  EXEC(''UPDATE [T_ITEMS] SET [ITEM_SUB_PARENT]=[ITEM_CODE] WHERE ITEM_SUB_PARENT IS NULL'')
 
  END 
--///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''LEVEL_SUB'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [LEVEL_SUB] INT NULL

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
           ELSE
  BEGIN 
    EXEC(''UPDATE [T_ITEMS] SET [LEVEL_SUB]=0  WHERE LEVEL_SUB IS NULL'')
  END




--///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''WIDTH_CM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [WIDTH_CM] FLOAT NULL
 
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    ELSE
  BEGIN 

   EXEC(''UPDATE [T_ITEMS] SET [WIDTH_CM]=0 WHERE WIDTH_CM IS NULL '')
  END

--///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''LENGTH_CM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [LENGTH_CM] FLOAT NULL

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
    ELSE
  BEGIN 

   EXEC(''UPDATE [T_ITEMS] SET [LENGTH_CM]=0 WHERE LENGTH_CM IS NULL '')
  END

--///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''AREA_M2'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [AREA_M2] FLOAT NULL

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_ITEMS] SET [AREA_M2]=0 WHERE AREA_M2 IS NULL '')
  END


--///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''COMPANY_CREATE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [COMPANY_CREATE] NVARCHAR(MAX) NULL
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   


--///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''EFFECTIVE_MATERIAL'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [EFFECTIVE_MATERIAL] NVARCHAR(MAX) NULL
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   


--///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''CENTER_CODE'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [CENTER_CODE] INT NULL
 ALTER TABLE [dbo].T_SALES ADD  CONSTRAINT [DF_T_SALES_CENTER_CODE]  DEFAULT ((0)) FOR [CENTER_CODE]
 
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
  ELSE
  BEGIN 
  EXEC(''UPDATE [T_SALES] SET [CENTER_CODE]=0 WHERE CENTER_CODE IS NULL '')
  END

--////////////////////////////////////////////////////////////T_ITEMS/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''MAIN_ITEM_CODE'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
ALTER TABLE T_ITEMS ADD [MAIN_ITEM_CODE] INT NULL

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
   ELSE
  BEGIN 
  EXEC(''UPDATE [T_ITEMS] SET [MAIN_ITEM_CODE]=[ITEM_CODE] WHERE MAIN_ITEM_CODE IS NULL '')
    END

--////////////////////////////////////////////////////////////T_ITEMS/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''DISC_AMO'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [DISC_AMO] FLOAT NULL
 ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_DISC_AMO]  DEFAULT ((0)) FOR DISC_AMO

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
    ELSE
  BEGIN 
  EXEC(''UPDATE [T_ITEMS] SET [DISC_AMO]=0 WHERE DISC_AMO IS NULL '')

    END


--////////////////////////////////////////////////////////////T_ITEMS/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''DISC_PERCENT'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [DISC_PERCENT] FLOAT NULL
 ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_DISC_PERCENT]  DEFAULT ((0)) FOR DISC_PERCENT

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
   ELSE
  BEGIN 

  EXEC(''UPDATE [T_ITEMS] SET [DISC_PERCENT]=0 WHERE DISC_PERCENT IS NULL '')

    END


--////////////////////////////////////////////////////////////T_ITEMS/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''IS_FEATURE'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [IS_FEATURE] BIT NULL
 ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_FEATURE]  DEFAULT ((0)) FOR IS_FEATURE

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
    ELSE
  BEGIN 

  EXEC(''UPDATE [T_ITEMS] SET [IS_FEATURE]=0 WHERE IS_FEATURE IS NULL '')

    END


--///////////////////////////////////////////////////////////////T_SALES_TEMP//////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_TEMP'' AND [COLUMN_NAME] = N''PROCCESS_ID'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     

 ALTER TABLE T_SALES_TEMP ADD [PROCCESS_ID] INT NULL
  ALTER TABLE [dbo].T_SALES_TEMP ADD  CONSTRAINT [DF_T_SALES_TEMP_PROCCESS_ID]  DEFAULT ((0)) FOR [PROCCESS_ID]


 ALTER TABLE dbo.T_SALES_TEMP DROP COLUMN [TOTAL_COST];
ALTER TABLE dbo.T_SALES_TEMP ADD [TOTAL_COST]  AS ([COST]*[QTY]);

ALTER TABLE dbo.T_SALES_TEMP DROP COLUMN [NET_TOTAL];
ALTER TABLE dbo.T_SALES_TEMP ADD [NET_TOTAL]  AS (([PRICE]*[QTY])-([QTY]*([DISCOUNT_AMOUNT_ITEM]+([DISCOUNT_PERCENT_ITEM]*[PRICE])*(0.01))));
IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_TEMP'' AND [COLUMN_NAME] = N''TOTAL_DISCOUNT'')

BEGIN
--/////////***** 
 SET XACT_ABORT ON     
 BEGIN TRANSACTION
 ALTER TABLE dbo.T_SALES_TEMP ADD [TOTAL_DISCOUNT]  AS ([QTY]*([DISCOUNT_AMOUNT_ITEM]+([DISCOUNT_PERCENT_ITEM]*[PRICE])*(0.01)));
 
 COMMIT TRANSACTION
 SET XACT_ABORT OFF 
 --/////////***** 
 END 

 ALTER TABLE dbo.T_SALES_DETAILS DROP COLUMN [ARBAH_ITEM];
ALTER TABLE dbo.T_SALES_DETAILS ADD 	[ARBAH_ITEM]  AS (([PRICE]*([QTY]))-(([QTY])*([DISCOUNT_AMOUNT_ITEM]+([DISCOUNT_PERCENT_ITEM]*[PRICE])*(0.01)))-([COST]*([QTY]+[QTY_FREE])));



IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TEMP_TOTAL_DISCOUNT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_TEMP] DROP CONSTRAINT [DF_T_SALES_TEMP_TOTAL_DISCOUNT]
END
ALTER TABLE dbo.T_SALES_TEMP DROP COLUMN [TOTAL_DISCOUNT];
ALTER TABLE dbo.T_SALES_TEMP ADD [TOTAL_DISCOUNT]  AS ([QTY]*([DISCOUNT_AMOUNT_ITEM]+([DISCOUNT_PERCENT_ITEM]*[PRICE])*(0.01)));


ALTER TABLE dbo.T_SALES_DETAILS DROP COLUMN [TOTAL_COST];
ALTER TABLE dbo.T_SALES_DETAILS ADD [TOTAL_COST]  AS ([COST]*[QTY]);

ALTER TABLE dbo.T_SALES_DETAILS DROP COLUMN [NET_TOTAL];
ALTER TABLE dbo.T_SALES_DETAILS ADD [NET_TOTAL]  AS (([PRICE]*[QTY])-([QTY]*([DISCOUNT_AMOUNT_ITEM]+([DISCOUNT_PERCENT_ITEM]*[PRICE])*(0.01))));


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''TOTAL_DISCOUNT'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     


ALTER TABLE dbo.T_SALES_DETAILS ADD [TOTAL_DISCOUNT]  AS ([QTY]*([DISCOUNT_AMOUNT_ITEM]+([DISCOUNT_PERCENT_ITEM]*[PRICE])*(0.01)));

SET XACT_ABORT OFF 
 --/////////***** 
 END  
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_TOTAL_DISCOUNT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] DROP CONSTRAINT [DF_T_SALES_DETAILS_TOTAL_DISCOUNT]
END
ALTER TABLE dbo.T_SALES_DETAILS DROP COLUMN [TOTAL_DISCOUNT];
ALTER TABLE dbo.T_SALES_DETAILS ADD [TOTAL_DISCOUNT]  AS ([QTY]*([DISCOUNT_AMOUNT_ITEM]+([DISCOUNT_PERCENT_ITEM]*[PRICE])*(0.01)));



SET XACT_ABORT OFF 
 --/////////***** 
 END  
ELSE
BEGIN 
   EXEC(''UPDATE [T_SALES_TEMP] SET [PROCCESS_ID]=0 WHERE PROCCESS_ID IS NULL '')
END



--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''NOTE_PRINT'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [NOTE_PRINT] nvarchar(MAX) NULL
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  


--///////////////////////////////////////////////////////////////T_SALES_TEMP//////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_TEMP'' AND [COLUMN_NAME] = N''NOTE_PRINT'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_TEMP ADD [NOTE_PRINT] nvarchar(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  

--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''IS_PRINT'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [IS_PRINT] bit NULL
  ALTER TABLE [dbo].T_SALES_DETAILS ADD  CONSTRAINT [DF_T_SALES_DETAILS_IS_PRINT]  DEFAULT ((0)) FOR [IS_PRINT]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
  ELSE
BEGIN 

   EXEC(''UPDATE [T_SALES_DETAILS] SET [IS_PRINT]=0 WHERE IS_PRINT IS NULL '')
END

--///////////////////////////////////////////////////////////////T_SALES_TEMP//////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_TEMP'' AND [COLUMN_NAME] = N''IS_PRINT'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_TEMP ADD [IS_PRINT] bit NULL
  ALTER TABLE [dbo].T_SALES_TEMP ADD  CONSTRAINT [DF_T_SALES_TEMP_IS_PRINT]  DEFAULT ((0)) FOR [IS_PRINT]
 
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
   ELSE
BEGIN 

   EXEC(''UPDATE [T_SALES_TEMP] SET [IS_PRINT]=0 WHERE IS_PRINT IS NULL '')
END
--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''USER_PREPARE'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [USER_PREPARE] nvarchar(MAX) NULL
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  


--///////////////////////////////////////////////////////////////T_SALES_TEMP//////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_TEMP'' AND [COLUMN_NAME] = N''USER_PREPARE'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_TEMP ADD [USER_PREPARE] nvarchar(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  

--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''USER_CUT'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [USER_CUT] nvarchar(MAX) NULL
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  


--///////////////////////////////////////////////////////////////T_SALES_TEMP//////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_TEMP'' AND [COLUMN_NAME] = N''USER_CUT'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_TEMP ADD [USER_CUT] nvarchar(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  


--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''TOTAL_DISCOUNT'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [TOTAL_DISCOUNT] INT NULL
 ALTER TABLE [dbo].T_SALES_DETAILS ADD  CONSTRAINT [DF_T_SALES_DETAILS_TOTAL_DISCOUNT]  DEFAULT ((0)) FOR [TOTAL_DISCOUNT]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
--    ELSE
--BEGIN 

--   EXEC(''UPDATE [T_SALES_DETAILS] SET [TOTAL_DISCOUNT]=0 WHERE TOTAL_DISCOUNT IS NULL '')
--END

--///////////////////////////////////////////////////////////////T_SALES_TEMP//////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_TEMP'' AND [COLUMN_NAME] = N''TOTAL_DISCOUNT'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_TEMP ADD [TOTAL_DISCOUNT] INT NULL
 ALTER TABLE [dbo].T_SALES_TEMP ADD  CONSTRAINT [DF_T_SALES_TEMP_TOTAL_DISCOUNT]  DEFAULT ((0)) FOR [TOTAL_DISCOUNT]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
--    ELSE
--BEGIN 

--   EXEC(''UPDATE [T_SALES_TEMP] SET [TOTAL_DISCOUNT]=0 WHERE TOTAL_DISCOUNT IS NULL '')
--END


--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''DISCOUNT_TYPE'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [DISCOUNT_TYPE] INT NULL
 ALTER TABLE [dbo].T_SALES_DETAILS ADD  CONSTRAINT [DF_T_SALES_DETAILS_DISCOUNT_TYPE]  DEFAULT ((0)) FOR [DISCOUNT_TYPE]
 
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
     ELSE
BEGIN 

   EXEC(''UPDATE [T_SALES_DETAILS] SET [DISCOUNT_TYPE]=0 WHERE DISCOUNT_TYPE IS NULL '')
END


--///////////////////////////////////////////////////////////////T_SALES_TEMP//////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_TEMP'' AND [COLUMN_NAME] = N''DISCOUNT_TYPE'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_TEMP ADD [DISCOUNT_TYPE] INT NULL
 ALTER TABLE [dbo].T_SALES_TEMP ADD  CONSTRAINT [DF_T_SALES_TEMP_DISCOUNT_TYPE]  DEFAULT ((0)) FOR [DISCOUNT_TYPE]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
      ELSE
BEGIN 

   EXEC(''UPDATE [T_SALES_TEMP] SET [DISCOUNT_TYPE]=0 WHERE DISCOUNT_TYPE IS NULL '')
END


--////////////////////////////////////////////////////////////T_SANAD_CNY/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD_CNY'' AND [COLUMN_NAME] = N''CURRANCR_BUY'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD_CNY ADD [CURRANCR_BUY] FLOAT NULL
  ALTER TABLE [dbo].[T_SANAD_CNY] ADD  CONSTRAINT [DF_T_SANAD_CNY_CURRANCR_BUY]  DEFAULT ((0)) FOR [CURRANCR_BUY]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
      ELSE
BEGIN 

   EXEC(''UPDATE [T_SANAD_CNY] SET [CURRANCR_BUY]=0 WHERE CURRANCR_BUY IS NULL '')
END


--////////////////////////////////////////////////////////////T_SANAD_CNY/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD_CNY'' AND [COLUMN_NAME] = N''DISCOUNT_PERC'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD_CNY ADD [DISCOUNT_PERC] FLOAT NULL
  ALTER TABLE [dbo].[T_SANAD_CNY] ADD  CONSTRAINT [DF_T_SANAD_CNY_DISCOUNT_PERC]  DEFAULT ((0)) FOR [DISCOUNT_PERC]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
      ELSE
BEGIN 

   EXEC(''UPDATE [T_SANAD_CNY] SET [DISCOUNT_PERC]=0 WHERE DISCOUNT_PERC IS NULL '')
END


--////////////////////////////////////////////////////////////T_SANAD_CNY/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD_CNY'' AND [COLUMN_NAME] = N''TOTAL_BUY'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD_CNY ADD [TOTAL_BUY] FLOAT NULL
  ALTER TABLE [dbo].[T_SANAD_CNY] ADD  CONSTRAINT [DF_T_SANAD_CNY_TOTAL_BUY]  DEFAULT ((0)) FOR [TOTAL_BUY]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
      ELSE
BEGIN 

   EXEC(''UPDATE [T_SANAD_CNY] SET [TOTAL_BUY]=0 WHERE TOTAL_BUY IS NULL '')
END



--////////////////////////////////////////////////////////////T_ITEMS/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''RAF_NAME'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [RAF_NAME] NVARCHAR(MAX) NULL
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
--      ELSE
--BEGIN 

--  -- EXEC(N''UPDATE [T_ITEMS] SET [RAF_NAME]=''+N''''+''  WHERE [RAF_NAME] IS NULL '')
--END



--////////////////////////////////////////////////////////////T_SALES_TEMP/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_TEMP'' AND [COLUMN_NAME] = N''ITEM_NOTE_SALES'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_TEMP ADD [ITEM_NOTE_SALES] nvarchar(MAX) NULL
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 



--////////////////////////////////////////////////////////////T_SALES_DETAILS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''ITEM_NOTE_SALES'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [ITEM_NOTE_SALES] nvarchar(MAX) NULL
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 




--////////////////////////////////////////////////////////////T_BUY_DETAILS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY_DETAILS'' AND [COLUMN_NAME] = N''DISCOUNT_AMOUNT_ITEM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY_DETAILS ADD [DISCOUNT_AMOUNT_ITEM] FLOAT NULL
  ALTER TABLE [dbo].[T_BUY_DETAILS] ADD  CONSTRAINT [DF_T_BUY_DETAILS_DISCOUNT_AMOUNT_ITEM]  DEFAULT ((0)) FOR DISCOUNT_AMOUNT_ITEM

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
      ELSE
BEGIN 

   EXEC(''UPDATE [T_BUY_DETAILS] SET [DISCOUNT_AMOUNT_ITEM]=0 WHERE DISCOUNT_AMOUNT_ITEM IS NULL '')
END


--////////////////////////////////////////////////////////////T_BUY_DETAILS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY_DETAILS'' AND [COLUMN_NAME] = N''DISCOUNT_PERCENT_ITEM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY_DETAILS ADD [DISCOUNT_PERCENT_ITEM] FLOAT NULL
  ALTER TABLE [dbo].[T_BUY_DETAILS] ADD  CONSTRAINT [DF_T_BUY_DETAILS_DISCOUNT_PERCENT_ITEM]  DEFAULT ((0)) FOR DISCOUNT_PERCENT_ITEM

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
      ELSE
BEGIN 

   EXEC(''UPDATE [T_BUY_DETAILS] SET [DISCOUNT_PERCENT_ITEM]=0 WHERE DISCOUNT_PERCENT_ITEM IS NULL '')
END


--////////////////////////////////////////////////////////////T_BUY_DETAILS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY_DETAILS'' AND [COLUMN_NAME] = N''EXPENSES_OUT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY_DETAILS ADD [EXPENSES_OUT] FLOAT NULL
  ALTER TABLE [dbo].[T_BUY_DETAILS] ADD  CONSTRAINT [DF_T_BUY_DETAILS_EXPENSES_OUT]  DEFAULT ((0)) FOR EXPENSES_OUT

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
      ELSE
BEGIN 
 
   EXEC(''UPDATE [T_BUY_DETAILS] SET [EXPENSES_OUT]=0 WHERE EXPENSES_OUT IS NULL '')
END
 --//////////////////////////////////////////////////////BUY///////////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY'' AND [COLUMN_NAME] = N''NET_SUPPLIER'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY ADD [NET_SUPPLIER] float NULL
 ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_NET_SUPPLIER]  DEFAULT ((((0)))) FOR [NET_SUPPLIER]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
BEGIN 

   EXEC(''UPDATE [T_BUY] SET [NET_SUPPLIER]=0 WHERE NET_SUPPLIER IS NULL '')
END


 --//////////////////////////////////////////////////////BUY///////////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY'' AND [COLUMN_NAME] = N''TOTAL_OUT'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY ADD [TOTAL_OUT] float NULL
 ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_TOTAL_OUT]  DEFAULT ((((0)))) FOR [TOTAL_OUT]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
  ELSE
BEGIN 
 
   EXEC(''UPDATE [T_BUY] SET [TOTAL_OUT]=0 WHERE TOTAL_OUT IS NULL '')
END

 --//////////////////////////////////////////////////////BUY///////////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY'' AND [COLUMN_NAME] = N''TOTAL_SUPPLIER'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY ADD [TOTAL_SUPPLIER] float NULL
 ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_TOTAL_SUPPLIER]  DEFAULT ((((0)))) FOR [TOTAL_SUPPLIER]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
  ELSE
BEGIN 

   EXEC(''UPDATE [T_BUY] SET [TOTAL_SUPPLIER]=0 WHERE TOTAL_SUPPLIER IS NULL '')
END

--////////////////////////////////////////////////////////////T_ITEMS/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''IS_DISCOUNT'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [IS_DISCOUNT] BIT NULL
 ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_DISCOUNT]  DEFAULT ((1)) FOR IS_DISCOUNT

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
   ELSE
BEGIN 

   EXEC(''UPDATE [T_ITEMS] SET [IS_DISCOUNT]=1 WHERE IS_DISCOUNT IS NULL '')
END


--////////////////////////////////////////////////////////////T_USERS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_USERS'' AND [COLUMN_NAME] = N''APP_PWD'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_USERS ADD [APP_PWD] nvarchar(MAX) NULL
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 



--////////////////////////////////////////////////////////////T_USERS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_USERS'' AND [COLUMN_NAME] = N''TYPE_PRICE_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_USERS ADD [TYPE_PRICE_CODE] INT NULL
  ALTER TABLE [dbo].[T_USERS] ADD  CONSTRAINT [DF_T_USERS_TYPE_PRICE_CODE]  DEFAULT ((-10)) FOR TYPE_PRICE_CODE

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
   ELSE
BEGIN 

   EXEC(''UPDATE [T_USERS] SET [TYPE_PRICE_CODE]=-10 WHERE TYPE_PRICE_CODE IS NULL '')
END

--////////////////////////////////////////////////////////////T_USERS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_USERS'' AND [COLUMN_NAME] = N''STORE_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_USERS ADD [STORE_CODE] INT NULL
  ALTER TABLE [dbo].[T_USERS] ADD  CONSTRAINT [DF_T_USERS_STORE_CODE]  DEFAULT ((-10)) FOR STORE_CODE

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
     ELSE
BEGIN 

   EXEC(''UPDATE [T_USERS] SET [STORE_CODE]=-10 WHERE STORE_CODE IS NULL '')
END

--////////////////////////////////////////////////////////////T_USERS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_USERS'' AND [COLUMN_NAME] = N''MANDOOB_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_USERS ADD [MANDOOB_CODE] INT NULL
  ALTER TABLE [dbo].[T_USERS] ADD  CONSTRAINT [DF_T_USERS_MANDOOB_CODE]  DEFAULT ((-10)) FOR MANDOOB_CODE

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
       ELSE
BEGIN 

   EXEC(''UPDATE [T_USERS] SET [MANDOOB_CODE]=-10 WHERE MANDOOB_CODE IS NULL '')
END



--////////////////////////////////////////////////////////////T_ITEMS/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''CLIENT_NAME_BEST'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [CLIENT_NAME_BEST] NVARCHAR(MAX) NULL
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  


--////////////////////////////////////////////////////////////T_BUY_DETAILS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY_DETAILS'' AND [COLUMN_NAME] = N''TOTAL_OUT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY_DETAILS ADD [TOTAL_OUT] FLOAT NULL
  ALTER TABLE [dbo].[T_BUY_DETAILS] ADD  CONSTRAINT [DF_T_BUY_DETAILS_TOTAL_OUT]  DEFAULT ((0)) FOR TOTAL_OUT

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
       ELSE
BEGIN 

   EXEC(''UPDATE [T_BUY_DETAILS] SET [TOTAL_OUT]=0 WHERE TOTAL_OUT IS NULL '')
END


--////////////////////////////////////////////////////////////T_BUY_DETAILS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY_DETAILS'' AND [COLUMN_NAME] = N''QTY_IN'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY_DETAILS ADD [QTY_IN] FLOAT NULL
  ALTER TABLE [dbo].[T_BUY_DETAILS] ADD  CONSTRAINT [DF_T_BUY_DETAILS_QTY_IN]  DEFAULT ((0)) FOR QTY_IN

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
       ELSE
BEGIN 

   EXEC(''UPDATE [T_BUY_DETAILS] SET [QTY_IN]=[QTY] WHERE QTY_IN IS NULL '')
END
--////////////////////////////////////////////////////////////T_BUY_DETAILS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY_DETAILS'' AND [COLUMN_NAME] = N''QTY_OUT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY_DETAILS ADD [QTY_OUT] FLOAT NULL
  ALTER TABLE [dbo].[T_BUY_DETAILS] ADD  CONSTRAINT [DF_T_BUY_DETAILS_QTY_OUT]  DEFAULT ((0)) FOR QTY_OUT

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
ELSE
BEGIN 

 EXEC(''UPDATE [T_BUY_DETAILS] SET [QTY_OUT]=0 WHERE QTY_OUT IS NULL '')
END
--////////////////////////////////////////////////////////////T_USERS/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_USERS'' AND [COLUMN_NAME] = N''SECURETY_CODE'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_USERS ADD [SECURETY_CODE] INT NULL
 ALTER TABLE [dbo].[T_USERS] ADD  CONSTRAINT [DF_T_USERS_SECURETY_CODE]  DEFAULT ((((1)))) FOR [SECURETY_CODE]
 EXEC(''UPDATE [T_USERS] SET [SECURETY_CODE]=3 where LEVEL_CODE=1'')
 EXEC(''UPDATE [T_USERS] SET [SECURETY_CODE]=1 where LEVEL_CODE<>1'')
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
--ELSE
--BEGIN 
-- EXEC(''UPDATE [T_USERS] SET [SECURETY_CODE]=3 where LEVEL_CODE=1'')
--EXEC(''UPDATE [T_USERS] SET [SECURETY_CODE]=1 where LEVEL_CODE<>1'')

-- END


--////////////////////////////////////////////////////////////T_ITEMS/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''IS_TRANS'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [IS_TRANS] BIT NULL
 ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_TRANS]  DEFAULT ((((0)))) FOR [IS_TRANS]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
BEGIN 

 EXEC(''UPDATE [T_ITEMS] SET [IS_TRANS]=0 WHERE IS_TRANS IS NULL '')
END


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''GUIDS'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [GUIDS] uniqueidentifier NULL
 ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_GUIDS]  DEFAULT (newid()) FOR [GUIDS]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
BEGIN 
 EXEC(''UPDATE [T_ITEMS] SET [GUIDS]=newid() WHERE GUIDS IS NULL '')

END


--////////////////////////////////////////////////////////////T_SANAD_SMAH/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD_SMAH'' AND [COLUMN_NAME] = N''IS_TRANS'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD_SMAH ADD [IS_TRANS] BIT NULL
 ALTER TABLE [dbo].[T_SANAD_SMAH] ADD  CONSTRAINT [DF_T_SANAD_SMAH_IS_TRANS]  DEFAULT ((((0)))) FOR [IS_TRANS]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
  ELSE
BEGIN 

  EXEC(''UPDATE [T_SANAD_SMAH] SET [IS_TRANS]=0 WHERE IS_TRANS IS NULL'')
END


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD_SMAH'' AND [COLUMN_NAME] = N''GUIDS'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD_SMAH ADD [GUIDS] uniqueidentifier NULL
 ALTER TABLE [dbo].[T_SANAD_SMAH] ADD  CONSTRAINT [DF_T_SANAD_SMAH_GUIDS]  DEFAULT (newid()) FOR [GUIDS]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
   ELSE
BEGIN 
 EXEC(''UPDATE [T_SANAD_SMAH] SET [GUIDS]=newid() WHERE GUIDS IS NULL '')

END

--////////////////////////////////////////////////////////////T_SANAD_KAYD/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD_KAYD'' AND [COLUMN_NAME] = N''IS_TRANS'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD_KAYD ADD [IS_TRANS] BIT NULL
 ALTER TABLE [dbo].[T_SANAD_KAYD] ADD  CONSTRAINT [DF_T_SANAD_KAYD_IS_TRANS]  DEFAULT ((((0)))) FOR [IS_TRANS]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
   ELSE
BEGIN 

  EXEC(''UPDATE [T_SANAD_KAYD] SET [IS_TRANS]=0 WHERE IS_TRANS IS NULL'')
END



IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD_KAYD'' AND [COLUMN_NAME] = N''GUIDS'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD_KAYD ADD [GUIDS] uniqueidentifier NULL
 ALTER TABLE [dbo].[T_SANAD_KAYD] ADD  CONSTRAINT [DF_T_SANAD_KAYD_GUIDS]  DEFAULT (newid()) FOR [GUIDS]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
    ELSE
BEGIN 
 EXEC(''UPDATE [T_SANAD_KAYD] SET [GUIDS]=newid() WHERE GUIDS IS NULL '')

END

--////////////////////////////////////////////////////////////T_SANAD_KAYD/////////////////////////////////////////////////////////////////////////////////////////////////////////
IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD_KAYD'' AND [COLUMN_NAME] = N''NOTES'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD_KAYD ADD [NOTES] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
    
--////////////////////////////////////////////////////////////T_SANAD/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD'' AND [COLUMN_NAME] = N''IS_TRANS'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD ADD [IS_TRANS] BIT NULL
 ALTER TABLE [dbo].[T_SANAD] ADD  CONSTRAINT [DF_T_SANAD_IS_TRANS]  DEFAULT ((((0)))) FOR [IS_TRANS]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
   ELSE
BEGIN 
 
  EXEC(''UPDATE [T_SANAD] SET [IS_TRANS]=0 WHERE IS_TRANS IS NULL'')
END



IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD'' AND [COLUMN_NAME] = N''GUIDS'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD ADD [GUIDS] uniqueidentifier NULL
 ALTER TABLE [dbo].[T_SANAD] ADD  CONSTRAINT [DF_T_SANAD_GUIDS]  DEFAULT (newid()) FOR [GUIDS]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
    ELSE
BEGIN 
  EXEC(''UPDATE [T_SANAD] SET [GUIDS]=newid() WHERE GUIDS IS NULL '')

END

 --////////////////////////////////////////////////////////////T_SANAD_DOLLAR/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD_DOLLAR'' AND [COLUMN_NAME] = N''IS_TRANS'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD_DOLLAR ADD [IS_TRANS] BIT NULL
 ALTER TABLE [dbo].[T_SANAD_DOLLAR] ADD  CONSTRAINT [DF_T_SANAD_DOLLAR_IS_TRANS]  DEFAULT ((((0)))) FOR [IS_TRANS]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
    ELSE
BEGIN 

  EXEC(''UPDATE [T_SANAD_DOLLAR] SET [IS_TRANS]=0 WHERE IS_TRANS IS NULL'')
END



IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD_DOLLAR'' AND [COLUMN_NAME] = N''GUIDS'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD_DOLLAR ADD [GUIDS] uniqueidentifier NULL
 ALTER TABLE [dbo].[T_SANAD_DOLLAR] ADD  CONSTRAINT [DF_T_SANAD_DOLLAR_GUIDS]  DEFAULT (newid()) FOR [GUIDS]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
     ELSE
BEGIN 
  EXEC(''UPDATE [T_SANAD_DOLLAR] SET [GUIDS]=newid() WHERE GUIDS IS NULL '')

END

 --/////////////////////////////////////////////////////////////SALES////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''IS_TRANS'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [IS_TRANS] BIT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_IS_TRANS]  DEFAULT ((((0)))) FOR [IS_TRANS]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
     ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [IS_TRANS]=0 WHERE IS_TRANS IS NULL'')
END



IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''GUIDS'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [GUIDS] uniqueidentifier NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_GUIDS]  DEFAULT (newid()) FOR [GUIDS]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
      ELSE
BEGIN 
  EXEC(''UPDATE [T_SALES] SET [GUIDS]=newid() WHERE GUIDS IS NULL '')

END

 --//////////////////////////////////////////////////////BUY///////////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY'' AND [COLUMN_NAME] = N''IS_TRANS'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY ADD [IS_TRANS] BIT NULL
 ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_IS_TRANS]  DEFAULT ((((0)))) FOR [IS_TRANS]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
      ELSE
BEGIN 

  EXEC(''UPDATE [T_BUY] SET [IS_TRANS]=0 WHERE IS_TRANS IS NULL'')
END


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY'' AND [COLUMN_NAME] = N''GUIDS'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY ADD [GUIDS] uniqueidentifier NULL
 ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_GUIDS]  DEFAULT (newid()) FOR [GUIDS]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
       ELSE
BEGIN 
  EXEC(''UPDATE [T_BUY] SET [GUIDS]=newid() WHERE GUIDS IS NULL '')

END
 --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''BILL_BUY'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [BILL_BUY] numeric(18, 0) NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_BILL_BUY]  DEFAULT ((-999999)) FOR [BILL_BUY]
 
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END 
       ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES_DETAILS] SET [BILL_BUY]=-999999 WHERE BILL_BUY IS NULL'')
END
 
--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_TEMP'' AND [COLUMN_NAME] = N''BILL_BUY'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_TEMP ADD [BILL_BUY] numeric(18, 0) NULL
 ALTER TABLE [dbo].T_SALES_TEMP ADD  CONSTRAINT [DF_T_SALES_TEMP_BILL_BUY]  DEFAULT ((-999999)) FOR [BILL_BUY]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
        ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES_TEMP] SET [BILL_BUY]=-999999 WHERE BILL_BUY IS NULL'')
END
 --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_IN_OUT'' AND [COLUMN_NAME] = N''UNIT_QTY'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_IN_OUT ADD [UNIT_QTY] INT NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  


--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEM_CATEGORY'' AND [COLUMN_NAME] = N''SHOW_MENU'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEM_CATEGORY ADD [SHOW_MENU] BIT NULL
 ALTER TABLE [dbo].[T_ITEM_CATEGORY] ADD  CONSTRAINT [DF_T_ITEM_CATEGORY_SHOW_MENU]  DEFAULT ((0)) FOR [SHOW_MENU]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
         ELSE
BEGIN 

  EXEC(''UPDATE [T_ITEM_CATEGORY] SET [SHOW_MENU]=1 WHERE SHOW_MENU IS NULL'')
END




 
 
 --///////////////////////////////////////////////////////////////////T_ITEM_CATEGORY/////////////////////////////////////////
  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEM_CATEGORY'' AND [COLUMN_NAME] = N''CATEGORY_IMAGE_PATH'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE [T_ITEM_CATEGORY] ADD [CATEGORY_IMAGE_PATH] NVARCHAR(MAX) NULL
   
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
   
 --///////////////////////////////////////////////////////////////T_ITEM_CATEGORY//////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEM_CATEGORY'' AND [COLUMN_NAME] = N''PRINTER_ID'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEM_CATEGORY ADD [PRINTER_ID] INT NULL
 ALTER TABLE [dbo].T_ITEM_CATEGORY ADD  CONSTRAINT [DF_T_ITEM_CATEGORY_PRINTER_ID]  DEFAULT ((0)) FOR [PRINTER_ID]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
BEGIN 

   EXEC(''UPDATE [T_ITEM_CATEGORY] SET [PRINTER_ID]=0 WHERE PRINTER_ID IS NULL '')
END
  
 --///////////////////////////////////////////////////////////////T_ITEM_CATEGORY//////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEM_CATEGORY'' AND [COLUMN_NAME] = N''BARCODE_FROM'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEM_CATEGORY ADD [BARCODE_FROM] INT NULL
 ALTER TABLE [dbo].T_ITEM_CATEGORY ADD  CONSTRAINT [DF_T_ITEM_CATEGORY_BARCODE_FROM]  DEFAULT ((0)) FOR [BARCODE_FROM]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
BEGIN 

   EXEC(''UPDATE [T_ITEM_CATEGORY] SET [BARCODE_FROM]=0 WHERE BARCODE_FROM IS NULL '')
END
         
  --///////////////////////////////////////////////////////////////T_ITEM_CATEGORY//////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEM_CATEGORY'' AND [COLUMN_NAME] = N''BARCODE_TO'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEM_CATEGORY ADD [BARCODE_TO] INT NULL
 ALTER TABLE [dbo].T_ITEM_CATEGORY ADD  CONSTRAINT [DF_T_ITEM_CATEGORY_BARCODE_TO]  DEFAULT ((0)) FOR [BARCODE_TO]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
BEGIN 

   EXEC(''UPDATE [T_ITEM_CATEGORY] SET [BARCODE_TO]=0 WHERE BARCODE_TO IS NULL '')
END
        
--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
   
IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_USERS'' AND [COLUMN_NAME] = N''LOG_IN'')
BEGIN
 --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
  ALTER TABLE T_USERS ADD [LOG_IN] BIT NULL

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
END  
          ELSE
BEGIN 

  EXEC(''UPDATE [T_USERS] SET [LOG_IN]=0 WHERE LOG_IN IS NULL'')
END
  
 --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
 
   
IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_USERS'' AND [COLUMN_NAME] = N''BOX_CODE'')
BEGIN
--/////////***** 
SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_USERS ADD [BOX_CODE] INT NULL

COMMIT TRANSACTION
SET XACT_ABORT OFF 
SELECT * FROm T_USERS
 --/////////***** 
 END  
           ELSE
BEGIN 

  EXEC(''UPDATE [T_USERS] SET [BOX_CODE]=5000 WHERE BOX_CODE IS NULL'')
END
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_USERS'' AND [COLUMN_NAME] = N''IS_ENC'')
BEGIN
 --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
  ALTER TABLE T_USERS ADD [IS_ENC] BIT NULL

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
END  
           ELSE
BEGIN 

  EXEC(''UPDATE [T_USERS] SET [IS_ENC]=0 WHERE IS_ENC IS NULL'')
END   
--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''SHOW_MENU'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [SHOW_MENU] BIT NULL
  ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_SHOW_MENU]  DEFAULT ((0)) FOR [SHOW_MENU]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
             ELSE
BEGIN 

  EXEC(''UPDATE [T_ITEMS] SET [SHOW_MENU]=1 WHERE SHOW_MENU IS NULL'')
END     
--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_MOVE'' AND [COLUMN_NAME] = N''ACTIVE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_MOVE ADD [ACTIVE] BIT NULL
  ALTER TABLE [dbo].[T_MOVE] ADD  CONSTRAINT [DF_T_MOVE_ACTIVE]  DEFAULT ((0)) FOR [ACTIVE]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
              ELSE
BEGIN 

  EXEC(''UPDATE [T_MOVE] SET [ACTIVE]=1 WHERE ACTIVE IS NULL'')
END     
  

--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY'' AND [COLUMN_NAME] = N''IS_OUT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY ADD [IS_OUT] BIT NULL
  ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_IS_OUT]  DEFAULT ((0)) FOR [IS_OUT]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
                 ELSE
BEGIN 

  EXEC(''UPDATE [T_BUY] SET [IS_OUT]=0 WHERE IS_OUT IS NULL'')
END     
 --///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY'' AND [COLUMN_NAME] = N''OFFER_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY ADD [OFFER_CODE] INT NULL
  ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
 ELSE
BEGIN 

  EXEC(''UPDATE [T_BUY] SET [OFFER_CODE]=0 WHERE OFFER_CODE IS NULL'')
END
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_FACTORY'' AND [COLUMN_NAME] = N''OFFER_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_FACTORY ADD [OFFER_CODE] INT NULL
  ALTER TABLE [dbo].[T_FACTORY] ADD  CONSTRAINT [DF_T_FACTORY_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
   ELSE
BEGIN 

  EXEC(''UPDATE [T_FACTORY] SET [OFFER_CODE]=0 WHERE OFFER_CODE IS NULL'')
END

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_FACTORY'' AND [COLUMN_NAME] = N''BILL_SELL'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_FACTORY ADD [BILL_SELL] INT NULL
  ALTER TABLE [dbo].[T_FACTORY] ADD  CONSTRAINT [DF_T_FACTORY_BILL_SELL]  DEFAULT ((0)) FOR [BILL_SELL]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
     ELSE
BEGIN 

  EXEC(''UPDATE [T_FACTORY] SET [BILL_SELL]=0 WHERE BILL_SELL IS NULL'')
END

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_FACTORY_DETAILS'' AND [COLUMN_NAME] = N''OFFER_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_FACTORY_DETAILS ADD [OFFER_CODE] INT NULL
  ALTER TABLE [dbo].[T_FACTORY_DETAILS] ADD  CONSTRAINT [DF_T_FACTORY_DETAILS_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
     ELSE
BEGIN 

  EXEC(''UPDATE [T_FACTORY_DETAILS] SET [OFFER_CODE]=0 WHERE OFFER_CODE IS NULL'')
END
  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_FACTORY_DETAILS'' AND [COLUMN_NAME] = N''BILL_SELL'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_FACTORY_DETAILS ADD [BILL_SELL] INT NULL
  ALTER TABLE [dbo].[T_FACTORY_DETAILS] ADD  CONSTRAINT [DF_T_FACTORY_DETAILS_BILL_SELL]  DEFAULT ((0)) FOR [BILL_SELL]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
     ELSE
BEGIN 

  EXEC(''UPDATE [T_FACTORY_DETAILS] SET [BILL_SELL]=0 WHERE BILL_SELL IS NULL'')
END
  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY_DETAILS'' AND [COLUMN_NAME] = N''OFFER_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY_DETAILS ADD [OFFER_CODE] INT NULL
  ALTER TABLE [dbo].[T_BUY_DETAILS] ADD  CONSTRAINT [DF_T_BUY_DETAILS_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
   ELSE
BEGIN 

  EXEC(''UPDATE [T_BUY_DETAILS] SET [OFFER_CODE]=0 WHERE OFFER_CODE IS NULL'')
END
  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY_DETAILS'' AND [COLUMN_NAME] = N''IS_USED'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY_DETAILS ADD IS_USED BIT NULL
  ALTER TABLE [dbo].[T_BUY_DETAILS] ADD  CONSTRAINT [DF_T_BUY_DETAILS_IS_USED]  DEFAULT ((0)) FOR IS_USED

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
     ELSE
BEGIN 

  EXEC(''UPDATE [T_BUY_DETAILS] SET [IS_USED]=0 WHERE IS_USED IS NULL'')
END
--///////////////////////////////////////////////////////////////////T_BUY_DETAILS/////////////////////////////////////////
  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY_DETAILS'' AND [COLUMN_NAME] = N''NOTE1'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE [T_BUY_DETAILS] ADD [NOTE1] NVARCHAR(MAX) NULL
   
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
     
--///////////////////////////////////////////////////////////////////T_BUY_DETAILS/////////////////////////////////////////
  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY_DETAILS'' AND [COLUMN_NAME] = N''NOTE2'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE [T_BUY_DETAILS] ADD [NOTE2] NVARCHAR(MAX) NULL
   
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
     





   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_STORE_TRANSFARE'' AND [COLUMN_NAME] = N''OFFER_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_STORE_TRANSFARE ADD [OFFER_CODE] INT NULL
  ALTER TABLE [dbo].[T_STORE_TRANSFARE] ADD  CONSTRAINT [DF_T_STORE_TRANSFARE_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
     ELSE
BEGIN 

  EXEC(''UPDATE [T_STORE_TRANSFARE] SET [OFFER_CODE]=0 WHERE OFFER_CODE IS NULL'')
END
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD'' AND [COLUMN_NAME] = N''OFFER_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD ADD [OFFER_CODE] INT NULL
  ALTER TABLE [dbo].[T_SANAD] ADD  CONSTRAINT [DF_T_SANAD_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
       ELSE
BEGIN 

  EXEC(''UPDATE [T_SANAD] SET [OFFER_CODE]=0 WHERE OFFER_CODE IS NULL'')
END
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD_DOLLAR'' AND [COLUMN_NAME] = N''OFFER_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD_DOLLAR ADD [OFFER_CODE] INT NULL
  ALTER TABLE [dbo].[T_SANAD_DOLLAR] ADD  CONSTRAINT [DF_T_SANAD_DOLLAR_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
       ELSE
BEGIN 

  EXEC(''UPDATE [T_SANAD_DOLLAR] SET [OFFER_CODE]=0 WHERE OFFER_CODE IS NULL'')
END
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD_KAYD'' AND [COLUMN_NAME] = N''OFFER_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD_KAYD ADD [OFFER_CODE] INT NULL
  ALTER TABLE [dbo].T_SANAD_KAYD ADD  CONSTRAINT [DF_T_SANAD_KAYD_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
       ELSE
BEGIN 

  EXEC(''UPDATE [T_SANAD_KAYD] SET [OFFER_CODE]=0 WHERE OFFER_CODE IS NULL'')
END
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD_SMAH'' AND [COLUMN_NAME] = N''OFFER_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD_SMAH ADD [OFFER_CODE] INT NULL
  ALTER TABLE [dbo].T_SANAD_SMAH ADD  CONSTRAINT [DF_T_SANAD_SMAH_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
       ELSE
BEGIN 

  EXEC(''UPDATE [T_SANAD_SMAH] SET [OFFER_CODE]=0 WHERE OFFER_CODE IS NULL'')
END
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''IS_OUT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [IS_OUT] BIT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_IS_OUT]  DEFAULT ((0)) FOR [IS_OUT]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [IS_OUT]=0 WHERE IS_OUT IS NULL'')
END  



 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''CURRANCY_SALES'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [CURRANCY_SALES] float NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_CURRANCY_SALES]  DEFAULT ((1)) FOR [CURRANCY_SALES]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
         ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [CURRANCY_SALES]=CURRANCY_EQUAL WHERE CURRANCY_SALES IS NULL'')
END   


 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''SELL_G'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [SELL_G] float NULL
 ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_SELL_G]  DEFAULT ((0)) FOR [SELL_G]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
         ELSE
BEGIN 

  EXEC(''UPDATE [T_ITEMS] SET [SELL_G]=SELL WHERE SELL_G IS NULL '')--OR SELL_G=0
END  
  

 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''SELL_W'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [SELL_W] float NULL
 ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_SELL_W]  DEFAULT ((0)) FOR [SELL_W]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
ELSE
BEGIN 

  EXEC(''UPDATE [T_ITEMS] SET [SELL_W]=SELL WHERE SELL_W IS NULL '')--OR SELL_W=0
END  
   



 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''SELL2_G'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [SELL2_G] float NULL
 ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_SELL2_G]  DEFAULT ((0)) FOR [SELL2_G]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
 ELSE
BEGIN 

  EXEC(''UPDATE [T_ITEMS] SET [SELL2_G]=SELL2 WHERE SELL2_G IS NULL '')--OR SELL2_G=0
END    

 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''SELL2_W'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [SELL2_W] float NULL
 ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_SELL2_W]  DEFAULT ((0)) FOR [SELL2_W]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
  ELSE
BEGIN 

  EXEC(''UPDATE [T_ITEMS] SET [SELL2_W]=SELL2 WHERE SELL2_W IS NULL '')--OR SELL2_W=0
END    
  

--///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''IS_HIDE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [IS_HIDE] INT NULL
 ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_HIDE]  DEFAULT ((0)) FOR [IS_HIDE]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 

  EXEC(''UPDATE [T_ITEMS] SET [IS_HIDE]=0 WHERE IS_HIDE IS NULL '')
END    
    
--///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''SERVER_ITEM_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [SERVER_ITEM_CODE] INT NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   
--///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''SERVER_BRANCH'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [SERVER_BRANCH] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
--///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''QR_DATA'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [QR_DATA] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   
--///////////////////////////////////////////////////////////////T_BUY//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY'' AND [COLUMN_NAME] = N''QR_DATA'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY ADD [QR_DATA] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
 --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''IS_SERIAL'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [IS_SERIAL] INT NULL
 ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_SERIAL]  DEFAULT ((0)) FOR [IS_SERIAL]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 

  EXEC(''UPDATE [T_ITEMS] SET [IS_SERIAL]=0 WHERE IS_SERIAL IS NULL '')
END  

  
   --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''UNIT_NAME'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [UNIT_NAME] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 

 EXEC(''UPDATE [T_ITEMS] SET [UNIT_NAME]=(SELECT UNIT_NAME FROM T_ITEM_UNIT WHERE ITEM_CODE=T_ITEMS.ITEM_CODE AND UNIT_CODE=1 ) WHERE UNIT_NAME IS NULL '')
END    
   --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''KIND_NAME'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [KIND_NAME] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 

 EXEC(''UPDATE [T_ITEMS] SET [KIND_NAME]=N'''''''' WHERE KIND_NAME IS NULL '')
END   
 DECLARE
@COUNT_SETTING INT     
  
   --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''EXPIRED_DAY'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [EXPIRED_DAY] INT NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 

SELECT @COUNT_SETTING=COUNT_SETTING FROM T_NOTIFICATION WHERE NOTI_CODE=2
 EXEC(''UPDATE [T_ITEMS] SET [EXPIRED_DAY]=(SELECT TOP (1) DATEDIFF(DAY,GETDATE(),MIN(EXP_DATE) )    FROM V_BUY_DETAILS_EXPIRED_REMAIN WHERE ITEM_CODE=T_ITEMS.ITEM_CODE) '')
 END    
 --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''EXPIRED_DATE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [EXPIRED_DATE] DATE NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 

 EXEC(''UPDATE [T_ITEMS] SET [EXPIRED_DATE]=(SELECT TOP (1) MIN(EXP_DATE)     FROM V_BUY_DETAILS_EXPIRED_REMAIN WHERE ITEM_CODE=T_ITEMS.ITEM_CODE) '')
 END    
     

 --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''EXPIRED_WARRNING'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [EXPIRED_WARRNING] INT NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 

 EXEC(''UPDATE [T_ITEMS] SET [EXPIRED_WARRNING]= ''+@COUNT_SETTING )
 END    
   
    --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''QTY_AKSAT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [QTY_AKSAT] INT NULL
  ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_QTY_AKSAT]  DEFAULT ((0)) FOR [QTY_AKSAT]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_ITEMS] SET [QTY_AKSAT]=0 WHERE QTY_AKSAT IS NULL '')
 END    
   
 --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''IS_SERIAL'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [IS_SERIAL] INT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_IS_SERIAL]  DEFAULT ((0)) FOR [IS_SERIAL]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES_DETAILS] SET [IS_SERIAL]=0 WHERE IS_SERIAL IS NULL '')
END  
  
--///////////////////////////////////////////////////////////////T_SALES_TEMP//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_TEMP'' AND [COLUMN_NAME] = N''IS_SERIAL'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_TEMP ADD [IS_SERIAL] INT NULL
 ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_IS_SERIAL]  DEFAULT ((0)) FOR [IS_SERIAL]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES_TEMP] SET [IS_SERIAL]=0 WHERE IS_SERIAL IS NULL '')
END    
     --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''ITEM_ID_PAYMENT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [ITEM_ID_PAYMENT] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
         --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''LINK_ID_PAYMENT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [LINK_ID_PAYMENT] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
	     --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''TAG_PROCCESS_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [TAG_PROCCESS_CODE] INT NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [TAG_PROCCESS_CODE]=0 WHERE [TAG_PROCCESS_CODE] IS NULL '')

END  

	     --///////////////////////////////////////////////////////////////T_BUY//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY'' AND [COLUMN_NAME] = N''TAG_PROCCESS_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY ADD [TAG_PROCCESS_CODE] INT NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
ELSE
BEGIN 

  EXEC(''UPDATE [T_BUY] SET [TAG_PROCCESS_CODE]=0 WHERE [TAG_PROCCESS_CODE] IS NULL '')

END  

	     --///////////////////////////////////////////////////////////////T_BUY//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY'' AND [COLUMN_NAME] = N''DATE_RETURN'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY ADD [DATE_RETURN] DATE NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
ELSE
BEGIN 

  EXEC(''UPDATE [T_BUY] SET DATE_RETURN=BILL_DATE WHERE [DATE_RETURN] IS NULL '')

END  

	     --///////////////////////////////////////////////////////////////T_BUY//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY'' AND [COLUMN_NAME] = N''CASH_INVOICE_BILL'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY ADD [CASH_INVOICE_BILL] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
--ELSE
--BEGIN 
--EXEC(''UPDATE [T_BUY] SET DATE_CASH=BILL_DATE WHERE [DATE_CASH] IS NULL '')
--END  

	     --///////////////////////////////////////////////////////////////T_BUY//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY'' AND [COLUMN_NAME] = N''IS_CASH'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY ADD [IS_CASH] BIT NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
ELSE
BEGIN 

  EXEC(''UPDATE [T_BUY] SET IS_CASH=0 WHERE [IS_CASH] IS NULL '')
	EXEC(''UPDATE [T_BUY] SET IS_CASH=1 WHERE [IVC_CODE]=1  AND IS_CASH=0 '')
END  

	     --///////////////////////////////////////////////////////////////T_CLIENT//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_CLIENT'' AND [COLUMN_NAME] = N''MAIN_ACCOUNT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_CLIENT ADD [MAIN_ACCOUNT] INT NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
ELSE
BEGIN 

  EXEC(''UPDATE [T_CLIENT] SET MAIN_ACCOUNT=0 WHERE [MAIN_ACCOUNT] IS NULL '')

END  

	     --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''BILL_RETURN'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [BILL_RETURN] INT NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
--ELSE
--BEGIN 

--  EXEC(''UPDATE [T_SALES] SET [BILL_RETURN]=0 WHERE [BILL_RETURN] IS NULL '')

--END  

	     --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''BILL_SANAD_CNY'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [BILL_SANAD_CNY] INT NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [BILL_SANAD_CNY]=0 WHERE [BILL_SANAD_CNY] IS NULL '')

END  
	     --///////////////////////////////////////////////////////////////T_BUY//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY'' AND [COLUMN_NAME] = N''BILL_SANAD_CNY'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY ADD [BILL_SANAD_CNY] INT NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
ELSE
BEGIN 

  EXEC(''UPDATE [T_BUY] SET [BILL_SANAD_CNY]=0 WHERE [BILL_SANAD_CNY] IS NULL '')

END  
	     --///////////////////////////////////////////////////////////////T_BUY//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY'' AND [COLUMN_NAME] = N''IS_UPDATE_SELL_PRICE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY ADD [IS_UPDATE_SELL_PRICE] BIT NULL
  ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_IS_UPDATE_SELL_PRICE]  DEFAULT ((0)) FOR [IS_UPDATE_SELL_PRICE]
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
ELSE
BEGIN 

  EXEC(''UPDATE [T_BUY] SET [IS_UPDATE_SELL_PRICE]=0 WHERE [IS_UPDATE_SELL_PRICE] IS NULL '')

END  

	     --///////////////////////////////////////////////////////////////T_BUY//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY'' AND [COLUMN_NAME] = N''IS_UPDATE_NEW_BUY'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY ADD [IS_UPDATE_NEW_BUY] BIT NULL
  ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_IS_UPDATE_NEW_BUY]  DEFAULT ((0)) FOR [IS_UPDATE_NEW_BUY]
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
ELSE
BEGIN 

  EXEC(''UPDATE [T_BUY] SET [IS_UPDATE_NEW_BUY]=0 WHERE [IS_UPDATE_NEW_BUY] IS NULL '')

END  
	     --///////////////////////////////////////////////////////////////T_BUY//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_BUY'' AND [COLUMN_NAME] = N''BILL_PURCHASE_ORDER'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_BUY ADD [BILL_PURCHASE_ORDER] INT NULL
  ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_BILL_PURCHASE_ORDER]  DEFAULT ((0)) FOR [BILL_PURCHASE_ORDER]
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
ELSE
BEGIN 

  EXEC(''UPDATE [T_BUY] SET [BILL_PURCHASE_ORDER]=0 WHERE [BILL_PURCHASE_ORDER] IS NULL '')

END  




	     --///////////////////////////////////////////////////////////////T_ITEM_MATERIAL//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEM_MATERIAL'' AND [COLUMN_NAME] = N''QTY_STR'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 
 DROP TABLE [dbo].[T_ITEM_MATERIAL]
 CREATE TABLE [dbo].[T_ITEM_MATERIAL](
	[T_ID] [int] IDENTITY(1,1) NOT NULL,
	[EFFECTIVE_MATERIAL] [nvarchar](max) NULL,
	[EFFECTIVE_MATERIAL_2] [nvarchar](max) NULL,
	[QTY_STR] [nvarchar](max) NULL,
 CONSTRAINT [PK_T_ITEM_MATERIAL] PRIMARY KEY CLUSTERED 
(
	[T_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
  
	     --///////////////////////////////////////////////////////////////T_ITEM_MATERIAL_EFFECTIVE//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEM_MATERIAL_EFFECTIVE'' AND [COLUMN_NAME] = N''EFFECTIVE_MATERIAL_2'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEM_MATERIAL_EFFECTIVE ADD [EFFECTIVE_MATERIAL_2] [nvarchar](max) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
  	     --///////////////////////////////////////////////////////////////T_ITEM_MATERIAL_EFFECTIVE//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEM_MATERIAL_EFFECTIVE'' AND [COLUMN_NAME] = N''QTY_STR'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEM_MATERIAL_EFFECTIVE ADD [QTY_STR] [nvarchar](max) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  	     --///////////////////////////////////////////////////////////////T_NOTES//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_NOTES'' AND [COLUMN_NAME] = N''NOTE_TYPE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_NOTES ADD [NOTE_TYPE] [nvarchar](max) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  

  	     --///////////////////////////////////////////////////////////////T_NOTES//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_NOTES'' AND [COLUMN_NAME] = N''ATTACH_PATH'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_NOTES ADD [ATTACH_PATH] [nvarchar](max) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  

         --///////////////////////////////////////////////////////////////T_NOTES//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_NOTES'' AND [COLUMN_NAME] = N''MAIN_ID'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE [T_NOTES] ADD [MAIN_ID] INT NULL
 ALTER TABLE [dbo].[T_NOTES] ADD  CONSTRAINT [DF_T_NOTES_MAIN_ID]  DEFAULT ((0)) FOR [MAIN_ID]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
  ELSE
BEGIN 

  EXEC(''UPDATE [T_NOTES] SET [MAIN_ID]=0 WHERE [MAIN_ID] IS NULL  '')

END 
         --///////////////////////////////////////////////////////////////T_NOTES//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_NOTES'' AND [COLUMN_NAME] = N''BY_APP'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE [T_NOTES] ADD [BY_APP] INT NULL
 ALTER TABLE [dbo].[T_NOTES] ADD  CONSTRAINT [DF_T_NOTES_BY_APP]  DEFAULT ((1)) FOR [BY_APP]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
  ELSE
BEGIN 

  EXEC(''UPDATE [T_NOTES] SET [BY_APP]=1 WHERE [BY_APP] IS NULL  '')

END 
         --///////////////////////////////////////////////////////////////T_NOTES//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_NOTES'' AND [COLUMN_NAME] = N''BY_TRACKING'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE [T_NOTES] ADD [BY_TRACKING] INT NULL
 ALTER TABLE [dbo].[T_NOTES] ADD  CONSTRAINT [DF_T_NOTES_BY_TRACKING]  DEFAULT ((0)) FOR [BY_TRACKING]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
  ELSE
BEGIN 

  EXEC(''UPDATE [T_NOTES] SET [BY_TRACKING]=0 WHERE [BY_TRACKING] IS NULL  '')

END 
         --///////////////////////////////////////////////////////////////T_NOTES//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_NOTES'' AND [COLUMN_NAME] = N''ACTIVE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE [T_NOTES] ADD [ACTIVE] BIT NULL
 ALTER TABLE [dbo].[T_NOTES] ADD  CONSTRAINT [DF_T_NOTES_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
  ELSE
BEGIN 

  EXEC(''UPDATE [T_NOTES] SET [ACTIVE]=1 WHERE [ACTIVE] IS NULL  '')

END 

   --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''CNY_IQ'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [CNY_IQ] FLOAT NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [CNY_IQ]=1 WHERE [CNY_IQ] IS NULL '')

END 
   --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''CNY_IQ'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [CNY_IQ] FLOAT NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES_DETAILS] SET [CNY_IQ]=1 WHERE [CNY_IQ] IS NULL '')

END 
   --///////////////////////////////////////////////////////////////T_CLIENT//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_CLIENT'' AND [COLUMN_NAME] = N''TYPE_PRICE_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_CLIENT ADD [TYPE_PRICE_CODE] INT NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
ELSE
BEGIN 

  EXEC(''UPDATE [T_CLIENT] SET [TYPE_PRICE_CODE]=1 WHERE [TYPE_PRICE_CODE] IS NULL  OR [TYPE_PRICE_CODE]=0 '')

END 	 
   --///////////////////////////////////////////////////////////////T_CLIENT//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_CLIENT'' AND [COLUMN_NAME] = N''LAT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_CLIENT ADD [LAT] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
     --///////////////////////////////////////////////////////////////T_CLIENT//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_CLIENT'' AND [COLUMN_NAME] = N''LNG'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_CLIENT ADD [LNG] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
       --///////////////////////////////////////////////////////////////T_ACCOUNTS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ACCOUNTS'' AND [COLUMN_NAME] = N''ACCOUNT_BARCODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ACCOUNTS ADD [ACCOUNT_BARCODE] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
       --///////////////////////////////////////////////////////////////T_ACCOUNTS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ACCOUNTS'' AND [COLUMN_NAME] = N''IS_POS'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ACCOUNTS ADD [IS_POS] BIT NULL
 ALTER TABLE [dbo].[T_ACCOUNTS] ADD  CONSTRAINT [DF_T_ACCOUNTS_IS_POS]  DEFAULT ((0)) FOR [IS_POS]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
  ELSE
BEGIN 

  EXEC(''UPDATE [T_ACCOUNTS] SET [IS_POS]=0 WHERE [IS_POS] IS NULL  '')

END 
       --///////////////////////////////////////////////////////////////T_ACCOUNTS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ACCOUNTS'' AND [COLUMN_NAME] = N''DISC_POS'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ACCOUNTS ADD [DISC_POS] FLOAT NULL
 ALTER TABLE [dbo].[T_ACCOUNTS] ADD  CONSTRAINT [DF_T_ACCOUNTS_DISC_POS]  DEFAULT ((0)) FOR [DISC_POS]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
  ELSE
BEGIN 

  EXEC(''UPDATE [T_ACCOUNTS] SET [DISC_POS]=0 WHERE [DISC_POS] IS NULL  '')

END 
       --///////////////////////////////////////////////////////////////T_ACCOUNTS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ACCOUNTS'' AND [COLUMN_NAME] = N''ACC_EXP'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ACCOUNTS ADD [ACC_EXP] INT NULL
 ALTER TABLE [dbo].[T_ACCOUNTS] ADD  CONSTRAINT [DF_T_ACCOUNTS_ACC_EXP]  DEFAULT ((0)) FOR [ACC_EXP]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
  ELSE
BEGIN 

  EXEC(''UPDATE [T_ACCOUNTS] SET [ACC_EXP]=0 WHERE [ACC_EXP] IS NULL  '')

END 
       --///////////////////////////////////////////////////////////////T_ACCOUNTS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ACCOUNTS'' AND [COLUMN_NAME] = N''COM_PORT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ACCOUNTS ADD [COM_PORT] NVARCHAR(MAX) NULL
 

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   
  --///////////////////////////////////////////////////////////////T_OFFER//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_OFFER'' AND [COLUMN_NAME] = N''DESCRIPTION'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_OFFER ADD [DESCRIPTION] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    --///////////////////////////////////////////////////////////////T_OFFER//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_OFFER'' AND [COLUMN_NAME] = N''URL_IMAGE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_OFFER ADD [URL_IMAGE] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
 --///////////////////////////////////////////////////////////////T_OFFERS_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_OFFERS_DETAILS'' AND [COLUMN_NAME] = N''PRICE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_OFFERS_DETAILS ADD [PRICE] FLOAT NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
ELSE
BEGIN 

  EXEC(''UPDATE [T_OFFERS_DETAILS] SET [PRICE]=0 WHERE [PRICE] IS NULL '')

END 

      --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''IS_PREPARE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [IS_PREPARE] BIT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_IS_PREPARE]  DEFAULT ((0)) FOR [IS_PREPARE]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [IS_PREPARE]=0 WHERE IS_PREPARE IS NULL'')
END  



   --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''DRIVER_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [DRIVER_CODE] INT NULL
  ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_DRIVER_CODE]  DEFAULT ((0)) FOR [DRIVER_CODE]
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
   ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [DRIVER_CODE]=0 WHERE DRIVER_CODE IS NULL'')
END  
   --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''LAT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [LAT] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
       --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''LNG'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [LNG] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  --////////////////////////////////////////////////////////////T_USERS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_USERS'' AND [COLUMN_NAME] = N''DRIVER_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_USERS ADD [DRIVER_CODE] INT NULL
ALTER TABLE [dbo].[T_USERS] ADD  CONSTRAINT [DF_T_USERS_DRIVER_CODE]  DEFAULT ((0)) FOR [DRIVER_CODE]
  COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  ELSE
  BEGIN 
   EXEC(''UPDATE [T_USERS] SET [DRIVER_CODE]=-10 WHERE DRIVER_CODE IS NULL'')
  END
    --////////////////////////////////////////////////////////////T_USERS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_USERS'' AND [COLUMN_NAME] = N''TYPE_CH_OFFER'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_USERS ADD [TYPE_CH_OFFER]  NVARCHAR(MAX) NULL
   COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
    --////////////////////////////////////////////////////////////T_USERS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_USERS'' AND [COLUMN_NAME] = N''PERMISSION'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_USERS ADD [PERMISSION]  NVARCHAR(MAX) NULL
   COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  --////////////////////////////////////////////////////////////T_USERS/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_USERS'' AND [COLUMN_NAME] = N''IS_TRY'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_USERS ADD [IS_TRY] INT NULL
ALTER TABLE [dbo].[T_USERS] ADD  CONSTRAINT [DF_T_USERS_IS_TRY]  DEFAULT ((0)) FOR [IS_TRY]
  COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  ELSE
  BEGIN 
   EXEC(''UPDATE [T_USERS] SET [IS_TRY]=0 WHERE IS_TRY IS NULL'')
  END
  
    --////////////////////////////////////////////////////////////T_SALES/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''STATUS_SHIPING'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [STATUS_SHIPING] INT NULL

  COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES] SET [STATUS_SHIPING]=0 WHERE STATUS_SHIPING IS NULL'')
  END
    --////////////////////////////////////////////////////////////T_SALES/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''MOVE_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [MOVE_CODE] INT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_MOVE_CODE]  DEFAULT ((0)) FOR [MOVE_CODE]
  COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES] SET [MOVE_CODE]=0 WHERE MOVE_CODE IS NULL'')
  END

      --////////////////////////////////////////////////////////////T_SANAD/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD'' AND [COLUMN_NAME] = N''BILL_RELATION'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD ADD [BILL_RELATION] INT NULL

  COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  
      --////////////////////////////////////////////////////////////T_SANAD/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD'' AND [COLUMN_NAME] = N''B_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD ADD [B_CODE] INT NULL

  COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
   ELSE
  BEGIN 
   EXEC(''UPDATE [T_SANAD] SET [B_CODE]=-1 WHERE B_CODE IS NULL'')
  END 
       --////////////////////////////////////////////////////////////T_SANAD/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD'' AND [COLUMN_NAME] = N''GUIDS_RELATION'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD ADD [GUIDS_RELATION] uniqueidentifier NULL

  COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
   
         --////////////////////////////////////////////////////////////T_SANAD/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD'' AND [COLUMN_NAME] = N''CASH_USA'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD ADD [CASH_USA] FLOAT NULL
 ALTER TABLE [dbo].[T_SANAD] ADD  CONSTRAINT [DF_T_SANAD_CASH_USA]  DEFAULT ((0)) FOR [CASH_USA]
  COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
   ELSE
  BEGIN 
   EXEC(''UPDATE [T_SANAD] SET [CASH_USA]=0 WHERE CASH_USA IS NULL'')
  END 
         --////////////////////////////////////////////////////////////T_SANAD/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD'' AND [COLUMN_NAME] = N''CASH_IQ'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD ADD [CASH_IQ] FLOAT NULL
 ALTER TABLE [dbo].[T_SANAD] ADD  CONSTRAINT [DF_T_SANAD_CASH_IQ]  DEFAULT ((0)) FOR [CASH_IQ]
  COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
   ELSE
  BEGIN 
   EXEC(''UPDATE [T_SANAD] SET [CASH_IQ]=0 WHERE CASH_IQ IS NULL'')
  END 


      --////////////////////////////////////////////////////////////T_SANAD_CNY/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD_CNY'' AND [COLUMN_NAME] = N''BILL_RELATION'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD_CNY ADD [BILL_RELATION] INT NULL

  COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  
      --////////////////////////////////////////////////////////////T_SANAD_CNY/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD_CNY'' AND [COLUMN_NAME] = N''B_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD_CNY ADD [B_CODE] INT NULL

  COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
   ELSE
  BEGIN 
   EXEC(''UPDATE [T_SANAD_CNY] SET [B_CODE]=-1 WHERE B_CODE IS NULL'')
  END 
         --////////////////////////////////////////////////////////////T_SANAD_CNY/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SANAD_CNY'' AND [COLUMN_NAME] = N''GUIDS_RELATION'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SANAD_CNY ADD [GUIDS_RELATION] uniqueidentifier NULL

  COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
       --////////////////////////////////////////////////////////////T_SALES/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''BILL_ORDER'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [BILL_ORDER] INT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_BILL_ORDER]  DEFAULT ((0)) FOR [BILL_ORDER]
  COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES] SET [BILL_ORDER]=0 WHERE BILL_ORDER IS NULL'')
  END
  
   --///////////////////////////////////////////////////////////////T_CLIENT//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_CLIENT'' AND [COLUMN_NAME] = N''FAMILY_NAME'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_CLIENT ADD [FAMILY_NAME] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 



   --///////////////////////////////////////////////////////////////T_CLIENT//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_CLIENT'' AND [COLUMN_NAME] = N''OFFICE_NAME'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_CLIENT ADD [OFFICE_NAME] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 


   --///////////////////////////////////////////////////////////////T_CLIENT//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_CLIENT'' AND [COLUMN_NAME] = N''QISM_NAME'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_CLIENT ADD [QISM_NAME] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 


   --///////////////////////////////////////////////////////////////T_CLIENT//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_CLIENT'' AND [COLUMN_NAME] = N''MONTH_WARNING'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_CLIENT ADD [MONTH_WARNING] INT NULL
 ALTER TABLE [dbo].[T_CLIENT] ADD  CONSTRAINT [DF_T_CLIENT_MONTH_WARNING]  DEFAULT ((0)) FOR [MONTH_WARNING]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
ELSE
BEGIN 

  EXEC(''UPDATE [T_CLIENT] SET [MONTH_WARNING]=0 WHERE [MONTH_WARNING] IS NULL '')

END 	 

   --///////////////////////////////////////////////////////////////T_CLIENT//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_CLIENT'' AND [COLUMN_NAME] = N''SALARY_NET'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_CLIENT ADD [SALARY_NET] FLOAT NULL
 ALTER TABLE [dbo].[T_CLIENT] ADD  CONSTRAINT [DF_T_CLIENT_SALARY_NET]  DEFAULT ((0)) FOR [SALARY_NET]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
ELSE
BEGIN 

  EXEC(''UPDATE [T_CLIENT] SET [SALARY_NET]=0 WHERE [SALARY_NET] IS NULL '')

END 
   --///////////////////////////////////////////////////////////////T_CLIENT//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_CLIENT'' AND [COLUMN_NAME] = N''EMOLA_CARD'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_CLIENT ADD [EMOLA_CARD] FLOAT NULL
 ALTER TABLE [dbo].[T_CLIENT] ADD  CONSTRAINT [DF_T_CLIENT_EMOLA_CARD]  DEFAULT ((0)) FOR [EMOLA_CARD]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
ELSE
BEGIN 

  EXEC(''UPDATE [T_CLIENT] SET [EMOLA_CARD]=0 WHERE [EMOLA_CARD] IS NULL '')

END 
   --///////////////////////////////////////////////////////////////T_CLIENT//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_CLIENT'' AND [COLUMN_NAME] = N''SHAKAWY_NOTE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_CLIENT ADD [SHAKAWY_NOTE] NVARCHAR(MAX) NULL
 
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
 
--////////////////////////////////////////////////////////////T_CLIENT/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_CLIENT'' AND [COLUMN_NAME] = N''HAWIA'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_CLIENT ADD [HAWIA] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  
  --////////////////////////////////////////////////////////////T_CLIENT/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_CLIENT'' AND [COLUMN_NAME] = N''HAWIA_FROM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_CLIENT ADD [HAWIA_FROM] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  
    --////////////////////////////////////////////////////////////T_CLIENT/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_CLIENT'' AND [COLUMN_NAME] = N''HAWIA_NO'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_CLIENT ADD [HAWIA_NO] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
      --////////////////////////////////////////////////////////////T_CLIENT/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_CLIENT'' AND [COLUMN_NAME] = N''CLIENT_COLOR'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_CLIENT ADD [CLIENT_COLOR] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  ELSE
BEGIN 


 EXEC(''UPDATE [T_CLIENT] SET [CLIENT_COLOR]=''''Black'''' WHERE CLIENT_COLOR IS NULL '')
 END    	
		
      --////////////////////////////////////////////////////////////T_CLIENT/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_CLIENT'' AND [COLUMN_NAME] = N''CLIENT_TOKEN'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_CLIENT ADD [CLIENT_TOKEN] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  ELSE
BEGIN 


 EXEC(''UPDATE [T_CLIENT] SET [CLIENT_TOKEN]=N'''''''' WHERE CLIENT_TOKEN IS NULL '')
 END    	
      --////////////////////////////////////////////////////////////T_CLIENT/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_CLIENT'' AND [COLUMN_NAME] = N''FROM_TIME'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_CLIENT ADD [FROM_TIME] time(7) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  ELSE
BEGIN 


 EXEC(''UPDATE [T_CLIENT] SET [FROM_TIME]=N''''00:00:01'''' WHERE FROM_TIME IS NULL '')
 END  	
       --////////////////////////////////////////////////////////////T_CLIENT/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_CLIENT'' AND [COLUMN_NAME] = N''TO_TIME'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_CLIENT ADD [TO_TIME] time(7) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  ELSE
BEGIN 


 EXEC(''UPDATE [T_CLIENT] SET [TO_TIME]=N''''23:59:59'''' WHERE TO_TIME IS NULL '')
 END 	
      --////////////////////////////////////////////////////////////T_MANDOOB/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_MANDOOB'' AND [COLUMN_NAME] = N''MANDOOB_TOKEN'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_MANDOOB ADD [MANDOOB_TOKEN] NVARCHAR(MAX) NULL
 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  ELSE
BEGIN 


 EXEC(''UPDATE [T_MANDOOB] SET [MANDOOB_TOKEN]=N'''''''' WHERE MANDOOB_TOKEN IS NULL '')
 END    	
			
       --////////////////////////////////////////////////////////////T_MANDOOB/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_MANDOOB'' AND [COLUMN_NAME] = N''MAX_DEBIT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_MANDOOB ADD [MAX_DEBIT] FLOAT NULL
  ALTER TABLE [dbo].[T_MANDOOB] ADD  CONSTRAINT [DF_T_MANDOOB_MAX_DEBIT]  DEFAULT ((0)) FOR [MAX_DEBIT] 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  ELSE
BEGIN 

EXEC(''UPDATE [T_MANDOOB] SET [MAX_DEBIT]=0 WHERE MAX_DEBIT IS NULL '')
 
 END    	
       --////////////////////////////////////////////////////////////T_MANDOOB/////////////////////////////////////////////////////////////////////////////////////////////////////////

  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_MANDOOB'' AND [COLUMN_NAME] = N''MANDOOB_TARGET'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_MANDOOB ADD [MANDOOB_TARGET] FLOAT NULL
  ALTER TABLE [dbo].[T_MANDOOB] ADD  CONSTRAINT [DF_T_MANDOOB_MANDOOB_TARGET]  DEFAULT ((0)) FOR [MANDOOB_TARGET] 
    COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END 
  ELSE
BEGIN 

EXEC(''UPDATE [T_MANDOOB] SET [MANDOOB_TARGET]=0 WHERE MANDOOB_TARGET IS NULL '')
 
 END    	



		   --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''IS_TAX'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [IS_TAX] BIT NULL
  ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_TAX]  DEFAULT ((0)) FOR [IS_TAX]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_ITEMS] SET [IS_TAX]=0 WHERE IS_TAX IS NULL '')
 END    
       --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''TAX_PERCENT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [TAX_PERCENT] FLOAT NULL
  ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_TAX_PERCENT]  DEFAULT ((0)) FOR [TAX_PERCENT]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_ITEMS] SET [TAX_PERCENT]=0 WHERE TAX_PERCENT IS NULL '')
 END    
          --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''TAX_AMO'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [TAX_AMO] FLOAT NULL
  ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_TAX_AMO]  DEFAULT ((0)) FOR [TAX_AMO]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_ITEMS] SET [TAX_AMO]=0 WHERE TAX_AMO IS NULL '')
 END    
      --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''IS_MANDOOB'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [IS_MANDOOB] BIT NULL
  ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_MANDOOB]  DEFAULT ((0)) FOR [IS_MANDOOB]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_ITEMS] SET [IS_MANDOOB]=0 WHERE IS_MANDOOB IS NULL '')
 END    
       --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''MANDOOB_PERCENT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [MANDOOB_PERCENT] FLOAT NULL
  ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_MANDOOB_PERCENT]  DEFAULT ((0)) FOR [MANDOOB_PERCENT]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_ITEMS] SET [MANDOOB_PERCENT]=0 WHERE MANDOOB_PERCENT IS NULL '')
 END    
          --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''MANDOOB_AMO'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [MANDOOB_AMO] FLOAT NULL
  ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_MANDOOB_AMO]  DEFAULT ((0)) FOR [MANDOOB_AMO]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_ITEMS] SET [MANDOOB_AMO]=0 WHERE MANDOOB_AMO IS NULL '')
 END    
       --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''IS_MANDOOB_SELECTION'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [IS_MANDOOB_SELECTION] BIT NULL
  ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_MANDOOB_SELECTION]  DEFAULT ((0)) FOR [IS_MANDOOB_SELECTION]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_ITEMS] SET [IS_MANDOOB_SELECTION]=0 WHERE IS_MANDOOB_SELECTION IS NULL '')
 END  

         
       --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''IS_ITEM_AREA'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [IS_ITEM_AREA] BIT NULL
  ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_ITEM_AREA]  DEFAULT ((0)) FOR [IS_ITEM_AREA]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_ITEMS] SET [IS_ITEM_AREA]=0 WHERE IS_ITEM_AREA IS NULL '')
 END  

    		 
		   --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''UNIT_QTY_X1'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [UNIT_QTY_X1] FLOAT NULL
  ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_UNIT_QTY_X1]  DEFAULT ((1)) FOR [UNIT_QTY_X1]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_ITEMS] SET [UNIT_QTY_X1]=1 WHERE UNIT_QTY_X1 IS NULL OR UNIT_QTY_X1=0 '')
 END  
		   --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''UNIT_QTY_XY'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [UNIT_QTY_XY] FLOAT NULL
  ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_UNIT_QTY_XY]  DEFAULT ((1)) FOR [UNIT_QTY_XY]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_ITEMS] SET [UNIT_QTY_XY]=1 WHERE UNIT_QTY_XY IS NULL OR UNIT_QTY_XY=0 '')
 END  
 		   --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''UNIT_QTY_XZ'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [UNIT_QTY_XZ] FLOAT NULL
  ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_UNIT_QTY_XZ]  DEFAULT ((1)) FOR [UNIT_QTY_XZ]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_ITEMS] SET [UNIT_QTY_XZ]=1 WHERE UNIT_QTY_XZ IS NULL OR UNIT_QTY_XZ=0'')
 END  
  		   --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''IS_NEW_BUY'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [IS_NEW_BUY] BIT NULL
  ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_NEW_BUY]  DEFAULT ((0)) FOR [IS_NEW_BUY]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_ITEMS] SET [IS_NEW_BUY]=0 WHERE IS_NEW_BUY IS NULL '')
 END  

  		   --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''POINT_OF_UNIT1'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [POINT_OF_UNIT1] FLOAT NULL
  ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_POINT_OF_UNIT1]  DEFAULT ((0)) FOR [POINT_OF_UNIT1]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_ITEMS] SET [POINT_OF_UNIT1]=0 WHERE POINT_OF_UNIT1 IS NULL '')
 END  
  		   --///////////////////////////////////////////////////////////////T_ITEMS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEMS'' AND [COLUMN_NAME] = N''POINT_OF_UNIT2'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEMS ADD [POINT_OF_UNIT2] FLOAT NULL
  ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_POINT_OF_UNIT2]  DEFAULT ((0)) FOR [POINT_OF_UNIT2]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_ITEMS] SET [POINT_OF_UNIT2]=0 WHERE POINT_OF_UNIT2 IS NULL '')
 END  

    --///////////////////////////////////////////////////////////////[T_DAYLE_ALL_REPORT]//////////////////////////////////////////////////////////////////////////////////////////////////////
   
BEGIN TRANSACTION
DROP TABLE [dbo].[T_DAYLE_ALL_REPORT]
CREATE TABLE [dbo].[T_DAYLE_ALL_REPORT](
	[T_ID] [int] NULL,
	[D_DATE] [date] NULL,
	[SECURETY_CODE] [int] NULL,
	[CURRANCY_CODE] [int] NULL,
	[CURRANCY_EQUAL] [float] NULL,
	[TOT_SALES] [float] NULL,
	[TOT_SALES_CASH] [float] NULL,
	[TOT_SALES_DEBIT] [float] NULL,
	[TOT_ARBAH_SALES] [float] NULL,
	[TOT_RE_SALES] [float] NULL,
	[TOT_RE_SALES_CASH] [float] NULL,
	[TOT_RE_SALES_DEBIT] [float] NULL,
	[TOT_RE_ARBAH_SALES] [float] NULL,
	[TOT_BUY] [float] NULL,
	[TOT_BUY_CASH] [float] NULL,
	[TOT_BUY_DEBIT] [float] NULL,
	[TOT_RE_BUY] [float] NULL,
	[TOT_RE_BUY_CASH] [float] NULL,
	[TOT_RE_BUY_DEBIT] [float] NULL,
	[TOT_EXPENSES] [float] NULL,
	[TOT_CASH_SUPPLIER] [float] NULL,
	[TOT_ERADAT] [float] NULL,
	[TOT_SMAHAT] [float] NULL,
	[TOT_INCOME] [float] NULL,
	[TOT_CASH_CLIENT] [float] NULL,
	[TOT_BOX_BALANCE] [float] NULL,
	[NET_ARBAH]  AS (((((isnull([TOT_ARBAH_SALES],(0))+isnull([TOT_RE_ARBAH_SALES],(0)))+isnull([TOT_ERADAT],(0)))+isnull([TOT_SMAHAT]*-1,(0)))+isnull([TOT_INCOME],(0)))-isnull([TOT_EXPENSES],(0)))
) ON [PRIMARY]
 COMMIT TRANSACTION
 
     --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''IS_TAX'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [IS_TAX] BIT NULL
  ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_IS_TAX]  DEFAULT ((0)) FOR [IS_TAX]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_SALES_DETAILS] SET [IS_TAX]=0 WHERE IS_TAX IS NULL '')
 END    
       --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''TAX_PERCENT_ITEM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [TAX_PERCENT_ITEM] FLOAT NULL
  ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_TAX_PERCENT_ITEM]  DEFAULT ((0)) FOR [TAX_PERCENT_ITEM]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_SALES_DETAILS] SET [TAX_PERCENT_ITEM]=0 WHERE TAX_PERCENT_ITEM IS NULL '')
 END    
          --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''TAX_AMO_ITEM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [TAX_AMO_ITEM] FLOAT NULL
  ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_TAX_AMO_ITEM]  DEFAULT ((0)) FOR [TAX_AMO_ITEM]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_SALES_DETAILS] SET [TAX_AMO_ITEM]=0 WHERE TAX_AMO_ITEM IS NULL '')
 END    
      --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''IS_MANDOOB'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [IS_MANDOOB] BIT NULL
  ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_IS_MANDOOB]  DEFAULT ((0)) FOR [IS_MANDOOB]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_SALES_DETAILS] SET [IS_MANDOOB]=0 WHERE IS_MANDOOB IS NULL '')
 END    
       --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''MANDOOB_PERCENT_ITEM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [MANDOOB_PERCENT_ITEM] FLOAT NULL
  ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_MANDOOB_PERCENT_ITEM]  DEFAULT ((0)) FOR [MANDOOB_PERCENT_ITEM]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_SALES_DETAILS] SET [MANDOOB_PERCENT_ITEM]=0 WHERE MANDOOB_PERCENT_ITEM IS NULL '')
 END    
          --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''MANDOOB_AMO_ITEM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [MANDOOB_AMO_ITEM] FLOAT NULL
  ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_MANDOOB_AMO_ITEM]  DEFAULT ((0)) FOR [MANDOOB_AMO_ITEM]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_SALES_DETAILS] SET [MANDOOB_AMO_ITEM]=0 WHERE MANDOOB_AMO_ITEM IS NULL '')
 END    





     --///////////////////////////////////////////////////////////////T_SALES_TEMP//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_TEMP'' AND [COLUMN_NAME] = N''IS_TAX'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_TEMP ADD [IS_TAX] BIT NULL
  ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_IS_TAX]  DEFAULT ((0)) FOR [IS_TAX]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_SALES_TEMP] SET [IS_TAX]=0 WHERE IS_TAX IS NULL '')
 END    
       --///////////////////////////////////////////////////////////////T_SALES_TEMP//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_TEMP'' AND [COLUMN_NAME] = N''TAX_PERCENT_ITEM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_TEMP ADD [TAX_PERCENT_ITEM] FLOAT NULL
  ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_TAX_PERCENT_ITEM]  DEFAULT ((0)) FOR [TAX_PERCENT_ITEM]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_SALES_TEMP] SET [TAX_PERCENT_ITEM]=0 WHERE TAX_PERCENT_ITEM IS NULL '')
 END    
          --///////////////////////////////////////////////////////////////T_SALES_TEMP//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_TEMP'' AND [COLUMN_NAME] = N''TAX_AMO_ITEM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_TEMP ADD [TAX_AMO_ITEM] FLOAT NULL
  ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_TAX_AMO_ITEM]  DEFAULT ((0)) FOR [TAX_AMO_ITEM]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_SALES_TEMP] SET [TAX_AMO_ITEM]=0 WHERE TAX_AMO_ITEM IS NULL '')
 END    

      --///////////////////////////////////////////////////////////////T_SALES_TEMP//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_TEMP'' AND [COLUMN_NAME] = N''IS_MANDOOB'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_TEMP ADD [IS_MANDOOB] BIT NULL
  ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_IS_MANDOOB]  DEFAULT ((0)) FOR [IS_MANDOOB]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_SALES_TEMP] SET [IS_MANDOOB]=0 WHERE IS_MANDOOB IS NULL '')
 END    
       --///////////////////////////////////////////////////////////////T_SALES_TEMP//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_TEMP'' AND [COLUMN_NAME] = N''MANDOOB_PERCENT_ITEM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_TEMP ADD [MANDOOB_PERCENT_ITEM] FLOAT NULL
  ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_MANDOOB_PERCENT_ITEM]  DEFAULT ((0)) FOR [MANDOOB_PERCENT_ITEM]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_SALES_TEMP] SET [MANDOOB_PERCENT_ITEM]=0 WHERE MANDOOB_PERCENT_ITEM IS NULL '')
 END    
          --///////////////////////////////////////////////////////////////T_SALES_TEMP//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_TEMP'' AND [COLUMN_NAME] = N''MANDOOB_AMO_ITEM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_TEMP ADD [MANDOOB_AMO_ITEM] FLOAT NULL
  ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_MANDOOB_AMO_ITEM]  DEFAULT ((0)) FOR [MANDOOB_AMO_ITEM]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_SALES_TEMP] SET [MANDOOB_AMO_ITEM]=0 WHERE MANDOOB_AMO_ITEM IS NULL '')
 END    


      --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''TOTAL_TAX_ITEM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [TOTAL_TAX_ITEM] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_TOTAL_TAX_ITEM]  DEFAULT ((0)) FOR [TOTAL_TAX_ITEM]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [TOTAL_TAX_ITEM]=0 WHERE TOTAL_TAX_ITEM IS NULL'')
END  


      --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''TOTAL_MANDOOB_ITEM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [TOTAL_MANDOOB_ITEM] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_TOTAL_MANDOOB_ITEM]  DEFAULT ((0)) FOR [TOTAL_MANDOOB_ITEM]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [TOTAL_MANDOOB_ITEM]=0 WHERE TOTAL_MANDOOB_ITEM IS NULL'')
END  


      --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''TOTAL_ADD_COST'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [TOTAL_ADD_COST] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_TOTAL_ADD_COST]  DEFAULT ((0)) FOR [TOTAL_ADD_COST]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [TOTAL_ADD_COST]=0 WHERE TOTAL_ADD_COST IS NULL'')
END  

      --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''TOTAL_ADD_AMO'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [TOTAL_ADD_AMO] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_TOTAL_ADD_AMO]  DEFAULT ((0)) FOR [TOTAL_ADD_AMO]

ALTER TABLE dbo.T_SALES  DROP COLUMN [TOTAL_ARBAH];
ALTER TABLE dbo.T_SALES  ADD [TOTAL_ARBAH]  AS (([NET_SALES]-[TOTAL_COST]-[TOTAL_ADD_COST]-[TOTAL_TAX_ITEM]-[TOTAL_MANDOOB_ITEM]));

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [TOTAL_ADD_AMO]=0 WHERE TOTAL_ADD_AMO IS NULL'')
END  
      --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''REGION_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [REGION_CODE] INT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_REGION_CODE]  DEFAULT ((0)) FOR [REGION_CODE]


COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [REGION_CODE]=0 WHERE REGION_CODE IS NULL'')
END 
      --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''SHIP_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [SHIP_CODE] INT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_SHIP_CODE]  DEFAULT ((0)) FOR [SHIP_CODE]


COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [SHIP_CODE]=0 WHERE SHIP_CODE IS NULL'')
END  
  --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''COST_SHIP'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [COST_SHIP] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_COST_SHIP]  DEFAULT ((0)) FOR [COST_SHIP]
 
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [COST_SHIP]=0 WHERE COST_SHIP IS NULL'')
END 
  --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''COST_SHIP_CLIENT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [COST_SHIP_CLIENT] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_COST_SHIP_CLIENT]  DEFAULT ((0)) FOR [COST_SHIP_CLIENT]
 
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [COST_SHIP_CLIENT]=0 WHERE COST_SHIP_CLIENT IS NULL'')
END 
 --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''IS_POINT'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [IS_POINT] INT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_IS_POINT]  DEFAULT ((0)) FOR [IS_POINT]


COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [IS_POINT]=0 WHERE IS_POINT IS NULL'')
END  


 --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''USER_TAG_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [USER_TAG_CODE] INT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_USER_TAG_CODE]  DEFAULT ((0)) FOR [USER_TAG_CODE]


COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [USER_TAG_CODE]=0 WHERE USER_TAG_CODE IS NULL'')
END  

 --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''RELATION_BILL_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [RELATION_BILL_CODE] INT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_RELATION_BILL_CODE]  DEFAULT ((0)) FOR [RELATION_BILL_CODE]


COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [RELATION_BILL_CODE]=0 WHERE RELATION_BILL_CODE IS NULL'')
END  
 --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''RELATION_B_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [RELATION_B_CODE] INT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_RELATION_B_CODE]  DEFAULT ((0)) FOR [RELATION_B_CODE]


COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [RELATION_B_CODE]=0 WHERE RELATION_B_CODE IS NULL'')
END  

 --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''COL_INT1'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [COL_INT1] INT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_COL_INT1]  DEFAULT ((0)) FOR [COL_INT1]


COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [COL_INT1]=0 WHERE COL_INT1 IS NULL'')
END  
 --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''COL_INT2'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [COL_INT2] INT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_COL_INT2]  DEFAULT ((0)) FOR [COL_INT2]


COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [COL_INT2]=0 WHERE COL_INT2 IS NULL'')
END  
 --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''COL_INT3'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [COL_INT3] INT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_COL_INT3]  DEFAULT ((0)) FOR [COL_INT3]


COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        ELSE
BEGIN 

  EXEC(''UPDATE [T_SALES] SET [COL_INT3]=0 WHERE COL_INT3 IS NULL'')
END  

 --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''COL_STR1'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [COL_STR1] NVARCHAR(MAX) NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_COL_STR1]  DEFAULT (N'''') FOR [COL_STR1]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
        
 --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''COL_STR2'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [COL_STR2] NVARCHAR(MAX) NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_COL_STR2]  DEFAULT (N'''') FOR [COL_STR2]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
      
 --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////
   IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''COL_STR3'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [COL_STR3] NVARCHAR(MAX) NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_COL_STR3]  DEFAULT (N'''') FOR [COL_STR3]

COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
      
       --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''IS_PDF'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [IS_PDF] BIT NULL
  ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_IS_PDF]  DEFAULT ((0)) FOR [IS_PDF]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_SALES] SET [IS_PDF]=0 WHERE IS_PDF IS NULL '')
 END  
	   
       --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''PATH_PDF'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [PATH_PDF] NVARCHAR(MAX) NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_PATH_PDF]  DEFAULT (N'''') FOR [PATH_PDF]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_SALES] SET [PATH_PDF]=N'''''''' WHERE PATH_PDF IS NULL '')
 END  
	 
       --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''PATH_PDF_API'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [PATH_PDF_API] NVARCHAR(MAX) NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_PATH_PDF_API]  DEFAULT (N'''') FOR [PATH_PDF_API]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_SALES] SET [PATH_PDF_API]=N'''''''' WHERE PATH_PDF_API IS NULL '')
 END  
	
       --///////////////////////////////////////////////////////////////T_SALES//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES'' AND [COLUMN_NAME] = N''ZONE_CODE'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES ADD [ZONE_CODE] INT NULL
 ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_ZONE_CODE]  DEFAULT ((0)) FOR [ZONE_CODE]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_SALES] SET [ZONE_CODE]=0 WHERE ZONE_CODE IS NULL '')
 END  
		
	
	
	 
       --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////    
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''IS_ITEM_AREA'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [IS_ITEM_AREA] BIT NULL
  ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_IS_ITEM_AREA]  DEFAULT ((0)) FOR [IS_ITEM_AREA]

 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   ELSE
BEGIN 


 EXEC(''UPDATE [T_SALES_DETAILS] SET [IS_ITEM_AREA]=0 WHERE IS_ITEM_AREA IS NULL '')
 END  

--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''WIDTH_CM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [WIDTH_CM] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_WIDTH_CM]  DEFAULT ((0)) FOR [WIDTH_CM]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    ELSE
  BEGIN 

   EXEC(''UPDATE [T_SALES_DETAILS] SET [WIDTH_CM]=0 WHERE WIDTH_CM IS NULL '')
  END

--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''LENGTH_CM'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [LENGTH_CM] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_LENGTH_CM]  DEFAULT ((0)) FOR [LENGTH_CM]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
    
    ELSE
  BEGIN 

   EXEC(''UPDATE [T_SALES_DETAILS] SET [LENGTH_CM]=0 WHERE LENGTH_CM IS NULL '')
  END

--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''AREA_M2'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [AREA_M2] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_AREA_M2]  DEFAULT ((0)) FOR [AREA_M2]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [AREA_M2]=0 WHERE AREA_M2 IS NULL '')
  END

--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''QTY_AREA'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [QTY_AREA] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_QTY_AREA]  DEFAULT ((1)) FOR [QTY_AREA]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [QTY_AREA]=1 WHERE QTY_AREA IS NULL '')
  END

--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''QTY_XZ'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [QTY_XZ] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_QTY_XZ]  DEFAULT ((0)) FOR [QTY_XZ]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [QTY_XZ]=0 WHERE QTY_XZ IS NULL '')
  END
--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''UNIT_QTY_XZ'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [UNIT_QTY_XZ] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_UNIT_QTY_XZ]  DEFAULT ((1)) FOR [UNIT_QTY_XZ]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [UNIT_QTY_XZ]=1 WHERE UNIT_QTY_XZ IS NULL OR UNIT_QTY_XZ=0'')
  END
--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''QTY_X1'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [QTY_X1] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_QTY_X1]  DEFAULT ((0)) FOR [QTY_X1]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [QTY_X1]=0 WHERE QTY_X1 IS NULL '')
  END
  --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''UNIT_QTY_X1'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [UNIT_QTY_X1] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_UNIT_QTY_X1]  DEFAULT ((1)) FOR [UNIT_QTY_X1]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [UNIT_QTY_X1]=1 WHERE UNIT_QTY_X1 IS NULL OR UNIT_QTY_X1=0 '')
  END
  --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''QTY_XY'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [QTY_XY] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_QTY_XY]  DEFAULT ((0)) FOR [QTY_XY]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [QTY_XY]=0 WHERE QTY_XY IS NULL '')
  END
  --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''UNIT_QTY_XY'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [UNIT_QTY_XY] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_UNIT_QTY_XY]  DEFAULT ((1)) FOR [UNIT_QTY_XY]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [UNIT_QTY_XY]=1 WHERE UNIT_QTY_XY IS NULL OR UNIT_QTY_XY=0'')
  END


----اضافات جديدة

--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''NOTE_PRINT_2'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [NOTE_PRINT_2] nvarchar(MAX) NULL
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  

 --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''NOTE_PRINT_3'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [NOTE_PRINT_3] nvarchar(MAX) NULL
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''NOTE_PRINT_4'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [NOTE_PRINT_4] nvarchar(MAX) NULL
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  

  --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''NOTE_PRINT_5'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [NOTE_PRINT_5] nvarchar(MAX) NULL
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  

 

--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_STORE_ITEM_CODE'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_STORE_ITEM_CODE] INT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_STORE_ITEM_CODE]  DEFAULT ((0)) FOR [K_STORE_ITEM_CODE]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_STORE_ITEM_CODE]=0 WHERE K_STORE_ITEM_CODE IS NULL '')
  END

 
--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_STORE_COST'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_STORE_COST] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_STORE_COST]  DEFAULT ((0)) FOR [K_STORE_COST]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_STORE_COST]=0 WHERE K_STORE_COST IS NULL '')
  END

 
--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_STORE_SELL'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_STORE_SELL] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_STORE_SELL]  DEFAULT ((0)) FOR [K_STORE_SELL]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_STORE_SELL]=0 WHERE K_STORE_SELL IS NULL '')
  END

 --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_STORE_TOTAL'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_STORE_TOTAL] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_STORE_TOTAL]  DEFAULT ((0)) FOR [K_STORE_TOTAL]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_STORE_TOTAL]=0 WHERE K_STORE_TOTAL IS NULL '')
  END

 

--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_PRINT_ITEM_CODE'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_PRINT_ITEM_CODE] INT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_PRINT_ITEM_CODE]  DEFAULT ((0)) FOR [K_PRINT_ITEM_CODE]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_PRINT_ITEM_CODE]=0 WHERE K_PRINT_ITEM_CODE IS NULL '')
  END

 
--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_PRINT_COST'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_PRINT_COST] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_PRINT_COST]  DEFAULT ((0)) FOR [K_PRINT_COST]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_PRINT_COST]=0 WHERE K_PRINT_COST IS NULL '')
  END

 

--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_PRINT_SELL'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_PRINT_SELL] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_PRINT_SELL]  DEFAULT ((0)) FOR [K_PRINT_SELL]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_PRINT_SELL]=0 WHERE K_PRINT_SELL IS NULL '')
  END

 --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_PRINT_TOTAL'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_PRINT_TOTAL] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_PRINT_TOTAL]  DEFAULT ((0)) FOR [K_PRINT_TOTAL]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_PRINT_TOTAL]=0 WHERE K_PRINT_TOTAL IS NULL '')
  END

 

--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_MODEL_ITEM_CODE'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_MODEL_ITEM_CODE] INT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_MODEL_ITEM_CODE]  DEFAULT ((0)) FOR [K_MODEL_ITEM_CODE]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_MODEL_ITEM_CODE]=0 WHERE K_MODEL_ITEM_CODE IS NULL '')
  END

 

--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_MODEL_COST'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_MODEL_COST] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_MODEL_COST]  DEFAULT ((0)) FOR [K_MODEL_COST]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_MODEL_COST]=0 WHERE K_MODEL_COST IS NULL '')
  END

 
--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_MODEL_SELL'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_MODEL_SELL] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_MODEL_SELL]  DEFAULT ((0)) FOR [K_MODEL_SELL]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_MODEL_SELL]=0 WHERE K_MODEL_SELL IS NULL '')
  END

 --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_MODEL_TOTAL'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_MODEL_TOTAL] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_MODEL_TOTAL]  DEFAULT ((0)) FOR [K_MODEL_TOTAL]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_MODEL_TOTAL]=0 WHERE K_MODEL_TOTAL IS NULL '')
  END

   --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_MODEL_TOTAL_COST'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_MODEL_TOTAL_COST] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_MODEL_TOTAL_COST]  DEFAULT ((0)) FOR [K_MODEL_TOTAL_COST]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_MODEL_TOTAL_COST]=0 WHERE K_MODEL_TOTAL_COST IS NULL '')
  END

--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_MOTOR_ITEM_CODE'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_MOTOR_ITEM_CODE] INT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_MOTOR_ITEM_CODE]  DEFAULT ((0)) FOR [K_MOTOR_ITEM_CODE]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_MOTOR_ITEM_CODE]=0 WHERE K_MOTOR_ITEM_CODE IS NULL '')
  END

 
--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_MOTOR_COST'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_MOTOR_COST] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_MOTOR_COST]  DEFAULT ((0)) FOR [K_MOTOR_COST]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_MOTOR_COST]=0 WHERE K_MOTOR_COST IS NULL '')
  END

 
--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_MOTOR_SELL'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_MOTOR_SELL] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_MOTOR_SELL]  DEFAULT ((0)) FOR [K_MOTOR_SELL]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_MOTOR_SELL]=0 WHERE K_MOTOR_SELL IS NULL '')
  END

--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_MOTOR_TOTAL'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_MOTOR_TOTAL] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_MOTOR_TOTAL]  DEFAULT ((0)) FOR [K_MOTOR_TOTAL]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_MOTOR_TOTAL]=0 WHERE K_MOTOR_TOTAL IS NULL '')
  END
 
--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_HABEL_ITEM_CODE'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_HABEL_ITEM_CODE] INT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_HABEL_ITEM_CODE]  DEFAULT ((0)) FOR [K_HABEL_ITEM_CODE]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_HABEL_ITEM_CODE]=0 WHERE K_HABEL_ITEM_CODE IS NULL '')
  END

 
--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_HABEL_COST'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_HABEL_COST] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_HABEL_COST]  DEFAULT ((0)) FOR [K_HABEL_COST]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_HABEL_COST]=0 WHERE K_HABEL_COST IS NULL '')
  END

 
--///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_HABEL_SELL'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_HABEL_SELL] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_HABEL_SELL]  DEFAULT ((0)) FOR [K_HABEL_SELL]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_HABEL_SELL]=0 WHERE K_HABEL_SELL IS NULL '')
  END

 --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''K_HABEL_TOTAL'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [K_HABEL_TOTAL] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_HABEL_TOTAL]  DEFAULT ((0)) FOR [K_HABEL_TOTAL]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [K_HABEL_TOTAL]=0 WHERE K_HABEL_TOTAL IS NULL '')
  END


 --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''QTY_FREE'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [QTY_FREE] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_QTY_FREE]  DEFAULT ((0)) FOR [QTY_FREE]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [QTY_FREE]=0 WHERE QTY_FREE IS NULL '')
  END

 --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''TOTAL_QTY'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [TOTAL_QTY] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_TOTAL_QTY]  DEFAULT ((0)) FOR [TOTAL_QTY]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [TOTAL_QTY]=[QTY] WHERE TOTAL_QTY IS NULL  OR TOTAL_QTY=0'')
  END

 
 --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''IS_TRANS'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [IS_TRANS] BIT NULL
 ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_IS_TRANS]  DEFAULT ((0)) FOR [IS_TRANS]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [IS_TRANS]=0 WHERE IS_TRANS IS NULL  '')
  END

 --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''WAJBA_EXPIRED'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [WAJBA_EXPIRED] NVARCHAR(20) NULL
 
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [WAJBA_EXPIRED]=GETDATE() WHERE WAJBA_EXPIRED IS NULL  '')
  END

 --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''MANDOOB_CODE'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [MANDOOB_CODE] INT NULL
  ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_MANDOOB_CODE]  DEFAULT ((1)) FOR [MANDOOB_CODE]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [MANDOOB_CODE]=ISNULL((SELECT TOP(1) MANDOOB_CODE FROM T_SALES WHERE BILL_NUMBER=T_SALES_DETAILS.BILL_NUMBER),1) WHERE MANDOOB_CODE IS NULL  '')
  END
 --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''MANDOOB_CODE_FINISH'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [MANDOOB_CODE_FINISH] INT NULL
  ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_MANDOOB_CODE_FINISH]  DEFAULT ((1)) FOR [MANDOOB_CODE_FINISH]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [MANDOOB_CODE_FINISH]=ISNULL((SELECT TOP(1) MANDOOB_CODE FROM T_SALES WHERE BILL_NUMBER=T_SALES_DETAILS.BILL_NUMBER),1) WHERE MANDOOB_CODE_FINISH IS NULL  '')
  END
 --///////////////////////////////////////////////////////////////T_SALES_DETAILS//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_DETAILS'' AND [COLUMN_NAME] = N''TOTAL_POINTS'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_DETAILS ADD [TOTAL_POINTS] FLOAT NULL
  ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_TOTAL_POINTS]  DEFAULT ((0)) FOR [TOTAL_POINTS]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_DETAILS] SET [TOTAL_POINTS]=0 WHERE TOTAL_POINTS IS NULL  '')
  END

 --///////////////////////////////////////////////////////////////T_SALES_TEMP//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_TEMP'' AND [COLUMN_NAME] = N''QTY_FREE'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_TEMP ADD [QTY_FREE] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_QTY_FREE]  DEFAULT ((0)) FOR [QTY_FREE]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_TEMP] SET [QTY_FREE]=0 WHERE QTY_FREE IS NULL '')
  END

 --///////////////////////////////////////////////////////////////T_SALES_TEMP//////////////////////////////////////////////////////////////////////////////////////////////////////


IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_SALES_TEMP'' AND [COLUMN_NAME] = N''TOTAL_QTY'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_SALES_TEMP ADD [TOTAL_QTY] FLOAT NULL
 ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_TOTAL_QTY]  DEFAULT ((0)) FOR [TOTAL_QTY]
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_SALES_TEMP] SET [TOTAL_QTY]=[QTY] WHERE TOTAL_QTY IS NULL  OR TOTAL_QTY=0'')
  END

 --///////////////////////////////////////////////////////////////T_OFFER//////////////////////////////////////////////////////////////////////////////////////////////////////
 
IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_OFFER'' AND [COLUMN_NAME] = N''URL_IMAGE'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_OFFER ADD [URL_IMAGE] nvarchar(MAX) NULL
 
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
  


--///////////////////////////////////////////////////////////////T_OFFER//////////////////////////////////////////////////////////////////////////////////////////////////////
  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_OFFER'' AND [COLUMN_NAME] = N''TOTAL_QTY_CH1'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_OFFER ADD [TOTAL_QTY_CH1] float NULL
 ALTER TABLE [dbo].[T_OFFER] ADD  CONSTRAINT [DF_T_OFFER_TOTAL_QTY_CH1]  DEFAULT ((0)) FOR [TOTAL_QTY_CH1] 
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_OFFER] SET [TOTAL_QTY_CH1]=0 WHERE TOTAL_QTY_CH1 IS NULL '')
  END
--///////////////////////////////////////////////////////////////T_OFFER//////////////////////////////////////////////////////////////////////////////////////////////////////
  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_OFFER'' AND [COLUMN_NAME] = N''TOTAL_QTY_CH1_GEFT'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_OFFER ADD [TOTAL_QTY_CH1_GEFT] float NULL
 ALTER TABLE [dbo].[T_OFFER] ADD  CONSTRAINT [DF_T_OFFER_TOTAL_QTY_CH1_GEFT]  DEFAULT ((0)) FOR [TOTAL_QTY_CH1_GEFT] 
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_OFFER] SET [TOTAL_QTY_CH1_GEFT]=0 WHERE TOTAL_QTY_CH1_GEFT IS NULL '')
  END
  --///////////////////////////////////////////////////////////////T_OFFER//////////////////////////////////////////////////////////////////////////////////////////////////////
  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_OFFER'' AND [COLUMN_NAME] = N''TOTAL_QTY_CH2'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_OFFER ADD [TOTAL_QTY_CH2] float NULL
 ALTER TABLE [dbo].[T_OFFER] ADD  CONSTRAINT [DF_T_OFFER_TOTAL_QTY_CH2]  DEFAULT ((0)) FOR [TOTAL_QTY_CH2] 
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_OFFER] SET [TOTAL_QTY_CH2]=0 WHERE TOTAL_QTY_CH2 IS NULL '')
  END
  --///////////////////////////////////////////////////////////////T_OFFER//////////////////////////////////////////////////////////////////////////////////////////////////////
  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_OFFER'' AND [COLUMN_NAME] = N''TOTAL_QTY_CH2_GEFT'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_OFFER ADD [TOTAL_QTY_CH2_GEFT] float NULL
 ALTER TABLE [dbo].[T_OFFER] ADD  CONSTRAINT [DF_T_OFFER_TOTAL_QTY_CH2_GEFT]  DEFAULT ((0)) FOR [TOTAL_QTY_CH2_GEFT] 
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_OFFER] SET [TOTAL_QTY_CH2_GEFT]=0 WHERE TOTAL_QTY_CH2_GEFT IS NULL '')
  END

 --///////////////////////////////////////////////////////////////T_OFFER//////////////////////////////////////////////////////////////////////////////////////////////////////
  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_OFFER'' AND [COLUMN_NAME] = N''TOTAL_QTY_CH3'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_OFFER ADD [TOTAL_QTY_CH3] float NULL
 ALTER TABLE [dbo].[T_OFFER] ADD  CONSTRAINT [DF_T_OFFER_TOTAL_QTY_CH3]  DEFAULT ((0)) FOR [TOTAL_QTY_CH3] 
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_OFFER] SET [TOTAL_QTY_CH3]=0 WHERE TOTAL_QTY_CH3 IS NULL '')
  END
  --///////////////////////////////////////////////////////////////T_OFFER//////////////////////////////////////////////////////////////////////////////////////////////////////
  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_OFFER'' AND [COLUMN_NAME] = N''TOTAL_QTY_CH3_GEFT'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_OFFER ADD [TOTAL_QTY_CH3_GEFT] float NULL
 ALTER TABLE [dbo].[T_OFFER] ADD  CONSTRAINT [DF_T_OFFER_TOTAL_QTY_CH3_GEFT]  DEFAULT ((0)) FOR [TOTAL_QTY_CH3_GEFT] 
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_OFFER] SET [TOTAL_QTY_CH3_GEFT]=0 WHERE TOTAL_QTY_CH3_GEFT IS NULL '')
  END

  --///////////////////////////////////////////////////////////////T_OFFER//////////////////////////////////////////////////////////////////////////////////////////////////////
  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_OFFER'' AND [COLUMN_NAME] = N''TYPE_PRICE'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_OFFER ADD [TYPE_PRICE] INT NULL
 ALTER TABLE [dbo].[T_OFFER] ADD  CONSTRAINT [DF_T_OFFER_TYPE_PRICE]  DEFAULT ((0)) FOR [TYPE_PRICE] 
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_OFFER] SET [TYPE_PRICE]=0 WHERE TYPE_PRICE IS NULL '')
  END

  --///////////////////////////////////////////////////////////////T_OFFER//////////////////////////////////////////////////////////////////////////////////////////////////////
  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_OFFER'' AND [COLUMN_NAME] = N''TYPE_CH_CODE'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_OFFER ADD [TYPE_CH_CODE] INT NULL
 ALTER TABLE [dbo].[T_OFFER] ADD  CONSTRAINT [DF_T_OFFER_TYPE_CH_CODE]  DEFAULT ((0)) FOR [TYPE_CH_CODE] 
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_OFFER] SET [TYPE_CH_CODE]=0 WHERE TYPE_CH_CODE IS NULL '')
  END



  --///////////////////////////////////////////////////////////////T_STORE_TYPE//////////////////////////////////////////////////////////////////////////////////////////////////////
  IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_STORE_TYPE'' AND [COLUMN_NAME] = N''ID_BRANCH_DATA'')
BEGIN
--/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_STORE_TYPE ADD [ID_BRANCH_DATA] INT NULL
 ALTER TABLE [dbo].[T_STORE_TYPE] ADD  CONSTRAINT [DF_T_STORE_TYPE_ID_BRANCH_DATA]  DEFAULT ((0)) FOR [ID_BRANCH_DATA] 
COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
 END  
 ELSE
  BEGIN 
   EXEC(''UPDATE [T_STORE_TYPE] SET [ID_BRANCH_DATA]=0 WHERE ID_BRANCH_DATA IS NULL '')
  END




--///////////////////////////////////////////////////////////////T_ITEM_CATEGORY_RATING//////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = N''T_ITEM_CATEGORY_RATING'' AND [COLUMN_NAME] = N''CATEGORY_RATING_CODE_CATEGORY_MULTI'')
BEGIN
  --/////////***** 
 SET XACT_ABORT ON     
BEGIN TRANSACTION
 ALTER TABLE T_ITEM_CATEGORY_RATING ADD [CATEGORY_RATING_CODE_CATEGORY_MULTI] NVARCHAR(MAX) NULL
 COMMIT TRANSACTION
SET XACT_ABORT OFF 
 --/////////***** 
  END  
   
IF NOT EXISTS(SELECT ID FROM T_DATE_REPORT_DEBIT WHERE ID=1) 
BEGIN
INSERT INTO T_DATE_REPORT_DEBIT VALUES(1,GETDATE())
END
EXEC(''UPDATE [T_ACCOUNTS] SET [TYPE_ACCOUNT_CODE]=ISNULL((SELECT TOP (1) CLIENT_TYPE     FROM T_CLIENT WHERE ACCOUNT_CODE=T_ACCOUNTS.ACCOUNT_CODE),0) WHERE TYPE_ACCOUNT_CODE >20'')
EXEC(''UPDATE T_ACCOUNTS SET TYPE_ACCOUNT_CODE=0 WHERE ACCOUNT_PARENT<20 AND TYPE_ACCOUNT_CODE<>0'')

EXEC(''UPDATE T_CLIENT SET CLIENT_PHONE_SMS=CLIENT_PHONE WHERE CLIENT_PHONE_SMS <> CLIENT_PHONE'')

UPDATE T_SALES_DETAILS set WAJBA_CODE=BILL_BUY where WAJBA_CODE <> BILL_BUY

UPDATE T_TYPE_PRICE_SELL SET COL_NAME=N''PRICE_SALE_1'',SECURETY_CODE=1 WHERE TYPE_PRICE_CODE=1
UPDATE T_TYPE_PRICE_SELL SET COL_NAME=N''PRICE_SALE_2'',SECURETY_CODE=1 WHERE TYPE_PRICE_CODE=2
UPDATE T_TYPE_PRICE_SELL SET COL_NAME=N''PRICE_SALE_3'',SECURETY_CODE=1 WHERE TYPE_PRICE_CODE=3
UPDATE T_TYPE_PRICE_SELL SET COL_NAME=N''PRICE_BUY'' ,SECURETY_CODE=2 WHERE TYPE_PRICE_CODE=4
UPDATE T_TYPE_PRICE_SELL SET COL_NAME=N''PRICE_COST'',SECURETY_CODE=2 WHERE TYPE_PRICE_CODE=5
UPDATE T_TYPE_PRICE_SELL SET COL_NAME=N''AVG_BUY'',SECURETY_CODE=2 WHERE TYPE_PRICE_CODE=6
UPDATE T_TYPE_PRICE_SELL SET COL_NAME=N''PRICE_SALE_CUR'',SECURETY_CODE=3 WHERE TYPE_PRICE_CODE=7
UPDATE T_TYPE_PRICE_SELL SET COL_NAME=N''WAJBA'',SECURETY_CODE=2 WHERE TYPE_PRICE_CODE=8
UPDATE T_TYPE_PRICE_SELL SET COL_NAME=N''PRICE_AVG_COST'',SECURETY_CODE=2 WHERE TYPE_PRICE_CODE=9

UPDATE T_ITEMS SET COST=0,SELL=0,SELL_G=0,SELL_W=0,SELL2=0,SELL2_G=0,SELL2_W=0,SELL_CNY=0 WHERE ITEM_CODE<=0 
UPDATE T_CLIENT SET MANDOOB_CODE=1 WHERE MANDOOB_CODE=0
UPDATE T_BOX SET MOVE_CODE=0 WHERE MOVE_CODE IS NULL
UPDATE T_REPORT SET RPT_PATH=N''SALES_INVOICE'' WHERE ID BETWEEN 999 AND 1299 AND RPT_PATH NOT LIKE N''SALES_INVOICE''
UPDATE T_SALES SET MANDOOB_CODE=1 WHERE MANDOOB_CODE=0
delete from T_REPORT where ID=1111
update T_ITEM_UNIT set PRICE_AVG_COST=0 where PRICE_AVG_COST is NULL

EXEC (''[P_CHECK_EXIST_INDEX_DELETE]'');

update T_BUY_DETAILS set EXP_DATE=GETDATE() where EXP_DATE is NULL
ALTER TABLE T_FACTORY ALTER COLUMN ITEM_CODE INT; 
ALTER TABLE T_AKSAT_ITEMS ALTER COLUMN QTY_AKSAT FLOAT; 

--ALTER TABLE T_SANAD_CNY ALTER COLUMN CURRANCR_BUY decimal(18, 5)NOT NULL; 
--ALTER TABLE T_SANAD_CNY ALTER COLUMN DISCOUNT_PERC decimal(18, 5)NOT NULL; 

ALTER TABLE T_BUY_DETAILS ALTER COLUMN EXP_DATE DATE; 
 ALTER TABLE T_BUY_DETAILS ALTER COLUMN ITEM_CODE INT; 
ALTER TABLE T_STORE_TRANSFARE_DETAILS ALTER COLUMN ITEM_CODE INT; 
 
 UPDATE T_ITEM_BARCODE SET ITEM_BARCODE = LEFT(ITEM_BARCODE, 50) WHERE LEN(ITEM_BARCODE) > 50;
 UPDATE T_ITEMS SET ITEM_BARCODE = LEFT(ITEM_BARCODE, 50) WHERE LEN(ITEM_BARCODE) > 50;

ALTER TABLE T_ITEM_BARCODE ALTER COLUMN ITEM_BARCODE NVARCHAR(50); 
ALTER TABLE T_ITEM_BARCODE ALTER COLUMN UNIT_NAME NVARCHAR(50);
ALTER TABLE T_ITEM_UNIT ALTER COLUMN UNIT_NAME NVARCHAR(50); 
ALTER TABLE T_STORE_BOX ALTER COLUMN BILL_BRANCH NVARCHAR(50); 

ALTER TABLE T_SALES_DETAILS
ALTER COLUMN BILL_BRANCH NVARCHAR(50);
ALTER TABLE T_SALES_TEMP
ALTER COLUMN BILL_BRANCH NVARCHAR(50);
ALTER TABLE TA_STUDENT_ENTRY
ALTER COLUMN E_DATE DATETIME;

UPDATE T_BUY_DETAILS SET QTY_IN=(QTY+QTY_OUT) WHERE QTY_IN<>(QTY+QTY_OUT)
UPDATE T_ITEMS SET CATEGORY_CODE=0 WHERE ITEM_CODE<=0

delete from T_TELE_SYNC where ACTIVE=0

EXEC (''[P_CHECK_INSERT_COLUMNS]'');
EXEC (''[P_CHECK_NAME_SPACE_UPDATE]'');
EXEC (''[P_CHECK_EXIST_INDEX]'');
EXEC (''[P_CHECK_FIX_ERROR_T_STORE_BOX_SALES_DETAILS]'');

	SET @SUBMIT_FLAG=1
	
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_CHECK_EXIST_INDEX]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_CHECK_EXIST_INDEX]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE PROCEDURE [dbo].[P_CHECK_EXIST_INDEX]

	
 
AS
BEGIN
 
 DECLARE @SQL NVARCHAR(MAX) = '''';
SELECT @SQL += ''DROP INDEX ['' + i.name + ''] ON ['' + SCHEMA_NAME(t.schema_id) + ''].['' + t.name + ''];'' + CHAR(13)
FROM sys.indexes i
JOIN sys.tables t ON i.object_id = t.object_id
WHERE i.is_primary_key = 0
  AND i.is_unique_constraint = 0
  AND i.type_desc IN (''NONCLUSTERED'', ''CLUSTERED'');

PRINT @SQL;
-- لتطبيق الحذف فعلياً:
  EXEC sp_executesql @SQL;

-------------------------------------------------------------------------------
--- مثال: فهرس على جدول T_SALES
-------------------------------------------------------------------------------


/****** Object:  Index [IDX_T_ACCOUNTS_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_ACCOUNTS]'') AND name = N''IDX_T_ACCOUNTS_CODE'')
CREATE UNIQUE NONCLUSTERED INDEX [IDX_T_ACCOUNTS_CODE] ON [dbo].[T_ACCOUNTS]
(
	[ACCOUNT_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_ACCOUNTS_L3_ACTIVE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_ACCOUNTS]'') AND name = N''IDX_T_ACCOUNTS_L3_ACTIVE'')
CREATE NONCLUSTERED INDEX [IDX_T_ACCOUNTS_L3_ACTIVE] ON [dbo].[T_ACCOUNTS]
(
	[ACCOUNT_LEVEL] ASC,
	[ACCOUNT_ACTIVE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_ACCOUNTS_TYPE_ACCOUNT_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_ACCOUNTS]'') AND name = N''IX_T_ACCOUNTS_TYPE_ACCOUNT_CODE'')
CREATE NONCLUSTERED INDEX [IX_T_ACCOUNTS_TYPE_ACCOUNT_CODE] ON [dbo].[T_ACCOUNTS]
(
	[TYPE_ACCOUNT_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_AKSAT_ACCOUNT_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_AKSAT]'') AND name = N''IDX_T_AKSAT_ACCOUNT_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_AKSAT_ACCOUNT_CODE] ON [dbo].[T_AKSAT]
(
	[ACCOUNT_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_AKSAT_B_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_AKSAT]'') AND name = N''IDX_T_AKSAT_B_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_AKSAT_B_CODE] ON [dbo].[T_AKSAT]
(
	[B_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_AKSAT_BILL_NUMBER]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_AKSAT]'') AND name = N''IDX_T_AKSAT_BILL_NUMBER'')
CREATE NONCLUSTERED INDEX [IDX_T_AKSAT_BILL_NUMBER] ON [dbo].[T_AKSAT]
(
	[BILL_NUMBER] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_AKSAT_CASH_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_AKSAT]'') AND name = N''IDX_T_AKSAT_CASH_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_AKSAT_CASH_CODE] ON [dbo].[T_AKSAT]
(
	[CASH_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_AKSAT_CURRANCY_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_AKSAT]'') AND name = N''IDX_T_AKSAT_CURRANCY_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_AKSAT_CURRANCY_CODE] ON [dbo].[T_AKSAT]
(
	[CURRANCY_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_AKSAT_KAFEL_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_AKSAT]'') AND name = N''IDX_T_AKSAT_KAFEL_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_AKSAT_KAFEL_CODE] ON [dbo].[T_AKSAT]
(
	[KAFEL_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_AKSAT_T_ID]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_AKSAT]'') AND name = N''IDX_T_AKSAT_T_ID'')
CREATE UNIQUE NONCLUSTERED INDEX [IDX_T_AKSAT_T_ID] ON [dbo].[T_AKSAT]
(
	[T_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_AKSAT_USER_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_AKSAT]'') AND name = N''IDX_T_AKSAT_USER_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_AKSAT_USER_CODE] ON [dbo].[T_AKSAT]
(
	[USER_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_BILL_TYPE_B_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_BILL_TYPE]'') AND name = N''IDX_T_BILL_TYPE_B_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_BILL_TYPE_B_CODE] ON [dbo].[T_BILL_TYPE]
(
	[B_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_BOX_ACCOUNT_DATE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_BOX]'') AND name = N''IDX_T_BOX_ACCOUNT_DATE'')
CREATE NONCLUSTERED INDEX [IDX_T_BOX_ACCOUNT_DATE] ON [dbo].[T_BOX]
(
	[ACCOUNT_CODE] ASC,
	[BILL_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
SET ARITHABORT ON
SET CONCAT_NULL_YIELDS_NULL ON
SET QUOTED_IDENTIFIER ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
SET NUMERIC_ROUNDABORT OFF

 
/****** Object:  Index [IDX_T_BOX_ACTIVE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_BOX]'') AND name = N''IDX_T_BOX_ACTIVE'')
CREATE NONCLUSTERED INDEX [IDX_T_BOX_ACTIVE] ON [dbo].[T_BOX]
(
	[ACTIVE] ASC
)
INCLUDE ( 	[ACCOUNT_CODE],
	[BILL_DATE],
	[DEBIT],
	[CREDIT],
	[DEBIT_IQ],
	[CREDIT_IQ],
	[DEBIT_CUR],
	[CREDIT_CUR],
	[B_CODE],
	[T_ID_BOX]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_BOX_B_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_BOX]'') AND name = N''IDX_T_BOX_B_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_BOX_B_CODE] ON [dbo].[T_BOX]
(
	[B_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_BOX_DATE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_BOX]'') AND name = N''IDX_T_BOX_DATE'')
CREATE NONCLUSTERED INDEX [IDX_T_BOX_DATE] ON [dbo].[T_BOX]
(
	[BILL_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_BOX_ACCOUNT_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_BOX]'') AND name = N''IX_T_BOX_ACCOUNT_CODE'')
CREATE NONCLUSTERED INDEX [IX_T_BOX_ACCOUNT_CODE] ON [dbo].[T_BOX]
(
	[ACCOUNT_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_BOX_ACTIVE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_BOX]'') AND name = N''IX_T_BOX_ACTIVE'')
CREATE NONCLUSTERED INDEX [IX_T_BOX_ACTIVE] ON [dbo].[T_BOX]
(
	[ACTIVE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_BOX_B_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_BOX]'') AND name = N''IX_T_BOX_B_CODE'')
CREATE NONCLUSTERED INDEX [IX_T_BOX_B_CODE] ON [dbo].[T_BOX]
(
	[B_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_BOX_BILL_DATE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_BOX]'') AND name = N''IX_T_BOX_BILL_DATE'')
CREATE NONCLUSTERED INDEX [IX_T_BOX_BILL_DATE] ON [dbo].[T_BOX]
(
	[BILL_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_BOX_BILL_NUMBER]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_BOX]'') AND name = N''IX_T_BOX_BILL_NUMBER'')
CREATE NONCLUSTERED INDEX [IX_T_BOX_BILL_NUMBER] ON [dbo].[T_BOX]
(
	[BILL_NUMBER] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_BUY_ACTIVE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_BUY]'') AND name = N''IX_T_BUY_ACTIVE'')
CREATE NONCLUSTERED INDEX [IX_T_BUY_ACTIVE] ON [dbo].[T_BUY]
(
	[ACTIVE] ASC,
	[IVC_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_BUY_BILL_NUMBER]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_BUY]'') AND name = N''IX_T_BUY_BILL_NUMBER'')
CREATE NONCLUSTERED INDEX [IX_T_BUY_BILL_NUMBER] ON [dbo].[T_BUY]
(
	[BILL_NUMBER] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_BUY_CLIENT_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_BUY]'') AND name = N''IX_T_BUY_CLIENT_CODE'')
CREATE NONCLUSTERED INDEX [IX_T_BUY_CLIENT_CODE] ON [dbo].[T_BUY]
(
	[CLIENT_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_BUY_DETAILS_ACTIVE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_BUY_DETAILS]'') AND name = N''IX_T_BUY_DETAILS_ACTIVE'')
CREATE NONCLUSTERED INDEX [IX_T_BUY_DETAILS_ACTIVE] ON [dbo].[T_BUY_DETAILS]
(
	[ACTIVE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_BUY_DETAILS_BILL_NUMBER]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_BUY_DETAILS]'') AND name = N''IX_T_BUY_DETAILS_BILL_NUMBER'')
CREATE NONCLUSTERED INDEX [IX_T_BUY_DETAILS_BILL_NUMBER] ON [dbo].[T_BUY_DETAILS]
(
	[BILL_NUMBER] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_BUY_DETAILS_ITEM_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_BUY_DETAILS]'') AND name = N''IX_T_BUY_DETAILS_ITEM_CODE'')
CREATE NONCLUSTERED INDEX [IX_T_BUY_DETAILS_ITEM_CODE] ON [dbo].[T_BUY_DETAILS]
(
	[ITEM_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_CASH_STATE_CASH_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_CASH_STATE]'') AND name = N''IDX_T_CASH_STATE_CASH_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_CASH_STATE_CASH_CODE] ON [dbo].[T_CASH_STATE]
(
	[CASH_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_CLIENT_ACCOUNT_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_CLIENT]'') AND name = N''IDX_T_CLIENT_ACCOUNT_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_CLIENT_ACCOUNT_CODE] ON [dbo].[T_CLIENT]
(
	[ACCOUNT_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_CLIENT_ACTIVE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_CLIENT]'') AND name = N''IDX_T_CLIENT_ACTIVE'')
CREATE NONCLUSTERED INDEX [IDX_T_CLIENT_ACTIVE] ON [dbo].[T_CLIENT]
(
	[CLIENT_ACTIVE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_CLIENT_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_CLIENT]'') AND name = N''IDX_T_CLIENT_CODE'')
CREATE UNIQUE NONCLUSTERED INDEX [IDX_T_CLIENT_CODE] ON [dbo].[T_CLIENT]
(
	[CLIENT_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_CLIENT_TYPE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_CLIENT]'') AND name = N''IDX_T_CLIENT_TYPE'')
CREATE NONCLUSTERED INDEX [IDX_T_CLIENT_TYPE] ON [dbo].[T_CLIENT]
(
	[CLIENT_TYPE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_CLIENT_MANDOOB_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_CLIENT]'') AND name = N''IX_T_CLIENT_MANDOOB_CODE'')
CREATE NONCLUSTERED INDEX [IX_T_CLIENT_MANDOOB_CODE] ON [dbo].[T_CLIENT]
(
	[MANDOOB_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_CURRANCY_CURRANCY_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_CURRANNCY]'') AND name = N''IDX_T_CURRANCY_CURRANCY_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_CURRANCY_CURRANCY_CODE] ON [dbo].[T_CURRANNCY]
(
	[CURRANCY_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
SET ANSI_PADDING ON

 
/****** Object:  Index [IDX_T_ITEM_BARCODE_BARCODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_ITEM_BARCODE]'') AND name = N''IDX_T_ITEM_BARCODE_BARCODE'')
CREATE NONCLUSTERED INDEX [IDX_T_ITEM_BARCODE_BARCODE] ON [dbo].[T_ITEM_BARCODE]
(
	[ITEM_BARCODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_ITEM_CATEGORY_CATEGORY_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_ITEM_CATEGORY]'') AND name = N''IDX_T_ITEM_CATEGORY_CATEGORY_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_ITEM_CATEGORY_CATEGORY_CODE] ON [dbo].[T_ITEM_CATEGORY]
(
	[CATEGORY_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_ITEM_CATEGORY_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_ITEM_CATEGORY]'') AND name = N''IDX_T_ITEM_CATEGORY_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_ITEM_CATEGORY_CODE] ON [dbo].[T_ITEM_CATEGORY]
(
	[CATEGORY_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_ITEM_TYPE_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_ITEM_TYPE]'') AND name = N''IDX_T_ITEM_TYPE_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_ITEM_TYPE_CODE] ON [dbo].[T_ITEM_TYPE]
(
	[TYPE_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_ITEM_TYPE_TYPE_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_ITEM_TYPE]'') AND name = N''IDX_T_ITEM_TYPE_TYPE_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_ITEM_TYPE_TYPE_CODE] ON [dbo].[T_ITEM_TYPE]
(
	[TYPE_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_ITEM_UNIT_ITEM]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_ITEM_UNIT]'') AND name = N''IDX_T_ITEM_UNIT_ITEM'')
CREATE NONCLUSTERED INDEX [IDX_T_ITEM_UNIT_ITEM] ON [dbo].[T_ITEM_UNIT]
(
	[ITEM_CODE] ASC,
	[UNIT_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
SET ANSI_PADDING ON

 
/****** Object:  Index [IDX_T_ITEM_UNIT_ITEM_UNITNAME]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_ITEM_UNIT]'') AND name = N''IDX_T_ITEM_UNIT_ITEM_UNITNAME'')
CREATE NONCLUSTERED INDEX [IDX_T_ITEM_UNIT_ITEM_UNITNAME] ON [dbo].[T_ITEM_UNIT]
(
	[ITEM_CODE] ASC,
	[UNIT_NAME] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_ITEMS_CATEGORY]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_ITEMS]'') AND name = N''IDX_T_ITEMS_CATEGORY'')
CREATE NONCLUSTERED INDEX [IDX_T_ITEMS_CATEGORY] ON [dbo].[T_ITEMS]
(
	[CATEGORY_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_ITEMS_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_ITEMS]'') AND name = N''IDX_T_ITEMS_CODE'')
CREATE UNIQUE NONCLUSTERED INDEX [IDX_T_ITEMS_CODE] ON [dbo].[T_ITEMS]
(
	[ITEM_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_ITEMS_ITEM_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_ITEMS]'') AND name = N''IDX_T_ITEMS_ITEM_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_ITEMS_ITEM_CODE] ON [dbo].[T_ITEMS]
(
	[ITEM_CODE] ASC,
	[TYPE_CODE] ASC,
	[CATEGORY_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_ITEMS_ITEM_CODE_TYPE_CODE_CATEGORY_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_ITEMS]'') AND name = N''IDX_T_ITEMS_ITEM_CODE_TYPE_CODE_CATEGORY_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_ITEMS_ITEM_CODE_TYPE_CODE_CATEGORY_CODE] ON [dbo].[T_ITEMS]
(
	[ITEM_CODE] ASC,
	[TYPE_CODE] ASC,
	[CATEGORY_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_ITEMS_CATEGORY_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_ITEMS]'') AND name = N''IX_T_ITEMS_CATEGORY_CODE'')
CREATE NONCLUSTERED INDEX [IX_T_ITEMS_CATEGORY_CODE] ON [dbo].[T_ITEMS]
(
	[CATEGORY_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_IVC_TYPE_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_IVC_TYPE]'') AND name = N''IDX_T_IVC_TYPE_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_IVC_TYPE_CODE] ON [dbo].[T_IVC_TYPE]
(
	[IVC_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_IVC_TYPE_IVC_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_IVC_TYPE]'') AND name = N''IDX_T_IVC_TYPE_IVC_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_IVC_TYPE_IVC_CODE] ON [dbo].[T_IVC_TYPE]
(
	[IVC_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_KAFEL_KAFEL_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_KAFEL]'') AND name = N''IDX_T_KAFEL_KAFEL_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_KAFEL_KAFEL_CODE] ON [dbo].[T_KAFEL]
(
	[KAFEL_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_MANDOOB_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_MANDOOB]'') AND name = N''IDX_T_MANDOOB_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_MANDOOB_CODE] ON [dbo].[T_MANDOOB]
(
	[MANDOOB_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_MANDOOB_MANDOOB_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_MANDOOB]'') AND name = N''IDX_T_MANDOOB_MANDOOB_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_MANDOOB_MANDOOB_CODE] ON [dbo].[T_MANDOOB]
(
	[MANDOOB_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_NOTES_ISDONE_REMAINDERDATE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_NOTES]'') AND name = N''IX_T_NOTES_ISDONE_REMAINDERDATE'')
CREATE NONCLUSTERED INDEX [IX_T_NOTES_ISDONE_REMAINDERDATE] ON [dbo].[T_NOTES]
(
	[IS_DONE] ASC,
	[REMAINDER_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_SALES_ACTIVE_IVC]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_SALES]'') AND name = N''IDX_T_SALES_ACTIVE_IVC'')
CREATE NONCLUSTERED INDEX [IDX_T_SALES_ACTIVE_IVC] ON [dbo].[T_SALES]
(
	[ACTIVE] ASC,
	[IVC_CODE] ASC,
	[BILL_NUMBER] ASC,
	[MANDOOB_CODE] ASC,
	[CLIENT_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_SALES_BILL_NUMBER]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_SALES]'') AND name = N''IDX_T_SALES_BILL_NUMBER'')
CREATE NONCLUSTERED INDEX [IDX_T_SALES_BILL_NUMBER] ON [dbo].[T_SALES]
(
	[BILL_NUMBER] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_SALES_FAST]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_SALES]'') AND name = N''IDX_T_SALES_FAST'')
CREATE NONCLUSTERED INDEX [IDX_T_SALES_FAST] ON [dbo].[T_SALES]
(
	[ACTIVE] ASC,
	[IVC_CODE] ASC,
	[BILL_NUMBER] ASC,
	[MANDOOB_CODE] ASC,
	[CLIENT_CODE] ASC,
	[BILL_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_SALES_ACTIVE_IVC]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_SALES]'') AND name = N''IX_T_SALES_ACTIVE_IVC'')
CREATE NONCLUSTERED INDEX [IX_T_SALES_ACTIVE_IVC] ON [dbo].[T_SALES]
(
	[ACTIVE] ASC,
	[IVC_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
SET ANSI_PADDING ON

 
/****** Object:  Index [IX_T_SALES_BILL_BRANCH]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_SALES]'') AND name = N''IX_T_SALES_BILL_BRANCH'')
CREATE NONCLUSTERED INDEX [IX_T_SALES_BILL_BRANCH] ON [dbo].[T_SALES]
(
	[BILL_BRANCH] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_SALES_BILL_DATE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_SALES]'') AND name = N''IX_T_SALES_BILL_DATE'')
CREATE NONCLUSTERED INDEX [IX_T_SALES_BILL_DATE] ON [dbo].[T_SALES]
(
	[BILL_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_SALES_BILL_NUMBER]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_SALES]'') AND name = N''IX_T_SALES_BILL_NUMBER'')
CREATE NONCLUSTERED INDEX [IX_T_SALES_BILL_NUMBER] ON [dbo].[T_SALES]
(
	[BILL_NUMBER] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_SALES_CLIENT_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_SALES]'') AND name = N''IX_T_SALES_CLIENT_CODE'')
CREATE NONCLUSTERED INDEX [IX_T_SALES_CLIENT_CODE] ON [dbo].[T_SALES]
(
	[CLIENT_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_SALES_DETAILS_BILL_NUMBER_ITEM_CODE_STORE_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_SALES_DETAILS]'') AND name = N''IDX_T_SALES_DETAILS_BILL_NUMBER_ITEM_CODE_STORE_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_SALES_DETAILS_BILL_NUMBER_ITEM_CODE_STORE_CODE] ON [dbo].[T_SALES_DETAILS]
(
	[BILL_NUMBER] ASC,
	[ITEM_CODE] ASC,
	[STORE_CODE] ASC,
	[CURRANCY_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
SET ANSI_PADDING ON

 
/****** Object:  Index [IDX_T_SALES_DETAILS_BRANCH]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_SALES_DETAILS]'') AND name = N''IDX_T_SALES_DETAILS_BRANCH'')
CREATE NONCLUSTERED INDEX [IDX_T_SALES_DETAILS_BRANCH] ON [dbo].[T_SALES_DETAILS]
(
	[BILL_BRANCH] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
SET ANSI_PADDING ON

 
/****** Object:  Index [IDX_T_SALES_DETAILS_BRANCH_ITEM]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_SALES_DETAILS]'') AND name = N''IDX_T_SALES_DETAILS_BRANCH_ITEM'')
CREATE NONCLUSTERED INDEX [IDX_T_SALES_DETAILS_BRANCH_ITEM] ON [dbo].[T_SALES_DETAILS]
(
	[BILL_BRANCH] ASC,
	[ITEM_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_SALES_DETAILS_FAST]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_SALES_DETAILS]'') AND name = N''IDX_T_SALES_DETAILS_FAST'')
CREATE NONCLUSTERED INDEX [IDX_T_SALES_DETAILS_FAST] ON [dbo].[T_SALES_DETAILS]
(
	[BILL_NUMBER] ASC,
	[ITEM_CODE] ASC,
	[STORE_CODE] ASC,
	[CURRANCY_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_SALES_DETAILS_ACTIVE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_SALES_DETAILS]'') AND name = N''IX_T_SALES_DETAILS_ACTIVE'')
CREATE NONCLUSTERED INDEX [IX_T_SALES_DETAILS_ACTIVE] ON [dbo].[T_SALES_DETAILS]
(
	[ACTIVE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
SET ANSI_PADDING ON

 
/****** Object:  Index [IX_T_SALES_DETAILS_BILL_BRANCH]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_SALES_DETAILS]'') AND name = N''IX_T_SALES_DETAILS_BILL_BRANCH'')
CREATE NONCLUSTERED INDEX [IX_T_SALES_DETAILS_BILL_BRANCH] ON [dbo].[T_SALES_DETAILS]
(
	[BILL_BRANCH] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_SALES_DETAILS_BILL_NUMBER]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_SALES_DETAILS]'') AND name = N''IX_T_SALES_DETAILS_BILL_NUMBER'')
CREATE NONCLUSTERED INDEX [IX_T_SALES_DETAILS_BILL_NUMBER] ON [dbo].[T_SALES_DETAILS]
(
	[BILL_NUMBER] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_SALES_DETAILS_ITEM_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_SALES_DETAILS]'') AND name = N''IX_T_SALES_DETAILS_ITEM_CODE'')
CREATE NONCLUSTERED INDEX [IX_T_SALES_DETAILS_ITEM_CODE] ON [dbo].[T_SALES_DETAILS]
(
	[ITEM_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
SET ANSI_PADDING ON

 
/****** Object:  Index [IDX_T_SALES_TEMP_BILL_BRANCH_BILL_NUMBER]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_SALES_TEMP]'') AND name = N''IDX_T_SALES_TEMP_BILL_BRANCH_BILL_NUMBER'')
CREATE NONCLUSTERED INDEX [IDX_T_SALES_TEMP_BILL_BRANCH_BILL_NUMBER] ON [dbo].[T_SALES_TEMP]
(
	[BILL_BRANCH] ASC,
	[BILL_NUMBER] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
SET ANSI_PADDING ON

 
/****** Object:  Index [IDX_T_SALES_TEMP_BRANCH]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_SALES_TEMP]'') AND name = N''IDX_T_SALES_TEMP_BRANCH'')
CREATE NONCLUSTERED INDEX [IDX_T_SALES_TEMP_BRANCH] ON [dbo].[T_SALES_TEMP]
(
	[BILL_BRANCH] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
SET ANSI_PADDING ON

 
/****** Object:  Index [IDX_T_STORE_BOX_BRANCH_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_STORE_BOX]'') AND name = N''IDX_T_STORE_BOX_BRANCH_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_STORE_BOX_BRANCH_CODE] ON [dbo].[T_STORE_BOX]
(
	[BILL_BRANCH] ASC,
	[B_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_STORE_BOX_MAIN]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_STORE_BOX]'') AND name = N''IDX_T_STORE_BOX_MAIN'')
CREATE NONCLUSTERED INDEX [IDX_T_STORE_BOX_MAIN] ON [dbo].[T_STORE_BOX]
(
	[ITEM_CODE] ASC,
	[UNIT_CODE] ASC,
	[STORE_CODE] ASC,
	[ACTIVE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_STORE_BOX_ACTIVE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_STORE_BOX]'') AND name = N''IX_T_STORE_BOX_ACTIVE'')
CREATE NONCLUSTERED INDEX [IX_T_STORE_BOX_ACTIVE] ON [dbo].[T_STORE_BOX]
(
	[ACTIVE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_STORE_BOX_ITEM_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_STORE_BOX]'') AND name = N''IX_T_STORE_BOX_ITEM_CODE'')
CREATE NONCLUSTERED INDEX [IX_T_STORE_BOX_ITEM_CODE] ON [dbo].[T_STORE_BOX]
(
	[ITEM_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IX_T_STORE_BOX_STORE_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_STORE_BOX]'') AND name = N''IX_T_STORE_BOX_STORE_CODE'')
CREATE NONCLUSTERED INDEX [IX_T_STORE_BOX_STORE_CODE] ON [dbo].[T_STORE_BOX]
(
	[STORE_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_STORE_TYPE_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_STORE_TYPE]'') AND name = N''IDX_T_STORE_TYPE_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_STORE_TYPE_CODE] ON [dbo].[T_STORE_TYPE]
(
	[STORE_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_STORE_TYPE_STORE_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_STORE_TYPE]'') AND name = N''IDX_T_STORE_TYPE_STORE_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_STORE_TYPE_STORE_CODE] ON [dbo].[T_STORE_TYPE]
(
	[STORE_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
/****** Object:  Index [IDX_T_USERS_USER_CODE]    Script Date: 2025/06/17 7:25:14 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_USERS]'') AND name = N''IDX_T_USERS_USER_CODE'')
CREATE NONCLUSTERED INDEX [IDX_T_USERS_USER_CODE] ON [dbo].[T_USERS]
(
	[USER_CODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_A_DATA_RESTURANT_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_A_DATA_RESTURANT] ADD  CONSTRAINT [DF_T_A_DATA_RESTURANT_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ACCOUNTS_ACCOUNT_SEQ]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ACCOUNTS] ADD  CONSTRAINT [DF_T_ACCOUNTS_ACCOUNT_SEQ]  DEFAULT ((1)) FOR [ACCOUNT_LEVEL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ACCOUNTS_ACCOUNT_STATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ACCOUNTS] ADD  CONSTRAINT [DF_T_ACCOUNTS_ACCOUNT_STATE]  DEFAULT ((1)) FOR [ACCOUNT_ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ACCOUNTS_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ACCOUNTS] ADD  CONSTRAINT [DF_T_ACCOUNTS_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ACCOUNTS_IS_POS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ACCOUNTS] ADD  CONSTRAINT [DF_T_ACCOUNTS_IS_POS]  DEFAULT ((0)) FOR [IS_POS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ACCOUNTS_DISC_POS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ACCOUNTS] ADD  CONSTRAINT [DF_T_ACCOUNTS_DISC_POS]  DEFAULT ((0)) FOR [DISC_POS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ACCOUNTS_ACC_EXP]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ACCOUNTS] ADD  CONSTRAINT [DF_T_ACCOUNTS_ACC_EXP]  DEFAULT ((0)) FOR [ACC_EXP]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_AKSAT_AMO_ADD]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_AKSAT] ADD  CONSTRAINT [DF_T_AKSAT_AMO_ADD]  DEFAULT ((0)) FOR [AMO_ADD]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_AKSAT_AMO_DISCOUNT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_AKSAT] ADD  CONSTRAINT [DF_T_AKSAT_AMO_DISCOUNT]  DEFAULT ((0)) FOR [AMO_DISCOUNT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_AKSAT_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_AKSAT] ADD  CONSTRAINT [DF_T_AKSAT_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_AKSAT_T_ID_R]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_AKSAT] ADD  CONSTRAINT [DF_T_AKSAT_T_ID_R]  DEFAULT ((0)) FOR [T_ID_R]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_AKSAT_ITEM_DETAILS_AMO_ADD]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_AKSAT_ITEM_DETAILS] ADD  CONSTRAINT [DF_T_AKSAT_ITEM_DETAILS_AMO_ADD]  DEFAULT ((0)) FOR [AMO_ADD]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_AKSAT_ITEM_DETAILS_AMO_DISCOUNT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_AKSAT_ITEM_DETAILS] ADD  CONSTRAINT [DF_T_AKSAT_ITEM_DETAILS_AMO_DISCOUNT]  DEFAULT ((0)) FOR [AMO_DISCOUNT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_AKSAT_ITEM_DETAILS_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_AKSAT_ITEM_DETAILS] ADD  CONSTRAINT [DF_T_AKSAT_ITEM_DETAILS_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_AKSAT_ITEM_DETAILS_IS_FORWORD]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_AKSAT_ITEM_DETAILS] ADD  CONSTRAINT [DF_T_AKSAT_ITEM_DETAILS_IS_FORWORD]  DEFAULT ((0)) FOR [IS_FORWORD]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_AKSAT_ITEMS_EVERY]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_AKSAT_ITEMS] ADD  CONSTRAINT [DF_T_AKSAT_ITEMS_EVERY]  DEFAULT ((1)) FOR [EVERY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_AKSAT_ITEMS_QTY_CASH_ALL]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_AKSAT_ITEMS] ADD  CONSTRAINT [DF_T_AKSAT_ITEMS_QTY_CASH_ALL]  DEFAULT ((0)) FOR [QTY_CASH_ALL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_AKSAT_ITEMS_TOTAL_CASH]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_AKSAT_ITEMS] ADD  CONSTRAINT [DF_T_AKSAT_ITEMS_TOTAL_CASH]  DEFAULT ((0)) FOR [TOTAL_CASH]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_AKSAT_ITEMS_TOTAL_REMAIN]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_AKSAT_ITEMS] ADD  CONSTRAINT [DF_T_AKSAT_ITEMS_TOTAL_REMAIN]  DEFAULT ((0)) FOR [TOTAL_REMAIN]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_AKSAT_ITEMS_START_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_AKSAT_ITEMS] ADD  CONSTRAINT [DF_T_AKSAT_ITEMS_START_DATE]  DEFAULT (getdate()) FOR [START_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_AKSAT_ITEMS_QTY_CASH_NOW]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_AKSAT_ITEMS] ADD  CONSTRAINT [DF_T_AKSAT_ITEMS_QTY_CASH_NOW]  DEFAULT ((1)) FOR [AMO_CASH_NOW]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_AKSAT_ITEM_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_AKSAT_ITEMS] ADD  CONSTRAINT [DF_T_AKSAT_ITEM_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_AKSAT_ITEMS_F_NET_SALARY]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_AKSAT_ITEMS] ADD  CONSTRAINT [DF_T_AKSAT_ITEMS_F_NET_SALARY]  DEFAULT ((0)) FOR [F_NET_SALARY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_AKSAT_ITEMS_F_EMOLA_CARD]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_AKSAT_ITEMS] ADD  CONSTRAINT [DF_T_AKSAT_ITEMS_F_EMOLA_CARD]  DEFAULT ((0)) FOR [F_EMOLA_CARD]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_AKSAT_ITEMS_F_NET_CASH]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_AKSAT_ITEMS] ADD  CONSTRAINT [DF_T_AKSAT_ITEMS_F_NET_CASH]  DEFAULT ((0)) FOR [F_NET_CASH]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_AKSAT_ITEMS_F_NET_RETURN]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_AKSAT_ITEMS] ADD  CONSTRAINT [DF_T_AKSAT_ITEMS_F_NET_RETURN]  DEFAULT ((0)) FOR [F_NET_RETURN]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BALANCE_FINAL_DEBIT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BALANCE_FINAL] ADD  CONSTRAINT [DF_T_BALANCE_FINAL_DEBIT]  DEFAULT ((0)) FOR [DEBIT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BALANCE_FINAL_CREDIT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BALANCE_FINAL] ADD  CONSTRAINT [DF_T_BALANCE_FINAL_CREDIT]  DEFAULT ((0)) FOR [CREDIT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BALANCE_FINAL_BALANCE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BALANCE_FINAL] ADD  CONSTRAINT [DF_T_BALANCE_FINAL_BALANCE]  DEFAULT ((0)) FOR [BALANCE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BOOKING_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BOOKING] ADD  CONSTRAINT [DF_T_BOOKING_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BOOKING_GUIDS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BOOKING] ADD  CONSTRAINT [DF_T_BOOKING_GUIDS]  DEFAULT (newid()) FOR [GUIDS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BOOKING_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BOOKING] ADD  CONSTRAINT [DF_T_BOOKING_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BOX_BILL_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BOX] ADD  CONSTRAINT [DF_T_BOX_BILL_DATE]  DEFAULT (getdate()) FOR [BILL_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BOX_DEBIT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BOX] ADD  CONSTRAINT [DF_T_BOX_DEBIT]  DEFAULT ((0)) FOR [DEBIT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BOX_CREDIT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BOX] ADD  CONSTRAINT [DF_T_BOX_CREDIT]  DEFAULT ((0)) FOR [CREDIT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BOX_DEBIT_IQ]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BOX] ADD  CONSTRAINT [DF_T_BOX_DEBIT_IQ]  DEFAULT ((0)) FOR [DEBIT_IQ]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BOX_CREDIT_IQ]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BOX] ADD  CONSTRAINT [DF_T_BOX_CREDIT_IQ]  DEFAULT ((0)) FOR [CREDIT_IQ]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BOX_GUID]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BOX] ADD  CONSTRAINT [DF_T_BOX_GUID]  DEFAULT (newid()) FOR [GUIDS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BOX_CHECKED]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BOX] ADD  CONSTRAINT [DF_T_BOX_CHECKED]  DEFAULT ((0)) FOR [CHECKED]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BOX_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BOX] ADD  CONSTRAINT [DF_T_BOX_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BOX_FLAG_BOX]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BOX] ADD  CONSTRAINT [DF_T_BOX_FLAG_BOX]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BOX_FLAG_RELATION]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BOX] ADD  CONSTRAINT [DF_T_BOX_FLAG_RELATION]  DEFAULT ((0)) FOR [FLAG_RELATION]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_IS_OUT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_IS_OUT]  DEFAULT ((0)) FOR [IS_OUT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_OFFER_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_IS_TRANS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_IS_TRANS]  DEFAULT ((0)) FOR [IS_TRANS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_GUIDS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_GUIDS]  DEFAULT (newid()) FOR [GUIDS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_NET_SUPPLIER]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_NET_SUPPLIER]  DEFAULT ((0)) FOR [NET_SUPPLIER]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_TOTAL_OUT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_TOTAL_OUT]  DEFAULT ((0)) FOR [TOTAL_OUT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_TOTAL_SUPPLIER]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_TOTAL_SUPPLIER]  DEFAULT ((0)) FOR [TOTAL_SUPPLIER]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_IS_UPDATE_SELL_PRICE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_IS_UPDATE_SELL_PRICE]  DEFAULT ((0)) FOR [IS_UPDATE_SELL_PRICE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_IS_UPDATE_NEW_BUY]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_IS_UPDATE_NEW_BUY]  DEFAULT ((0)) FOR [IS_UPDATE_NEW_BUY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_BILL_PURCHASE_ORDER]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY] ADD  CONSTRAINT [DF_T_BUY_BILL_PURCHASE_ORDER]  DEFAULT ((0)) FOR [BILL_PURCHASE_ORDER]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_DETAILS_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY_DETAILS] ADD  CONSTRAINT [DF_T_BUY_DETAILS_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_DETAILS_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY_DETAILS] ADD  CONSTRAINT [DF_T_BUY_DETAILS_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_DETAILS_OFFER_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY_DETAILS] ADD  CONSTRAINT [DF_T_BUY_DETAILS_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_DETAILS_IS_USED]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY_DETAILS] ADD  CONSTRAINT [DF_T_BUY_DETAILS_IS_USED]  DEFAULT ((0)) FOR [IS_USED]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_DETAILS_QTY_IN]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY_DETAILS] ADD  CONSTRAINT [DF_T_BUY_DETAILS_QTY_IN]  DEFAULT ((0)) FOR [QTY_IN]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_DETAILS_QTY_OUT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY_DETAILS] ADD  CONSTRAINT [DF_T_BUY_DETAILS_QTY_OUT]  DEFAULT ((0)) FOR [QTY_OUT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_DETAILS_TOTAL_OUT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY_DETAILS] ADD  CONSTRAINT [DF_T_BUY_DETAILS_TOTAL_OUT]  DEFAULT ((0)) FOR [TOTAL_OUT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_DETAILS_EXPENSES_OUT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY_DETAILS] ADD  CONSTRAINT [DF_T_BUY_DETAILS_EXPENSES_OUT]  DEFAULT ((0)) FOR [EXPENSES_OUT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_DETAILS_DISCOUNT_PERCENT_ITEM]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY_DETAILS] ADD  CONSTRAINT [DF_T_BUY_DETAILS_DISCOUNT_PERCENT_ITEM]  DEFAULT ((0)) FOR [DISCOUNT_PERCENT_ITEM]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_DETAILS_DISCOUNT_AMOUNT_ITEM]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY_DETAILS] ADD  CONSTRAINT [DF_T_BUY_DETAILS_DISCOUNT_AMOUNT_ITEM]  DEFAULT ((0)) FOR [DISCOUNT_AMOUNT_ITEM]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_DETAILS_TRANSFARE_IS_DONE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY_DETAILS_TRANSFARE] ADD  CONSTRAINT [DF_T_BUY_DETAILS_TRANSFARE_IS_DONE]  DEFAULT ((0)) FOR [IS_DONE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_EXPENSES_BILL_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY_EXPENSES] ADD  CONSTRAINT [DF_T_BUY_EXPENSES_BILL_DATE]  DEFAULT (getdate()) FOR [BILL_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_EXPENSES_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY_EXPENSES] ADD  CONSTRAINT [DF_T_BUY_EXPENSES_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_RETURN_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY_RETURN] ADD  CONSTRAINT [DF_T_BUY_RETURN_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_RETURN_DETAILS_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY_RETURN_DETAILS] ADD  CONSTRAINT [DF_T_BUY_RETURN_DETAILS_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_BUY_RETURN_DETAILS_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_BUY_RETURN_DETAILS] ADD  CONSTRAINT [DF_T_BUY_RETURN_DETAILS_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CENTER_COST_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CENTER_COST] ADD  CONSTRAINT [DF_T_CENTER_COST_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CENTER_COST_TOTAL_SALES]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CENTER_COST] ADD  CONSTRAINT [DF_T_CENTER_COST_TOTAL_SALES]  DEFAULT ((0)) FOR [TOTAL_SALES]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CENTER_COST_TOTAL_COST]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CENTER_COST] ADD  CONSTRAINT [DF_T_CENTER_COST_TOTAL_COST]  DEFAULT ((0)) FOR [TOTAL_COST]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CENTER_COST_TOTAL_EXPENSES]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CENTER_COST] ADD  CONSTRAINT [DF_T_CENTER_COST_TOTAL_EXPENSES]  DEFAULT ((0)) FOR [TOTAL_EXPENSES]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CENTER_COST_NET_ARBAH]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CENTER_COST] ADD  CONSTRAINT [DF_T_CENTER_COST_NET_ARBAH]  DEFAULT ((0)) FOR [NET_ARBAH]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CENTER_COST_INVOICE_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CENTER_COST_INVOICE] ADD  CONSTRAINT [DF_T_CENTER_COST_INVOICE_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CENTER_COST_INVOICE_TOTAL_SALES]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CENTER_COST_INVOICE] ADD  CONSTRAINT [DF_T_CENTER_COST_INVOICE_TOTAL_SALES]  DEFAULT ((0)) FOR [TOTAL_SALES]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CENTER_COST_INVOICE_TOTAL_COST]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CENTER_COST_INVOICE] ADD  CONSTRAINT [DF_T_CENTER_COST_INVOICE_TOTAL_COST]  DEFAULT ((0)) FOR [TOTAL_COST]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CENTER_COST_INVOICE_TOTAL_EXPENSES]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CENTER_COST_INVOICE] ADD  CONSTRAINT [DF_T_CENTER_COST_INVOICE_TOTAL_EXPENSES]  DEFAULT ((0)) FOR [TOTAL_EXPENSES]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CENTER_COST_INVOICE_NET_ARBAH]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CENTER_COST_INVOICE] ADD  CONSTRAINT [DF_T_CENTER_COST_INVOICE_NET_ARBAH]  DEFAULT ((0)) FOR [NET_ARBAH]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CENTER_COST_ITEMS_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CENTER_COST_ITEMS] ADD  CONSTRAINT [DF_T_CENTER_COST_ITEMS_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CENTER_COST_ITEMS_TOTAL_SALES]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CENTER_COST_ITEMS] ADD  CONSTRAINT [DF_T_CENTER_COST_ITEMS_TOTAL_SALES]  DEFAULT ((0)) FOR [TOTAL_SALES]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CENTER_COST_ITEMS_TOTAL_COST]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CENTER_COST_ITEMS] ADD  CONSTRAINT [DF_T_CENTER_COST_ITEMS_TOTAL_COST]  DEFAULT ((0)) FOR [TOTAL_COST]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CENTER_COST_ITEMS_TOTAL_EXPENSES]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CENTER_COST_ITEMS] ADD  CONSTRAINT [DF_T_CENTER_COST_ITEMS_TOTAL_EXPENSES]  DEFAULT ((0)) FOR [TOTAL_EXPENSES]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CENTER_COST_ITEMS_NET_ARBAH]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CENTER_COST_ITEMS] ADD  CONSTRAINT [DF_T_CENTER_COST_ITEMS_NET_ARBAH]  DEFAULT ((0)) FOR [NET_ARBAH]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CLIENT_MAX_DEBIT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CLIENT] ADD  CONSTRAINT [DF_T_CLIENT_MAX_DEBIT]  DEFAULT ((0)) FOR [MAX_DEBIT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CLIENT_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CLIENT] ADD  CONSTRAINT [DF_T_CLIENT_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CLIENT_MAIN_ACCOUNT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CLIENT] ADD  CONSTRAINT [DF_T_CLIENT_MAIN_ACCOUNT]  DEFAULT ((0)) FOR [MAIN_ACCOUNT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CLIENT_TYPE_PRICE_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CLIENT] ADD  CONSTRAINT [DF_T_CLIENT_TYPE_PRICE_CODE]  DEFAULT ((1)) FOR [TYPE_PRICE_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CLIENT_MONTH_WARNING]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CLIENT] ADD  CONSTRAINT [DF_T_CLIENT_MONTH_WARNING]  DEFAULT ((0)) FOR [MONTH_WARNING]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CLIENT_SALARY_NET]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CLIENT] ADD  CONSTRAINT [DF_T_CLIENT_SALARY_NET]  DEFAULT ((0)) FOR [SALARY_NET]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CLIENT_EMOLA_CARD]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CLIENT] ADD  CONSTRAINT [DF_T_CLIENT_EMOLA_CARD]  DEFAULT ((0)) FOR [EMOLA_CARD]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CONTAINER_DETAILS_GUIDS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CONTAINER_DETAILS] ADD  CONSTRAINT [DF_T_CONTAINER_DETAILS_GUIDS]  DEFAULT (newid()) FOR [GUIDS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CONTAINER_EXPENSES_BILL_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CONTAINER_EXPENSES] ADD  CONSTRAINT [DF_T_CONTAINER_EXPENSES_BILL_DATE]  DEFAULT (getdate()) FOR [BILL_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_CONTAINER_EXPENSES_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_CONTAINER_EXPENSES] ADD  CONSTRAINT [DF_T_CONTAINER_EXPENSES_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_EMP_ENTER_IS_PAID]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_EMP_ENTER] ADD  CONSTRAINT [DF_T_EMP_ENTER_IS_PAID]  DEFAULT ((0)) FOR [IS_PAID]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_EXPENSES_IS_TRANS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_EXPENSES] ADD  CONSTRAINT [DF_T_EXPENSES_IS_TRANS]  DEFAULT ((0)) FOR [IS_TRANS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_FACTORY_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_FACTORY] ADD  CONSTRAINT [DF_T_FACTORY_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_FACTORY_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_FACTORY] ADD  CONSTRAINT [DF_T_FACTORY_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_FACTORY_BILL_SELL]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_FACTORY] ADD  CONSTRAINT [DF_T_FACTORY_BILL_SELL]  DEFAULT ((0)) FOR [BILL_SELL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_FACTORY_DETAILS_OFFER_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_FACTORY_DETAILS] ADD  CONSTRAINT [DF_T_FACTORY_DETAILS_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_FACTORY_DETAILS_BILL_SELL]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_FACTORY_DETAILS] ADD  CONSTRAINT [DF_T_FACTORY_DETAILS_BILL_SELL]  DEFAULT ((0)) FOR [BILL_SELL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_FACTORY_ITEM_WAITING_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_FACTORY_ITEM_WAITING] ADD  CONSTRAINT [DF_T_FACTORY_ITEM_WAITING_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_FACTORY_ITEM_WAITING_IS_FACTORY]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_FACTORY_ITEM_WAITING] ADD  CONSTRAINT [DF_T_FACTORY_ITEM_WAITING_IS_FACTORY]  DEFAULT ((0)) FOR [IS_FACTORY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_GATE_GATE_NO]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_GATE] ADD  CONSTRAINT [DF_T_GATE_GATE_NO]  DEFAULT ((1)) FOR [GATE_NO]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEM_BARCODE_C_DATE_1]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEM_BARCODE] ADD  CONSTRAINT [DF_T_ITEM_BARCODE_C_DATE_1]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEM_CATEGORY_SHOW_MENU]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEM_CATEGORY] ADD  CONSTRAINT [DF_T_ITEM_CATEGORY_SHOW_MENU]  DEFAULT ((0)) FOR [SHOW_MENU]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEM_CATEGORY_PRINTER_ID]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEM_CATEGORY] ADD  CONSTRAINT [DF_T_ITEM_CATEGORY_PRINTER_ID]  DEFAULT ((0)) FOR [PRINTER_ID]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEM_CATEGORY_BARCODE_FROM]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEM_CATEGORY] ADD  CONSTRAINT [DF_T_ITEM_CATEGORY_BARCODE_FROM]  DEFAULT ((0)) FOR [BARCODE_FROM]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEM_CATEGORY_BARCODE_TO]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEM_CATEGORY] ADD  CONSTRAINT [DF_T_ITEM_CATEGORY_BARCODE_TO]  DEFAULT ((0)) FOR [BARCODE_TO]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEM_CATEGORY_RATING_SHOW_MENU]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEM_CATEGORY_RATING] ADD  CONSTRAINT [DF_T_ITEM_CATEGORY_RATING_SHOW_MENU]  DEFAULT ((0)) FOR [SHOW_MENU]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEM_FREE_TYPE_VAL]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEM_FREE] ADD  CONSTRAINT [DF_T_ITEM_FREE_TYPE_VAL]  DEFAULT ((0)) FOR [TYPE_VAL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEM_IMAGE_C_DATE_1]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEM_IMAGE] ADD  CONSTRAINT [DF_T_ITEM_IMAGE_C_DATE_1]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEM_MISWAK_INFO_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEM_MISWAK_INFO] ADD  CONSTRAINT [DF_T_ITEM_MISWAK_INFO_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEM_MISWAK_INFO_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEM_MISWAK_INFO] ADD  CONSTRAINT [DF_T_ITEM_MISWAK_INFO_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEM_SERIAL_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEM_SERIAL] ADD  CONSTRAINT [DF_T_ITEM_SERIAL_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEM_SERIAL_IS_SALE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEM_SERIAL] ADD  CONSTRAINT [DF_T_ITEM_SERIAL_IS_SALE]  DEFAULT ((0)) FOR [IS_SALE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_IS_STORE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_STORE]  DEFAULT ((1)) FOR [IS_STORE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_QTY_MIN]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_QTY_MIN]  DEFAULT ((0)) FOR [QTY_MIN]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_ON2_OFF2]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_ON2_OFF2]  DEFAULT ((0)) FOR [ON2_OFF2]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_UNIT2_QTY]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_UNIT2_QTY]  DEFAULT ((1)) FOR [UNIT2_QTY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_DF_SALE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_DF_SALE]  DEFAULT ((0)) FOR [DF_SALE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_SELL2]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_SELL2]  DEFAULT ((0)) FOR [SELL2]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_SELL_CNY]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_SELL_CNY]  DEFAULT ((0)) FOR [SELL_CNY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_SELL2_CNY]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_SELL2_CNY]  DEFAULT ((0)) FOR [SELL2_CNY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_SHOW_MENU]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_SHOW_MENU]  DEFAULT ((0)) FOR [SHOW_MENU]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_SELL_G]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_SELL_G]  DEFAULT ((0)) FOR [SELL_G]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_SELL_W]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_SELL_W]  DEFAULT ((0)) FOR [SELL_W]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_SELL2_G]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_SELL2_G]  DEFAULT ((0)) FOR [SELL2_G]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_SELL2_W]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_SELL2_W]  DEFAULT ((0)) FOR [SELL2_W]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_IS_TRANS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_TRANS]  DEFAULT ((0)) FOR [IS_TRANS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_GUIDS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_GUIDS]  DEFAULT (newid()) FOR [GUIDS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_IS_DISCOUNT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_DISCOUNT]  DEFAULT ((1)) FOR [IS_DISCOUNT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_DISC_AMO]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_DISC_AMO]  DEFAULT ((0)) FOR [DISC_AMO]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_DISC_PERCENT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_DISC_PERCENT]  DEFAULT ((0)) FOR [DISC_PERCENT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_IS_FEATURE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_FEATURE]  DEFAULT ((0)) FOR [IS_FEATURE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_IS_HIDE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_HIDE]  DEFAULT ((0)) FOR [IS_HIDE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_IS_SERIAL]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_SERIAL]  DEFAULT ((0)) FOR [IS_SERIAL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_QTY_AKSAT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_QTY_AKSAT]  DEFAULT ((0)) FOR [QTY_AKSAT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_IS_TAX]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_TAX]  DEFAULT ((0)) FOR [IS_TAX]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_TAX_PERCENT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_TAX_PERCENT]  DEFAULT ((0)) FOR [TAX_PERCENT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_TAX_AMO]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_TAX_AMO]  DEFAULT ((0)) FOR [TAX_AMO]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_IS_MANDOOB]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_MANDOOB]  DEFAULT ((0)) FOR [IS_MANDOOB]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_MANDOOB_PERCENT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_MANDOOB_PERCENT]  DEFAULT ((0)) FOR [MANDOOB_PERCENT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_MANDOOB_AMO]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_MANDOOB_AMO]  DEFAULT ((0)) FOR [MANDOOB_AMO]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_IS_MANDOOB_SELECTION]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_MANDOOB_SELECTION]  DEFAULT ((0)) FOR [IS_MANDOOB_SELECTION]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_IS_ITEM_AREA]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_ITEM_AREA]  DEFAULT ((0)) FOR [IS_ITEM_AREA]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_UNIT_QTY_X1]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_UNIT_QTY_X1]  DEFAULT ((1)) FOR [UNIT_QTY_X1]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_UNIT_QTY_XY]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_UNIT_QTY_XY]  DEFAULT ((1)) FOR [UNIT_QTY_XY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_UNIT_QTY_XZ]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_UNIT_QTY_XZ]  DEFAULT ((1)) FOR [UNIT_QTY_XZ]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_IS_NEW_BUY]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_IS_NEW_BUY]  DEFAULT ((0)) FOR [IS_NEW_BUY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_POINT_OF_UNIT1]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_POINT_OF_UNIT1]  DEFAULT ((0)) FOR [POINT_OF_UNIT1]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_POINT_OF_UNIT2]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS] ADD  CONSTRAINT [DF_T_ITEMS_POINT_OF_UNIT2]  DEFAULT ((0)) FOR [POINT_OF_UNIT2]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_ARSHIF_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS_ARSHIF] ADD  CONSTRAINT [DF_T_ITEMS_ARSHIF_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_MANDOOB_MANDOOB_PERCENT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS_MANDOOB] ADD  CONSTRAINT [DF_T_ITEMS_MANDOOB_MANDOOB_PERCENT]  DEFAULT ((0)) FOR [MANDOOB_PERCENT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_ITEMS_MANDOOB_MANDOOB_AMO]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_ITEMS_MANDOOB] ADD  CONSTRAINT [DF_T_ITEMS_MANDOOB_MANDOOB_AMO]  DEFAULT ((0)) FOR [MANDOOB_AMO]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_JOINT_SUBSCRIPTION_IS_PAUSE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_JOINT_SUBSCRIPTION] ADD  CONSTRAINT [DF_T_JOINT_SUBSCRIPTION_IS_PAUSE]  DEFAULT ((0)) FOR [IS_PAUSE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_JOINT_SUBSCRIPTION_DAY_REMAIN]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_JOINT_SUBSCRIPTION] ADD  CONSTRAINT [DF_T_JOINT_SUBSCRIPTION_DAY_REMAIN]  DEFAULT ((0)) FOR [DAY_REMAIN]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_LEVEL_LEVEL_SALES1_4]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_LEVEL] ADD  CONSTRAINT [DF_T_LEVEL_LEVEL_SALES1_4]  DEFAULT ((0)) FOR [LEVEL_MAIN]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_LEVEL_MAIN_A]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_LEVEL] ADD  CONSTRAINT [DF_T_LEVEL_MAIN_A]  DEFAULT ((0)) FOR [LEVEL_SALES]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_LEVEL_LEVEL_SALES1]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_LEVEL] ADD  CONSTRAINT [DF_T_LEVEL_LEVEL_SALES1]  DEFAULT ((0)) FOR [LEVEL_BUY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_LEVEL_LEVEL_SALES1_1]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_LEVEL] ADD  CONSTRAINT [DF_T_LEVEL_LEVEL_SALES1_1]  DEFAULT ((0)) FOR [LEVEL_ACCOUNT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_LEVEL_LEVEL_SALES1_2]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_LEVEL] ADD  CONSTRAINT [DF_T_LEVEL_LEVEL_SALES1_2]  DEFAULT ((0)) FOR [LEVEL_REPORT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_LEVEL_LEVEL_SALES1_5]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_LEVEL] ADD  CONSTRAINT [DF_T_LEVEL_LEVEL_SALES1_5]  DEFAULT ((0)) FOR [LEVEL_STORE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_LEVEL_LEVEL_SALES1_6]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_LEVEL] ADD  CONSTRAINT [DF_T_LEVEL_LEVEL_SALES1_6]  DEFAULT ((0)) FOR [LEVEL_CLIENT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_LEVEL_LEVEL_SALES1_7]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_LEVEL] ADD  CONSTRAINT [DF_T_LEVEL_LEVEL_SALES1_7]  DEFAULT ((0)) FOR [LEVEL_ITEMS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_LEVEL_LEVEL_SALES1_10]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_LEVEL] ADD  CONSTRAINT [DF_T_LEVEL_LEVEL_SALES1_10]  DEFAULT ((0)) FOR [LEVEL_GENERAL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_MAINTENANCE_TAG_PROCCESS_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_MAINTENANCE] ADD  CONSTRAINT [DF_T_MAINTENANCE_TAG_PROCCESS_CODE]  DEFAULT ((0)) FOR [TAG_PROCCESS_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_MAINTENANCE_DEVICE_ERROR_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_MAINTENANCE_DEVICE_ERROR] ADD  CONSTRAINT [DF_T_MAINTENANCE_DEVICE_ERROR_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_MANDOOB_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_MANDOOB] ADD  CONSTRAINT [DF_T_MANDOOB_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_MANDOOB_ACCOUNT_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_MANDOOB] ADD  CONSTRAINT [DF_T_MANDOOB_ACCOUNT_CODE]  DEFAULT ((0)) FOR [ACCOUNT_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_MANDOOB_IS_COST_SHIP]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_MANDOOB] ADD  CONSTRAINT [DF_T_MANDOOB_IS_COST_SHIP]  DEFAULT ((0)) FOR [IS_COST_SHIP]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_MANDOOB_MAX_DEBIT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_MANDOOB] ADD  CONSTRAINT [DF_T_MANDOOB_MAX_DEBIT]  DEFAULT ((0)) FOR [MAX_DEBIT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_MANDOOB_MANDOOB_TARGET]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_MANDOOB] ADD  CONSTRAINT [DF_T_MANDOOB_MANDOOB_TARGET]  DEFAULT ((0)) FOR [MANDOOB_TARGET]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_MOVE_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_MOVE] ADD  CONSTRAINT [DF_T_MOVE_ACTIVE]  DEFAULT ((0)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_NOTES_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_NOTES] ADD  CONSTRAINT [DF_T_NOTES_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_NOTES_MAIN_ID]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_NOTES] ADD  CONSTRAINT [DF_T_NOTES_MAIN_ID]  DEFAULT ((0)) FOR [MAIN_ID]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_NOTES_BY_APP]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_NOTES] ADD  CONSTRAINT [DF_T_NOTES_BY_APP]  DEFAULT ((1)) FOR [BY_APP]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_NOTES_BY_TRACKING]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_NOTES] ADD  CONSTRAINT [DF_T_NOTES_BY_TRACKING]  DEFAULT ((0)) FOR [BY_TRACKING]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_NOTES_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_NOTES] ADD  CONSTRAINT [DF_T_NOTES_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PATH_BACKUP_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PATH_BACKUP] ADD  CONSTRAINT [DF_T_PATH_BACKUP_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PATH_BACKUP_C_TIME]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PATH_BACKUP] ADD  CONSTRAINT [DF_T_PATH_BACKUP_C_TIME]  DEFAULT (getdate()) FOR [C_TIME]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_IS_OUT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_IS_OUT]  DEFAULT ((0)) FOR [IS_OUT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_OFFER_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_IS_TRANS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_IS_TRANS]  DEFAULT ((0)) FOR [IS_TRANS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_GUIDS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_GUIDS]  DEFAULT (newid()) FOR [GUIDS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_NET_SUPPLIER]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_NET_SUPPLIER]  DEFAULT ((0)) FOR [NET_SUPPLIER]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_TOTAL_OUT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_TOTAL_OUT]  DEFAULT ((0)) FOR [TOTAL_OUT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_TOTAL_SUPPLIER]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_TOTAL_SUPPLIER]  DEFAULT ((0)) FOR [TOTAL_SUPPLIER]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_IS_UPDATE_SELL_PRICE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_IS_UPDATE_SELL_PRICE]  DEFAULT ((0)) FOR [IS_UPDATE_SELL_PRICE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_IS_UPDATE_NEW_BUY]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_IS_UPDATE_NEW_BUY]  DEFAULT ((0)) FOR [IS_UPDATE_NEW_BUY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_DETAILS_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER_DETAILS] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_DETAILS_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_DETAILS_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER_DETAILS] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_DETAILS_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_DETAILS_OFFER_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER_DETAILS] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_DETAILS_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_DETAILS_IS_USED]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER_DETAILS] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_DETAILS_IS_USED]  DEFAULT ((0)) FOR [IS_USED]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_DETAILS_QTY_IN]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER_DETAILS] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_DETAILS_QTY_IN]  DEFAULT ((0)) FOR [QTY_IN]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_DETAILS_QTY_OUT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER_DETAILS] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_DETAILS_QTY_OUT]  DEFAULT ((0)) FOR [QTY_OUT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_DETAILS_TOTAL_OUT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER_DETAILS] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_DETAILS_TOTAL_OUT]  DEFAULT ((0)) FOR [TOTAL_OUT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_DETAILS_EXPENSES_OUT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER_DETAILS] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_DETAILS_EXPENSES_OUT]  DEFAULT ((0)) FOR [EXPENSES_OUT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_DETAILS_DISCOUNT_PERCENT_ITEM]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER_DETAILS] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_DETAILS_DISCOUNT_PERCENT_ITEM]  DEFAULT ((0)) FOR [DISCOUNT_PERCENT_ITEM]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_PURCHASE_ORDER_DETAILS_DISCOUNT_AMOUNT_ITEM]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_PURCHASE_ORDER_DETAILS] ADD  CONSTRAINT [DF_T_PURCHASE_ORDER_DETAILS_DISCOUNT_AMOUNT_ITEM]  DEFAULT ((0)) FOR [DISCOUNT_AMOUNT_ITEM]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_REPORT_IS_SHOW]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_REPORT] ADD  CONSTRAINT [DF_T_REPORT_IS_SHOW]  DEFAULT ((1)) FOR [IS_SHOW]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_REPORT_ID_GROUP]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_REPORT] ADD  CONSTRAINT [DF_T_REPORT_ID_GROUP]  DEFAULT ((0)) FOR [ID_GROUP]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_MANDOOB_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_MANDOOB_CODE]  DEFAULT ((1)) FOR [MANDOOB_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_IS_AVG_COST]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_IS_AVG_COST]  DEFAULT ((0)) FOR [IS_AVG_COST]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_AVG_COST]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_AVG_COST]  DEFAULT ((0)) FOR [AVG_COST]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_FLAG_CASH]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_FLAG_CASH]  DEFAULT ((0)) FOR [FLAG_CASH]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_IS_OUT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_IS_OUT]  DEFAULT ((0)) FOR [IS_OUT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_CURRANCY_SALES]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_CURRANCY_SALES]  DEFAULT ((1)) FOR [CURRANCY_SALES]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_IS_TRANS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_IS_TRANS]  DEFAULT ((0)) FOR [IS_TRANS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_GUIDS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_GUIDS]  DEFAULT (newid()) FOR [GUIDS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_CENTER_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_CENTER_CODE]  DEFAULT ((0)) FOR [CENTER_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TAG_PROCCESS_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_TAG_PROCCESS_CODE]  DEFAULT ((0)) FOR [TAG_PROCCESS_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_IS_PREPARE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_IS_PREPARE]  DEFAULT ((0)) FOR [IS_PREPARE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DRIVER_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_DRIVER_CODE]  DEFAULT ((0)) FOR [DRIVER_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_STATUS_SHIPING]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_STATUS_SHIPING]  DEFAULT ((0)) FOR [STATUS_SHIPING]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_MOVE_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_MOVE_CODE]  DEFAULT ((0)) FOR [MOVE_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_BILL_ORDER]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_BILL_ORDER]  DEFAULT ((0)) FOR [BILL_ORDER]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TOTAL_TAX_ITEM]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_TOTAL_TAX_ITEM]  DEFAULT ((0)) FOR [TOTAL_TAX_ITEM]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TOTAL_MANDOOB_ITEM]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_TOTAL_MANDOOB_ITEM]  DEFAULT ((0)) FOR [TOTAL_MANDOOB_ITEM]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TOTAL_ADD_COST]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_TOTAL_ADD_COST]  DEFAULT ((0)) FOR [TOTAL_ADD_COST]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TOTAL_ADD_AMO]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_TOTAL_ADD_AMO]  DEFAULT ((0)) FOR [TOTAL_ADD_AMO]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_SHIP_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_SHIP_CODE]  DEFAULT ((0)) FOR [SHIP_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_COST_SHIP]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_COST_SHIP]  DEFAULT ((0)) FOR [COST_SHIP]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_IS_POINT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_IS_POINT]  DEFAULT ((0)) FOR [IS_POINT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_COST_SHIP_CLIENT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_COST_SHIP_CLIENT]  DEFAULT ((0)) FOR [COST_SHIP_CLIENT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_USER_TAG_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_USER_TAG_CODE]  DEFAULT ((0)) FOR [USER_TAG_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_RELATION_BILL_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_RELATION_BILL_CODE]  DEFAULT ((0)) FOR [RELATION_BILL_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_RELATION_B_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_RELATION_B_CODE]  DEFAULT ((0)) FOR [RELATION_B_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_REGION_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_REGION_CODE]  DEFAULT ((0)) FOR [REGION_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_COL_INT1]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_COL_INT1]  DEFAULT ((0)) FOR [COL_INT1]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_COL_INT2]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_COL_INT2]  DEFAULT ((0)) FOR [COL_INT2]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_COL_INT3]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_COL_INT3]  DEFAULT ((0)) FOR [COL_INT3]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_COL_STR1]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_COL_STR1]  DEFAULT (N'''') FOR [COL_STR1]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_COL_STR2]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_COL_STR2]  DEFAULT (N'''') FOR [COL_STR2]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_COL_STR3]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_COL_STR3]  DEFAULT (N'''') FOR [COL_STR3]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_IS_PDF]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_IS_PDF]  DEFAULT ((0)) FOR [IS_PDF]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_PATH_PDF]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_PATH_PDF]  DEFAULT (N'''') FOR [PATH_PDF]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_PATH_PDF_API]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_PATH_PDF_API]  DEFAULT (N'''') FOR [PATH_PDF_API]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_ZONE_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES] ADD  CONSTRAINT [DF_T_SALES_ZONE_CODE]  DEFAULT ((0)) FOR [ZONE_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_BILL_BUY]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_BILL_BUY]  DEFAULT ((-999999)) FOR [BILL_BUY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_IS_PRINT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_IS_PRINT]  DEFAULT ((0)) FOR [IS_PRINT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_DISCOUNT_TYPE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_DISCOUNT_TYPE]  DEFAULT ((0)) FOR [DISCOUNT_TYPE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_IS_SERIAL]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_IS_SERIAL]  DEFAULT ((0)) FOR [IS_SERIAL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_IS_TAX]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_IS_TAX]  DEFAULT ((0)) FOR [IS_TAX]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_TAX_PERCENT_ITEM]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_TAX_PERCENT_ITEM]  DEFAULT ((0)) FOR [TAX_PERCENT_ITEM]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_TAX_AMO_ITEM]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_TAX_AMO_ITEM]  DEFAULT ((0)) FOR [TAX_AMO_ITEM]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_IS_MANDOOB]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_IS_MANDOOB]  DEFAULT ((0)) FOR [IS_MANDOOB]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_MANDOOB_PERCENT_ITEM]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_MANDOOB_PERCENT_ITEM]  DEFAULT ((0)) FOR [MANDOOB_PERCENT_ITEM]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_MANDOOB_AMO_ITEM]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_MANDOOB_AMO_ITEM]  DEFAULT ((0)) FOR [MANDOOB_AMO_ITEM]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_IS_ITEM_AREA]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_IS_ITEM_AREA]  DEFAULT ((0)) FOR [IS_ITEM_AREA]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_WIDTH_CM]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_WIDTH_CM]  DEFAULT ((0)) FOR [WIDTH_CM]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_LENGTH_CM]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_LENGTH_CM]  DEFAULT ((0)) FOR [LENGTH_CM]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_AREA_M2]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_AREA_M2]  DEFAULT ((0)) FOR [AREA_M2]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_QTY_AREA]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_QTY_AREA]  DEFAULT ((1)) FOR [QTY_AREA]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_QTY_XZ]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_QTY_XZ]  DEFAULT ((0)) FOR [QTY_XZ]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_UNIT_QTY_XZ]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_UNIT_QTY_XZ]  DEFAULT ((1)) FOR [UNIT_QTY_XZ]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_QTY_X1]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_QTY_X1]  DEFAULT ((0)) FOR [QTY_X1]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_UNIT_QTY_X1]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_UNIT_QTY_X1]  DEFAULT ((1)) FOR [UNIT_QTY_X1]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_QTY_XY]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_QTY_XY]  DEFAULT ((0)) FOR [QTY_XY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_UNIT_QTY_XY]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_UNIT_QTY_XY]  DEFAULT ((1)) FOR [UNIT_QTY_XY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_STORE_ITEM_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_STORE_ITEM_CODE]  DEFAULT ((0)) FOR [K_STORE_ITEM_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_STORE_COST]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_STORE_COST]  DEFAULT ((0)) FOR [K_STORE_COST]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_STORE_SELL]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_STORE_SELL]  DEFAULT ((0)) FOR [K_STORE_SELL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_PRINT_ITEM_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_PRINT_ITEM_CODE]  DEFAULT ((0)) FOR [K_PRINT_ITEM_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_PRINT_COST]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_PRINT_COST]  DEFAULT ((0)) FOR [K_PRINT_COST]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_PRINT_SELL]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_PRINT_SELL]  DEFAULT ((0)) FOR [K_PRINT_SELL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_MODEL_ITEM_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_MODEL_ITEM_CODE]  DEFAULT ((0)) FOR [K_MODEL_ITEM_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_MODEL_COST]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_MODEL_COST]  DEFAULT ((0)) FOR [K_MODEL_COST]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_MODEL_SELL]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_MODEL_SELL]  DEFAULT ((0)) FOR [K_MODEL_SELL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_MOTOR_ITEM_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_MOTOR_ITEM_CODE]  DEFAULT ((0)) FOR [K_MOTOR_ITEM_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_MOTOR_COST]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_MOTOR_COST]  DEFAULT ((0)) FOR [K_MOTOR_COST]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_MOTOR_SELL]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_MOTOR_SELL]  DEFAULT ((0)) FOR [K_MOTOR_SELL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_HABEL_ITEM_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_HABEL_ITEM_CODE]  DEFAULT ((0)) FOR [K_HABEL_ITEM_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_HABEL_COST]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_HABEL_COST]  DEFAULT ((0)) FOR [K_HABEL_COST]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_HABEL_SELL]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_HABEL_SELL]  DEFAULT ((0)) FOR [K_HABEL_SELL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_STORE_TOTAL]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_STORE_TOTAL]  DEFAULT ((0)) FOR [K_STORE_TOTAL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_PRINT_TOTAL]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_PRINT_TOTAL]  DEFAULT ((0)) FOR [K_PRINT_TOTAL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_MODEL_TOTAL]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_MODEL_TOTAL]  DEFAULT ((0)) FOR [K_MODEL_TOTAL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_MOTOR_TOTAL]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_MOTOR_TOTAL]  DEFAULT ((0)) FOR [K_MOTOR_TOTAL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_HABEL_TOTAL]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_HABEL_TOTAL]  DEFAULT ((0)) FOR [K_HABEL_TOTAL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_K_MODEL_TOTAL_COST]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_K_MODEL_TOTAL_COST]  DEFAULT ((0)) FOR [K_MODEL_TOTAL_COST]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_QTY_FREE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_QTY_FREE]  DEFAULT ((0)) FOR [QTY_FREE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_TOTAL_QTY]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_TOTAL_QTY]  DEFAULT ((0)) FOR [TOTAL_QTY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_IS_TRANS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_IS_TRANS]  DEFAULT ((0)) FOR [IS_TRANS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_MANDOOB_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_MANDOOB_CODE]  DEFAULT ((1)) FOR [MANDOOB_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_MANDOOB_CODE_FINISH]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_MANDOOB_CODE_FINISH]  DEFAULT ((1)) FOR [MANDOOB_CODE_FINISH]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DETAILS_TOTAL_POINTS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DETAILS_TOTAL_POINTS]  DEFAULT ((0)) FOR [TOTAL_POINTS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DIRECT_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DIRECT] ADD  CONSTRAINT [DF_T_SALES_DIRECT_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DIRECT_TAG_PROCCESS_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DIRECT] ADD  CONSTRAINT [DF_T_SALES_DIRECT_TAG_PROCCESS_CODE]  DEFAULT ((0)) FOR [TAG_PROCCESS_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DIRECT_IS_PREPARE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DIRECT] ADD  CONSTRAINT [DF_T_SALES_DIRECT_IS_PREPARE]  DEFAULT ((0)) FOR [IS_PREPARE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DIRECT_DRIVER_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DIRECT] ADD  CONSTRAINT [DF_T_SALES_DIRECT_DRIVER_CODE]  DEFAULT ((0)) FOR [DRIVER_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DIRECT_GUIDS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DIRECT] ADD  CONSTRAINT [DF_T_SALES_DIRECT_GUIDS]  DEFAULT (newid()) FOR [GUIDS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DIRECT_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DIRECT] ADD  CONSTRAINT [DF_T_SALES_DIRECT_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DIRECT_DETAILS_GUIDS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DIRECT_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DIRECT_DETAILS_GUIDS]  DEFAULT (newid()) FOR [GUIDS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DIRECT_DETAILS_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DIRECT_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DIRECT_DETAILS_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DIRECT_DETAILS_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DIRECT_DETAILS] ADD  CONSTRAINT [DF_T_SALES_DIRECT_DETAILS_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DISCOUNT_TOT_ITEM_DISCOUNT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DISCOUNT] ADD  CONSTRAINT [DF_T_SALES_DISCOUNT_TOT_ITEM_DISCOUNT]  DEFAULT ((0)) FOR [TOT_ITEM_DISCOUNT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DISCOUNT_TOT_ALL_DISCOUNT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DISCOUNT] ADD  CONSTRAINT [DF_T_SALES_DISCOUNT_TOT_ALL_DISCOUNT]  DEFAULT ((0)) FOR [TOT_ALL_DISCOUNT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DISCOUNT_IS_CASH]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DISCOUNT] ADD  CONSTRAINT [DF_T_SALES_DISCOUNT_IS_CASH]  DEFAULT ((0)) FOR [IS_CASH]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DISCOUNT_CASH_PERCENT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DISCOUNT] ADD  CONSTRAINT [DF_T_SALES_DISCOUNT_CASH_PERCENT]  DEFAULT ((0)) FOR [CASH_PERCENT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DISCOUNT_TOTAL_CASH_PERCENT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DISCOUNT] ADD  CONSTRAINT [DF_T_SALES_DISCOUNT_TOTAL_CASH_PERCENT]  DEFAULT ((0)) FOR [TOTAL_CASH_PERCENT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DISCOUNT_IS_DEBIT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DISCOUNT] ADD  CONSTRAINT [DF_T_SALES_DISCOUNT_IS_DEBIT]  DEFAULT ((0)) FOR [IS_DEBIT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DISCOUNT_DEBIT_PERCENT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DISCOUNT] ADD  CONSTRAINT [DF_T_SALES_DISCOUNT_DEBIT_PERCENT]  DEFAULT ((0)) FOR [DEBIT_PERCENT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DISCOUNT_TOTAL_DEBIT_PERCENT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DISCOUNT] ADD  CONSTRAINT [DF_T_SALES_DISCOUNT_TOTAL_DEBIT_PERCENT]  DEFAULT ((0)) FOR [TOTAL_DEBIT_PERCENT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DISCOUNT_IS_PKT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DISCOUNT] ADD  CONSTRAINT [DF_T_SALES_DISCOUNT_IS_PKT]  DEFAULT ((0)) FOR [IS_PKT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DISCOUNT_PKT_PERCENT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DISCOUNT] ADD  CONSTRAINT [DF_T_SALES_DISCOUNT_PKT_PERCENT]  DEFAULT ((0)) FOR [PKT_PERCENT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DISCOUNT_TOTAL_PKT_PERCENT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DISCOUNT] ADD  CONSTRAINT [DF_T_SALES_DISCOUNT_TOTAL_PKT_PERCENT]  DEFAULT ((0)) FOR [TOTAL_PKT_PERCENT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DISCOUNT_IS_PKT1]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DISCOUNT] ADD  CONSTRAINT [DF_T_SALES_DISCOUNT_IS_PKT1]  DEFAULT ((0)) FOR [IS_SINGLE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DISCOUNT_PKT_PERCENT1]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DISCOUNT] ADD  CONSTRAINT [DF_T_SALES_DISCOUNT_PKT_PERCENT1]  DEFAULT ((0)) FOR [SINGLE_PERCENT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DISCOUNT_TOTAL_PKT_PERCENT1]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DISCOUNT] ADD  CONSTRAINT [DF_T_SALES_DISCOUNT_TOTAL_PKT_PERCENT1]  DEFAULT ((0)) FOR [TOTAL_SINGLE_PERCENT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DISCOUNT_CLICK_ITEM]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DISCOUNT] ADD  CONSTRAINT [DF_T_SALES_DISCOUNT_CLICK_ITEM]  DEFAULT ((0)) FOR [CLICK_ITEM]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_DISCOUNT_CLICK_ALL]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_DISCOUNT] ADD  CONSTRAINT [DF_T_SALES_DISCOUNT_CLICK_ALL]  DEFAULT ((0)) FOR [CLICK_ALL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_EXPENSES_BILL_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_EXPENSES] ADD  CONSTRAINT [DF_T_SALES_EXPENSES_BILL_DATE]  DEFAULT (getdate()) FOR [BILL_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_EXPENSES_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_EXPENSES] ADD  CONSTRAINT [DF_T_SALES_EXPENSES_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_FRUIT_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_FRUIT] ADD  CONSTRAINT [DF_T_SALES_FRUIT_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_FRUIT_TAG_PROCCESS_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_FRUIT] ADD  CONSTRAINT [DF_T_SALES_FRUIT_TAG_PROCCESS_CODE]  DEFAULT ((0)) FOR [TAG_PROCCESS_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_FRUIT_DRIVER_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_FRUIT] ADD  CONSTRAINT [DF_T_SALES_FRUIT_DRIVER_CODE]  DEFAULT ((0)) FOR [DRIVER_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_FRUIT_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_FRUIT] ADD  CONSTRAINT [DF_T_SALES_FRUIT_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_PATROL_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_PATROL] ADD  CONSTRAINT [DF_T_SALES_PATROL_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_PATROL_IS_ARSHEF]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_PATROL] ADD  CONSTRAINT [DF_T_SALES_PATROL_IS_ARSHEF]  DEFAULT ((0)) FOR [IS_ARSHEF]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TEMP_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TEMP_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TEMP_BILL_BUY]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_BILL_BUY]  DEFAULT ((-999999)) FOR [BILL_BUY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TEMP_PROCCESS_ID]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_PROCCESS_ID]  DEFAULT ((0)) FOR [PROCCESS_ID]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TEMP_IS_PRINT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_IS_PRINT]  DEFAULT ((0)) FOR [IS_PRINT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TEMP_DISCOUNT_TYPE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_DISCOUNT_TYPE]  DEFAULT ((0)) FOR [DISCOUNT_TYPE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TEMP_IS_SERIAL]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_IS_SERIAL]  DEFAULT ((0)) FOR [IS_SERIAL]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TEMP_IS_TAX]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_IS_TAX]  DEFAULT ((0)) FOR [IS_TAX]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TEMP_TAX_PERCENT_ITEM]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_TAX_PERCENT_ITEM]  DEFAULT ((0)) FOR [TAX_PERCENT_ITEM]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TEMP_TAX_AMO_ITEM]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_TAX_AMO_ITEM]  DEFAULT ((0)) FOR [TAX_AMO_ITEM]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TEMP_IS_MANDOOB]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_IS_MANDOOB]  DEFAULT ((0)) FOR [IS_MANDOOB]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TEMP_MANDOOB_PERCENT_ITEM]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_MANDOOB_PERCENT_ITEM]  DEFAULT ((0)) FOR [MANDOOB_PERCENT_ITEM]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TEMP_MANDOOB_AMO_ITEM]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_MANDOOB_AMO_ITEM]  DEFAULT ((0)) FOR [MANDOOB_AMO_ITEM]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TEMP_QTY_FREE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_QTY_FREE]  DEFAULT ((0)) FOR [QTY_FREE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SALES_TEMP_TOTAL_QTY]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SALES_TEMP] ADD  CONSTRAINT [DF_T_SALES_TEMP_TOTAL_QTY]  DEFAULT ((0)) FOR [TOTAL_QTY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD] ADD  CONSTRAINT [DF_T_SANAD_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_OFFER_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD] ADD  CONSTRAINT [DF_T_SANAD_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_IS_TRANS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD] ADD  CONSTRAINT [DF_T_SANAD_IS_TRANS]  DEFAULT ((0)) FOR [IS_TRANS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_GUIDS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD] ADD  CONSTRAINT [DF_T_SANAD_GUIDS]  DEFAULT (newid()) FOR [GUIDS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_BILL_RELATION]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD] ADD  CONSTRAINT [DF_T_SANAD_BILL_RELATION]  DEFAULT ((0)) FOR [BILL_RELATION]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_B_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD] ADD  CONSTRAINT [DF_T_SANAD_B_CODE]  DEFAULT ((-1)) FOR [B_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_CASH_USA]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD] ADD  CONSTRAINT [DF_T_SANAD_CASH_USA]  DEFAULT ((0)) FOR [CASH_USA]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_CASH_IQ]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD] ADD  CONSTRAINT [DF_T_SANAD_CASH_IQ]  DEFAULT ((0)) FOR [CASH_IQ]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_CNY_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_CNY] ADD  CONSTRAINT [DF_T_SANAD_CNY_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_CNY_OFFER_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_CNY] ADD  CONSTRAINT [DF_T_SANAD_CNY_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_CNY_IS_TRANS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_CNY] ADD  CONSTRAINT [DF_T_SANAD_CNY_IS_TRANS]  DEFAULT ((0)) FOR [IS_TRANS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_CNY_GUIDS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_CNY] ADD  CONSTRAINT [DF_T_SANAD_CNY_GUIDS]  DEFAULT (newid()) FOR [GUIDS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_CNY_CURRANCR_BUY]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_CNY] ADD  CONSTRAINT [DF_T_SANAD_CNY_CURRANCR_BUY]  DEFAULT ((0)) FOR [CURRANCR_BUY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_CNY_DISCOUNT_PERC]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_CNY] ADD  CONSTRAINT [DF_T_SANAD_CNY_DISCOUNT_PERC]  DEFAULT ((0)) FOR [DISCOUNT_PERC]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_CNY_TOTAL_BUY]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_CNY] ADD  CONSTRAINT [DF_T_SANAD_CNY_TOTAL_BUY]  DEFAULT ((0)) FOR [TOTAL_BUY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_CNY_BILL_RELATION]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_CNY] ADD  CONSTRAINT [DF_T_SANAD_CNY_BILL_RELATION]  DEFAULT ((0)) FOR [BILL_RELATION]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_CNY_B_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_CNY] ADD  CONSTRAINT [DF_T_SANAD_CNY_B_CODE]  DEFAULT ((-1)) FOR [B_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_DOLLAR_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_DOLLAR] ADD  CONSTRAINT [DF_T_SANAD_DOLLAR_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_DOLLAR_OFFER_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_DOLLAR] ADD  CONSTRAINT [DF_T_SANAD_DOLLAR_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_DOLLAR_IS_TRANS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_DOLLAR] ADD  CONSTRAINT [DF_T_SANAD_DOLLAR_IS_TRANS]  DEFAULT ((0)) FOR [IS_TRANS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_DOLLAR_GUIDS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_DOLLAR] ADD  CONSTRAINT [DF_T_SANAD_DOLLAR_GUIDS]  DEFAULT (newid()) FOR [GUIDS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_HAWALA_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_HAWALA] ADD  CONSTRAINT [DF_T_SANAD_HAWALA_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_HAWALA_OFFER_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_HAWALA] ADD  CONSTRAINT [DF_T_SANAD_HAWALA_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_HAWALA_IS_TRANS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_HAWALA] ADD  CONSTRAINT [DF_T_SANAD_HAWALA_IS_TRANS]  DEFAULT ((0)) FOR [IS_TRANS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_HAWALA_HISTORY_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_HAWALA_HISTORY] ADD  CONSTRAINT [DF_T_SANAD_HAWALA_HISTORY_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_HAWALA_HISTORY_OFFER_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_HAWALA_HISTORY] ADD  CONSTRAINT [DF_T_SANAD_HAWALA_HISTORY_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_HAWALA_HISTORY_IS_TRANS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_HAWALA_HISTORY] ADD  CONSTRAINT [DF_T_SANAD_HAWALA_HISTORY_IS_TRANS]  DEFAULT ((0)) FOR [IS_TRANS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_KAYD_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_KAYD] ADD  CONSTRAINT [DF_T_SANAD_KAYD_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_KAYD_OFFER_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_KAYD] ADD  CONSTRAINT [DF_T_SANAD_KAYD_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_KAYD_IS_TRANS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_KAYD] ADD  CONSTRAINT [DF_T_SANAD_KAYD_IS_TRANS]  DEFAULT ((0)) FOR [IS_TRANS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_KAYD_GUIDS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_KAYD] ADD  CONSTRAINT [DF_T_SANAD_KAYD_GUIDS]  DEFAULT (newid()) FOR [GUIDS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_KAYD_DETAILS_DEBIT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_KAYD_DETAILS] ADD  CONSTRAINT [DF_T_SANAD_KAYD_DETAILS_DEBIT]  DEFAULT ((0)) FOR [DEBIT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_KAYD_DETAILS_CREDIT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_KAYD_DETAILS] ADD  CONSTRAINT [DF_T_SANAD_KAYD_DETAILS_CREDIT]  DEFAULT ((0)) FOR [CREDIT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_KAYD_DETAILS_DEBIT_IQ]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_KAYD_DETAILS] ADD  CONSTRAINT [DF_T_SANAD_KAYD_DETAILS_DEBIT_IQ]  DEFAULT ((0)) FOR [DEBIT_IQ]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_KAYD_DETAILS_CREDIT_IQ]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_KAYD_DETAILS] ADD  CONSTRAINT [DF_T_SANAD_KAYD_DETAILS_CREDIT_IQ]  DEFAULT ((0)) FOR [CREDIT_IQ]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_KAYD_DETAILS_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_KAYD_DETAILS] ADD  CONSTRAINT [DF_T_SANAD_KAYD_DETAILS_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_SMAH_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_SMAH] ADD  CONSTRAINT [DF_T_SANAD_SMAH_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_SMAH_OFFER_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_SMAH] ADD  CONSTRAINT [DF_T_SANAD_SMAH_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_SMAH_IS_TRANS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_SMAH] ADD  CONSTRAINT [DF_T_SANAD_SMAH_IS_TRANS]  DEFAULT ((0)) FOR [IS_TRANS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_SANAD_SMAH_GUIDS]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_SANAD_SMAH] ADD  CONSTRAINT [DF_T_SANAD_SMAH_GUIDS]  DEFAULT (newid()) FOR [GUIDS]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_STORE_BOX_CREATE_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_STORE_BOX] ADD  CONSTRAINT [DF_T_STORE_BOX_CREATE_DATE]  DEFAULT (getdate()) FOR [BILL_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_STORE_BOX_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_STORE_BOX] ADD  CONSTRAINT [DF_T_STORE_BOX_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_STORE_BOX_IS_AVG_COST]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_STORE_BOX] ADD  CONSTRAINT [DF_T_STORE_BOX_IS_AVG_COST]  DEFAULT ((0)) FOR [IS_AVG_COST]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_STORE_BOX_AVG_COST]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_STORE_BOX] ADD  CONSTRAINT [DF_T_STORE_BOX_AVG_COST]  DEFAULT ((0)) FOR [AVG_COST]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_STORE_BOX_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_STORE_BOX] ADD  CONSTRAINT [DF_T_STORE_BOX_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_STORE_TRANSFARE_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_STORE_TRANSFARE] ADD  CONSTRAINT [DF_T_STORE_TRANSFARE_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_STORE_TRANSFARE_OFFER_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_STORE_TRANSFARE] ADD  CONSTRAINT [DF_T_STORE_TRANSFARE_OFFER_CODE]  DEFAULT ((0)) FOR [OFFER_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_STORE_TRANSFARE_DETAILS_IS_PRINT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_STORE_TRANSFARE_DETAILS] ADD  CONSTRAINT [DF_T_STORE_TRANSFARE_DETAILS_IS_PRINT]  DEFAULT ((0)) FOR [IS_PRINT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_STORE_TYPE_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_STORE_TYPE] ADD  CONSTRAINT [DF_T_STORE_TYPE_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_STORE_TYPE_ID_BRANCH_DATA]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_STORE_TYPE] ADD  CONSTRAINT [DF_T_STORE_TYPE_ID_BRANCH_DATA]  DEFAULT ((0)) FOR [ID_BRANCH_DATA]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_TABOOR_ORDER_TYPES_SHOW_IMG]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_TABOOR_ORDER_TYPES] ADD  CONSTRAINT [DF_T_TABOOR_ORDER_TYPES_SHOW_IMG]  DEFAULT ((1)) FOR [SHOW_IMG]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_TAG_PROCCESS_ACCOUNT_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_TAG_PROCCESS] ADD  CONSTRAINT [DF_T_TAG_PROCCESS_ACCOUNT_CODE]  DEFAULT ((0)) FOR [ACCOUNT_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_TELE_SYNC_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_TELE_SYNC] ADD  CONSTRAINT [DF_T_TELE_SYNC_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_TELE_SYNC_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_TELE_SYNC] ADD  CONSTRAINT [DF_T_TELE_SYNC_ACTIVE]  DEFAULT ((1)) FOR [ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF__T_TEMP_SA__IS_SY__67CEEA4B]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_TEMP_SALES_HEADER] ADD  CONSTRAINT [DF__T_TEMP_SA__IS_SY__67CEEA4B]  DEFAULT ((0)) FOR [IS_SYNCED]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_USER_DETAILS_IS_CHECKED]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_USER_DETAILS] ADD  CONSTRAINT [DF_T_USER_DETAILS_IS_CHECKED]  DEFAULT ((0)) FOR [IS_CHECKED]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_USERS_LOG_IN]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_USERS] ADD  CONSTRAINT [DF_T_USERS_LOG_IN]  DEFAULT ((0)) FOR [LOG_IN]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_USERS_IS_ENC]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_USERS] ADD  CONSTRAINT [DF_T_USERS_IS_ENC]  DEFAULT ((1)) FOR [IS_ENC]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_USERS_SECURETY_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_USERS] ADD  CONSTRAINT [DF_T_USERS_SECURETY_CODE]  DEFAULT ((1)) FOR [SECURETY_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_USERS_MANDOOB_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_USERS] ADD  CONSTRAINT [DF_T_USERS_MANDOOB_CODE]  DEFAULT ((-10)) FOR [MANDOOB_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_USERS_STORE_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_USERS] ADD  CONSTRAINT [DF_T_USERS_STORE_CODE]  DEFAULT ((-10)) FOR [STORE_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_USERS_TYPE_PRICE_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_USERS] ADD  CONSTRAINT [DF_T_USERS_TYPE_PRICE_CODE]  DEFAULT ((-10)) FOR [TYPE_PRICE_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_USERS_DRIVER_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_USERS] ADD  CONSTRAINT [DF_T_USERS_DRIVER_CODE]  DEFAULT ((0)) FOR [DRIVER_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_USERS_IS_TRY]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_USERS] ADD  CONSTRAINT [DF_T_USERS_IS_TRY]  DEFAULT ((0)) FOR [IS_TRY]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_VERSION_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_VERSION] ADD  CONSTRAINT [DF_T_VERSION_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_VERSION_DATA_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_VERSION_DATA] ADD  CONSTRAINT [DF_T_VERSION_DATA_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_VERSION_NEW_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_VERSION_NEW] ADD  CONSTRAINT [DF_T_VERSION_NEW_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_WAJBA_WAJBA_ACTIVE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_WAJBA] ADD  CONSTRAINT [DF_T_WAJBA_WAJBA_ACTIVE]  DEFAULT ((1)) FOR [WAJBA_ACTIVE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_T_WAJBA_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[T_WAJBA] ADD  CONSTRAINT [DF_T_WAJBA_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_TA_CARS_TAG_PROCCESS_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[TA_CARS] ADD  CONSTRAINT [DF_TA_CARS_TAG_PROCCESS_CODE]  DEFAULT ((0)) FOR [TAG_PROCCESS_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_TA_CARS_EXPENSES_BILL_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[TA_CARS_EXPENSES] ADD  CONSTRAINT [DF_TA_CARS_EXPENSES_BILL_DATE]  DEFAULT (getdate()) FOR [BILL_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_TA_CARS_EXPENSES_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[TA_CARS_EXPENSES] ADD  CONSTRAINT [DF_TA_CARS_EXPENSES_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_TA_CARS_SPICIAL_TAG_PROCCESS_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[TA_CARS_SPICIAL] ADD  CONSTRAINT [DF_TA_CARS_SPICIAL_TAG_PROCCESS_CODE]  DEFAULT ((0)) FOR [TAG_PROCCESS_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_TA_PROJECT_TAG_PROCCESS_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[TA_PROJECT] ADD  CONSTRAINT [DF_TA_PROJECT_TAG_PROCCESS_CODE]  DEFAULT ((0)) FOR [TAG_PROCCESS_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_TA_PROJECT_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[TA_PROJECT] ADD  CONSTRAINT [DF_TA_PROJECT_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_TA_STUDENT_ACCOUNT_CODE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[TA_STUDENT] ADD  CONSTRAINT [DF_TA_STUDENT_ACCOUNT_CODE]  DEFAULT ((0)) FOR [ACCOUNT_CODE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_TA_STUDENT_TOTAL_AMO]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[TA_STUDENT] ADD  CONSTRAINT [DF_TA_STUDENT_TOTAL_AMO]  DEFAULT ((0)) FOR [TOTAL_AMO]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_TB_MAINTENANCE_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[TB_MAINTENANCE] ADD  CONSTRAINT [DF_TB_MAINTENANCE_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_TB_NEWS_IS_READ]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[TB_NEWS] ADD  CONSTRAINT [DF_TB_NEWS_IS_READ]  DEFAULT ((0)) FOR [IS_READ]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_Attendances_sn]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[tblAttendances] ADD  CONSTRAINT [DF_Attendances_sn]  DEFAULT ('''') FOR [sn]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_Attendances_enrollid]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[tblAttendances] ADD  CONSTRAINT [DF_Attendances_enrollid]  DEFAULT ('''') FOR [enrollid]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_Attendances_time]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[tblAttendances] ADD  CONSTRAINT [DF_Attendances_time]  DEFAULT (getdate()) FOR [time]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_Attendances_createdat]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[tblAttendances] ADD  CONSTRAINT [DF_Attendances_createdat]  DEFAULT (getdate()) FOR [createdat]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_tblAttendances_IS_SHOW]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[tblAttendances] ADD  CONSTRAINT [DF_tblAttendances_IS_SHOW]  DEFAULT ((0)) FOR [IS_SHOW]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_tblAttendances_IS_ALERT]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[tblAttendances] ADD  CONSTRAINT [DF_tblAttendances_IS_ALERT]  DEFAULT ((0)) FOR [IS_ALERT]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_tblDeleteUsers_sn]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[tblDeleteUsers] ADD  CONSTRAINT [DF_tblDeleteUsers_sn]  DEFAULT ('''') FOR [sn]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_tblDeleteUsers_enrollid]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[tblDeleteUsers] ADD  CONSTRAINT [DF_tblDeleteUsers_enrollid]  DEFAULT ((0)) FOR [enrollid]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_tblDeleteUsers_backupnum]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[tblDeleteUsers] ADD  CONSTRAINT [DF_tblDeleteUsers_backupnum]  DEFAULT ((0)) FOR [backupnum]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_tblDeleteUsers_sent]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[tblDeleteUsers] ADD  CONSTRAINT [DF_tblDeleteUsers_sent]  DEFAULT ((0)) FOR [sent]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_tblDeleteUsers_createdat]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[tblDeleteUsers] ADD  CONSTRAINT [DF_tblDeleteUsers_createdat]  DEFAULT (getdate()) FOR [createdat]
END

 
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''[dbo].[DF_TH_ROOM_BOOKING_C_DATE]'') AND type = ''D'')
BEGIN
ALTER TABLE [dbo].[TH_ROOM_BOOKING] ADD  CONSTRAINT [DF_TH_ROOM_BOOKING_C_DATE]  DEFAULT (getdate()) FOR [C_DATE]
END

 

-------------------------------------------------------------------------------
--- نهاية السكربت
-------------------------------------------------------------------------------
PRINT ''جميع الفهارس (Indexes) تم توليدها بنجاح أو موجودة مسبقاً.'';
 
 
	
END


 


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_CHECK_EXIST_INDEX_DELETE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_CHECK_EXIST_INDEX_DELETE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




CREATE PROCEDURE [dbo].[P_CHECK_EXIST_INDEX_DELETE]

	
 
AS
BEGIN
 
 
 DECLARE @SQL NVARCHAR(MAX) = '''';
SELECT @SQL += ''DROP INDEX ['' + i.name + ''] ON ['' + SCHEMA_NAME(t.schema_id) + ''].['' + t.name + ''];'' + CHAR(13)
FROM sys.indexes i
JOIN sys.tables t ON i.object_id = t.object_id
WHERE i.is_primary_key = 0
  AND i.is_unique_constraint = 0
  AND i.type_desc IN (''NONCLUSTERED'', ''CLUSTERED'');

PRINT @SQL;
-- لتطبيق الحذف فعلياً:
  EXEC sp_executesql @SQL;

 


-------------------------------------------------------------------------------
--- نهاية السكربت
-------------------------------------------------------------------------------
PRINT ''جميع الفهارس (Indexes) تم حذف بنجاح  .'';
 
 
	
END


 



' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_CHECK_FIX_ERROR_T_STORE_BOX_SALES_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_CHECK_FIX_ERROR_T_STORE_BOX_SALES_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_CHECK_FIX_ERROR_T_STORE_BOX_SALES_DETAILS]
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @BILL_NUMBER_CURSOR INT,
            @ITEM_CODE_CURSOR INT;

    DECLARE BOX_CURSOR CURSOR LOCAL FAST_FORWARD FOR
        SELECT BILL_NUMBER, ITEM_CODE
        FROM [V_A_ERROR_T_STORE_BOX_SALES_DETAILS];

    OPEN BOX_CURSOR;

    FETCH NEXT FROM BOX_CURSOR INTO @BILL_NUMBER_CURSOR, @ITEM_CODE_CURSOR;
    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- حذف السجلات الحالية في T_STORE_BOX التي لها B_CODE = 2 لنفس رقم الفاتورة والصنف
        DELETE FROM T_STORE_BOX
        WHERE BILL_NUMBER = @BILL_NUMBER_CURSOR
          AND B_CODE = 2
          AND ITEM_CODE = @ITEM_CODE_CURSOR;

        -- إدراج سجلات جديدة في T_STORE_BOX بناءً على بيانات T_SALES_DETAILS
        INSERT INTO dbo.T_STORE_BOX
        (
            BILL_BRANCH,
            BILL_NUMBER,
            BILL_DATE,
            B_CODE,
            WAJBA_CODE,
            STORE_CODE,
            EXP_DATE,
            ITEM_CODE,
            UNIT_CODE,
            ST_IN,
            ST_OUT,
            QTY_UNIT,
            ACTIVE
        )
        SELECT 
            tsd.BILL_BRANCH,
            tsd.BILL_NUMBER,
            (
                SELECT TOP(1) BILL_DATE
                FROM T_SALES
                WHERE BILL_NUMBER = @BILL_NUMBER_CURSOR
                ORDER BY BILL_NUMBER DESC
            ) AS BILL_DATE,
            2 AS B_CODE,
            0 AS WAJBA_CODE,
            tsd.STORE_CODE,
            NULL AS EXP_DATE,
            tsd.ITEM_CODE,
            (
                SELECT TOP(1) UNIT_CODE
                FROM T_ITEM_UNIT
                WHERE ITEM_CODE = @ITEM_CODE_CURSOR
            ) AS UNIT_CODE,
            0 AS ST_IN,
            tsd.TOTAL_QTY AS ST_OUT,
            tsd.UNIT_QTY,
            1 AS ACTIVE
        FROM dbo.T_SALES_DETAILS AS tsd
        WHERE tsd.BILL_NUMBER = @BILL_NUMBER_CURSOR
          AND tsd.ITEM_CODE = @ITEM_CODE_CURSOR
          AND tsd.ACTIVE = 1;

        FETCH NEXT FROM BOX_CURSOR INTO @BILL_NUMBER_CURSOR, @ITEM_CODE_CURSOR;
    END

    CLOSE BOX_CURSOR;
    DEALLOCATE BOX_CURSOR;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_CHECK_INSERT_COLUMNS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_CHECK_INSERT_COLUMNS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
 
CREATE PROCEDURE [dbo].[P_CHECK_INSERT_COLUMNS]

AS
BEGIN

 
SET IDENTITY_INSERT [dbo].[T_TABOOR_ORDER_TYPES] ON 

IF NOT EXISTS (select [ID] from [T_TABOOR_ORDER_TYPES] where [ID] =1 )INSERT [dbo].[T_TABOOR_ORDER_TYPES] ([ID], [TYPE], [SORT], [BG_COLOR], [HEADER_FONTSIZE], [HEADER_COLOR], [CARD_BGCOLOR], [CARD_RADIUS], [CARD_THICKNESS_HEIGHT], [CARD_THICKNESS_COLOR], [CARD_SHADOW_COLOR], [CARD_SHADOW_ELEVATION], [CARD_FONTCOLOR], [CARD_FONTSIZE], [CARD_SUBTITLE], [CARD_SUBTITLE_COLOR], [CARD_SUBTITLE_FONTSIZE], [MAX_ROW], [MAX_COLUMN], [BG_IMAGE], [BG_IMAGE_OPACITY], [BG_IMAGE_POSITION], [BG_IMAGE_SIZE], [SHOW_IMG]) VALUES (1, N''قيد التجهيز'', 1, N''41413e'', 25, N''FFFFFF'', N''FFFFFF'', N''0;0;0;0'', 5, N''FFFFFF'', N''000000'', 0, N''000000'', 20, N'' '', N''000000'', 20, 0, 15, N'''', 0, N''0;0;0;0'', N''150;150'', 0)
IF NOT EXISTS (select [ID] from [T_TABOOR_ORDER_TYPES] where [ID] =2 )INSERT [dbo].[T_TABOOR_ORDER_TYPES] ([ID], [TYPE], [SORT], [BG_COLOR], [HEADER_FONTSIZE], [HEADER_COLOR], [CARD_BGCOLOR], [CARD_RADIUS], [CARD_THICKNESS_HEIGHT], [CARD_THICKNESS_COLOR], [CARD_SHADOW_COLOR], [CARD_SHADOW_ELEVATION], [CARD_FONTCOLOR], [CARD_FONTSIZE], [CARD_SUBTITLE], [CARD_SUBTITLE_COLOR], [CARD_SUBTITLE_FONTSIZE], [MAX_ROW], [MAX_COLUMN], [BG_IMAGE], [BG_IMAGE_OPACITY], [BG_IMAGE_POSITION], [BG_IMAGE_SIZE], [SHOW_IMG]) VALUES (2, N''الطلبات المكتملة'', 1, N''BDBDBC'', 45, N''FFFFFF'', N''FFFFFF'', N''0;0;0;0'', 5, N''27AD5E'', N''000000'', 1, N''000000'', 20, N'' '', N''000000'', 9.1, 3, 2, N'''', 0, N''0;0;0;0'', N''150;0'', 0)
SET IDENTITY_INSERT [dbo].[T_TABOOR_ORDER_TYPES] OFF
 
SET IDENTITY_INSERT [dbo].[T_TABOOR_TIME_RESET] ON 

IF NOT EXISTS (select [ID] from [T_TABOOR_TIME_RESET] where [ID] =1 )INSERT [dbo].[T_TABOOR_TIME_RESET] ([ID], [TIME_RESET], [DSCRP], [IS_SHOW]) VALUES (1, 6, N''لتصفير الطلبات بالساعة'', 1)
IF NOT EXISTS (select [ID] from [T_TABOOR_TIME_RESET] where [ID] =2 )INSERT [dbo].[T_TABOOR_TIME_RESET] ([ID], [TIME_RESET], [DSCRP], [IS_SHOW]) VALUES (2, 100, N''لحذف الطلبات القديمة بالدقيقة'', 1)
IF NOT EXISTS (select [ID] from [T_TABOOR_TIME_RESET] where [ID] =3 )INSERT [dbo].[T_TABOOR_TIME_RESET] ([ID], [TIME_RESET], [DSCRP], [IS_SHOW]) VALUES (3, 2, N''تحديث الطلبات بالثواني'', 1)
SET IDENTITY_INSERT [dbo].[T_TABOOR_TIME_RESET] OFF


 

--//////////////////////////////////////////////////////////// [T_STORE_ID_MAX] /////////////////////////////////////////////////////////////////////////////////////////////////////////
IF NOT EXISTS (select [T_ID] from [T_STORE_ID_MAX] where [T_ID] =1  ) INSERT [dbo].[T_STORE_ID_MAX] ([T_ID], [MAX_ID_STORE] ) VALUES (1, 0)

--//////////////////////////////////////////////////////////// [TH_ROOM_STATUS] /////////////////////////////////////////////////////////////////////////////////////////////////////////
IF NOT EXISTS (select [ROOM_STATUS_CODE] from [TH_ROOM_STATUS] where [ROOM_STATUS_CODE] =0  ) INSERT [dbo].[TH_ROOM_STATUS] ([ROOM_STATUS_CODE], [ROOM_STATUS_NAME], [ROOM_STATUS_COLOR], [ROOM_STATUS_CSS], [ACTIVE]) VALUES (0, N''فارغة'', N''#d0d400'', N'' background-color: #edf6ed; color: #018401; border-color: #096dd9;'', 1)
IF NOT EXISTS (select [ROOM_STATUS_CODE] from [TH_ROOM_STATUS] where [ROOM_STATUS_CODE] =1  ) INSERT [dbo].[TH_ROOM_STATUS] ([ROOM_STATUS_CODE], [ROOM_STATUS_NAME], [ROOM_STATUS_COLOR], [ROOM_STATUS_CSS], [ACTIVE]) VALUES (1, N''محجوزة'', N''#9614fa'', N'' background-color: #fcf2f1; color: #9BBB59; border-color: #096dd9;'', 1)
IF NOT EXISTS (select [ROOM_STATUS_CODE] from [TH_ROOM_STATUS] where [ROOM_STATUS_CODE] =2  ) INSERT [dbo].[TH_ROOM_STATUS] ([ROOM_STATUS_CODE], [ROOM_STATUS_NAME], [ROOM_STATUS_COLOR], [ROOM_STATUS_CSS], [ACTIVE]) VALUES (2, N''شاغرة'', N''#E36C09'', N''background-color: #E36C09;color: White; border-color: #096dd9;'', 1)
IF NOT EXISTS (select [ROOM_STATUS_CODE] from [TH_ROOM_STATUS] where [ROOM_STATUS_CODE] =3  ) INSERT [dbo].[TH_ROOM_STATUS] ([ROOM_STATUS_CODE], [ROOM_STATUS_NAME], [ROOM_STATUS_COLOR], [ROOM_STATUS_CSS], [ACTIVE]) VALUES (3, N''تنظيف'', N''#1d5ef2'', N''background-color: #b8cdff;color: #1d5ef2; border-color: #096dd9;'', 1)


--//////////////////////////////////////////////////////////// [TH_ROOM_TYPE] /////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS (select [ROOM_TYPE_CODE] from [TH_ROOM_TYPE] where [ROOM_TYPE_CODE] =1  )  INSERT [dbo].[TH_ROOM_TYPE] ([ROOM_TYPE_CODE], [ROOM_TYPE_NAME], [ROOM_TYPE_COLOR], [ACTIVE]) VALUES (1, N''STANDARD'', N''#7F7F7F'', 1)
IF NOT EXISTS (select [ROOM_TYPE_CODE] from [TH_ROOM_TYPE] where [ROOM_TYPE_CODE] =2  )  INSERT [dbo].[TH_ROOM_TYPE] ([ROOM_TYPE_CODE], [ROOM_TYPE_NAME], [ROOM_TYPE_COLOR], [ACTIVE]) VALUES (2, N''VIP'', N''#9BBB59'', 1)
IF NOT EXISTS (select [ROOM_TYPE_CODE] from [TH_ROOM_TYPE] where [ROOM_TYPE_CODE] =3  )  INSERT [dbo].[TH_ROOM_TYPE] ([ROOM_TYPE_CODE], [ROOM_TYPE_NAME], [ROOM_TYPE_COLOR], [ACTIVE]) VALUES (3, N''Single'', N''#E36C09'', 1)
IF NOT EXISTS (select [ROOM_TYPE_CODE] from [TH_ROOM_TYPE] where [ROOM_TYPE_CODE] =4  )  INSERT [dbo].[TH_ROOM_TYPE] ([ROOM_TYPE_CODE], [ROOM_TYPE_NAME], [ROOM_TYPE_COLOR], [ACTIVE]) VALUES (4, N''Double'', N''#1942A6'', 1)


--//////////////////////////////////////////////////////////// [T_SALES_ZONE] /////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS (select [ZONE_CODE] from [T_SALES_ZONE] where [ZONE_CODE] =0  )  INSERT [dbo].[T_SALES_ZONE] ([ZONE_CODE], [ZONE_NAME], [ZONE_COLOR], [ACTIVE]) VALUES (0, N''...'', -1, 1)

--//////////////////////////////////////////////////////////// [[T_MAINTENANCE_GUARANTEE_TYPE]] /////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS (select [GUARANTEE_TYPE_CODE] from [T_MAINTENANCE_GUARANTEE_TYPE] where [GUARANTEE_TYPE_CODE] =1  )  INSERT INTO [dbo].[T_MAINTENANCE_GUARANTEE_TYPE] ([GUARANTEE_TYPE_CODE] ,[GUARANTEE_TYPE_NAME]  ,[ACTIVE])  VALUES (1, N''داخل الضمان'', 1 )
IF NOT EXISTS (select [GUARANTEE_TYPE_CODE] from [T_MAINTENANCE_GUARANTEE_TYPE] where [GUARANTEE_TYPE_CODE] =2  )  INSERT INTO [dbo].[T_MAINTENANCE_GUARANTEE_TYPE] ([GUARANTEE_TYPE_CODE] ,[GUARANTEE_TYPE_NAME]  ,[ACTIVE])  VALUES (2, N''خارج الضمان'', 1 )


--//////////////////////////////////////////////////////////// [T_MAINTENANCE_TYPE] /////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS (select [MAINTENANCE_TYPE_CODE] from [T_MAINTENANCE_TYPE] where [MAINTENANCE_TYPE_CODE] =1  )  INSERT INTO [dbo].[T_MAINTENANCE_TYPE]  ([MAINTENANCE_TYPE_CODE]   ,[MAINTENANCE_TYPE_NAME]   ,[ACTIVE])  VALUES (1, N''موقعي'', 1 )
IF NOT EXISTS (select [MAINTENANCE_TYPE_CODE] from [T_MAINTENANCE_TYPE] where [MAINTENANCE_TYPE_CODE] =2  )  INSERT INTO [dbo].[T_MAINTENANCE_TYPE]  ([MAINTENANCE_TYPE_CODE]   ,[MAINTENANCE_TYPE_NAME]   ,[ACTIVE])  VALUES (2, N''ورشة'', 1 )

 --//////////////////////////////////////////////////////////// [T_MAINTENANCE_DEVICE_ERROR] /////////////////////////////////////////////////////////////////////////////////////////////////////////
 IF NOT EXISTS (select [T_ID_ERROR] from [T_MAINTENANCE_DEVICE_ERROR] where [T_ID_ERROR] =0  )  INSERT INTO [dbo].[T_MAINTENANCE_DEVICE_ERROR] ([T_ID_ERROR] ,[DEVICE_TYPE],[DEVICE_MODEL] ,[ERROR_CODE]  ,[ERROR_NOTE_AR] ,[ERROR_NOTE_EN],[C_DATE])  VALUES (0, N'''',N'''', N'''',N'''',N'''', GETDATE())
 




 
--/////////////////////[T_SALES_SHIPPING]///////////////////////////////////////[T_WAJBA_SORT]/////////////////////////////////////////////////////////////////////////////////////////////////////////
IF NOT EXISTS (select [SHIP_CODE] from [T_SALES_SHIPPING] where [SHIP_CODE] = 0 ) INSERT INTO [dbo].[T_SALES_SHIPPING] ([SHIP_CODE],[SHIP_NAME] ,[ACCOUNT_CODE],[SHIP_COST] ,[IS_AMO_MANDOOB],[IS_AMO_CLIENT],[SHIP_COST_CLIENT]) VALUES(0,N''...'',0,0,1,1,0)


--////////////////////////////////////////////////////////////[T_A_DATA_RESTURANT]/////////////////////////////////////////////////////////////////////////////////////////////////////////
DELETE FROM [T_A_DATA_RESTURANT] WHERE [T_ID]=1 AND [PC_NAME]<> N''.\SALES_DEV''
SET IDENTITY_INSERT [dbo].[T_A_DATA_RESTURANT] ON 
IF NOT EXISTS (select [T_ID] from [T_A_DATA_RESTURANT] where [T_ID] = 1 )INSERT [dbo].[T_A_DATA_RESTURANT] ([T_ID], [BRANCH_NAME], [PC_NAME], [SERVER_NAME], [USER_NAME], [USER_PASSWORD], [DATABASE_NAME], [C_DATE]) VALUES (1, N''ME'', N''.\SALES_DEV'', N'''', N''sa'', N''12345'', N''SPEEDOO_DB'', GETDATE())
SET IDENTITY_INSERT [dbo].[T_A_DATA_RESTURANT] OFF
--////////////////////////////////////////////////////////////[T_A_DATA_RESTURANT]/////////////////////////////////////////////////////////////////////////////////////////////////////////
SET IDENTITY_INSERT [dbo].[T_WAJBA] ON 

IF NOT EXISTS (select [WAJBA_CODE] from [T_WAJBA] where [WAJBA_CODE] = 1 )INSERT [dbo].[T_WAJBA] ([WAJBA_CODE], [WAJBA_NAME], [WAJBA_ACTIVE], [C_DATE]) VALUES (CAST(1 AS Numeric(18, 0)), N''.'', 1, GETDATE())
IF NOT EXISTS (select [WAJBA_CODE] from [T_WAJBA] where [WAJBA_CODE] = 2 )INSERT [dbo].[T_WAJBA] ([WAJBA_CODE], [WAJBA_NAME], [WAJBA_ACTIVE], [C_DATE]) VALUES (CAST(2 AS Numeric(18, 0)), N''وجبة ارصدة اولية'', 1, GETDATE())
SET IDENTITY_INSERT [dbo].[T_WAJBA] OFF

SET IDENTITY_INSERT [dbo].[T_PRINTER] ON 

IF NOT EXISTS (select [T_ID] from [T_PRINTER] where [T_ID] = 0 ) INSERT [dbo].[T_PRINTER] ([T_ID], [PRINTER_NAME], [DEVICE_NAME], [IS_SCALE], [STORE_CODE]) VALUES (0, N'''', N'''', 0, 0)
SET IDENTITY_INSERT [dbo].[T_PRINTER] OFF


--/////////////////////[T_WAJBA_TYPE]///////////////////////////////////////[T_WAJBA_SORT]/////////////////////////////////////////////////////////////////////////////////////////////////////////
IF NOT EXISTS (select [SORTING] from [T_WAJBA_SORT] where [SORTING] = N''ASC'' ) INSERT [dbo].[T_WAJBA_SORT] ([SORTING], [NAME_SORT]) VALUES (N''ASC'', N''تصاعدي'')
IF NOT EXISTS (select [SORTING] from [T_WAJBA_SORT] where [SORTING] = N''DESC'' ) INSERT [dbo].[T_WAJBA_SORT] ([SORTING], [NAME_SORT]) VALUES (N''DESC'', N''تنازلي'')
IF NOT EXISTS (select [COL_NAME] from [T_WAJBA_TYPE] where [COL_NAME] = N''BILL_DATE'' ) INSERT [dbo].[T_WAJBA_TYPE] ([COL_NAME], [N_NAME], [SORTING]) VALUES (N''BILL_DATE'', N''تاريخ الفاتورة'', N''ASC'')
IF NOT EXISTS (select [COL_NAME] from [T_WAJBA_TYPE] where [COL_NAME] = N''BILL_NUMBER'' )INSERT [dbo].[T_WAJBA_TYPE] ([COL_NAME], [N_NAME], [SORTING]) VALUES (N''BILL_NUMBER'', N''رقم الفاتورة'', N''ASC'')
IF NOT EXISTS (select [COL_NAME] from [T_WAJBA_TYPE] where [COL_NAME] = N''COST'' )INSERT [dbo].[T_WAJBA_TYPE] ([COL_NAME], [N_NAME], [SORTING]) VALUES (N''COST'', N''الكلفة'', N''ASC'')
IF NOT EXISTS (select [COL_NAME] from [T_WAJBA_TYPE] where [COL_NAME] = N''EXP_DATE'' )INSERT [dbo].[T_WAJBA_TYPE] ([COL_NAME], [N_NAME], [SORTING]) VALUES (N''EXP_DATE'', N''تاريخ الصلاحية'', N''ASC'')

IF NOT EXISTS (select [T_ID] from [T_WORK_JOB] where [T_ID] = 1 )INSERT [dbo].[T_WORK_JOB] ([T_ID], [D_DATE], [START_DATE], [IS_ON_OFF]) VALUES (1, NULL, NULL, 0)
--////////////////////////////////////////////////////////////[[T_ACCOUNT_FINAL]]/////////////////////////////////////////////////////////////////////////////////////////////////////////
IF NOT EXISTS (select [FINAL_CODE] from [T_ACCOUNT_FINAL] where [FINAL_CODE] = 1 )INSERT [dbo].[T_ACCOUNT_FINAL] ([FINAL_CODE], [FINAL_NAME]) VALUES (1, N''الميزانية'')
IF NOT EXISTS (select [FINAL_CODE] from [T_ACCOUNT_FINAL] where [FINAL_CODE] = 2 )INSERT [dbo].[T_ACCOUNT_FINAL] ([FINAL_CODE], [FINAL_NAME]) VALUES (2, N''الارباح و الخسائر'')
IF NOT EXISTS (select [FINAL_CODE] from [T_ACCOUNT_FINAL] where [FINAL_CODE] = 3 )INSERT [dbo].[T_ACCOUNT_FINAL] ([FINAL_CODE], [FINAL_NAME]) VALUES (3, N''المتاجرة'')

--////////////////////////////////////////////////////////////[[[T_AKSAT_TYPE]]]/////////////////////////////////////////////////////////////////////////////////////////////////////////
IF NOT EXISTS (select [AKSAT_TYPE_CODE] from [T_AKSAT_TYPE] where [AKSAT_TYPE_CODE] = 0 )INSERT [dbo].[T_AKSAT_TYPE] ([AKSAT_TYPE_CODE], [AKSAT_TYPE_NAME]) VALUES (0, N''يومي'')
IF NOT EXISTS (select [AKSAT_TYPE_CODE] from [T_AKSAT_TYPE] where [AKSAT_TYPE_CODE] = 1 )INSERT [dbo].[T_AKSAT_TYPE] ([AKSAT_TYPE_CODE], [AKSAT_TYPE_NAME]) VALUES (1, N''اسبوعي'')
IF NOT EXISTS (select [AKSAT_TYPE_CODE] from [T_AKSAT_TYPE] where [AKSAT_TYPE_CODE] = 2 )INSERT [dbo].[T_AKSAT_TYPE] ([AKSAT_TYPE_CODE], [AKSAT_TYPE_NAME]) VALUES (2, N''شهري'')
IF NOT EXISTS (select [AKSAT_TYPE_CODE] from [T_AKSAT_TYPE] where [AKSAT_TYPE_CODE] = 3 )INSERT [dbo].[T_AKSAT_TYPE] ([AKSAT_TYPE_CODE], [AKSAT_TYPE_NAME]) VALUES (3, N''سنوي'')






--////////////////////////////////////////////////////////////[TB_ATTACH_TYPE]/////////////////////////////////////////////////////////////////////////////////////////////////////////
IF NOT EXISTS (select [ATTACH_TYPE_CODE] from [TB_ATTACH_TYPE] where [ATTACH_TYPE_CODE] = 1 ) INSERT [dbo].[TB_ATTACH_TYPE] ([ATTACH_TYPE_CODE], [ATTACH_TYPE_NAME]) VALUES (1, N''عقد بيع'')
IF NOT EXISTS (select [ATTACH_TYPE_CODE] from [TB_ATTACH_TYPE] where [ATTACH_TYPE_CODE] = 2 )INSERT [dbo].[TB_ATTACH_TYPE] ([ATTACH_TYPE_CODE], [ATTACH_TYPE_NAME]) VALUES (2, N''عقد ايجار'')
IF NOT EXISTS (select [ATTACH_TYPE_CODE] from [TB_ATTACH_TYPE] where [ATTACH_TYPE_CODE] = 3 )INSERT [dbo].[TB_ATTACH_TYPE] ([ATTACH_TYPE_CODE], [ATTACH_TYPE_NAME]) VALUES (3, N''عقد استلام'')
IF NOT EXISTS (select [ATTACH_TYPE_CODE] from [TB_ATTACH_TYPE] where [ATTACH_TYPE_CODE] = 4 )INSERT [dbo].[TB_ATTACH_TYPE] ([ATTACH_TYPE_CODE], [ATTACH_TYPE_NAME]) VALUES (4, N''مستمسكات'')
IF NOT EXISTS (select [ATTACH_TYPE_CODE] from [TB_ATTACH_TYPE] where [ATTACH_TYPE_CODE] = 5 )INSERT [dbo].[TB_ATTACH_TYPE] ([ATTACH_TYPE_CODE], [ATTACH_TYPE_NAME]) VALUES (5, N''صورة شخصية'')
IF NOT EXISTS (select [ATTACH_TYPE_CODE] from [TB_ATTACH_TYPE] where [ATTACH_TYPE_CODE] = 20 )INSERT [dbo].[TB_ATTACH_TYPE] ([ATTACH_TYPE_CODE], [ATTACH_TYPE_NAME]) VALUES (20, N''صيانة'')

IF NOT EXISTS (select [HOUSE_TYPE_CODE] from [TB_HOUSE_TYPE] where [HOUSE_TYPE_CODE] = 0 )INSERT [dbo].[TB_HOUSE_TYPE] ([HOUSE_TYPE_CODE], [HOUSE_TYPE_NAME]) VALUES (0, N''...'')
IF NOT EXISTS (select [HOUSE_TYPE_CODE] from [TB_HOUSE_TYPE] where [HOUSE_TYPE_CODE] = 1 )INSERT [dbo].[TB_HOUSE_TYPE] ([HOUSE_TYPE_CODE], [HOUSE_TYPE_NAME]) VALUES (1, N''جديد'')
IF NOT EXISTS (select [HOUSE_TYPE_CODE] from [TB_HOUSE_TYPE] where [HOUSE_TYPE_CODE] = 2 )INSERT [dbo].[TB_HOUSE_TYPE] ([HOUSE_TYPE_CODE], [HOUSE_TYPE_NAME]) VALUES (2, N''مستمر'')
IF NOT EXISTS (select [HOUSE_TYPE_CODE] from [TB_HOUSE_TYPE] where [HOUSE_TYPE_CODE] = 3 )INSERT [dbo].[TB_HOUSE_TYPE] ([HOUSE_TYPE_CODE], [HOUSE_TYPE_NAME]) VALUES (3, N''مغادر'')

IF NOT EXISTS (select [STATES_CODE] from [TB_MAINTENANCE_STATES] where [STATES_CODE] = 1 )INSERT [dbo].[TB_MAINTENANCE_STATES] ([STATES_CODE], [STATES_NAME]) VALUES (1, N''انتظار'')
IF NOT EXISTS (select [STATES_CODE] from [TB_MAINTENANCE_STATES] where [STATES_CODE] = 2 )INSERT [dbo].[TB_MAINTENANCE_STATES] ([STATES_CODE], [STATES_NAME]) VALUES (2, N''قيد التنفيذ'')
IF NOT EXISTS (select [STATES_CODE] from [TB_MAINTENANCE_STATES] where [STATES_CODE] = 3 )INSERT [dbo].[TB_MAINTENANCE_STATES] ([STATES_CODE], [STATES_NAME]) VALUES (3, N''منتهية'')

IF NOT EXISTS (select [REL_TYPE_CODE] from [TB_RELATION_TYPE] where [REL_TYPE_CODE] = 1 )INSERT [dbo].[TB_RELATION_TYPE] ([REL_TYPE_CODE], [REL_TYPE_NAME]) VALUES (1, N''مالك'')
IF NOT EXISTS (select [REL_TYPE_CODE] from [TB_RELATION_TYPE] where [REL_TYPE_CODE] = 2 )INSERT [dbo].[TB_RELATION_TYPE] ([REL_TYPE_CODE], [REL_TYPE_NAME]) VALUES (2, N''عائلة المالك'')
IF NOT EXISTS (select [REL_TYPE_CODE] from [TB_RELATION_TYPE] where [REL_TYPE_CODE] = 3 )INSERT [dbo].[TB_RELATION_TYPE] ([REL_TYPE_CODE], [REL_TYPE_NAME]) VALUES (3, N''مستأجر'')
IF NOT EXISTS (select [REL_TYPE_CODE] from [TB_RELATION_TYPE] where [REL_TYPE_CODE] = 4 )INSERT [dbo].[TB_RELATION_TYPE] ([REL_TYPE_CODE], [REL_TYPE_NAME]) VALUES (4, N''سيارة'')
IF NOT EXISTS (select [REL_TYPE_CODE] from [TB_RELATION_TYPE] where [REL_TYPE_CODE] = 5 )INSERT [dbo].[TB_RELATION_TYPE] ([REL_TYPE_CODE], [REL_TYPE_NAME]) VALUES (5, N''زائر'')

--////////////////////////////////////////////////////////////[[[T_ACCOUNT_TYPE]]]/////////////////////////////////////////////////////////////////////////////////////////////////////////
IF NOT EXISTS (select [TYPE_ACCOUNT_CODE] from [T_ACCOUNT_TYPE] where [TYPE_ACCOUNT_CODE] = 1 ) INSERT [dbo].[T_ACCOUNT_TYPE] ([TYPE_ACCOUNT_CODE], [TYPE_ACCOUNT_NAME], [FINAL_CODE], [FROM_N], [TO_N]) VALUES (1, N''الموجودات الثابتة'', 1, 100, 199)
IF NOT EXISTS (select [TYPE_ACCOUNT_CODE] from [T_ACCOUNT_TYPE] where [TYPE_ACCOUNT_CODE] = 3 ) INSERT [dbo].[T_ACCOUNT_TYPE] ([TYPE_ACCOUNT_CODE], [TYPE_ACCOUNT_NAME], [FINAL_CODE], [FROM_N], [TO_N]) VALUES (3, N''مصاريف'', 1, 300, 399)
IF NOT EXISTS (select [TYPE_ACCOUNT_CODE] from [T_ACCOUNT_TYPE] where [TYPE_ACCOUNT_CODE] = 4 ) INSERT [dbo].[T_ACCOUNT_TYPE] ([TYPE_ACCOUNT_CODE], [TYPE_ACCOUNT_NAME], [FINAL_CODE], [FROM_N], [TO_N]) VALUES (4, N''ايرادات'', 1, 400, 3999) ELSE UPDATE [T_ACCOUNT_TYPE] SET [FINAL_CODE]=1 WHERE [TYPE_ACCOUNT_CODE]=4
IF NOT EXISTS (select [TYPE_ACCOUNT_CODE] from [T_ACCOUNT_TYPE] where [TYPE_ACCOUNT_CODE] = 5 ) INSERT [dbo].[T_ACCOUNT_TYPE] ([TYPE_ACCOUNT_CODE], [TYPE_ACCOUNT_NAME], [FINAL_CODE], [FROM_N], [TO_N]) VALUES (5, N''اموال جاهزة ( صناديق )'', 1, 5000, 5999)
IF NOT EXISTS (select [TYPE_ACCOUNT_CODE] from [T_ACCOUNT_TYPE] where [TYPE_ACCOUNT_CODE] = 6 ) INSERT [dbo].[T_ACCOUNT_TYPE] ([TYPE_ACCOUNT_CODE], [TYPE_ACCOUNT_NAME], [FINAL_CODE], [FROM_N], [TO_N]) VALUES (6, N''سحوبات ارباح'', 1, 6000, 6999)
IF NOT EXISTS (select [TYPE_ACCOUNT_CODE] from [T_ACCOUNT_TYPE] where [TYPE_ACCOUNT_CODE] = 7 ) INSERT [dbo].[T_ACCOUNT_TYPE] ([TYPE_ACCOUNT_CODE], [TYPE_ACCOUNT_NAME], [FINAL_CODE], [FROM_N], [TO_N]) VALUES (7, N''راس المال'', 1, 7000, 7999)
IF NOT EXISTS (select [TYPE_ACCOUNT_CODE] from [T_ACCOUNT_TYPE] where [TYPE_ACCOUNT_CODE] = 8 ) INSERT [dbo].[T_ACCOUNT_TYPE] ([TYPE_ACCOUNT_CODE], [TYPE_ACCOUNT_NAME], [FINAL_CODE], [FROM_N], [TO_N]) VALUES (8, N''الارباح و الخسائر '', 1, 8000, 8999)
IF NOT EXISTS (select [TYPE_ACCOUNT_CODE] from [T_ACCOUNT_TYPE] where [TYPE_ACCOUNT_CODE] = 9 ) INSERT [dbo].[T_ACCOUNT_TYPE] ([TYPE_ACCOUNT_CODE], [TYPE_ACCOUNT_NAME], [FINAL_CODE], [FROM_N], [TO_N]) VALUES (9, N''مشاريع'', 1, 9000, 19999)
IF NOT EXISTS (select [TYPE_ACCOUNT_CODE] from [T_ACCOUNT_TYPE] where [TYPE_ACCOUNT_CODE] = 21 ) INSERT [dbo].[T_ACCOUNT_TYPE] ([TYPE_ACCOUNT_CODE], [TYPE_ACCOUNT_NAME], [FINAL_CODE], [FROM_N], [TO_N]) VALUES (21, N''عملاء'', 1, 2100000, 2199999)
IF NOT EXISTS (select [TYPE_ACCOUNT_CODE] from [T_ACCOUNT_TYPE] where [TYPE_ACCOUNT_CODE] = 22 ) INSERT [dbo].[T_ACCOUNT_TYPE] ([TYPE_ACCOUNT_CODE], [TYPE_ACCOUNT_NAME], [FINAL_CODE], [FROM_N], [TO_N]) VALUES (22, N''موردين'', 1, 2100000, 2199999)
IF NOT EXISTS (select [TYPE_ACCOUNT_CODE] from [T_ACCOUNT_TYPE] where [TYPE_ACCOUNT_CODE] = 23 ) INSERT [dbo].[T_ACCOUNT_TYPE] ([TYPE_ACCOUNT_CODE], [TYPE_ACCOUNT_NAME], [FINAL_CODE], [FROM_N], [TO_N]) VALUES (23, N''عملاء و موردين'', 1, 2100000, 2199999)
IF NOT EXISTS (select [TYPE_ACCOUNT_CODE] from [T_ACCOUNT_TYPE] where [TYPE_ACCOUNT_CODE] = 24 ) INSERT [dbo].[T_ACCOUNT_TYPE] ([TYPE_ACCOUNT_CODE], [TYPE_ACCOUNT_NAME], [FINAL_CODE], [FROM_N], [TO_N]) VALUES (24, N''شريك ( مستثمر )'', 1, 2100000, 2199999)


--////////////////////////////////////////////////////////////[[[T_ACCOUNTS]]]/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 0 ) INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(0 AS Numeric(18, 0)), N'''', -1, 0, 1, 1, 1, 0, N'''', 1, 0, 0, GETDATE())
IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 1 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(1 AS Numeric(18, 0)), N''الموجودات الثابتة'', 0, 0, 1, 1, 1, 0, NULL, 1, 0, 1, GETDATE())
IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 2 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(2 AS Numeric(18, 0)), N''الموجودات متداولة'', 0, 0, 1, 1, 1, 0, NULL, 1, 0, 1, GETDATE())
IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 3 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(3 AS Numeric(18, 0)), N''المصاريف'', 0, 0, 1, 1, 1, 0, NULL, 1, 0, 1, GETDATE())
IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 4 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(4 AS Numeric(18, 0)), N''الايرادات'', 0, 0, 1, 1, 1, 0, NULL, 1, 0, 1, GETDATE())
IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 5 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(5 AS Numeric(18, 0)), N''اموال جاهزة ( صناديق )'', 0, 0, 1, 1, 1, 0, NULL, 1, 0, 1, GETDATE())
IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 6 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(6 AS Numeric(18, 0)), N''سحوبات ارباح'', 0, 0, 1, 1, 1, 0, NULL, 1, 0, 1, GETDATE())
IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 7 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(7 AS Numeric(18, 0)), N''راس المال'', 0, 0, 1, 1, 1, 0, NULL, 1, 0, 1, GETDATE())
IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 8 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(8 AS Numeric(18, 0)), N''الارباح و الخسائر '', 0, 0, 1, 1, 1, 0, NULL, 1, 0, 1, GETDATE())
IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 9 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(9 AS Numeric(18, 0)), N''مشاريع'', 0, 0, 1, 1, 1, 0, NULL, 1, 0, 1, GETDATE())
IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 21 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(21 AS Numeric(18, 0)), N''عملاء'', 0, 0, 1, 1, 1, 0, NULL, 1, 0, 1, GETDATE())
IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 201 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(201 AS Numeric(18, 0)), N''مخازن'', 0, 0, 1, 1, 1, 0, NULL, 1, 0, 1, GETDATE())
IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 202 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(202 AS Numeric(18, 0)), N''ارباح مصاريف المبيعات'', 0, 0, 1, 1, 1, 3, NULL, 1, 0, 1, GETDATE())

IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 4000 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(4000 AS Numeric(18, 0)), N''سماحات'', 0, 0, 1, 1, 1, 0, NULL, 1, 0, 1, GETDATE())
IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 4001 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(4001 AS Numeric(18, 0)), N''خصم ممنوح'', 0, 0, 1, 1, 1, 0, NULL, 1, 0, 1, GETDATE())
IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 4002 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(4002 AS Numeric(18, 0)), N''خصم مكتسب'', 0, 0, 1, 1, 1, 0, NULL, 1, 0, 1, GETDATE())
IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 5000 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(5000 AS Numeric(18, 0)), N''الصندوق الرئيسي'', 5, 0, 1, 1, 1, 3, N'''', 1, 0, 1, GETDATE())
IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 6000 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(6000 AS Numeric(18, 0)), N''سحوبات ارباح عام'', 6, 0, 1, 1, 1, 3, NULL, 1, 0, 1, GETDATE())
IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 7000 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(7000 AS Numeric(18, 0)), N''راس المال'', 7, 0, 1, 1, 1, 3, NULL, 1, 0, 1, GETDATE())
IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 8000 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(8000 AS Numeric(18, 0)), N''ارباح وخسائر مدور'', 8, 0, 1, 1, 1, 3, NULL, 1, 0, 1, GETDATE())
IF NOT EXISTS (select [ACCOUNT_CODE] from [T_ACCOUNTS] where [ACCOUNT_CODE] = 2100000 )INSERT [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [ACCOUNT_ACTIVE], [C_DATE]) VALUES (CAST(2100000 AS Numeric(18, 0)), N''عميل نقدي'', 21, 3, 1, 1, 1, 3, N'''', 1, 0, 1, GETDATE())

--////////////////////////////////////////////////////////////[B_CODE]/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = -1 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (-1, NULL, NULL, NULL, NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 0 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (0, N''رصيد اولي'', NULL, N''RED'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 1 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (1, N''مرتجع مبيعات'', N''POS'', N''Navy'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 2 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (2, N''فاتورة مبيعات'', N''SELL'', N''red'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 3 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (3, N''عرض اسعار'', N''SELL'', N''red'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 4 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (4, N''نقل مخزني'', N''STO'', N''#408080'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 5 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (5, N''سند'', N''سشىشي'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 6 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (6, N''سند تصريف'', N''سشىشي'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 7 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (7, N''سند قيد'', N''سند قيد'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 8 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (8, N''سند سماح'', N''سند سماح'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 9 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (9, N''مصاريف مشتريات'', N''مصاريف مشتريات'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 10 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (10, N''قسط خارجي'', N''AKSAT'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 11 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (11, N''تصنيع'', N''FACT'', N''#408080'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 12 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (12, N''استهلاك في التصنيع'', N''FACT D'', N''#408080'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 13 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (13, N''رصيد اولي'', N''START'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 15 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (15, N''سند متعدد'', N''سشىشي'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 16 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (16, N''مصاريف مبيعات'', N''EXP_SALES'', N''#d60f09'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 17 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (17, N''اضافات'', N''AMO_ADD'', N''#d60f09'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 18 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (18, N''اشتراك'', N''SUBSCRIPTION_ADD'', N''#9e0b07'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 19 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (19, N''خدمات الوحدات السكنية'', N''BUILDING'', N''red'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 21 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (21, N''فاتورة مشتريات'', N''BUY'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 22 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (22, N''فاتورة مرتجع مشتريات'', N''BUY R'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 23 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (23, N''فاتورة طلبية مشتريات'', N''BUY O'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 24 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (24, N''تصحيح مخزن'', N''EQUAL'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 25 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (25, N''تلف'', N''EQUAL'', N''red'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 26 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (26, N''اضافة عدد'', N''EQUAL'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 27 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (27, N''تعديل مادة'', NULL, NULL, NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 28 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (28, N''سند حوالة'', N''HAWALA'',N''#034a96'' , NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 29 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (29, N''عمولة حوالة'', N''EMOLA_HAWALA'',N''#034a96'' , NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 30 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (30, N''طلبية شراء'', N''PURCHASE_ORDER'', N''BLACK'', NULL)

IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 31 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (31, N''حاوية'', N''SHIP'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 32 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (32, N''مصاريف حاوية'', N''SHIP EXP'', NULL, NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 41 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (41, N''حجوزات'', N''BOOKING'', NULL, NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 51 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (51, N''بيع مباشر'', N''DIRECT_SALES'', NULL, NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 52 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (52, N''مبيعات'', N''FRUIT_SALES'', NULL, NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 53 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (53, N''عقود سيارات'', N''CAR_SALES'', NULL, NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 54 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (54, N''مصاريف سيارات'', N''CAR_EXP'', NULL, NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 55 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (55, N''مشاريع'', N''PROJECT'', NULL, NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 56 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (56, N''مرفقات مشاريع'', N''PROJECT ATTACHMENT'', NULL, NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 57 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (57, N''عقود سيارات خاصة'', N''CAR_SALES_SPICIAL'', NULL, NULL)

IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 60 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (60, N''الغرف'', N''ROOM'', NULL, NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 61 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (61, N''حجوزات الغرف'', N''ROOM BOOKING'', NULL, NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 65 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (65, N''استمارة صيانة'', N''MAINTENANCE'', NULL, NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 70 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (70, N'' سند ديون '', N''سند ديون'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 71 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (71, N'' قبض ديون '', N''قبض ديون'', N''BLACK'', NULL)

IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 80 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (80, N''سحب نقاط'',N''سحب نقاط'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 81 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (81, N''اضافة نقاط'',  N''اضافة نقاط'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 82 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (82, N''تحويل نقاط'',  N''تحويل نقاط'', N''BLACK'', NULL)


IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 300 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (300,  N''طباعة باركود'',  N''طباعة باركود'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 301 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (301, N''طباعة رف'', N''طباعة رف'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 302 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (302, N''اضافة مادة'', N''اضافة مادة'', N''BLACK'', NULL)
IF NOT EXISTS (select [B_CODE] from [T_BILL_TYPE] where [B_CODE] = 303 ) INSERT [dbo].[T_BILL_TYPE] ([B_CODE], [B_NAME], [B_SIGN], [B_COLOR], [B_N]) VALUES (303, N''تعديل مادة'', N''تعديل مادة'', N''BLACK'', NULL)


 

--////////////////////////////////////////////////////////////[[T_BRANCH]]/////////////////////////////////////////////////////////////////////////////////////////////////////////
IF NOT EXISTS (select [BRANCH_CODE] from [T_BRANCH] where [BRANCH_CODE] = 1 ) INSERT [dbo].[T_BRANCH] ([BRANCH_CODE], [BRANCH_NAME], [BRANCH_SIGN], [HEADER], [BODY], [FOOTER], [C_DATE], [ACTIVE]) VALUES (1, NULL, NULL, NULL, NULL, NULL, NULL, NULL)

--////////////////////////////////////////////////////////////[[T_CASH_STATE]]/////////////////////////////////////////////////////////////////////////////////////////////////////////
IF NOT EXISTS (select [CASH_CODE] from [T_CASH_STATE] where [CASH_CODE] = 0 ) INSERT [dbo].[T_CASH_STATE] ([CASH_CODE], [CASH_NAME]) VALUES (0, N'' '')
IF NOT EXISTS (select [CASH_CODE] from [T_CASH_STATE] where [CASH_CODE] = 1 ) INSERT [dbo].[T_CASH_STATE] ([CASH_CODE], [CASH_NAME]) VALUES (1, N''متأخر'')
IF NOT EXISTS (select [CASH_CODE] from [T_CASH_STATE] where [CASH_CODE] = 2 ) INSERT [dbo].[T_CASH_STATE] ([CASH_CODE], [CASH_NAME]) VALUES (2, N''تم التسديد'')
IF NOT EXISTS (select [CASH_CODE] from [T_CASH_STATE] where [CASH_CODE] = 3 ) INSERT [dbo].[T_CASH_STATE] ([CASH_CODE], [CASH_NAME]) VALUES (3, N''تسديد جزئي'')

 

IF NOT EXISTS (select [CLIENT_CODE] from [T_CLIENT] where [CLIENT_CODE] = 2100000 ) INSERT [dbo].[T_CLIENT] ([CLIENT_CODE], [CLIENT_NAME], [CLIENT_TYPE], [ACCOUNT_CODE], [CURRANCY_CODE], [MANDOOB_CODE], [CLIENT_PHONE], [CLIENT_PHONE_SMS], [CLIENT_EMAILE], [CLIENT_REGION], [CLIENT_ADDRESS], [CLIENT_BARCODE], [CLIENT_CARD], [CLIENT_NOTE], [CLIENT_PIN_CODE], [DISCOUNT_PERCENT], [SECURETY_CODE], [MAX_DEBIT], [CLIENT_BUSINESS], [CLIENT_ACTIVE], [C_DATE], [C_USER], [MAIN_ACCOUNT]) VALUES (CAST(2100000 AS Numeric(18, 0)), N''عميل نقدي'', 3, CAST(2100000 AS Numeric(18, 0)), 1, 1, N'''', N'''', N'''', N'''', N'''', N'''', N'''', N'''', N'''', 0, 1, 0, N'''', 1, GETDATE(), N''1'', 0)
--////////////////////////////////////////////////////////////[T_CLIENT_TYPE]/////////////////////////////////////////////////////////////////////////////////////////////////////////
IF NOT EXISTS (select [C_TYPE_CODE] from [T_CLIENT_TYPE] where [C_TYPE_CODE] = 1 ) INSERT [dbo].[T_CLIENT_TYPE] ([C_TYPE_CODE], [C_TYPE_NAME], [C_SEQ]) VALUES (1, N''زبون'', 1)
IF NOT EXISTS (select [C_TYPE_CODE] from [T_CLIENT_TYPE] where [C_TYPE_CODE] = 2 ) INSERT [dbo].[T_CLIENT_TYPE] ([C_TYPE_CODE], [C_TYPE_NAME], [C_SEQ]) VALUES (2, N''مورد'', 2)
IF NOT EXISTS (select [C_TYPE_CODE] from [T_CLIENT_TYPE] where [C_TYPE_CODE] = 3 ) INSERT [dbo].[T_CLIENT_TYPE] ([C_TYPE_CODE], [C_TYPE_NAME], [C_SEQ]) VALUES (3, N''زبون و مورد'', 3)
IF NOT EXISTS (select [C_TYPE_CODE] from [T_CLIENT_TYPE] where [C_TYPE_CODE] = 4 ) INSERT [dbo].[T_CLIENT_TYPE] ([C_TYPE_CODE], [C_TYPE_NAME], [C_SEQ]) VALUES (4, N''شريك ( مستثمر )'', 4)
IF NOT EXISTS (select [C_TYPE_CODE] from [T_CLIENT_TYPE] where [C_TYPE_CODE] = 5 ) INSERT [dbo].[T_CLIENT_TYPE] ([C_TYPE_CODE], [C_TYPE_NAME], [C_SEQ]) VALUES (5, N''كفيل'', 5)
IF NOT EXISTS (select [C_TYPE_CODE] from [T_CLIENT_TYPE] where [C_TYPE_CODE] = 6 ) INSERT [dbo].[T_CLIENT_TYPE] ([C_TYPE_CODE], [C_TYPE_NAME], [C_SEQ]) VALUES (6, N''اخرى'', 6)
IF NOT EXISTS (select [C_TYPE_CODE] from [T_CLIENT_TYPE] where [C_TYPE_CODE] = 7 ) INSERT [dbo].[T_CLIENT_TYPE] ([C_TYPE_CODE], [C_TYPE_NAME], [C_SEQ]) VALUES (7, N''عمولات المندوبين'', 7)
IF NOT EXISTS (select [C_TYPE_CODE] from [T_CLIENT_TYPE] where [C_TYPE_CODE] = 8 ) INSERT [dbo].[T_CLIENT_TYPE] ([C_TYPE_CODE], [C_TYPE_NAME], [C_SEQ]) VALUES (8, N''حساب ضريبة'', 8)
IF NOT EXISTS (select [C_TYPE_CODE] from [T_CLIENT_TYPE] where [C_TYPE_CODE] = 9 ) INSERT [dbo].[T_CLIENT_TYPE] ([C_TYPE_CODE], [C_TYPE_NAME], [C_SEQ]) VALUES (9, N''كادر العمل'', 9)
IF NOT EXISTS (select [C_TYPE_CODE] from [T_CLIENT_TYPE] where [C_TYPE_CODE] = 10 ) INSERT [dbo].[T_CLIENT_TYPE] ([C_TYPE_CODE], [C_TYPE_NAME], [C_SEQ]) VALUES (10, N''معتمد - فني صيانة'', 10)

--////////////////////////////////////////////////////////////[COLLECTION]/////////////////////////////////////////////////////////////////////////////////////////////////////////
IF NOT EXISTS (select [T_ID] from [T_COMPANY] where [T_ID] = 1 )INSERT [dbo].[T_COMPANY] ([T_ID], [COMPANY_NAME], [COMPANY_LOGO], [COMPANY_PHONE], [COMPANY_TITAL]) VALUES (1, N''فرعي'', NULL, NULL, N''SP'')

IF NOT EXISTS (select [COMPANY_CODE] from [T_COMPANY2] where [COMPANY_CODE] = 1 ) INSERT [dbo].[T_COMPANY2] ([COMPANY_CODE], [COMPANY_NAME], [COMPANY_DESCREPTION], [COMPANY_ADDRESS], [COMPANY_PHONE], [COMPANY_URL], [COMPANY_EMAIL], [COMPANY_LOGO], [COMPANY_HEADER], [COMPANY_BODY], [COMPANY_FOOTER]) VALUES (1, N''iraqsoft'', N''للحلول البرمجية والتصميم الاكنروني'', N''بغداد - شارع الصناعة'', N''07722284111'', N'''', N'''',NULL, NULL, NULL, NULL)

IF NOT EXISTS (select [T_ID] from [T_CONFIGRATION] where [T_ID] = 1 ) INSERT [dbo].[T_CONFIGRATION] ([T_ID], [TELEGRAM], [TL_ID]) VALUES (1, N''False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;'', N'''')

IF NOT EXISTS (select [CURRANCY_CODE] from [T_CURRANNCY] where [CURRANCY_CODE] = 1 ) INSERT [dbo].[T_CURRANNCY] ([CURRANCY_CODE], [CURRANCY_NAME], [CURRANCY_SAMPLE], [CURRANCY_EQUAL], [CURRANCY_MOKAFEA], [CURRANCY_PART], [PART_EQUAL], [CURRANCY_PRIMARY], [CURRANCY_ACTIVE]) VALUES (1, N''دولار'', N''$'', 1, 1, N''N2'', 100, 0, 1)
IF NOT EXISTS (select [CURRANCY_CODE] from [T_CURRANNCY] where [CURRANCY_CODE] = 2 ) INSERT [dbo].[T_CURRANNCY] ([CURRANCY_CODE], [CURRANCY_NAME], [CURRANCY_SAMPLE], [CURRANCY_EQUAL], [CURRANCY_MOKAFEA], [CURRANCY_PART], [PART_EQUAL], [CURRANCY_PRIMARY], [CURRANCY_ACTIVE]) VALUES (2, N''دينار'', N''د.ع'', 1, 1, N''N0'', 100, 0, 1)
IF NOT EXISTS (select [CURRANCY_CODE] from [T_CURRANNCY] where [CURRANCY_CODE] = 3 ) INSERT [dbo].[T_CURRANNCY] ([CURRANCY_CODE], [CURRANCY_NAME], [CURRANCY_SAMPLE], [CURRANCY_EQUAL], [CURRANCY_MOKAFEA], [CURRANCY_PART], [PART_EQUAL], [CURRANCY_PRIMARY], [CURRANCY_ACTIVE]) VALUES (3, N''دولار و دينار'', N''...'', 1, 1, N''N2'', 100, 0, 1)

IF NOT EXISTS (select [T_ID] from [T_DATE_ACCOUNT] where [T_ID] =1 )INSERT [dbo].[T_DATE_ACCOUNT] ([T_ID], [D_DATE]) VALUES (1, GETDATE())

IF NOT EXISTS (select [ID] from [T_DATE_REPORT_DEBIT] where [ID] = 1 ) INSERT [dbo].[T_DATE_REPORT_DEBIT] ([ID], [D_DATE]) VALUES (1, GETDATE())

IF NOT EXISTS (select [DEAL_CODE] from [T_DEAL] where [DEAL_CODE] = 0 )INSERT [dbo].[T_DEAL] ([DEAL_CODE], [DEAL_NAME]) VALUES (0, N'' '')
IF NOT EXISTS (select [DEAL_CODE] from [T_DEAL] where [DEAL_CODE] = 1 )INSERT [dbo].[T_DEAL] ([DEAL_CODE], [DEAL_NAME]) VALUES (1, N''مطابقة حساب'')

IF NOT EXISTS (select [LEVEL_CODE] from [T_LEVEL] where [LEVEL_CODE] = 1 )INSERT [dbo].[T_LEVEL] ([LEVEL_CODE], [LEVEL_NAME], [LEVEL_MAIN], [LEVEL_SALES], [LEVEL_BUY], [LEVEL_ACCOUNT], [LEVEL_REPORT], [LEVEL_STORE], [LEVEL_CLIENT], [LEVEL_ITEMS], [LEVEL_GENERAL]) VALUES (1, N''مدير'', N''0'', N''1'', N''0'', N''0'', N''0'', N''0'', N''0'', N''0'', N''0'')
IF NOT EXISTS (select [MANDOOB_CODE] from [T_MANDOOB] where [MANDOOB_CODE] = -10 )INSERT [dbo].[T_MANDOOB] ([MANDOOB_CODE], [MANDOOB_NAME], [MANDOOB_PERCENT], [MANDOOB_ACTIVE], [C_DATE]) VALUES (-10, N''غير محدد'', 0, 0, CAST(0x0000AF62011323BC AS DateTime))
IF NOT EXISTS (select [MANDOOB_CODE] from [T_MANDOOB] where [MANDOOB_CODE] = 1 )INSERT [dbo].[T_MANDOOB] ([MANDOOB_CODE], [MANDOOB_NAME], [MANDOOB_PERCENT], [MANDOOB_ACTIVE], [C_DATE]) VALUES (1, N''...'', 0, 1, CAST(0x0000AF62011323BC AS DateTime))

IF NOT EXISTS (select [SECURETY_CODE] from [T_SECURETY] where [SECURETY_CODE] = 1 ) INSERT [dbo].[T_SECURETY] ([SECURETY_CODE], [SECURETY_NAME]) VALUES (1, N''ضعيفة'')
IF NOT EXISTS (select [SECURETY_CODE] from [T_SECURETY] where [SECURETY_CODE] = 2 ) INSERT [dbo].[T_SECURETY] ([SECURETY_CODE], [SECURETY_NAME]) VALUES (2, N''متوسطة'')
IF NOT EXISTS (select [SECURETY_CODE] from [T_SECURETY] where [SECURETY_CODE] = 3 ) INSERT [dbo].[T_SECURETY] ([SECURETY_CODE], [SECURETY_NAME]) VALUES (3, N''قوية'')
IF NOT EXISTS (select [T_ID] from [T_SERVER_MAIN] where [T_ID] = 1 ) INSERT [dbo].[T_SERVER_MAIN] ([T_ID], [IP_NAME], [SERVER_NAME], [USER_NAME], [USER_PASSWORD], [DATABASE_NAME]) VALUES (1, NULL, NULL, NULL, NULL, NULL)
IF NOT EXISTS (select [T_ID] from [T_SETTING_DISCOUNT] where [T_ID] = 1 ) INSERT [dbo].[T_SETTING_DISCOUNT] ([T_ID], [ST_SETTING]) VALUES (1, N''0;0;0;0;0;0'')
IF NOT EXISTS (select [STORE_CODE] from [T_STORE_TYPE] where [STORE_CODE] = -10 )  INSERT [dbo].[T_STORE_TYPE] ([STORE_CODE], [STORE_NAME], [IS_USED], [FOR_SALES], [FOR_BUY], [STORE_ADDRESS], [ACTIVE]) VALUES (-10, N''غير محدد'', 0, 1, 0, N''غير محدد'', 0)
IF NOT EXISTS (select [STORE_CODE] from [T_STORE_TYPE] where [STORE_CODE] = -1 ) INSERT [dbo].[T_STORE_TYPE] ([STORE_CODE], [STORE_NAME], [IS_USED], [FOR_SALES], [FOR_BUY], [STORE_ADDRESS], [ACTIVE]) VALUES (-1, N''مخزن الشحن'', 0, 0, 1, N''مخزن الشحن ( بضائع قيد الشحن )'', 1)
IF NOT EXISTS (select [STORE_CODE] from [T_STORE_TYPE] where [STORE_CODE] =  0 ) INSERT [dbo].[T_STORE_TYPE] ([STORE_CODE], [STORE_NAME], [IS_USED], [FOR_SALES], [FOR_BUY], [STORE_ADDRESS], [ACTIVE]) VALUES (0, N''المخزن الرئيسي'', 1, 1, 1, N''مخزن رئيسي عام'', 1)

IF NOT EXISTS (select [FILTER_CODE] from [T_TAG_FILTER] where [FILTER_CODE] = 1 ) INSERT [dbo].[T_TAG_FILTER] ([FILTER_CODE], [FILTER_NAME]) VALUES (1, N''مبيعات'')
IF NOT EXISTS (select [FILTER_CODE] from [T_TAG_FILTER] where [FILTER_CODE] = 2 ) INSERT [dbo].[T_TAG_FILTER] ([FILTER_CODE], [FILTER_NAME]) VALUES (2, N''مشتريات'')
IF NOT EXISTS (select [FILTER_CODE] from [T_TAG_FILTER] where [FILTER_CODE] = 3 ) INSERT [dbo].[T_TAG_FILTER] ([FILTER_CODE], [FILTER_NAME]) VALUES (3, N''حالات الحاوية'')
IF NOT EXISTS (select [FILTER_CODE] from [T_TAG_FILTER] where [FILTER_CODE] = 4 ) INSERT [dbo].[T_TAG_FILTER] ([FILTER_CODE], [FILTER_NAME]) VALUES (4, N''حالات الشحن فواتير'')
IF NOT EXISTS (select [FILTER_CODE] from [T_TAG_FILTER] where [FILTER_CODE] = 5 ) INSERT [dbo].[T_TAG_FILTER] ([FILTER_CODE], [FILTER_NAME]) VALUES (5, N''انواع الملاحظات'')
IF NOT EXISTS (select [FILTER_CODE] from [T_TAG_FILTER] where [FILTER_CODE] = 6 ) INSERT [dbo].[T_TAG_FILTER] ([FILTER_CODE], [FILTER_NAME]) VALUES (6, N''انواع الحجوزات'')
IF NOT EXISTS (select [FILTER_CODE] from [T_TAG_FILTER] where [FILTER_CODE] = 7 ) INSERT [dbo].[T_TAG_FILTER] ([FILTER_CODE], [FILTER_NAME]) VALUES (7, N''البيع المباشر'')
IF NOT EXISTS (select [FILTER_CODE] from [T_TAG_FILTER] where [FILTER_CODE] = 8 ) INSERT [dbo].[T_TAG_FILTER] ([FILTER_CODE], [FILTER_NAME]) VALUES (8, N''مصادر الحجوزات'')
IF NOT EXISTS (select [FILTER_CODE] from [T_TAG_FILTER] where [FILTER_CODE] = 9 ) INSERT [dbo].[T_TAG_FILTER] ([FILTER_CODE], [FILTER_NAME]) VALUES (9, N''حالات السيارة'')
IF NOT EXISTS (select [FILTER_CODE] from [T_TAG_FILTER] where [FILTER_CODE] = 10 ) INSERT [dbo].[T_TAG_FILTER] ([FILTER_CODE], [FILTER_NAME]) VALUES (10, N''حالات المشاريع'')
IF NOT EXISTS (select [FILTER_CODE] from [T_TAG_FILTER] where [FILTER_CODE] = 11 ) INSERT [dbo].[T_TAG_FILTER] ([FILTER_CODE], [FILTER_NAME]) VALUES (11, N''مواصفات الغرفة'')
IF NOT EXISTS (select [FILTER_CODE] from [T_TAG_FILTER] where [FILTER_CODE] = 12 ) INSERT [dbo].[T_TAG_FILTER] ([FILTER_CODE], [FILTER_NAME]) VALUES (12, N''حالات الصيانة'')
IF NOT EXISTS (select [FILTER_CODE] from [T_TAG_FILTER] where [FILTER_CODE] = 13 ) INSERT [dbo].[T_TAG_FILTER] ([FILTER_CODE], [FILTER_NAME]) VALUES (13, N''طلبية شراء'')



IF NOT EXISTS (select [TAG_PROCCESS_CODE] from [T_TAG_PROCCESS] where [TAG_PROCCESS_CODE] = 0 )INSERT [dbo].[T_TAG_PROCCESS] ([TAG_PROCCESS_CODE], [TAG_PROCCESS_NAME], [FILTER_CODE]) VALUES (0, N'' '', 0)
IF NOT EXISTS (select [TYPE_PRICE_CODE] from [T_TYPE_PRICE_SELL] where [TYPE_PRICE_CODE] = -10 ) INSERT [dbo].[T_TYPE_PRICE_SELL] ([TYPE_PRICE_CODE], [TYPE_PRICE_NAME], [SECURETY_CODE], [COL_NAME]) VALUES (-10, N''غير محدد'', -10, N''PRICE_SALE_1'')
IF NOT EXISTS (select [TYPE_PRICE_CODE] from [T_TYPE_PRICE_SELL] where [TYPE_PRICE_CODE] = 1 ) INSERT [dbo].[T_TYPE_PRICE_SELL] ([TYPE_PRICE_CODE], [TYPE_PRICE_NAME], [SECURETY_CODE], [COL_NAME]) VALUES (1, N''مفرد'', 1, N''PRICE_SALE_1'')
IF NOT EXISTS (select [TYPE_PRICE_CODE] from [T_TYPE_PRICE_SELL] where [TYPE_PRICE_CODE] = 2 )INSERT [dbo].[T_TYPE_PRICE_SELL] ([TYPE_PRICE_CODE], [TYPE_PRICE_NAME], [SECURETY_CODE], [COL_NAME]) VALUES (2, N''جملة'', 1, N''PRICE_SALE_2'')
IF NOT EXISTS (select [TYPE_PRICE_CODE] from [T_TYPE_PRICE_SELL] where [TYPE_PRICE_CODE] = 3 )INSERT [dbo].[T_TYPE_PRICE_SELL] ([TYPE_PRICE_CODE], [TYPE_PRICE_NAME], [SECURETY_CODE], [COL_NAME]) VALUES (3, N''وكيل'', 1, N''PRICE_SALE_3'')
IF NOT EXISTS (select [TYPE_PRICE_CODE] from [T_TYPE_PRICE_SELL] where [TYPE_PRICE_CODE] = 4 )INSERT [dbo].[T_TYPE_PRICE_SELL] ([TYPE_PRICE_CODE], [TYPE_PRICE_NAME], [SECURETY_CODE], [COL_NAME]) VALUES (4, N''اخر شراء'', 2, N''PRICE_BUY'')
IF NOT EXISTS (select [TYPE_PRICE_CODE] from [T_TYPE_PRICE_SELL] where [TYPE_PRICE_CODE] = 5 )INSERT [dbo].[T_TYPE_PRICE_SELL] ([TYPE_PRICE_CODE], [TYPE_PRICE_NAME], [SECURETY_CODE], [COL_NAME]) VALUES (5, N''كلفة ثابتة'', 2, N''PRICE_COST'')
IF NOT EXISTS (select [TYPE_PRICE_CODE] from [T_TYPE_PRICE_SELL] where [TYPE_PRICE_CODE] = 6 )INSERT [dbo].[T_TYPE_PRICE_SELL] ([TYPE_PRICE_CODE], [TYPE_PRICE_NAME], [SECURETY_CODE], [COL_NAME]) VALUES (6, N''معدل الكلفة'', 2, N''AVG_BUY'')
IF NOT EXISTS (select [TYPE_PRICE_CODE] from [T_TYPE_PRICE_SELL] where [TYPE_PRICE_CODE] = 7 )INSERT [dbo].[T_TYPE_PRICE_SELL] ([TYPE_PRICE_CODE], [TYPE_PRICE_NAME], [SECURETY_CODE], [COL_NAME]) VALUES (7, N''عملة ثانوية'', 3, N''PRICE_SALE_CUR'')
IF NOT EXISTS (select [TYPE_PRICE_CODE] from [T_TYPE_PRICE_SELL] where [TYPE_PRICE_CODE] = 8 )INSERT [dbo].[T_TYPE_PRICE_SELL] ([TYPE_PRICE_CODE], [TYPE_PRICE_NAME], [SECURETY_CODE], [COL_NAME]) VALUES (8, N''وجبات'', 2, N''WAJBA'')
IF NOT EXISTS (select [TYPE_PRICE_CODE] from [T_TYPE_PRICE_SELL] where [TYPE_PRICE_CODE] = 9 )INSERT [dbo].[T_TYPE_PRICE_SELL] ([TYPE_PRICE_CODE], [TYPE_PRICE_NAME], [SECURETY_CODE], [COL_NAME]) VALUES (9, N''معدل موزون'', 2, N''PRICE_AVG_COST'')
IF NOT EXISTS (select [USER_CODE] from [T_USERS] where [USER_CODE] = 1 )INSERT [dbo].[T_USERS] ([USER_CODE], [USER_NAME], [USER_PWD], [LEVEL_CODE], [ACTIVE], [LOG_IN], [BOX_CODE], [IS_ENC], [SECURETY_CODE], [MANDOOB_CODE], [STORE_CODE], [TYPE_PRICE_CODE], [APP_PWD], [LEVEL_APP]) VALUES (1, N''Admin'', N''fpd2Te7d3NwzGck5qAgK8g=='', 1, 1, 0, 5000, 1, 3, -10, -10, -10, NULL, 1)



--/////////[T_ITEMS]////////////[T_ITEM_CATEGORY]////////////////[T_ITEM_UNIT]///////////////////////[[T_ITEM_TYPE]]/////////////////////////////////////////////////////////////////////////////////////////////////////////
IF NOT EXISTS (select [CATEGORY_CODE] from [T_ITEM_CATEGORY] where [CATEGORY_CODE] = 0 )INSERT [dbo].[T_ITEM_CATEGORY] ([CATEGORY_CODE], [CATEGORY_NAME], [CATEGORY_NAME_EN], [ACTIVE], [SHOW_MENU], [CATEGORY_IMAGE_PATH], [PRINTER_ID]) VALUES (0, N''مجموعة مواد مضافة'', N'''', 1, 0, NULL, 0)
IF NOT EXISTS (select [TYPE_CODE] from [T_ITEM_TYPE] where [TYPE_CODE] = 2 )INSERT [dbo].[T_ITEM_TYPE] ([TYPE_CODE], [TYPE_NAME]) VALUES (2, N''عدد'')
IF NOT EXISTS (select [TYPE_CODE] from [T_ITEM_TYPE] where [TYPE_CODE] = 3 )INSERT [dbo].[T_ITEM_TYPE] ([TYPE_CODE], [TYPE_NAME]) VALUES (3, N''استعلام وزن'')
IF NOT EXISTS (select [TYPE_CODE] from [T_ITEM_TYPE] where [TYPE_CODE] = 4 )INSERT [dbo].[T_ITEM_TYPE] ([TYPE_CODE], [TYPE_NAME]) VALUES (4, N''وزن باركود'')
IF NOT EXISTS (select [TYPE_CODE] from [T_ITEM_TYPE] where [TYPE_CODE] = 5 )INSERT [dbo].[T_ITEM_TYPE] ([TYPE_CODE], [TYPE_NAME]) VALUES (5, N''خدمية'')
IF NOT EXISTS (select [TYPE_CODE] from [T_ITEM_TYPE] where [TYPE_CODE] = 6 )INSERT [dbo].[T_ITEM_TYPE] ([TYPE_CODE], [TYPE_NAME]) VALUES (6, N''تصنيعية'')
IF NOT EXISTS (select [TYPE_CODE] from [T_ITEM_TYPE] where [TYPE_CODE] = 7 )INSERT [dbo].[T_ITEM_TYPE] ([TYPE_CODE], [TYPE_NAME]) VALUES (7, N''مادة اولية'')
IF NOT EXISTS (select [TYPE_CODE] from [T_ITEM_TYPE] where [TYPE_CODE] = 8 )INSERT [dbo].[T_ITEM_TYPE] ([TYPE_CODE], [TYPE_NAME]) VALUES (8, N''مادة استهلاكية'')

--IF NOT EXISTS (select [TYPE_CODE] from [T_ITEM_TYPE] where [TYPE_CODE] = 20 )INSERT [dbo].[T_ITEM_TYPE] ([TYPE_CODE], [TYPE_NAME]) VALUES (20, N''موديل'')
--IF NOT EXISTS (select [TYPE_CODE] from [T_ITEM_TYPE] where [TYPE_CODE] =21 )INSERT [dbo].[T_ITEM_TYPE] ([TYPE_CODE], [TYPE_NAME]) VALUES (21, N''ماطور'')
--IF NOT EXISTS (select [TYPE_CODE] from [T_ITEM_TYPE] where [TYPE_CODE] = 22 )INSERT [dbo].[T_ITEM_TYPE] ([TYPE_CODE], [TYPE_NAME]) VALUES (22, N''حبل'')


 

IF NOT EXISTS (select [UNIT_GUID] from [T_ITEM_UNIT] where [UNIT_GUID] = -1 ) INSERT [dbo].[T_ITEM_UNIT] ([UNIT_GUID], [ITEM_CODE], [UNIT_CODE], [UNIT_NAME], [UNIT_QTY], [ON_OFF], [DF_SALE], [DF_BUY], [DF_STORE], [PRICE_BUY], [PRICE_COST], [PRICE_SALE_1], [PRICE_SALE_2], [PRICE_SALE_3], [PRICE_AVG_COST], [PRICE_SALE_CUR], [C_DATE]) VALUES (CAST(-1 AS Numeric(18, 0)), CAST(-1 AS Numeric(18, 0)), 1, N''خدمة'', 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, GETDATE())
IF NOT EXISTS (select [UNIT_GUID] from [T_ITEM_UNIT] where [UNIT_GUID] = 0 ) INSERT [dbo].[T_ITEM_UNIT] ([UNIT_GUID], [ITEM_CODE], [UNIT_CODE], [UNIT_NAME], [UNIT_QTY], [ON_OFF], [DF_SALE], [DF_BUY], [DF_STORE], [PRICE_BUY], [PRICE_COST], [PRICE_SALE_1], [PRICE_SALE_2], [PRICE_SALE_3], [PRICE_AVG_COST], [PRICE_SALE_CUR], [C_DATE]) VALUES (CAST(0 AS Numeric(18, 0)), CAST(0 AS Numeric(18, 0)), 1, N''قطعة'', 1, 1, 1, 1, 1, 0, 0, 2500, 0, 0, 0, 0, GETDATE())
IF NOT EXISTS (select [ITEM_CODE] from [T_ITEMS] where [ITEM_CODE] = -1 ) INSERT [dbo].[T_ITEMS] ([ITEM_CODE], [ITEM_NAME], [CATEGORY_CODE], [TYPE_CODE], [COST], [SELL], [SORT], [ACTIVE], [PRINTER_ID], [ITEM_NOTE], [IMG_URL], [IMAGE], [ITEM_NAME_EN], [ITEM_NOTE_EN], [TIME_USE], [IS_STORE], [ITEM_BARCODE], [QTY_MIN], [ON2_OFF2], [UNIT2_NAME], [UNIT2_QTY], [DF_SALE], [SELL2], [SELL_CNY], [SELL2_CNY], [SHOW_MENU], [SELL_G], [SELL_W], [SELL2_G], [SELL2_W], [IS_TRANS], [GUIDS], [CLIENT_NAME_BEST], [IS_DISCOUNT], [ITEM_PARENT], [ITEM_SUB_PARENT], [LEVEL_SUB], [AREA_M2], [WIDTH_CM], [LENGTH_CM], [COMPANY_CREATE], [EFFECTIVE_MATERIAL], [MAIN_ITEM_CODE], [DISC_AMO], [DISC_PERCENT], [IS_FEATURE], [RAF_NAME], [IS_HIDE], [SERVER_ITEM_CODE], [SERVER_BRANCH], [IS_SERIAL], [UNIT_NAME], [EXPIRED_DAY], [EXPIRED_DATE], [EXPIRED_WARRNING]) VALUES (-1, N''اجور توصيل'', 0, 2, 0, 0, 1, 1, 0, N''...'', NULL, NULL, NULL, NULL, NULL, 1, N''000000'', 0, 0, N'''', 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N''2706e040-8338-4828-a777-d6aa5dbe2719'', N''رصيد اولي'', 1, -1, -1, 0, 0, 0, 0, NULL, NULL, -1, 0, 0, 0, NULL, 0, 0, N'''', 0, N''خدمة'', NULL, NULL, 0)
IF NOT EXISTS (select [ITEM_CODE] from [T_ITEMS] where [ITEM_CODE] = 0 ) INSERT [dbo].[T_ITEMS] ([ITEM_CODE], [ITEM_NAME], [CATEGORY_CODE], [TYPE_CODE], [COST], [SELL], [SORT], [ACTIVE], [PRINTER_ID], [ITEM_NOTE], [IMG_URL], [IMAGE], [ITEM_NAME_EN], [ITEM_NOTE_EN], [TIME_USE], [IS_STORE], [ITEM_BARCODE], [QTY_MIN], [ON2_OFF2], [UNIT2_NAME], [UNIT2_QTY], [DF_SALE], [SELL2], [SELL_CNY], [SELL2_CNY], [SHOW_MENU], [SELL_G], [SELL_W], [SELL2_G], [SELL2_W], [IS_TRANS], [GUIDS], [CLIENT_NAME_BEST], [IS_DISCOUNT], [ITEM_PARENT], [ITEM_SUB_PARENT], [LEVEL_SUB], [AREA_M2], [WIDTH_CM], [LENGTH_CM], [COMPANY_CREATE], [EFFECTIVE_MATERIAL], [MAIN_ITEM_CODE], [DISC_AMO], [DISC_PERCENT], [IS_FEATURE], [RAF_NAME], [IS_HIDE], [SERVER_ITEM_CODE], [SERVER_BRANCH], [IS_SERIAL], [UNIT_NAME], [EXPIRED_DAY], [EXPIRED_DATE], [EXPIRED_WARRNING]) VALUES (0, N''منتج اضافي'', 0, 2, 0, 0, 1, 1, 0, NULL, NULL, NULL, NULL, NULL, NULL, 1, N''0000'', 0, 0, N'''', 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, N''5d275482-dc1f-469a-9a43-be0a52221b44'', N''رصيد اولي'', 1, 0, 0, 0, 0, 0, 0, NULL, NULL, 0, 0, 0, 0, NULL, 0, 0, N'''', 0, N''قطعة'', NULL, NULL, 0)

SET IDENTITY_INSERT [dbo].[T_ITEM_BARCODE] ON 

IF NOT EXISTS (select [T_ID] from [T_ITEM_BARCODE] where [T_ID] = -1 ) INSERT [dbo].[T_ITEM_BARCODE] ([T_ID], [ITEM_CODE], [TYPE_VAL], [ITEM_BARCODE], [UNIT_CODE], [UNIT_NAME], [C_DATE]) VALUES (-1, -1, 0, N''000000'', 1, N''خدمة'', CAST(0x0000AC8C0137272A AS DateTime))
IF NOT EXISTS (select [T_ID] from [T_ITEM_BARCODE] where [T_ID] = 0 ) INSERT [dbo].[T_ITEM_BARCODE] ([T_ID], [ITEM_CODE], [TYPE_VAL], [ITEM_BARCODE], [UNIT_CODE], [UNIT_NAME], [C_DATE]) VALUES (0, 0, 0, N''0000'', 1, N''اضافات'', CAST(0x0000ABDA0118B7C8 AS DateTime))
SET IDENTITY_INSERT [dbo].[T_ITEM_BARCODE] OFF

--/////////////////////[]///////////////////////////////////////[[[T_IVC_TYPE]]]/////////////////////////////////////////////////////////////////////////////////////////////////////////
IF NOT EXISTS (select [IVC_CODE] from [T_IVC_TYPE] where [IVC_CODE] = 0 ) INSERT [dbo].[T_IVC_TYPE] ([IVC_CODE], [IVC_NAME], [FLAG], [ACTIVE]) VALUES (0, N''اختيار طريقة الدفع'', 0, 1)
IF NOT EXISTS (select [IVC_CODE] from [T_IVC_TYPE] where [IVC_CODE] = 1 )INSERT [dbo].[T_IVC_TYPE] ([IVC_CODE], [IVC_NAME], [FLAG], [ACTIVE]) VALUES (1, N''نقدي'', -1, 1)
IF NOT EXISTS (select [IVC_CODE] from [T_IVC_TYPE] where [IVC_CODE] = 2 )INSERT [dbo].[T_IVC_TYPE] ([IVC_CODE], [IVC_NAME], [FLAG], [ACTIVE]) VALUES (2, N''اجل'', -1, 1)
IF NOT EXISTS (select [IVC_CODE] from [T_IVC_TYPE] where [IVC_CODE] = 3 )INSERT [dbo].[T_IVC_TYPE] ([IVC_CODE], [IVC_NAME], [FLAG], [ACTIVE]) VALUES (3, N''و. جزئي'', 0, 1)
IF NOT EXISTS (select [IVC_CODE] from [T_IVC_TYPE] where [IVC_CODE] = 4 )INSERT [dbo].[T_IVC_TYPE] ([IVC_CODE], [IVC_NAME], [FLAG], [ACTIVE]) VALUES (4, N''اجل بفترة'', 0, 1)
IF NOT EXISTS (select [IVC_CODE] from [T_IVC_TYPE] where [IVC_CODE] = 5 )INSERT [dbo].[T_IVC_TYPE] ([IVC_CODE], [IVC_NAME], [FLAG], [ACTIVE]) VALUES (5, N''اقساط'', 0, 1)
IF NOT EXISTS (select [IVC_CODE] from [T_IVC_TYPE] where [IVC_CODE] = 6 )INSERT [dbo].[T_IVC_TYPE] ([IVC_CODE], [IVC_NAME], [FLAG], [ACTIVE]) VALUES (6, N''توصيل'', 0, 1)
IF NOT EXISTS (select [IVC_CODE] from [T_IVC_TYPE] where [IVC_CODE] = 7 )INSERT [dbo].[T_IVC_TYPE] ([IVC_CODE], [IVC_NAME], [FLAG], [ACTIVE]) VALUES (7, N''فاتورة دورية'', 0, 1)
IF NOT EXISTS (select [IVC_CODE] from [T_IVC_TYPE] where [IVC_CODE] = 10 )INSERT [dbo].[T_IVC_TYPE] ([IVC_CODE], [IVC_NAME], [FLAG], [ACTIVE]) VALUES (10, N''عرض اسعار'', 0, 1)

--////////////////////////////////////////////////////////////[T_MOVE]/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS (select [MOVE_CODE] from [T_MOVE] where [MOVE_CODE] = 0 )INSERT [dbo].[T_MOVE] ([MOVE_CODE], [MOVE_NAME], [ACTIVE]) VALUES (0, N'' '', 1)
IF NOT EXISTS (select [MOVE_CODE] from [T_MOVE] where [MOVE_CODE] = 1 )INSERT [dbo].[T_MOVE] ([MOVE_CODE], [MOVE_NAME], [ACTIVE]) VALUES (1, N''صرف'', 1)
IF NOT EXISTS (select [MOVE_CODE] from [T_MOVE] where [MOVE_CODE] = 2 )INSERT [dbo].[T_MOVE] ([MOVE_CODE], [MOVE_NAME], [ACTIVE]) VALUES (2, N''قبض'', 1)
IF NOT EXISTS (select [MOVE_CODE] from [T_MOVE] where [MOVE_CODE] = 3 )INSERT [dbo].[T_MOVE] ([MOVE_CODE], [MOVE_NAME], [ACTIVE]) VALUES (3, N''حوالة صادرة'', 1)
IF NOT EXISTS (select [MOVE_CODE] from [T_MOVE] where [MOVE_CODE] = 4 )INSERT [dbo].[T_MOVE] ([MOVE_CODE], [MOVE_NAME], [ACTIVE]) VALUES (4, N''حوالة واردة'', 1)
IF NOT EXISTS (select [MOVE_CODE] from [T_MOVE] where [MOVE_CODE] = 5 )INSERT [dbo].[T_MOVE] ([MOVE_CODE], [MOVE_NAME], [ACTIVE]) VALUES (5, N''حوالة بنكية'', 1)
IF NOT EXISTS (select [MOVE_CODE] from [T_MOVE] where [MOVE_CODE] = 6 )INSERT [dbo].[T_MOVE] ([MOVE_CODE], [MOVE_NAME], [ACTIVE]) VALUES (6, N''تسديد قسط'', 1)
IF NOT EXISTS (select [MOVE_CODE] from [T_MOVE] where [MOVE_CODE] = 7 )INSERT [dbo].[T_MOVE] ([MOVE_CODE], [MOVE_NAME], [ACTIVE]) VALUES (7, N''تسديد فاتورة'', 1)
IF NOT EXISTS (select [MOVE_CODE] from [T_MOVE] where [MOVE_CODE] =8 )INSERT [dbo].[T_MOVE] ([MOVE_CODE], [MOVE_NAME], [ACTIVE]) VALUES (8, N''سلفة'', 1)
IF NOT EXISTS (select [MOVE_CODE] from [T_MOVE] where [MOVE_CODE] = 101 )INSERT [dbo].[T_MOVE] ([MOVE_CODE], [MOVE_NAME], [ACTIVE]) VALUES (101, N''شراء دولار'', 1)
IF NOT EXISTS (select [MOVE_CODE] from [T_MOVE] where [MOVE_CODE] = 102 )INSERT [dbo].[T_MOVE] ([MOVE_CODE], [MOVE_NAME], [ACTIVE]) VALUES (102, N''بيع دولار'', 1)
IF NOT EXISTS (select [MOVE_CODE] from [T_MOVE] where [MOVE_CODE] = 201 )INSERT [dbo].[T_MOVE] ([MOVE_CODE], [MOVE_NAME], [ACTIVE]) VALUES (201, N''سماح له'', 1)
IF NOT EXISTS (select [MOVE_CODE] from [T_MOVE] where [MOVE_CODE] = 202 )INSERT [dbo].[T_MOVE] ([MOVE_CODE], [MOVE_NAME], [ACTIVE]) VALUES (202, N''سماح عليه'', 1)
IF NOT EXISTS (select [MOVE_CODE] from [T_MOVE_DOLLAR] where [MOVE_CODE] = 101 )INSERT [dbo].[T_MOVE_DOLLAR] ([MOVE_CODE], [MOVE_NAME]) VALUES (101, N''شراء دولار'')
IF NOT EXISTS (select [MOVE_CODE] from [T_MOVE_DOLLAR] where [MOVE_CODE] = 102 )INSERT [dbo].[T_MOVE_DOLLAR] ([MOVE_CODE], [MOVE_NAME]) VALUES (102, N''بيع دولار'')
IF NOT EXISTS (select [MOVE_CODE] from [T_MOVE_SMAH] where [MOVE_CODE] = 201 )INSERT [dbo].[T_MOVE_SMAH] ([MOVE_CODE], [MOVE_NAME]) VALUES (201, N''سماح له'')
IF NOT EXISTS (select [MOVE_CODE] from [T_MOVE_SMAH] where [MOVE_CODE] =202 )INSERT [dbo].[T_MOVE_SMAH] ([MOVE_CODE], [MOVE_NAME]) VALUES (202, N''سماح عليه'')
--////////////////////////////////////////////////////////////[T_DRIVERS]/////////////////////////////////////////////////////////////////////////////////////////////////////////
IF NOT EXISTS (select [DRIVER_CODE] from T_DRIVERS where [DRIVER_CODE] = -10 )INSERT [dbo].T_DRIVERS ([DRIVER_CODE], [DRIVER_NAME], [ACTIVE]) VALUES (-10, N''غير محدد'', 0)
IF NOT EXISTS (select [DRIVER_CODE] from T_DRIVERS where [DRIVER_CODE] = 0 )INSERT [dbo].T_DRIVERS ([DRIVER_CODE], [DRIVER_NAME], [ACTIVE]) VALUES (0, N'' '', 1)

--////////////////////////////////////////////////////////////[[T_NOTIFICATION]]/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS (select [NOTI_CODE] from [T_NOTIFICATION] where [NOTI_CODE] =1 ) INSERT [dbo].[T_NOTIFICATION] ([NOTI_CODE], [NOTI_NAME], [NOTI_COUNT], [IS_READ], [COUNT_NAME], [COUNT_SETTING], [COUNT_SIGN], [ACTIVE]) VALUES (1, N''منتجات دون حد الطلب'', 0, 0, N''ومضى على اخر تاريخ بيعها :'', 0, N''يوم'', 0)
IF NOT EXISTS (select [NOTI_CODE] from [T_NOTIFICATION] where [NOTI_CODE] =2 )INSERT [dbo].[T_NOTIFICATION] ([NOTI_CODE], [NOTI_NAME], [NOTI_COUNT], [IS_READ], [COUNT_NAME], [COUNT_SETTING], [COUNT_SIGN], [ACTIVE]) VALUES (2, N''منتجات ستصبح اكسباير'', 0, 0, N''تنبيه قبل الاكسباير بــ :'', 0, N''يوم'', 0)
IF NOT EXISTS (select [NOTI_CODE] from [T_NOTIFICATION] where [NOTI_CODE] =3 )INSERT [dbo].[T_NOTIFICATION] ([NOTI_CODE], [NOTI_NAME], [NOTI_COUNT], [IS_READ], [COUNT_NAME], [COUNT_SETTING], [COUNT_SIGN], [ACTIVE]) VALUES (3, N''منتجات اكسباير'', 0, 0, NULL, 0, NULL, 0)
IF NOT EXISTS (select [NOTI_CODE] from [T_NOTIFICATION] where [NOTI_CODE] =4 )INSERT [dbo].[T_NOTIFICATION] ([NOTI_CODE], [NOTI_NAME], [NOTI_COUNT], [IS_READ], [COUNT_NAME], [COUNT_SETTING], [COUNT_SIGN], [ACTIVE]) VALUES (4, N''منتجات راكدة'', 0, 0, N''ومضى على اخر تاريخ بيعها :'', 0, N''يوم'', 0)
IF NOT EXISTS (select [NOTI_CODE] from [T_NOTIFICATION] where [NOTI_CODE] =5 )INSERT [dbo].[T_NOTIFICATION] ([NOTI_CODE], [NOTI_NAME], [NOTI_COUNT], [IS_READ], [COUNT_NAME], [COUNT_SETTING], [COUNT_SIGN], [ACTIVE]) VALUES (5, N''منتجات رصيدها سالب'', 0, 0, NULL, 0, NULL, 0)
IF NOT EXISTS (select [NOTI_CODE] from [T_NOTIFICATION] where [NOTI_CODE] =6 )INSERT [dbo].[T_NOTIFICATION] ([NOTI_CODE], [NOTI_NAME], [NOTI_COUNT], [IS_READ], [COUNT_NAME], [COUNT_SETTING], [COUNT_SIGN], [ACTIVE]) VALUES (6, N''ملاحظات التذكير'', 6, 0, NULL, 0, NULL, 1)
IF NOT EXISTS (select [NOTI_CODE] from [T_NOTIFICATION] where [NOTI_CODE] =7 )INSERT [dbo].[T_NOTIFICATION] ([NOTI_CODE], [NOTI_NAME], [NOTI_COUNT], [IS_READ], [COUNT_NAME], [COUNT_SETTING], [COUNT_SIGN], [ACTIVE]) VALUES (7, N''مستحقات الاقساط'', 0, 0, N''تنبيه قبل الاستحقاق  بــ :'', 0, N''يوم'', 1)
IF NOT EXISTS (select [NOTI_CODE] from [T_NOTIFICATION] where [NOTI_CODE] =8 )INSERT [dbo].[T_NOTIFICATION] ([NOTI_CODE], [NOTI_NAME], [NOTI_COUNT], [IS_READ], [COUNT_NAME], [COUNT_SETTING], [COUNT_SIGN], [ACTIVE]) VALUES (8, N''تنبيه اخر تسديد للعميل'', 0, 0, N''ومضى على اخر تسديد  بــ :'', 0, N''يوم'', 1)
IF NOT EXISTS (select [NOTI_CODE] from [T_NOTIFICATION] where [NOTI_CODE] =9 )INSERT [dbo].[T_NOTIFICATION] ([NOTI_CODE], [NOTI_NAME], [NOTI_COUNT], [IS_READ], [COUNT_NAME], [COUNT_SETTING], [COUNT_SIGN], [ACTIVE]) VALUES (9, N''تنبيه اخطاء فواتير البيع'',  0, 0, NULL, 0, NULL, 0)

--////////////////////////////////////////////////////////////[[[T_PARAMETERS]]]/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS (select [P_CODE] from [T_PARAMETERS] where [P_CODE] =1 ) INSERT [dbo].[T_PARAMETERS] ([P_CODE], [P_TYPE], [P_VALUE], [P_DESC]) VALUES (1, N''BILL_NUMBER'', CAST(2 AS Decimal(18, 0)), N''fpd2Te7d3NwzGck5qAgK8g=='')
IF NOT EXISTS (select [P_CODE] from [T_PARAMETERS] where [P_CODE] =2 )INSERT [dbo].[T_PARAMETERS] ([P_CODE], [P_TYPE], [P_VALUE], [P_DESC]) VALUES (2, N''BILL_ORDER'', CAST(0 AS Decimal(18, 0)), N''0'')
IF NOT EXISTS (select [P_CODE] from [T_PARAMETERS] where [P_CODE] =3 )INSERT [dbo].[T_PARAMETERS] ([P_CODE], [P_TYPE], [P_VALUE], [P_DESC]) VALUES (3, N''SANAD'', CAST(1 AS Decimal(18, 0)), N''0'')
IF NOT EXISTS (select [P_CODE] from [T_PARAMETERS] where [P_CODE] =4 )INSERT [dbo].[T_PARAMETERS] ([P_CODE], [P_TYPE], [P_VALUE], [P_DESC]) VALUES (4, N''USER'', CAST(10 AS Decimal(18, 0)), NULL)
IF NOT EXISTS (select [P_CODE] from [T_PARAMETERS] where [P_CODE] =5 )INSERT [dbo].[T_PARAMETERS] ([P_CODE], [P_TYPE], [P_VALUE], [P_DESC]) VALUES (5, N''EXIST'', CAST(0 AS Decimal(18, 0)), N'''')
IF NOT EXISTS (select [P_CODE] from [T_PARAMETERS] where [P_CODE] =6 )INSERT [dbo].[T_PARAMETERS] ([P_CODE], [P_TYPE], [P_VALUE], [P_DESC]) VALUES (6, N''GATE'', CAST(0 AS Decimal(18, 0)), N'''')
--////////////////////////////////////////////////////////////[[[T_PARAMETERS]]]/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =100 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (100, N''rpt_sales_invoice_all'', N''مبيعات فواتير / الكل'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =101 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (101, N''rpt_sales_invoice_client'', N''مبيعات فواتير / عملاء'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =102 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (102, N''rpt_sales_invoice_date'', N''مبيعات فواتير / تاريخ'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =103 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (103, N''rpt_sales_invoice_type'', N''مبيعات فواتير / نوع الدفع'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =104 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (104, N''rpt_sales_invoice_user'', N''مبيعات فواتير / مستخدمين'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =105 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (105, N''rpt_sales_invoice_discount'', N''تقرير خصومات الفواتير'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =107 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (107, N''rpt_sales_date_monthly'', N''مخطط شهري للمبيعات '', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =108 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (108, N''rpt_sales_date_dayly'', N''مخطط يومي لمبيعات'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =109 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (109, N''rpt_sales_return_invoice_all'', N''مرتجع فواتير'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =110 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (110, N''rpt_sales_invoice_details_all'', N''مبيعات فواتير تفصيلي / الكل'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =111 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (111, N''rpt_sales_invoice_details_client'', N''مبيعات فواتير تفصيلي / عملاء'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =112 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (112, N''rpt_sales_invoice_details_store'', N''مبيعات فواتير تفصيلي / مخزن'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =113 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (113, N''rpt_sales_invoice_details_items'', N''مبيعات فواتير تفصيلي / منتجات'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =114 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (114, N''rpt_sales_invoice_details_category'', N''مبيعات فواتير تفصيلي / مجموعات'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =115 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (115, N''rpt_sales_invoice_details_return_all'', N''مرتجع فواتير تفصيلي'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =116 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (116, N''rpt_sales_invoice_mandoob'', N''مبيعات فواتير / مندوبين'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =117 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (117, N''rpt_sales_invoice_details_mandoob'', N''مبيعات فواتير تفصيلي / مندوبين'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =118 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (118, N''rpt_sales_mandoob_all'', N''مبيعات مندوبين'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =119 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (119, N''rpt_sales_mandoob_ITEMS'', N''مبيعات منتجات/ حسب المندوب'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =120 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (120, N''rpt_sales_details_items_all'', N''مبيعات منتجات / الكل'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =121 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (121, N''rpt_sales_details_items_category'', N''مبيعات منتجات / مجموعات '', N'''', N''SALES'')

IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =122 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (122, N''rpt_sales_details_category'', N''مبيعات اصناف'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =123 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (123, N''rpt_sales_details_items_wajba'', N''مبيعات وجبات '', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =124 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (124, N''rpt_sales_details_items_category_discount'', N''مبيعات منتجات / مجموعات بعد الخصم '', N'''', N''SALES'')

IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =125 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (125, N''rpt_sales_client_all'', N''مبيعات عملاء / الكل'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =126 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (126, N''rpt_sales_client_ivc'', N''مبيعات عملاء / حسب نوع الدفع'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =127 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (127, N''rpt_sales_client_category'', N''مبيعات عملاء / حسب المجموعات'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =128 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (128, N''rpt_sales_client_items'', N''مبيعات عملاء / حسب المنتجات'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =129 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (129, N''rpt_sales_client_best'', N''مبيعات عملاء / حسب العميل المثالي'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =130 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (130, N''rpt_sales_client_region'', N''SALES'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =131 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (131, N''rpt_sales_client_business'', N''مبيعات عملاء / حسب صنف العمل'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =133 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (133, N''rpt_sales_details_items_tasawek'', N''طلب تسوق المباع لفترة'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =134 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (134, N''rpt_item_correct_store'', N''التصحيح المخزني والتلف'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =135 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (135, N''rpt_sales_invoice_client_NOT_CASH'', N''تقرير صافي الفواتير الغير مسدد'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =136 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (136, N''rpt_sales_invoice_client_NOT_CASH_ALL'', N''تقرير الفواتير الغير مسدد'', N'''', N''SALES'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =140 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (140, N''RPT_OFFER_DETAILS'', N''قائمة العروض تفصيلي'', N'''', N''SALES'')



IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =200 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (200, N''rpt_buy_invoice_all'', N''مشتريات فواتير'', N'''', N''BUY'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =201 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (201, N''rpt_buy_invoice_details_all'', N''مشتريات فواتير تفصيلي'', N'''', N''BUY'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =202 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (202, N''rpt_buy_details_items_all'', N''مشتريات منتجات'', N'''', N''BUY'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =203 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (203, N''rpt_buy_details_category_all'', N''مشتريات اصناف'', N'''', N''BUY'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =204 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (204, N''rpt_buy_client_all'', N''مشتريات موردين'', N'''', N''BUY'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =205 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (205, N''rpt_buy_invoice_discount'', N''تقرير خصومات الفواتير'', N'''', N''BUY'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =206 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (206, N''rpt_buy_return_invoice_all'', N'''', N'''', N''BUY'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =207 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (207, N''rpt_buy_invoice_details_all_RETURN'', N''مرتجع فواتير تفصيلي'', N'''', N''BUY'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =208 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (208, N''rpt_start_item_balance'', N''الارصدة الاولية للمواد'', N'''', N''BUY'')

IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =300 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (300, N''rpt_sales_item_balance_unit_price'', N''جرد عام / الجرد بوحدات التعبئة'', N'''', N''ITEMS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =301 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (301, N''rpt_sales_item_balance_unit_price_category'', N''جرد عام / جرد اصناف ( مجموعات )'', N'''', N''ITEMS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =302 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (302, N''rpt_sales_item_balance_unit_default'', N''جرد عام / الجرد بالوحدة الافتراضية للجرد'', N'''', N''ITEMS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =303 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (303, N''rpt_sales_item_balance_unit_default_store'', N''جرد عام / جرد مخازن'', N'''', N''ITEMS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =305 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (305, N''rpt_sales_item_balance_all_b_code'', N''جرد عام / جرد تفصيلي شامل'', N'''', N''ITEMS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =306 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (306, N''rpt_sales_item_move'', N''تقرير حركة مادة لفترة معينة'', N'''', N''ITEMS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =307 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (307, N''rpt_sales_item_transfer'', N''تقرير نقل مخزني'', N'''', N''ITEMS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =308 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (308, N''rpt_item_unit_price'', N''تقرير اسعار البيع'', N'''', N''ITEMS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =309 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (309, N''rpt_item_unit_qty'', N''تقرير تعبئة'', N'''', N''ITEMS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =310 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (310, N''rpt_item_balance_min'', N''تقرير الكميات السالبة'', N'''', N''ITEMS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =311 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (311, N''rpt_item_balance_qtymin'', N''تقرير حد الطلب'', N'''', N''ITEMS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =312 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (312, N''rpt_item_last_date_diff'', N''تقرير المواد الراكدة'', N'''', N''ITEMS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =313 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (313, N''rpt_item_unit_price_all'', N''تقرير اسعار المنتجات'', N'''', N''ITEMS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =314 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (314, N''rpt_item_unit_price_photo'', N''تقرير منيو المنتجات'', N'''', N''ITEMS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =315 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (315, N''RPT_ITEM_MISWAK_INFO'', N''تقرير قائمة المسواك'', N'''', N''ITEMS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =316 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (316, N''RPT_ITEM_EXPIRED_REMAIN'', N''تقرير المسواك'', N'''', N''ITEMS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =317 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (317, N''rpt_items_expired'', N''تقرير منتجات اكسباير'', N'''', N''ITEMS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =318 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (318, N''rpt_items_expired_soon'', N''تقرير منتجات ستصبح اكسباير'', N'''', N''ITEMS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =319 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (319, N''RPT_ITEM_BALANCE_QTYMIN_NOTIFICATION'', N''تقرير حد الطلب ومضى على بيعها فترة'', N'''', N''ITEMS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =321 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (321, N''rpt_item_balance_qtymin_GSTORE'', N''تقرير حد الطلب لكل مخزن'', N'''', N''ITEMS'')

IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =400 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (400, N''rpt_account_kashif'', N''كشف حساب دولار'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =401 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (401, N''rpt_account_kashif_IQ'', N''كشف حساب دينار'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =402 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (402, N''rpt_account_kashif_BOTH'', N''كشف حساب دولار و دينار'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =403 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (403, N''rpt_account_kashif_advance'', N''كشف حساب تفصيلي دولار'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =404 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (404, N''rpt_account_kashif_advance_IQ'', N''كشف حساب تفصيلي دينار'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =405 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (405, N''rpt_sales_invoice_date_cash'', N''تقرير فواتير مستحقة التسديد'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =406 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (406, N''rpt_account_debit_percent'', N''تقرير نسبة الديون'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =407 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (407, N''rpt_account_debit_diff'', N''تقرير المتأخرين'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =408 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (408, N''rpt_account_debit_select'', N''تقرير مبلغ دين محدد'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =409 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (409, N''rpt_dayly_box'', N''القاصة اليومية'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =410 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (410, N''rpt_sanad'', N''تقرير السندات'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =411 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (411, N''rpt_buy_invoice_date_cash'', N'''', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =412 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (412, N''rpt_dayly_cash_info'', N''المطابقة اليومية'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =413 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (413, N''rpt_account_start_balance'', N''تقرير الارصدة الاولية للحسابات'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =414 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (414, N''RPT_ACCOUNT_BALANCE'', N''تقرير كشف ارصدة الحسابات '', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =415 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (415, N''RPT_CLIENT_BALANCE'', N''تقرير كشف ارصدة العملاء'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =416 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (416, N''RPT_EXPENSES_DETAILS'', N''تقرير المصاريف تفصيلي'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =417 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (417, N''RPT_EXPENSES'', N''تقرير المصاريف'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =418 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (418, N''RPT_USER_POINT_ERROR'', N''تقرير النقاط'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =419 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (419, N''RPT_EXPENSES_MOVE'', N''تقرير المصاريف انواع الحركات'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =420 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (420, N''RPT_REPORT_USER_80M'', N''تقرير يومي للمستخدم'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =421 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (421, N''rpt_account_debit_percent_TO_DATE'', N''تقرير نسبة الديون لغاية'', N'''', N''ACCOUNTS'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =422 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (422, N''RPT_ERADAT_MOVE'', N''تقرير الايرادات انواع الحركات'', N'''', N''ACCOUNTS'')

IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =500 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (500, N''rpt_sales_invoice_all_arbah'', N''تقرير ارباح فواتير'', N'''', N''ARBAH'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =501 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (501, N''rpt_sales_client_all_arbah'', N''تقرير ارباح عملاء / الكل'', N'''', N''ARBAH'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =502 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (502, N''rpt_sales_client_ivc_arbah'', N''تقرير ارباح عملاء / حسب نوع الدفع'', N'''', N''ARBAH'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =503 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (503, N''rpt_sales_client_business_arbah'', N''تقرير ارباح عملاء / حسب صنف العمل'', N'''', N''ARBAH'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =504 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (504, N''rpt_sales_details_items_all_arbah'', N''تقرير ارباح مواد'', N'''', N''ARBAH'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =505 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (505, N''rpt_sales_details_category_arbah'', N''تقرير ارباح مجموعات'', N'''', N''ARBAH'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =506 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (506, N''rpt_sales_client_region__arbah'', N'''', N'''', N''ARBAH'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =507 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (507, N''rpt_sales_invoice_mandoob_arbah'', N'''', N'''', N''ARBAH'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =508 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (508, N''RPT_BALANCE_FINAL'', N''تقرير الموازنة'', N'''', N''ARBAH'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =509 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (509, N''rpt_daily_net_all_arbah'', N''تقرير صافي ارباح'', N'''', N''ARBAH'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =510 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (510, N''RPT_ARBAH_CENTER_COST'', N''تقرير ارباح مراكز الكلف ( مجموعات - مصاريف )'', N'''', N''ARBAH'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =511 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (511, N''rpt_sales_details_items_all_arbah_AFTER_DISCOUNT'', N''تقرير ارباح مواد مابعد الخصم'', N'''', N''ARBAH'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =512 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (512, N''RPT_ARBAH_CENTER_COST_ITEMS'', N''تقرير ارباح مراكز الكلف ( منتجات - نوع حركة )'', N'''', N''ARBAH'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =513 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (513, N''rpt_arbah_date_dayly'', N''مخطط يومي للارباح'', N'''', N''ARBAH'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =514 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (514, N''rpt_arbah_date_monthly'', N''مخطط شهري للارباح '', N'''', N''ARBAH'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =515 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (515, N''RPT_ARBAH_CENTER_COST_INVOICE'', N''تقرير ارباح مراكز الكلف ( فواتير - نوع حركة )'', N'''', N''ARBAH'')

IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =596 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (596, N''RPT_AKSAT_CIENT_TABLE'', N''جدول الاقساط'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =597 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (597, N''RPT_AKSAT_CIENT_REMAIN'', N''الاقساط المتبقية على العميل'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =598 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (598, N''RPT_AKSAT_CIENT_INCOME'', N''وصل قبض اقساط'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =599 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (599, N''RPT_AKSAT_DUE_DETAILS'', N''المتأخرين من تسديد الاقساط /تفصيلي'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =600 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (600, N''RPT_AKSAT_DUE_ALL'', N''المتأخرين من تسديد الاقساط / الكل'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =601 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (601, N''RPT_AKSAT_DUE_CLIENT'', N''المتأخرين من تسديد الاقساط / عملاء'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =602 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (602, N''RPT_AKSAT_DUE_KAFEEL'', N''المتأخرين من تسديد الاقساط / كفيل'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =603 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (603, N''RPT_AKSAT_TABLE'', N''جدول الاقساط'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =604 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (604, N''RPT_SANAD_A5'', N''وصل سند A5'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =605 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (605, N''RPT_SANAD_SMAH_A5'', N''وصل سند سماح'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =606 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (606, N''RPT_SANAD_DOLLAR_A5'', N''وصل سند تصريف'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =607 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (607, N''RPT_SANAD_KAYD_DETALS'', N''وصل سند قيد'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =608 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (608, N''RPT_BUY_INVOICE'', N''فاتورة وشتريات'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =609 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (609, N''RPT_STORE_TRANSFARE'', N''فاتورة نقل مخزني'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =610 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (610, N''RPT_SANAD_A5_CNY'', N''وصل سند متعدد A5'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =611 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (611, N''RPT_PRINT_INVOICE_FACTORY'', N''فاتورة تصنيع'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =612 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (612, N''RPT_BUY_INVOICE_OUT'', N''فاتورة اخراج مخزني'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =613 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (613, N''RPT_BUY_INVOICE_OUT_80'', N''فاتورة اخراج مخزني 80'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =614 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (614, N''RPT_BUY_OUT_ALL'', N''طباعة مرتجع محدد الفواتير'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =615 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (615, N''RPT_SANAD_M80'', N''وصل سند 80'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =616 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (616, N''RPT_SANAD_A4_2A5'', N''وصل سند A4 *2 A5'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =617 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (617, N''RPT_SANAD_CNY_M80'', N''وصل سند تعبئة بطاقة 80'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =618 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (618, N''RPT_SANAD_HAWALA_A5'', N''وصل سند حوالة A5'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =619 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (619, N''RPT_QR_CLIENT_BARCODE'', N''وصل باركود العميل'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =620 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (620, N''RPT_PURCHASE_ORDER_INVOICE'', N''طلبية شراء'', N'''', N''PRINT'')

IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =650 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (650, N''RPT_PRINT_QR_INVOICE'', N''طباعة QR للفاتورة'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =660 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (660, N''RPT_BOOKING'', N''وصل حجز'', N'''', N''PRINT'')

IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =680 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (680, N''RPT_CONTAINER'', N''فاتورة حاوية'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =681 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (681, N''RPT_CONTAINER_CLIENT_DEBIT'', N''ديون الحاوية'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =682 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (682, N''RPT_CONTAINER_CLIENT_DEBIT_ID'', N''ديون العميل للحاوية'', N'''', N''PRINT'')

IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =690 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (690, N''RPT_SALES_DIRECT'', N''فاتورة بيع مباشر'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =691 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (691, N''RPT_CARS_AQED_SPICIAL'', N''عقد بيع سيارات خاص'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =692 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (692, N''RPT_SALES_FRUIT'', N''فاتورة بيع وزن'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =693 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (693, N''RPT_CARS_AQED'', N''عقد بيع سيارات'', N'''', N''PRINT'')

IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =694 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (694, N''RPT_CARS_INFO'', N''معلومات السيارة'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =695 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (695, N''RPT_JOINT_COURSES'', N''كورس المشترك'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =696 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (696, N''RPT_JOINT_COURSES_FREE'', N''كورس المشترك خارجي'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =697 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (697, N''RPT_CARS_TAKHWEEL'', N''تخويل نقل السيارة'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =698 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (698, N''RPT_ROOM_BOOKING'', N''حجز الفندق'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =699 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (699, N''RPT_ROOM_TYPE_DATE'', N''تفاصيل الغرف'', N'''', N''PRINT'')

IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =700 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (700, N''RPT_MAINTENANCE'', N''استمارة صيانة'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =701 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (701, N''RPT_STUDENT_INFO'', N''استمارة الطالب'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =702 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (702, N''RPT_STUDENT_INFO_ALL'', N''استمارة جميع الطلاب'', N'''', N''PRINT'')

IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =800 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (800, N''RPT_AQEED_TASLEEM_HOUSE'', N''طباعة عقد تسليم'', N'''', N''BUILDING'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =801 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (801, N''RPT_AQEED_AYGAR_HOUSE'', N''طباعة عقد ايجار'', N'''', N''BUILDING'')

IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =999 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (999, N''rpt_sales_invoice_store_A4'', N''النموذج الافتراضي للمخزن'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1000 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1000, N''rpt_sales_invoice_A4'', N''النموذج الافتراضي للفاتورة'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1001 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1001, N''rpt_sales_invoice_store_A4'', N''نموذج مخزن'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1002 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1002, N''rpt_sales_invoice_unit_qty_A4'', N''نموذج تعبئة'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1004 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1004, N''rpt_sales_invoice_A4_CNY2_DARZAN'', N''نموذج (كارتون - درزن)'', N'''', N''SALES_INVOICE'')

IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1005 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1005, N''rpt_sales_invoice_A4_CNY2_IQ_USA'', N''نموذج اجمالي عملة 2 رصيد دينار ودولار'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1006 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1006, N''rpt_sales_invoice_A4_CNY2_ITEM_NOTE'', N''نموذج ملاحظة منتج'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1007 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1007, N''rpt_sales_invoice_A4_CNY2_QR'', N''نموذج اجمالي عملة 2 QR'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1008 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1008, N''rpt_sales_invoice_A4_CNY2'', N''نموذج اجمالي عملة 2'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1009 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1009, N''rpt_sales_invoice_A5'', N''A5'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1010 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1010, N''rpt_sales_80M'', N''نموذج 80 '', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1020 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1020, N''rpt_sales_invoice_A4_CNY2_IQ_USA_TAX'', N''نموذج اجمالي عملة 2 رصيد دينار ودولار + ضريبة'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1021 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1021, N''rpt_sales_invoice_A4_CNY2_IQ_USA_ADD'', N''نموذج اجمالي عملة 2 رصيد دينار ودولار + مبلغ اضافي'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1022 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1022, N''rpt_sales_invoice_A4_CNY2_IQ_USA_ADD_UNIT_XX'', N''نموذج سيراميك والمرمر + مبلغ اضافي'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1023 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1023, N''rpt_sales_invoice_A4_CNY2_IQ_USA_ADD_AREA'', N''نموذج قياسات + مبلغ اضافي'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1024 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1024, N''rpt_sales_invoice_A4_CNY2_IQ_USA_ADD_AKSAT'', N''نموذج اقساط'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1025 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1025, N''rpt_sales_invoice_A4_CNY2_IQ_USA_ADD_KIMASH'', N''نموذج ستائر قماش'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1026 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1026, N''rpt_sales_invoice_A4_CNY2_IQ_USA_ADD_KIMASH_STORE'', N''نموذج  مخزن ستائر قماش'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1027 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1027, N''rpt_sales_invoice_A4_CNY2_IQ_USA_ADD_QTY_FREE'', N''نموذج  كمية مجانية'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1028 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1028, N''rpt_sales_invoice_A4_CNY2_IQ_USA_POINTS'', N''نموذج رصيد نقاط '', N'''', N''SALES_INVOICE'')




IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1210 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1210, N''rpt_sales_80M'', N''نموذج 80 '', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1211 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1211, N''rpt_sales_80M_DEBIT'', N''نموذج 80 رصيد سابق '', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1212 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1212, N''rpt_sales_80M_DELEVERY'', N''نموذج 80 ديليفري'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1213 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1213, N''rpt_RACK_PRICE_80M'', N''طباعة رفوف'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1214 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1214, N''RPT_PRINT_BARCODE'', N''طباعة باركود'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1215 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1215, N''RPT_MAINTENANCE_BARCODE'', N''طباعة صيانة'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1216 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1216, N''rpt_sales_80M_CARD'', N''نموذج كارت'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1217 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1217, N''RPT_PRINT_BARCODE_QR'', N''طباعة باركود QR'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1218 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1218, N''RPT_PRINT_BARCODE_QR2'', N''طباعة باركود QR2'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1219 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1219, N''RPT_PRINT_SERIAL'', N''طباعة سيريال'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1220 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1220, N''RPT_MAINTENANCE_BARCODE'', N''طباعة ليبل صيانة'', N'''', N''MAINTENANCE_BARCODE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1221 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1221, N''BARCODE_SPICAL_PRICE'', N''طباعة ليبل سعر خاص'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1222 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1222, N''RPT_PRINT_QR_BUY_CHECKEN'', N''QR مشتريات'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1223 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1223, N''RPT_PRINT_QR_SALES_BUY_CHECKEN'', N''QR مبيعات + مشتريات'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1224 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1224, N''RPT_PRINT_ABROVE_ORDER_APP'', N''طباعة الطلبات'', N'''', N''SALES_INVOICE'')

IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1230 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1230, N''RPT_LABEL_SIZE_KIMASH'', N''طباعة ليبل قياسات'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1231 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1231, N''RPT_LABEL_SIZE_KIMASH_2'', N''طباعة ليبل قياسات 2'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1240 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1240, N''RPT_PRINT_JOINT_SUBSECRIBE_80'', N''طباعة وصل اشتراك جم'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1250 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1250, N''RPT_COUPON'', N''كوبون خصم'', N'''', N''SALES_INVOICE'')






IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1300 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1300, N''RPT_SALES_ORDER'', N''طباعة التجهيز'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1301 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1301, N''RPT_SALES_ORDER_ITEM'', N''طباعة التجهيز منتج'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1302 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1302, N''RPT_SALES_ORDER'', N''طباعة التجهيز'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1303 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1303, N''RPT_SALES_ORDER_ITEM'', N''طباعة التجهيز منتج'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1304 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1304, N''RPT_SALES_ORDER'', N''طباعة التجهيز'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1305 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1305, N''RPT_SALES_ORDER_ITEM'', N''طباعة التجهيز منتج'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1306 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1306, N''RPT_SALES_ORDER_ITEM_DELETE'', N''طباعة الطلبات المحذوفة والمعدلة'', N'''', N''PRINT'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1307 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1307, N''RPT_SALES_ORDER_CARD'', N''طباعة التجهيز بالكارت'', N'''', N''SALES_INVOICE'')
IF NOT EXISTS (select [ID] from [T_REPORT] where [ID] =1401 ) INSERT [dbo].[T_REPORT] ([ID], [RPT_NAME], [SCREEN_NAME], [FOLDER_PATH], [RPT_PATH]) VALUES (1401, N''RPT_PRINT_TRANSFARE_ORDER'', N''طباعة التجهيز منتج'', N'''', N''SALES_INVOICE'')



--////////////////////////////////////////////////////////////[T_FORM_APP]/////////////////////////////////////////////////////////////////////////////////////////////////////////

IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =1 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (1, N''الحسابات'', N''frm_account_menu'', 1)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =2 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (2, N''الارصدة الاولية للحسابات'', N''FRM_FIRST_ACCOUNT_BALANCE'', 3)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =3 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (3, N''كشف ارصدة الحسابات'', N''frm_kashif_account_balance'', 2)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =4 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (4, N''كشف ارصدة العملاء'', N''frm_kashif_client_balance'', 2)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =5 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (5, N''التقارير'', N''FRM_REPORT'', 5)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =6 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (6, N''مخزن الشحن'', N''FRM_ITEM_QTY_BUY_STORE_SHAHIN'', 12)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =7 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (7, N''الارصدة السالبة'', N''FRM_SELECT_ITEM_MINUS'', 13)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =8 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (8, N''تحديد الراجع مبيعات'', N''FRM_SELECT_ITEM_RETURN_SALES'', 15)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =9 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (9, N''بحث مشتريات'', N''frm_search_buy'', 0)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =10 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (10, N''اضافة حساب'', N''frm_add_account'', 0)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =11 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (11, N''اضافة سريعة للحسابات'', N''frm_add_account_speed'', 5)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =12 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (12, N''اختيار نوع المشتريات'', N''FRM_TYPE_BUY'', 17)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =13 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (13, N''اضافة عميل'', N''frm_add_client'', 1)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =14 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (14, N''سعر صرف الدولار'', N''frm_dollar_exchange'', 0)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =15 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (15, N''كشف حساب'', N''frm_kashif_account'', 1)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =16)  INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (16, N''فاتورة مشتريات'', N''frm_buy'', 14)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =17 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (17, N''نقطة بيع ميزان'', N''FRM_POS_WEIGHT'', 20)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =18 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (18, N''فاتورة مبيعات'', N''frm_sales_big'', 21)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =19 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (19, N''نقطة بيع'', N''FRM_POS_SALES'', 22)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =20 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (20, N''قارئ الاسعار'', N''frm_price_checker'', 23)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =21 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (21, N''سند متعدد العملات'', N''frm_sanad_cny'', 24)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =22 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (22, N''سند صرف'', N''frm_sanad_out'', 25)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =23 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (23, N''سند قبض'', N''frm_sanad_in'', 26)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =24 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (24, N''السندات متعددة العملات'', N''frm_search_sanad_cny'', 27)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =25 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (25, N''النسخ الاحتياطي'', N''FRM_BACKUP_MENU'', 38)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =26 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (26, N''تعديل ارصدة المواد الحالية'', N''FRM_BALANCE_NOW_EDIT'', 28)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =27 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (27, N''تعديل سريع لارصدة المواد الحالية'', N''FRM_BALANCE_NOW_EDIT_SPEED'', 30)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =28 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (28, N''ارصدة المواد الحالية'', N''FRM_ITEM_BALANCE_NOW'', 31)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =29 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (29, N''تعديلات الجرد المخزني'', N''FRM_ITEM_CORRECT_BALANCE_ADVANCE'', 32)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =30 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (30, N''التصحيح المخزني والتلف'', N''FRM_ITEM_CORRECT_STORE'', 33)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =31 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (31, N''ادارة تفاصيل المواد'', N''FRM_ITEM_INFO'', 2)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =32 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (32, N''قائمة المسواك'', N''FRM_ITEM_MISWAK_INFO'', 4)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =33 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (33, N''قائمة العروض'', N''FRM_OFFERS_ITEMS'', 0)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =34 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (34, N''توزيع ارباح المستثمرين'', N''FRM_NET_MUSTATHMER_ARBAH'', 29)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =35 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (35, N''بحث مبيعات'', N''frm_search_sales'', 37)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =36 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (36, N''سند'', N''frm_sanad'', 6)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =37 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (37, N''سند تصريف'', N''frm_sanad_dollar'', 7)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =38 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (38, N''سند قيد'', N''frm_sanad_kayd'', 9)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =40 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (40, N''سند سماح'', N''frm_sanad_smah'', 3)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =41 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (41, N''الارصدة الاولية للمواد'', N''FRM_FIRST_ITEM_BALANCE'', 39)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =42 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (42, N''فاتورة نقل مخزني'', N''frm_store_transfer'', 40)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =43 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (43, N''ادارة اسعار المواد'', N''FRM_CHANGE_ITEM_PRICE'', 41)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =44 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (44, N''المواد'', N''FRM_ITEMS_ADVANCE'', 19)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =45 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (45, N''ادارة المواد'', N''FRM_ITEMS_MENU'', 42)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =46 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (46, N''اعدادات النظام'', N''Setting_Inf'', 43)
IF NOT EXISTS (select [ID] from [T_FORM_APP] where [ID] =47 ) INSERT [dbo].[T_FORM_APP] ([ID], [TITEL_NAME], [FORM_NAME], [FORM_PARENT]) VALUES (47, N''اختيار نوع المبيعات'', N''FRM_TYPE_SALES'', 44)


END


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_CHECK_NAME_SPACE_UPDATE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_CHECK_NAME_SPACE_UPDATE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_CHECK_NAME_SPACE_UPDATE]
AS
BEGIN
    SET NOCOUNT ON;

    /*---------------------------------------------------------
      تحديث بيانات جدول T_BILL_TYPE بناءً على قيم B_CODE
    ---------------------------------------------------------*/
    UPDATE T_BILL_TYPE
    SET FLAG = 1
    WHERE B_CODE IN (-1, 2, 21, 31, 41);

    /*---------------------------------------------------------
      تقليم المسافات الزائدة في جدول T_ITEMS للأعمدة:
      ITEM_NAME, UNIT_NAME, UNIT2_NAME, ITEM_BARCODE
    ---------------------------------------------------------*/
    UPDATE T_ITEMS
    SET 
        ITEM_NAME = LTRIM(RTRIM(ITEM_NAME)),
        UNIT_NAME = LTRIM(RTRIM(UNIT_NAME)),
        UNIT2_NAME = LTRIM(RTRIM(UNIT2_NAME)),
        ITEM_BARCODE = LTRIM(RTRIM(ITEM_BARCODE))
    WHERE 
        UNIT_NAME <> LTRIM(RTRIM(UNIT_NAME))
        OR ITEM_BARCODE <> LTRIM(RTRIM(ITEM_BARCODE))
        OR UNIT2_NAME <> LTRIM(RTRIM(UNIT2_NAME))
        OR ITEM_NAME <> LTRIM(RTRIM(ITEM_NAME));

    /*---------------------------------------------------------
      تقليم المسافات في جدول T_ITEM_UNIT للأعمدة
    ---------------------------------------------------------*/
    UPDATE T_ITEM_UNIT
    SET UNIT_NAME = LTRIM(RTRIM(UNIT_NAME))
    WHERE UNIT_NAME <> LTRIM(RTRIM(UNIT_NAME));

    /*---------------------------------------------------------
      تقليم المسافات في جدول T_ITEM_BARCODE للأعمدة
    ---------------------------------------------------------*/
    UPDATE T_ITEM_BARCODE
    SET 
        UNIT_NAME = LTRIM(RTRIM(UNIT_NAME)),
        ITEM_BARCODE = LTRIM(RTRIM(ITEM_BARCODE))
    WHERE 
        UNIT_NAME <> LTRIM(RTRIM(UNIT_NAME))
        OR ITEM_BARCODE <> LTRIM(RTRIM(ITEM_BARCODE));

    /*---------------------------------------------------------
      تعيين UNIT2_QTY إلى 1 في T_ITEMS إذا كانت تساوي 0
    ---------------------------------------------------------*/
    UPDATE T_ITEMS
    SET UNIT2_QTY = 1
    WHERE UNIT2_QTY = 0;

    /*---------------------------------------------------------
      تحديث BILL_INVOICE في T_SALES ليكون مساوياً لـ BILL_NUMBER
      في حال كان الحقل فارغاً بعد تقليم المسافات
    ---------------------------------------------------------*/
    UPDATE T_SALES
    SET BILL_INVOICE = BILL_NUMBER
    WHERE LEN(LTRIM(RTRIM(BILL_INVOICE))) = 0;

    /*---------------------------------------------------------
      تقليم ITEM_NAME في جدول T_SALES_DETAILS
    ---------------------------------------------------------*/
    UPDATE T_SALES_DETAILS
    SET ITEM_NAME = LTRIM(RTRIM(ITEM_NAME))
    WHERE ITEM_NAME <> LTRIM(RTRIM(ITEM_NAME));

    /*---------------------------------------------------------
      تفعيل سجلات T_BOX التي تخص فواتير المبيعات النشطة 
      مع SHIP_CODE = 0
    ---------------------------------------------------------*/
    UPDATE T_BOX
    SET ACTIVE = 1
    WHERE ACTIVE = 0
      AND B_CODE = 2
      AND BILL_NUMBER IN (
          SELECT BILL_NUMBER
          FROM T_SALES
          WHERE ACTIVE = 1 AND SHIP_CODE = 0
      );

    /*---------------------------------------------------------
      تحديث اسم العمود في T_TYPE_PRICE_SELL ليصبح ''PRICE_AVG_COST''
      بالنسبة للنوع TYPE_PRICE_CODE = 9
    ---------------------------------------------------------*/
    UPDATE T_TYPE_PRICE_SELL
    SET COL_NAME = N''PRICE_AVG_COST''
    WHERE TYPE_PRICE_CODE = 9;

    /*---------------------------------------------------------
      إعادة إنشاء قيد الافتراضي في جدول T_NOTES
    ---------------------------------------------------------*/
    ALTER TABLE [dbo].[T_NOTES] DROP CONSTRAINT [DF_T_NOTES_BY_APP];
    ALTER TABLE [dbo].[T_NOTES] ADD CONSTRAINT [DF_T_NOTES_BY_APP] DEFAULT ((1)) FOR [BY_APP];

    /*---------------------------------------------------------
      إعادة إنشاء قيد الافتراضي في جدول T_SALES_DETAILS للحقل QTY_AREA
      وتحديث القيم بحيث تصبح 1 في حالة كونها 0
    ---------------------------------------------------------*/
    ALTER TABLE [dbo].[T_SALES_DETAILS] DROP CONSTRAINT [DF_T_SALES_DETAILS_QTY_AREA];
    ALTER TABLE [dbo].[T_SALES_DETAILS] ADD CONSTRAINT [DF_T_SALES_DETAILS_QTY_AREA] DEFAULT ((1)) FOR [QTY_AREA];
    UPDATE T_SALES_DETAILS
    SET QTY_AREA = 1
    WHERE QTY_AREA = 0;

    /*---------------------------------------------------------
      إدراج سجلات التصحيح في T_ITEM_CORRECT من المصدر V_BUY_DETAILS_CORRECT
      للسجلات غير الموجودة مسبقاً
    ---------------------------------------------------------*/
    INSERT INTO [dbo].[T_ITEM_CORRECT]
    (
        BILL_BRANCH,
        BILL_NUMBER,
        ITEM_CODE,
        QTY,
        UNIT_NAME,
        UNIT_QTY,
        STORE_CODE,
        BALANCE,
        BALANCE_NEW,
        EQUAL_BALANCE,
        RAF_NAME,
        USER_NAME,
        C_DATE
    )
    SELECT
        BILL_BRANCH,
        BILL_NUMBER,
        ITEM_CODE,
        QTY,
        UNIT_NAME,
        UNIT_QTY,
        STORE_CODE,
        0 AS BALANCE,
        0 AS BALANCE_NEW,
        0 AS EQUAL_BALANCE,
        N'''' AS RAF_NAME,
        N''التصحيح المخزني والتلف'' AS USER_NAME,
        BILL_DATE
    FROM V_BUY_DETAILS_CORRECT
    WHERE BILL_NUMBER IN (
        SELECT BILL_NUMBER FROM V_BUY_DETAILS_CORRECT
        EXCEPT
        SELECT BILL_NUMBER FROM T_ITEM_CORRECT
    );

    /*---------------------------------------------------------
      تحديث أعمدة محسوبة في جداول T_SALES_TEMP وT_SALES_DETAILS
      في حال عدم وجود العمود TOTAL_TAX_ITEM في T_SALES_TEMP
    ---------------------------------------------------------*/
    IF NOT EXISTS (
        SELECT TOP(1) 1
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE [TABLE_NAME] = N''T_SALES_TEMP''
          AND [COLUMN_NAME] = N''TOTAL_TAX_ITEM''
    )
    BEGIN
        SET XACT_ABORT ON;

        -- تحديث العمود المحسوب NET_TOTAL في T_SALES_TEMP
        ALTER TABLE dbo.T_SALES_TEMP DROP COLUMN [NET_TOTAL];
        ALTER TABLE dbo.T_SALES_TEMP ADD [NET_TOTAL] AS 
            (
                ([PRICE] * [QTY])
                - ([QTY] * ([DISCOUNT_AMOUNT_ITEM] + ([DISCOUNT_PERCENT_ITEM] * [PRICE]) * (0.01)))
                + ([QTY] * ([TAX_AMO_ITEM] + ([TAX_PERCENT_ITEM] * [PRICE]) * (0.01)))
                + ([QTY] * ([MANDOOB_AMO_ITEM] + ([MANDOOB_PERCENT_ITEM] * [PRICE]) * (0.01)))
            );


        -- تحديث العمود المحسوب TOTAL_TAX_ITEM في T_SALES_DETAILS
        ALTER TABLE dbo.T_SALES_DETAILS DROP COLUMN [TOTAL_TAX_ITEM];
        ALTER TABLE dbo.T_SALES_DETAILS ADD [TOTAL_TAX_ITEM] AS 
            ([QTY] * ([TAX_AMO_ITEM] + ([TAX_PERCENT_ITEM] * [PRICE]) * (0.01)));

        -- تحديث العمود المحسوب TOTAL_MANDOOB_ITEM في T_SALES_DETAILS
        ALTER TABLE dbo.T_SALES_DETAILS DROP COLUMN [TOTAL_MANDOOB_ITEM];
        ALTER TABLE dbo.T_SALES_DETAILS ADD [TOTAL_MANDOOB_ITEM] AS 
            ([QTY] * ([MANDOOB_AMO_ITEM] + ([MANDOOB_PERCENT_ITEM] * [PRICE]) * (0.01)));

ALTER TABLE dbo.T_SALES_DETAILS DROP COLUMN [ARBAH_ITEM];
ALTER TABLE dbo.T_SALES_DETAILS ADD 	[ARBAH_ITEM]  AS (([PRICE]*([QTY]))-(([QTY])*([DISCOUNT_AMOUNT_ITEM]+([DISCOUNT_PERCENT_ITEM]*[PRICE])*(0.01)))-([COST]*([QTY]+[QTY_FREE])));



        -- حذف الفهرس الموجود إذا كان موجوداً على T_SALES_DETAILS
        IF EXISTS (
            SELECT 1
            FROM sys.indexes
            WHERE name = ''IDX_V_SALES_DETAILS_ITEM_CODE''
              AND object_id = OBJECT_ID(''dbo.T_SALES_DETAILS'')
        )
        BEGIN
            DROP INDEX IDX_V_SALES_DETAILS_ITEM_CODE ON dbo.T_SALES_DETAILS;
        END;

        -- تحديث العمود المحسوب TOTAL_COST في T_SALES_DETAILS
        ALTER TABLE dbo.T_SALES_DETAILS DROP COLUMN [TOTAL_COST];
        ALTER TABLE dbo.T_SALES_DETAILS ADD [TOTAL_COST] AS 
            (
                ([COST] * ([QTY] + [QTY_FREE]))
                + ([K_STORE_COST] * [QTY])
                + ([K_PRINT_COST] * [QTY])
                + ([K_MODEL_TOTAL_COST])
                + ([K_MOTOR_COST] * [QTY_AREA])
                + ([K_HABEL_COST] * [QTY_AREA])
            );

        -- تحديث العمود المحسوب NET_TOTAL في T_SALES_DETAILS
        ALTER TABLE dbo.T_SALES_DETAILS DROP COLUMN [NET_TOTAL];
        ALTER TABLE dbo.T_SALES_DETAILS ADD [NET_TOTAL] AS 
            (
                ([PRICE] * [QTY])
                - ([QTY] * ([DISCOUNT_AMOUNT_ITEM] + ([DISCOUNT_PERCENT_ITEM] * [PRICE]) * (0.01)))
                + ([QTY] * ([TAX_AMO_ITEM] + ([TAX_PERCENT_ITEM] * [PRICE]) * (0.01)))
                + ([QTY] * ([MANDOOB_AMO_ITEM] + ([MANDOOB_PERCENT_ITEM] * [PRICE]) * (0.01)))
                + ([K_STORE_TOTAL] + [K_PRINT_TOTAL] + [K_MODEL_TOTAL] + [K_MOTOR_TOTAL] + [K_HABEL_TOTAL])
            );
    END
 
	/*---------------------------------------------------------
      إعادة بناء الفهارس على جدول T_STORE_BOX
    ---------------------------------------------------------*/
   
    ALTER TABLE T_STORE_BOX
    ALTER COLUMN BILL_BRANCH NVARCHAR(50);
 
	   /*---------------------------------------------------------
      إعادة بناء الفهارس على جدول T_ITEM_UNIT
    ---------------------------------------------------------*/
   
    ALTER TABLE T_ITEM_UNIT
    ALTER COLUMN UNIT_NAME NVARCHAR(20); 
	   /*---------------------------------------------------------
      إعادة بناء الفهارس على جدول T_ITEM_BARCODE
    ---------------------------------------------------------*/
   
    ALTER TABLE T_ITEM_BARCODE
    ALTER COLUMN ITEM_BARCODE NVARCHAR(50); 
    /*---------------------------------------------------------
      تعديل نوع العمود TIME_BOOKING في جدول T_BOOKING ليصبح TIME(0)
    ---------------------------------------------------------*/
    ALTER TABLE T_BOOKING
    ALTER COLUMN TIME_BOOKING TIME(0);

    /*---------------------------------------------------------
      إعادة بناء الفهارس على جدول T_SALES_DETAILS
    ---------------------------------------------------------*/ 
    ALTER TABLE T_SALES_DETAILS
    ALTER COLUMN BILL_BRANCH NVARCHAR(50);
    
    /*---------------------------------------------------------
      إعادة بناء الفهارس على جدول T_SALES_TEMP
    ---------------------------------------------------------*/
    
    ALTER TABLE T_SALES_TEMP
    ALTER COLUMN BILL_BRANCH NVARCHAR(50);
    

ALTER TABLE dbo.T_SALES_DETAILS DROP COLUMN [ARBAH_ITEM];
ALTER TABLE dbo.T_SALES_DETAILS ADD 	[ARBAH_ITEM]  AS (([PRICE]*([QTY]))-(([QTY])*([DISCOUNT_AMOUNT_ITEM]+([DISCOUNT_PERCENT_ITEM]*[PRICE])*(0.01)))-([COST]*([QTY]+[QTY_FREE])));

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[T_NOTES]'') AND name = N''IX_T_NOTES_ISDONE_REMAINDERDATE'')
CREATE NONCLUSTERED INDEX [IX_T_NOTES_ISDONE_REMAINDERDATE] ON [dbo].[T_NOTES]
(
	[IS_DONE] ASC,
	[REMAINDER_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
 
 


DROP TABLE T_BOX_REPORT_ACCOUNT;

 CREATE TABLE T_BOX_REPORT_ACCOUNT
    (
        T_ID_BOX            INT NOT NULL PRIMARY KEY,
        BILL_BRANCH         NVARCHAR(50),
        BILL_NUMBER         NVARCHAR(50),
        BILL_DATE           DATE,
        BILL_TIME           DATETIME,
        B_CODE              INT,
        B_NAME              NVARCHAR(MAX),
        MOVE_CODE           INT,
        MOVE_NAME           NVARCHAR(MAX),
        ACCOUNT_CODE        INT,
        ACCOUNT_NAME        NVARCHAR(MAX),
        ACCOUNT_FULL_NAME   NVARCHAR(MAX),
        ACCOUNT_DESCRIPTION NVARCHAR(MAX),
        AMO_DEBIT           DECIMAL(18,4),
        AMO_CREDIT          DECIMAL(18,4),
        BALANCE_USA         DECIMAL(18,4),
        AMO_DEBIT_IQ        DECIMAL(18,4),
        AMO_CREDIT_IQ       DECIMAL(18,4),
        BALANCE_IQ          DECIMAL(18,4),
        AMO_DEBIT_CUR       DECIMAL(18,3),
        AMO_CREDIT_CUR      DECIMAL(18,3),
        BALANCE_CUR         DECIMAL(18,3),
        DESCRIPTION         NVARCHAR(MAX),
        USER_CODE           INT,
        USER_NAME           NVARCHAR(MAX),
        DEAL_CODE           INT,
        DEAL_NAME           NVARCHAR(MAX),
        BRANCH_CODE         INT,
        BRANCH_NAME         NVARCHAR(MAX),
        MANDOB_NAME         NVARCHAR(MAX),
        CLIENT_REGION       NVARCHAR(MAX),
        CLIENT_PHONE_SMS    NVARCHAR(MAX),
        B_COLOR             NVARCHAR(MAX),
        CHECKED             BIT,
        ID_BOX              INT
    );
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DAMAGE_ACCOUNTS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DAMAGE_ACCOUNTS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

















CREATE PROCEDURE [dbo].[P_DAMAGE_ACCOUNTS]

@D1 DATE,
@D2 DATE,
@ACCOUNT_CODE_DELETE INT,
@ACCOUNT_CODE_NEW INT,
@SUBMIT_FLAG INT OUTPUT

AS

DECLARE
@ACCOUNT_NAME_NEW NVARCHAR(MAX)


BEGIN TRAN
BEGIN
SET @SUBMIT_FLAG=0
SELECT @ACCOUNT_NAME_NEW =ACCOUNT_NAME FROM T_ACCOUNTS WHERE ACCOUNT_CODE=@ACCOUNT_CODE_NEW
UPDATE T_BOX SET ACCOUNT_CODE=@ACCOUNT_CODE_NEW WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND ACCOUNT_CODE=@ACCOUNT_CODE_DELETE AND B_CODE<>13
UPDATE T_BUY SET ACCOUNT_CODE=@ACCOUNT_CODE_NEW WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND ACCOUNT_CODE=@ACCOUNT_CODE_DELETE 
UPDATE T_SALES SET ACCOUNT_CODE=@ACCOUNT_CODE_NEW WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND ACCOUNT_CODE=@ACCOUNT_CODE_DELETE 

UPDATE T_SANAD SET FROM_ACCOUNT=@ACCOUNT_CODE_NEW,FROM_ACC=@ACCOUNT_NAME_NEW WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND FROM_ACCOUNT=@ACCOUNT_CODE_DELETE 
UPDATE T_SANAD SET TO_ACCCOUNT=@ACCOUNT_CODE_NEW,TO_ACC=@ACCOUNT_NAME_NEW WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND TO_ACCCOUNT=@ACCOUNT_CODE_DELETE 

UPDATE T_SANAD_DOLLAR SET FROM_ACCOUNT=@ACCOUNT_CODE_NEW,FROM_ACC=@ACCOUNT_NAME_NEW WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND FROM_ACCOUNT=@ACCOUNT_CODE_DELETE 
UPDATE T_SANAD_DOLLAR SET TO_ACCCOUNT=@ACCOUNT_CODE_NEW,TO_ACC=@ACCOUNT_NAME_NEW WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND TO_ACCCOUNT=@ACCOUNT_CODE_DELETE 

UPDATE T_SANAD_SMAH SET FROM_ACCOUNT=@ACCOUNT_CODE_NEW,FROM_ACC=@ACCOUNT_NAME_NEW WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND FROM_ACCOUNT=@ACCOUNT_CODE_DELETE 
UPDATE T_SANAD_SMAH SET TO_ACCCOUNT=@ACCOUNT_CODE_NEW,TO_ACC=@ACCOUNT_NAME_NEW WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND TO_ACCCOUNT=@ACCOUNT_CODE_DELETE 

UPDATE V_SANAD_KAYD_DETAILS SET ACCOUNT_CODE=@ACCOUNT_CODE_NEW WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND ACCOUNT_CODE=@ACCOUNT_CODE_DELETE 

UPDATE T_SANAD_CNY SET FROM_ACCOUNT=@ACCOUNT_CODE_NEW,FROM_ACC=@ACCOUNT_NAME_NEW WHERE  (BILL_DATE BETWEEN @D1 AND @D2) AND FROM_ACCOUNT=@ACCOUNT_CODE_DELETE 
UPDATE T_SANAD_CNY SET TO_ACCCOUNT=@ACCOUNT_CODE_NEW,TO_ACC=@ACCOUNT_NAME_NEW WHERE   (BILL_DATE BETWEEN @D1 AND @D2) AND TO_ACCCOUNT=@ACCOUNT_CODE_DELETE 

UPDATE T_SANAD_HAWALA SET FROM_ACCOUNT=@ACCOUNT_CODE_NEW,FROM_ACC=@ACCOUNT_NAME_NEW WHERE  (BILL_DATE BETWEEN @D1 AND @D2) AND  FROM_ACCOUNT=@ACCOUNT_CODE_DELETE 
UPDATE T_SANAD_HAWALA SET TO_ACCCOUNT=@ACCOUNT_CODE_NEW,TO_ACC=@ACCOUNT_NAME_NEW WHERE  (BILL_DATE BETWEEN @D1 AND @D2) AND TO_ACCCOUNT=@ACCOUNT_CODE_DELETE 



SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

commit

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DAMAGE_ACCOUNTS_ALL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DAMAGE_ACCOUNTS_ALL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_DAMAGE_ACCOUNTS_ALL]
    @ACCOUNT_CODE_DELETE INT,
    @ACCOUNT_CODE_NEW    INT,
    @SUBMIT_FLAG         INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;

    DECLARE 
        @ACCOUNT_NAME_NEW NVARCHAR(200),
        @ACCOUNT_NAME_OLD NVARCHAR(200),
        @B_USA DECIMAL(19,4) = 0,
        @B_IQ  DECIMAL(19,4) = 0;

    SET @SUBMIT_FLAG = 0;

    -- فحوصات أساسية
    IF @ACCOUNT_CODE_DELETE IS NULL OR @ACCOUNT_CODE_NEW IS NULL
    BEGIN
        RAISERROR(N''قيم الحسابين مطلوبة.'',16,1); RETURN;
    END;

    IF @ACCOUNT_CODE_DELETE = @ACCOUNT_CODE_NEW
    BEGIN
        RAISERROR(N''لا يمكن دمج الحساب بنفسه.'',16,1); RETURN;
    END;

    IF NOT EXISTS (SELECT 1 FROM dbo.T_ACCOUNTS WHERE ACCOUNT_CODE=@ACCOUNT_CODE_DELETE)
    BEGIN
        RAISERROR(N''الحساب المراد حذفه غير موجود.'',16,1); RETURN;
    END;

    IF NOT EXISTS (SELECT 1 FROM dbo.T_ACCOUNTS WHERE ACCOUNT_CODE=@ACCOUNT_CODE_NEW)
    BEGIN
        RAISERROR(N''الحساب الجديد غير موجود.'',16,1); RETURN;
    END;

    SELECT @ACCOUNT_NAME_NEW = ACCOUNT_NAME FROM dbo.T_ACCOUNTS WHERE ACCOUNT_CODE=@ACCOUNT_CODE_NEW;
    SELECT @ACCOUNT_NAME_OLD = ACCOUNT_NAME FROM dbo.T_ACCOUNTS WHERE ACCOUNT_CODE=@ACCOUNT_CODE_DELETE;

    BEGIN TRY
        BEGIN TRAN;

        /* 1) جمع الرصيد الافتتاحي للحساب القديم (B_CODE=13) */
        SELECT 
            @B_USA = SUM(ISNULL(B_USA,0)),
            @B_IQ  = SUM(ISNULL(B_IQ ,0))
        FROM dbo.T_BOX WITH (UPDLOCK, HOLDLOCK)
        WHERE ACCOUNT_CODE = @ACCOUNT_CODE_DELETE
          AND B_CODE = 13;

        /* 2) تجميع/نقل الرصيد الافتتاحي إلى الحساب الجديد بدون INSERT */
        IF @B_USA <> 0 OR @B_IQ <> 0
        BEGIN
            IF EXISTS (SELECT 1 FROM dbo.T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE_NEW AND B_CODE=13)
            BEGIN
                -- أجمع على الموجود (بدون إدخال سطر جديد)
                UPDATE dbo.T_BOX
                SET 
                    DEBIT     = ISNULL(DEBIT,0)    + @B_USA,
                    DEBIT_IQ  = ISNULL(DEBIT_IQ,0) + @B_IQ,
                    [DESCRIPTION] = COALESCE([DESCRIPTION],N'''') + 
                        CASE WHEN COALESCE([DESCRIPTION],N'''')=N'''' THEN N'''' ELSE N'' | '' END +
                        N''دمج رصيد افتتاحي من حساب '' + CAST(@ACCOUNT_CODE_DELETE AS NVARCHAR(20))
                WHERE ACCOUNT_CODE=@ACCOUNT_CODE_NEW AND B_CODE=13;

                -- صفّر/علّم القديم حتى لا يُحسب مرتين
                UPDATE dbo.T_BOX
                SET 
                    DEBIT = 0,      DEBIT_IQ = 0,
                    [DESCRIPTION] = COALESCE([DESCRIPTION],N'''') + 
                        CASE WHEN COALESCE([DESCRIPTION],N'''')=N'''' THEN N'''' ELSE N'' | '' END +
                        N''تم ترحيل الرصيد الافتتاحي إلى الحساب '' + CAST(@ACCOUNT_CODE_NEW AS NVARCHAR(20))
                WHERE ACCOUNT_CODE=@ACCOUNT_CODE_DELETE AND B_CODE=13;
            END
            ELSE
            BEGIN
                -- لا يوجد سطر افتتاحي للحساب الجديد: ننقل نفس أسطر القديم إلى الحساب الجديد (بدون INSERT)
                UPDATE dbo.T_BOX
                SET 
                    ACCOUNT_CODE = @ACCOUNT_CODE_NEW,
                    [DESCRIPTION] = COALESCE([DESCRIPTION],N'''') + 
                        CASE WHEN COALESCE([DESCRIPTION],N'''')=N'''' THEN N'''' ELSE N'' | '' END +
                        N''نقل رصيد افتتاحي من حساب '' + CAST(@ACCOUNT_CODE_DELETE AS NVARCHAR(20))
                WHERE ACCOUNT_CODE=@ACCOUNT_CODE_DELETE AND B_CODE=13;
            END
        END

        /* 3) نقل باقي حركات T_BOX (كل الأكواد ما عدا 13) إلى الحساب الجديد */
        UPDATE B
        SET B.ACCOUNT_CODE = @ACCOUNT_CODE_NEW
        FROM dbo.T_BOX AS B
        WHERE B.ACCOUNT_CODE=@ACCOUNT_CODE_DELETE
          AND B.B_CODE<>13;

        /* 4) نقل معاملات الشراء/البيع */
        UPDATE S SET S.ACCOUNT_CODE=@ACCOUNT_CODE_NEW
        FROM dbo.T_SALES AS S
        WHERE S.ACCOUNT_CODE=@ACCOUNT_CODE_DELETE;

        UPDATE P SET P.ACCOUNT_CODE=@ACCOUNT_CODE_NEW
        FROM dbo.T_BUY AS P
        WHERE P.ACCOUNT_CODE=@ACCOUNT_CODE_DELETE;

        /* 5) سندات القيود – من/إلى + الأسماء النصية */
        UPDATE SD SET SD.FROM_ACCOUNT=@ACCOUNT_CODE_NEW, SD.FROM_ACC=@ACCOUNT_NAME_NEW
        FROM dbo.T_SANAD AS SD
        WHERE SD.FROM_ACCOUNT=@ACCOUNT_CODE_DELETE;

        UPDATE SD SET SD.TO_ACCCOUNT=@ACCOUNT_CODE_NEW, SD.TO_ACC=@ACCOUNT_NAME_NEW
        FROM dbo.T_SANAD AS SD
        WHERE SD.TO_ACCCOUNT=@ACCOUNT_CODE_DELETE;

        UPDATE SDD SET SDD.FROM_ACCOUNT=@ACCOUNT_CODE_NEW, SDD.FROM_ACC=@ACCOUNT_NAME_NEW
        FROM dbo.T_SANAD_DOLLAR AS SDD
        WHERE SDD.FROM_ACCOUNT=@ACCOUNT_CODE_DELETE;

        UPDATE SDD SET SDD.TO_ACCCOUNT=@ACCOUNT_CODE_NEW, SDD.TO_ACC=@ACCOUNT_NAME_NEW
        FROM dbo.T_SANAD_DOLLAR AS SDD
        WHERE SDD.TO_ACCCOUNT=@ACCOUNT_CODE_DELETE;

        UPDATE SDS SET SDS.FROM_ACCOUNT=@ACCOUNT_CODE_NEW, SDS.FROM_ACC=@ACCOUNT_NAME_NEW
        FROM dbo.T_SANAD_SMAH AS SDS
        WHERE SDS.FROM_ACCOUNT=@ACCOUNT_CODE_DELETE;

        UPDATE SDS SET SDS.TO_ACCCOUNT=@ACCOUNT_CODE_NEW, SDS.TO_ACC=@ACCOUNT_NAME_NEW
        FROM dbo.T_SANAD_SMAH AS SDS
        WHERE SDS.TO_ACCCOUNT=@ACCOUNT_CODE_DELETE;

        UPDATE SCNY SET SCNY.FROM_ACCOUNT=@ACCOUNT_CODE_NEW, SCNY.FROM_ACC=@ACCOUNT_NAME_NEW
        FROM dbo.T_SANAD_CNY AS SCNY
        WHERE SCNY.FROM_ACCOUNT=@ACCOUNT_CODE_DELETE;

        UPDATE SCNY SET SCNY.TO_ACCCOUNT=@ACCOUNT_CODE_NEW, SCNY.TO_ACC=@ACCOUNT_NAME_NEW
        FROM dbo.T_SANAD_CNY AS SCNY
        WHERE SCNY.TO_ACCCOUNT=@ACCOUNT_CODE_DELETE;

        UPDATE SH SET SH.FROM_ACCOUNT=@ACCOUNT_CODE_NEW, SH.FROM_ACC=@ACCOUNT_NAME_NEW
        FROM dbo.T_SANAD_HAWALA AS SH
        WHERE SH.FROM_ACCOUNT=@ACCOUNT_CODE_DELETE;

        UPDATE SH SET SH.TO_ACCCOUNT=@ACCOUNT_CODE_NEW, SH.TO_ACC=@ACCOUNT_NAME_NEW
        FROM dbo.T_SANAD_HAWALA AS SH
        WHERE SH.TO_ACCCOUNT=@ACCOUNT_CODE_DELETE;

        /* 6) تفاصيل القيود: فعّل حسب اسم جدولك الحقيقي */
        -- مثال:
        -- IF OBJECT_ID(''dbo.T_SANAD_KAYD_DETAILS'',''U'') IS NOT NULL
        -- BEGIN
        --     UPDATE D SET D.ACCOUNT_CODE=@ACCOUNT_CODE_NEW
        --     FROM dbo.T_SANAD_KAYD_DETAILS AS D
        --     WHERE D.ACCOUNT_CODE=@ACCOUNT_CODE_DELETE;
        -- END

        /* 7) العملاء المرتبطون بالحساب القديم (إن وُجد العمود) */
        IF COL_LENGTH(''dbo.T_CLIENT'',''ACCOUNT_CODE'') IS NOT NULL
        BEGIN
            UPDATE C
            SET C.ACCOUNT_CODE = @ACCOUNT_CODE_NEW,
                C.CLIENT_ACTIVE = 1,
                C.CLIENT_NOTE = COALESCE(C.CLIENT_NOTE,N'''') + 
                    CASE WHEN COALESCE(C.CLIENT_NOTE,N'''')=N'''' THEN N'''' ELSE N'' | '' END +
                    (N''تم دمج الحساب القديم ['' + CAST(@ACCOUNT_CODE_DELETE AS NVARCHAR(20)) + N'' - '' + COALESCE(@ACCOUNT_NAME_OLD,N'''') + N''] إلى ['' + CAST(@ACCOUNT_CODE_NEW AS NVARCHAR(20)) + N'' - '' + COALESCE(@ACCOUNT_NAME_NEW,N'''') + N'']'')
            FROM dbo.T_CLIENT AS C
            WHERE C.ACCOUNT_CODE=@ACCOUNT_CODE_DELETE;
        END

        /* 8) تعطيل الحساب القديم وتوثيق الدمج */
        UPDATE A
        SET A.ACCOUNT_ACTIVE = 0,
            A.ACCOUNT_NOTE = COALESCE(A.ACCOUNT_NOTE,N'''') +
                     CASE WHEN COALESCE(A.ACCOUNT_NOTE,N'''')=N'''' THEN N'''' ELSE N'' | '' END +
                     (N''تم دمج هذا الحساب إلى ['' + CAST(@ACCOUNT_CODE_NEW AS NVARCHAR(20)) + N'' - '' + COALESCE(@ACCOUNT_NAME_NEW,N'''') + N''] بتاريخ '' + CONVERT(NVARCHAR(19),GETDATE(),120))
        FROM dbo.T_ACCOUNTS AS A
        WHERE A.ACCOUNT_CODE=@ACCOUNT_CODE_DELETE;

        SET @SUBMIT_FLAG = 1;
        COMMIT TRAN;
    END TRY
    BEGIN CATCH
        IF XACT_STATE() <> 0 ROLLBACK TRAN;
        SET @SUBMIT_FLAG = 0;
        DECLARE @Err NVARCHAR(4000)=ERROR_MESSAGE();
        RAISERROR(N''فشل دمج الحسابات: %s'',16,1,@Err);
        RETURN;
    END CATCH
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DAMAGE_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DAMAGE_ITEMS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_DAMAGE_ITEMS]

@D1 DATE,
@D2 DATE,
@ITEM_CODE_DELETE INT,
@ITEM_CODE_NEW INT,
@SUBMIT_FLAG INT OUTPUT

AS

DECLARE
@ITEM_NAME_NEW NVARCHAR(MAX)


BEGIN TRAN
BEGIN
SET @SUBMIT_FLAG=0
SELECT @ITEM_NAME_NEW =ITEM_NAME FROM T_ITEMS WHERE ITEM_CODE=@ITEM_CODE_NEW
UPDATE T_STORE_BOX SET ITEM_CODE=@ITEM_CODE_NEW WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND ITEM_CODE=@ITEM_CODE_DELETE AND B_CODE<>0
UPDATE V_BUY_DETAILS SET ITEM_CODE=@ITEM_CODE_NEW WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND ITEM_CODE=@ITEM_CODE_DELETE 
UPDATE V_SALES_DETAILS SET ITEM_CODE=@ITEM_CODE_NEW,ITEM_NAME=@ITEM_NAME_NEW WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND ITEM_CODE=@ITEM_CODE_DELETE 
UPDATE V_STORE_TRANFARE_DETAILS SET ITEM_CODE=@ITEM_CODE_NEW WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND ITEM_CODE=@ITEM_CODE_DELETE 


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

commit
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DAMAGE_ITEMS_ALL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DAMAGE_ITEMS_ALL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

















CREATE PROCEDURE [dbo].[P_DAMAGE_ITEMS_ALL]


@ITEM_CODE_DELETE INT,
@ITEM_CODE_NEW INT,
@SUBMIT_FLAG INT OUTPUT

AS

DECLARE
@ITEM_NAME_NEW NVARCHAR(MAX),
@BALANCE_DELETE FLOAT

BEGIN TRAN
BEGIN
SET @SUBMIT_FLAG=0
SELECT @ITEM_NAME_NEW =ITEM_NAME FROM T_ITEMS WHERE ITEM_CODE=@ITEM_CODE_NEW
 

 SELECT @BALANCE_DELETE= QTY FROM T_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE_DELETE AND BILL_NUMBER=0
 UPDATE T_BUY_DETAILS SET QTY=QTY+@BALANCE_DELETE,TOTAL=PRICE*(QTY+@BALANCE_DELETE),TOTAL_COST=PRICE*(QTY+@BALANCE_DELETE) WHERE ITEM_CODE=@ITEM_CODE_NEW AND BILL_NUMBER=0
 UPDATE T_STORE_BOX SET ST_IN=ST_IN+@BALANCE_DELETE WHERE  ITEM_CODE=@ITEM_CODE_NEW AND BILL_NUMBER=0 
 DELETE FROM T_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE_DELETE AND BILL_NUMBER=0
 DELETE FROM T_STORE_BOX WHERE ITEM_CODE=@ITEM_CODE_DELETE AND BILL_NUMBER=0
 update T_ITEMS set ACTIVE=0,ITEM_NOTE=N''تم دمج المادة الى المادة ''+N'' : '' +@ITEM_NAME_NEW  where ITEM_CODE=@ITEM_CODE_DELETE
 delete from T_ITEM_BARCODE   where ITEM_CODE=@ITEM_CODE_DELETE

UPDATE T_STORE_BOX SET ITEM_CODE=@ITEM_CODE_NEW WHERE ITEM_CODE=@ITEM_CODE_DELETE AND B_CODE<>0
UPDATE T_BUY_DETAILS SET ITEM_CODE=@ITEM_CODE_NEW WHERE  ITEM_CODE=@ITEM_CODE_DELETE 
UPDATE T_SALES_DETAILS SET ITEM_CODE=@ITEM_CODE_NEW,ITEM_NAME=@ITEM_NAME_NEW WHERE  ITEM_CODE=@ITEM_CODE_DELETE 
UPDATE T_STORE_TRANSFARE_DETAILS SET ITEM_CODE=@ITEM_CODE_NEW WHERE  ITEM_CODE=@ITEM_CODE_DELETE 


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

commit

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DASHBORD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DASHBORD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'














CREATE PROCEDURE [dbo].[P_DASHBORD]

@D1 DATE,
@D2 DATE
AS

BEGIN
SELECT ISNULL(SUM(NET_SALES),0) AS TOTAL_SALES FROM V_SALES WHERE ACTIVE=1 AND TOTAL_SALES>=0 AND BILL_DATE BETWEEN @D1 AND @D2
SELECT ISNULL(SUM(NET_SALES),0) AS TOTAL_SALES_RETURN FROM V_SALES WHERE ACTIVE=1 AND TOTAL_SALES<0 AND BILL_DATE BETWEEN @D1 AND @D2
SELECT COUNT(BILL_NUMBER) AS COUNT_SALES FROM V_SALES WHERE ACTIVE=1 AND TOTAL_SALES>=0 AND BILL_DATE BETWEEN @D1 AND @D2
SELECT COUNT(BILL_NUMBER) AS COUNT_SALES_RETURN FROM V_SALES WHERE ACTIVE=1 AND TOTAL_SALES<0 AND BILL_DATE BETWEEN @D1 AND @D2


SELECT ISNULL(SUM(NET_BUY),0) AS TOTAL_BUY FROM V_BUY WHERE ACTIVE=1 AND NET_BUY>0 AND BILL_DATE BETWEEN @D1 AND @D2
SELECT COUNT(BILL_NUMBER) AS COUNT_BUY FROM V_BUY WHERE ACTIVE=1  AND BILL_DATE BETWEEN @D1 AND @D2


SELECT  ISNULL(SUM(BALANCE_CUR),0)AS TOTAL_DEBIT FROM V_ACCOUNT3_DATE WHERE ACCOUNT_CODE BETWEEN 2100000 AND	2199999 AND  BALANCE_CUR>0 
SELECT ISNULL(SUM(BALANCE_CUR),0)AS TOTAL_CREDIT FROM V_ACCOUNT3_DATE WHERE ACCOUNT_CODE BETWEEN 2100000 AND	2199999 AND  BALANCE_CUR<0
-------------------------------------------------------------------------------------
DECLARE
@D_MONTH AS INT,
@D_YEAR AS INT
SET @D_MONTH=MONTH(@D2)
SET @D_YEAR=YEAR(@D2)
SELECT       YEAR(BILL_DATE) AS YEAR_BILL_DATE, MONTH(BILL_DATE) AS MONTH_BILL_DATE, DATENAME(month, BILL_DATE) AS MONTH_NAME, DAY(BILL_DATE) AS DAY_BILL_DATE, DATENAME(dw, BILL_DATE) AS DAY_NAME, 
                         SUM(TOTAL_SALES) AS TOTAL_SALES, SUM(DISCOUNT_ITEMS) AS DISCOUNT_ITEMS, SUM(DISCOUNT_AMOUNT) AS DISCOUNT_AMOUNT, SUM(TOTAL_DISCOUNT) AS TOTAL_DISCOUNT, SUM(NET_SALES) AS NET_SALES, 
                         SUM(TOTAL_COST) AS TOTAL_COST, SUM(TOTAL_ARBAH) AS TOTAL_ARBAH, BILL_DATE
FROM            dbo.V_SALES
GROUP BY MONTH(BILL_DATE), YEAR(BILL_DATE), DATENAME(month, BILL_DATE), DAY(BILL_DATE), DATENAME(dw, BILL_DATE), BILL_DATE
HAVING       (YEAR(BILL_DATE) = @D_YEAR AND MONTH(BILL_DATE) = @D_MONTH)
ORDER BY BILL_DATE ASC


-------------------------------------------------------------------------------------
SELECT COUNT(ITEM_CODE) AS COUNT_ITEMS FROM T_ITEMS WHERE ACTIVE=1  
SELECT COUNT(CLIENT_CODE) AS COUNT_CLIENTS FROM T_CLIENT WHERE CLIENT_ACTIVE=1  
SELECT COUNT(ACCOUNT_CODE) AS COUNT_BOX FROM T_ACCOUNTS WHERE ACCOUNT_ACTIVE=1   AND ACCOUNT_PARENT=5
SELECT COUNT(USER_CODE) AS COUNT_USERS FROM T_USERS WHERE ACTIVE=1  
-------------------------------------------------------------------------------------
SELECT    TOP (10)   dbo.T_SANAD.BILL_BRANCH,  dbo.T_SANAD.BILL_NUMBER, dbo.T_SANAD.BILL_DATE, dbo.T_SANAD.BILL_TIME, dbo.T_SANAD.USER_CREATE, dbo.T_SANAD.CURRANCY_EQUAL, dbo.T_SANAD.FROM_ACCOUNT, dbo.T_SANAD.TO_ACCCOUNT, 
                         dbo.T_SANAD.FROM_ACC, dbo.T_SANAD.TO_ACC, dbo.T_SANAD.AMO_USA, dbo.T_SANAD.AMO_IQ, dbo.T_SANAD.CONV_USA, dbo.T_SANAD.CONV_IQ, dbo.T_SANAD.DESCRIPTION, dbo.T_SANAD.C_DATE, 
                         dbo.T_SANAD.C_UPDATE, dbo.T_SANAD.USER_UPDATE, dbo.T_SANAD.SECURETY_CODE, dbo.T_SANAD.SANAD_ACTIVE, dbo.T_SANAD.MOVE_CODE, dbo.T_MOVE.MOVE_NAME
FROM            dbo.T_SANAD LEFT OUTER JOIN
                         dbo.T_MOVE ON dbo.T_SANAD.MOVE_CODE = dbo.T_MOVE.MOVE_CODE

WHERE    dbo.T_SANAD.SANAD_ACTIVE=1 
ORDER BY   dbo.T_SANAD.BILL_NUMBER DESC
-------------------------------------------------------------------------------------
SELECT    TOP(10)  dbo.T_SALES.BILL_BRANCH, dbo.T_SALES.BILL_NUMBER, dbo.T_SALES.BILL_INVOICE, dbo.T_SALES.BILL_DATE, dbo.T_SALES.OFFER_CODE, dbo.T_SALES.CURRANCY_CODE, dbo.T_CURRANNCY.CURRANCY_NAME, 
                         dbo.T_SALES.CURRANCY_EQUAL, dbo.T_SALES.CLIENT_CODE, dbo.T_SALES.CLIENT_NAME, dbo.T_SALES.CLIENT_PHONE, dbo.T_SALES.CLIENT_ADRESS, dbo.T_SALES.MANDOOB_CODE, 
                         dbo.T_MANDOOB.MANDOOB_NAME, dbo.T_MANDOOB.MANDOOB_PERCENT, dbo.T_SALES.DESCRIPTION, dbo.T_SALES.USER_CREATE, dbo.T_SALES.SECURETY_CODE, dbo.T_SALES.TOTAL_SALES / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_SALES, 
                         dbo.T_SALES.DISCOUNT_ITEMS / dbo.T_SALES.CURRANCY_EQUAL AS DISCOUNT_ITEMS, dbo.T_SALES.DISCOUNT_PERCENT, 
                         dbo.T_SALES.DISCOUNT_AMOUNT / dbo.T_SALES.CURRANCY_EQUAL AS DISCOUNT_AMOUNT, dbo.T_SALES.TOTAL_DISCOUNT / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_DISCOUNT, 
                         dbo.T_SALES.NET_SALES / dbo.T_SALES.CURRANCY_EQUAL AS NET_SALES, dbo.T_SALES.TOTAL_COST / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_COST, 
                         dbo.T_SALES.TOTAL_ARBAH / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_ARBAH, dbo.T_SALES.IVC_CODE, dbo.T_IVC_TYPE.IVC_NAME, dbo.T_SALES.DAY_CASH, dbo.T_SALES.DATE_CASH, 
                         dbo.T_SALES.TOT_CONV, dbo.T_SALES.ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME, dbo.T_SALES.CASH_USA, dbo.T_SALES.REMAIN_USA, dbo.T_SALES.CASH_IQ, dbo.T_SALES.REMAIN_IQ, 
                         dbo.T_SALES.C_DATE, dbo.T_SALES.C_UPDATE, dbo.T_SALES.USER_UPDATE, dbo.T_SALES.ACTIVE, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_BUSINESS,DATEDIFF(DAY,dbo.T_SALES.DATE_CASH,GETDATE())AS CASH_DIFF
						
FROM            dbo.T_SALES LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.T_SALES.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                         dbo.T_ACCOUNTS ON dbo.T_SALES.ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.T_TYPE_PRICE_SELL ON dbo.T_SALES.TYPE_PRICE_SELL = dbo.T_TYPE_PRICE_SELL.TYPE_PRICE_CODE LEFT OUTER JOIN
                         dbo.T_IVC_TYPE ON dbo.T_SALES.IVC_CODE = dbo.T_IVC_TYPE.IVC_CODE LEFT OUTER JOIN
                         dbo.T_MANDOOB ON dbo.T_SALES.MANDOOB_CODE = dbo.T_MANDOOB.MANDOOB_CODE LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.T_SALES.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE
WHERE        (dbo.T_SALES.ACTIVE = 1) AND (dbo.T_SALES.IVC_CODE < 10) 

order by dbo.T_SALES.BILL_NUMBER DESC


--------------------------------------------------------------------------------

SELECT TOP(5) * FROM T_VIDEO_LINK WHERE ACTIVE=1 ORDER BY T_ID DESC




	END























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_ALL_INDEX]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_ALL_INDEX]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

















CREATE PROCEDURE [dbo].[P_DELETE_ALL_INDEX]

	
@SUBMIT_FLAG INT OUTPUT
AS
BEGIN
SET @SUBMIT_FLAG=0
DECLARE @sql NVARCHAR(MAX) = N'''';

SELECT 
    @sql = @sql + N''
DROP INDEX '' + QUOTENAME(i.name) 
         + N'' ON '' + QUOTENAME(s.name) + N''.'' + QUOTENAME(o.name) + N'';''
         + CHAR(13) + CHAR(10)
FROM sys.indexes i
INNER JOIN sys.objects o ON i.object_id = o.object_id
INNER JOIN sys.schemas s ON o.schema_id = s.schema_id
WHERE 
    o.type = ''U''               -- User Table فقط
    AND i.index_id > 0         -- لا نتعامل مع الجداول عديمة الفهارس (Heap)
    AND i.is_hypothetical = 0  -- نتجنب الفهارس الافتراضية التجريبية
    AND i.is_primary_key = 0   -- تجنب حذف الفهرس الذي يمثل PK
    AND i.is_unique_constraint = 0  -- تجنب حذف الفهرس الذي يمثل Unique Constraint
    AND i.name IS NOT NULL;    -- نتأكد أن الفهرس له اسم

-- لمعاينة الأوامر قبل التنفيذ
PRINT @sql;

-- عند التأكد من صحة الأوامر، قم بإزالة التعليق أدناه لتنفيذ الحذف فعلياً
 EXEC sp_executesql @sql;
	SET @SUBMIT_FLAG=1
	
END
 

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_BILL_NUMBER_FLAG]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_BILL_NUMBER_FLAG]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[P_DELETE_BILL_NUMBER_FLAG]

@B_CODE	INT,
@BILL_BRANCH nvarchar(50) ,
@FLAG BIT ,
@USER_UPDATE	nvarchar(MAX)	,
@SUBMIT_fLAG INT OUTPUT
AS 
DECLARE 
@BRANCH_CODE INT,
@BILL_BILL INT,
 @BILL_NN INT
BEGIN
 
SET @SUBMIT_fLAG=0
SET @BILL_BILL=-100000

IF @B_CODE=11
BEGIN
BEGIN TRANSACTION;
UPDATE T_FACTORY SET ACTIVE =@FLAG , USER_UPDATE=N''تم الحذف بواسطة : ''+ @USER_UPDATE+N'' - ''+ CONVERT(VARCHAR(20),GETDATE(),100)  WHERE BILL_BRANCH LIKE @BILL_BRANCH 

SELECT TOP(1) @BILL_BILL=ISNULL(BILL_BRANCH_BUY,-100000)  FROM T_FACTORY WHERE BILL_BRANCH LIKE @BILL_BRANCH 
DELETE FROM T_BUY_DETAILS  WHERE BILL_NUMBER = @BILL_BILL 
DELETE FROM T_FACTORY_DETAILS  WHERE BILL_BRANCH LIKE @BILL_BRANCH 
DELETE FROM T_STORE_BOX  WHERE BILL_BRANCH LIKE @BILL_BRANCH AND B_CODE=11
DELETE FROM T_STORE_BOX  WHERE BILL_BRANCH LIKE @BILL_BRANCH AND B_CODE=12

SET @SUBMIT_fLAG=1
COMMIT
	IF @@ERROR <>0
	BEGIN
	ROLLBACK 
	SET @SUBMIT_fLAG=0
	RETURN
	END

return
END

IF @B_CODE=21
BEGIN
BEGIN TRANSACTION;

SELECT TOP(1) @BILL_NN=BILL_NUMBER  FROM T_BUY WHERE BILL_BRANCH LIKE @BILL_BRANCH 
DELETE FROM T_ITEM_SERIAL WHERE BILL_NUMBER=@BILL_NN AND B_CODE=21
UPDATE T_BUY SET ACTIVE =@FLAG , USER_UPDATE=N''تم الحذف بواسطة : ''+ @USER_UPDATE+N'' - ''+ CONVERT(VARCHAR(20),GETDATE(),100)   WHERE BILL_BRANCH LIKE @BILL_BRANCH 
UPDATE T_BUY_DETAILS SET ACTIVE =@FLAG WHERE BILL_BRANCH LIKE @BILL_BRANCH 
UPDATE T_BOX SET ACTIVE =@FLAG WHERE BILL_BRANCH LIKE @BILL_BRANCH AND B_CODE=@B_CODE
UPDATE T_STORE_BOX SET ACTIVE =@FLAG WHERE BILL_BRANCH LIKE @BILL_BRANCH AND B_CODE=@B_CODE

SET @SUBMIT_fLAG=1
COMMIT
	IF @@ERROR <>0
	BEGIN
	ROLLBACK 
	SET @SUBMIT_fLAG=0
	RETURN
	END

return
END

IF @B_CODE=22
BEGIN
BEGIN TRANSACTION;

UPDATE T_BUY_RETURN SET ACTIVE =@FLAG ,USER_UPDATE=N''تم الحذف بواسطة : ''+ @USER_UPDATE+N'' - ''+ CONVERT(VARCHAR(20),GETDATE(),100)  WHERE BILL_BRANCH LIKE @BILL_BRANCH 
UPDATE T_BUY_RETURN_DETAILS SET ACTIVE = @FLAG WHERE BILL_BRANCH LIKE @BILL_BRANCH 
UPDATE T_BOX SET ACTIVE =@FLAG WHERE BILL_BRANCH LIKE @BILL_BRANCH  AND B_CODE=@B_CODE
UPDATE T_STORE_BOX SET ACTIVE =@FLAG WHERE BILL_BRANCH LIKE @BILL_BRANCH  AND B_CODE=@B_CODE

SET @SUBMIT_fLAG=1
COMMIT
	IF @@ERROR <>0
	BEGIN
	ROLLBACK 
	SET @SUBMIT_fLAG=0
	RETURN
	END

return
END

IF @B_CODE=2
BEGIN
BEGIN TRANSACTION;
UPDATE T_SALES SET OFFER_CODE=0, ACTIVE =@FLAG,USER_UPDATE=N''تم الحذف بواسطة : ''+ @USER_UPDATE+N'' - ''+ CONVERT(VARCHAR(20),GETDATE(),100) WHERE BILL_BRANCH LIKE @BILL_BRANCH  
UPDATE T_SALES_DETAILS SET ACTIVE =@FLAG WHERE BILL_BRANCH LIKE @BILL_BRANCH 
 
UPDATE T_BOX SET ACTIVE =@FLAG WHERE BILL_BRANCH LIKE @BILL_BRANCH AND B_CODE=@B_CODE
UPDATE T_STORE_BOX SET ACTIVE =@FLAG WHERE BILL_BRANCH LIKE @BILL_BRANCH  AND B_CODE=@B_CODE
DELETE FROM T_SALES_TEMP WHERE BILL_BRANCH LIKE @BILL_BRANCH 

SELECT TOP(1) @BILL_NN=BILL_NUMBER  FROM T_SALES WHERE BILL_BRANCH LIKE @BILL_BRANCH 
DELETE FROM T_ITEM_SERIAL WHERE BILL_NUMBER=@BILL_NN AND B_CODE=2
SET @SUBMIT_fLAG=1
COMMIT
	IF @@ERROR <>0
	BEGIN
	ROLLBACK 
	SET @SUBMIT_fLAG=0
	RETURN
	END

return
END

IF @B_CODE=1
BEGIN
BEGIN TRANSACTION;

DELETE T_BOX  WHERE BILL_BRANCH LIKE @BILL_BRANCH  AND B_CODE=@B_CODE
DELETE T_STORE_BOX WHERE BILL_BRANCH LIKE @BILL_BRANCH  AND B_CODE=@B_CODE

SET @SUBMIT_fLAG=1
COMMIT
	IF @@ERROR <>0
	BEGIN
	ROLLBACK 
	SET @SUBMIT_fLAG=0
	RETURN
	END

return
END

IF @B_CODE=3
BEGIN
BEGIN TRANSACTION;

SET @SUBMIT_fLAG=1
COMMIT
	IF @@ERROR <>0
	BEGIN
	ROLLBACK 
	SET @SUBMIT_fLAG=0
	RETURN
	END

return
END


SET @SUBMIT_fLAG=1
END	--END OF PROGRAM



























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_BUY_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_BUY_NOT_USE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_DELETE_BUY_NOT_USE]
(
    @USER_CREATE NVARCHAR(50),
    @SUBMIT_FLAG INT OUTPUT
)
AS
BEGIN
    SET NOCOUNT ON;    
    SET @SUBMIT_FLAG = 0;
	 
    DELETE FROM T_BUY
    WHERE USER_CREATE LIKE @USER_CREATE
      AND OFFER_CODE = 99;

    SET @SUBMIT_FLAG = 1;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_CLIENTS_BALANCE_ZERO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_CLIENTS_BALANCE_ZERO]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[P_DELETE_CLIENTS_BALANCE_ZERO]


@SUBMIT_FLAG INT OUTPUT

AS



BEGIN

UPDATE T_CLIENT SET CLIENT_ACTIVE=0 WHERE CLIENT_CODE IN(SELECT  ACCOUNT_CODE FROM V_ACCOUNT3  WHERE ACCOUNT_PARENT=21 AND ACCOUNT_CODE>2100000 AND BALANCE=0 AND BALANCE_IQ=0)
UPDATE T_ACCOUNTS SET ACCOUNT_ACTIVE=0 WHERE ACCOUNT_CODE IN(SELECT  ACCOUNT_CODE FROM V_ACCOUNT3  WHERE ACCOUNT_PARENT=21 AND ACCOUNT_CODE>2100000 AND BALANCE=0 AND BALANCE_IQ=0)

END	--END OF PROGRAM





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_DATA]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_DATA]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_DELETE_DATA]

	
@SUBMIT_FLAG INT OUTPUT
AS
BEGIN
SET @SUBMIT_FLAG=0

DELETE FROM T_RULES_KIND
DELETE FROM T_RULES_KIND_PAY
DELETE FROM T_MANDOOB_VISITS
DELETE FROM T_POINTS
DELETE FROM T_SHAREEK
DELETE FROM T_SANAD_HAWALA_HISTORY
DELETE FROM T_SANAD_HAWALA
DELETE FROM T_SANAD_HISTORY
DELETE FROM T_PATH_BACKUP
DELETE FROM T_FORM_LAYOUT_FILE
DELETE FROM T_FACTORY_ITEM_WAITING
DELETE FROM T_SALES_PDF
DELETE FROM T_COUPON
DELETE FROM T_BUY_INSERT_SPEED

DELETE FROM T_BUY_DETAILS_TRANSFARE
DELETE FROM T_ITEM_FREE
DELETE FROM T_STAFF
DELETE FROM T_VISITOR


DELETE FROM T_MAINTENANCE
DELETE FROM T_MAINTENANCE_DEVICE
DELETE FROM T_MAINTENANCE_LABEL
DELETE FROM T_MAINTENANCE_DEVICE_ERROR




DELETE FROM TA_PANDEL
DELETE FROM TA_PROJECT
DELETE FROM TA_PROJECT_KADER
DELETE FROM TA_PROJECT_PANDEL


DELETE FROM TH_ROOM
DELETE FROM TH_ROOM_BOOKING
DELETE FROM TH_ROOM_BOOKING_GUEST
DELETE FROM TH_ROOM_BOOKING_STATE
DELETE FROM TH_ROOM_FLOOR
DELETE FROM TH_ROOM_IMAGE
 

DELETE FROM T_FORM_APP
DELETE FROM T_FORM_SHORTCUT
DELETE FROM T_ITEM_APPLICATION
DELETE FROM T_ITEMS_REPORT
DELETE FROM T_KAFEL_CLIENT
DELETE FROM T_RECEVER_ORDER
DELETE FROM T_REGION_SHIP
DELETE FROM T_SALES_DIRECT
DELETE FROM T_SALES_DIRECT_DETAILS
DELETE FROM T_SALES_EXPENSES
DELETE FROM T_SALES_FRUIT
DELETE FROM T_SALES_FRUIT_DETAILS
DELETE FROM T_SALES_SHIPPING
DELETE FROM T_USERS_TAG
DELETE FROM tblAttendances
DELETE FROM tblDeleteUsers
DELETE FROM T_ITEMS_MANDOOB


DELETE FROM TA_STUDENT
DELETE FROM TA_STUDENT_DEGREE
DELETE FROM TA_STUDENT_ENTRY
DELETE FROM TA_STUDENT_GATE
DELETE FROM TA_STUDENT_GROUP
 


DELETE FROM TA_CARS
DELETE FROM TA_CARS_DETAILS
DELETE FROM TA_CARS_EXPENSES


DELETE FROM T_JOINT_COURSES_FREE
DELETE FROM T_JOINT_COURSES
DELETE FROM T_JOINT_SUBSCRIPTION
DELETE FROM T_JOINT_GATE
DELETE FROM T_JOINT
DELETE FROM T_SUBSCRIPTION
DELETE FROM T_GATE

DELETE FROM T_AKSAT_ITEM_DETAILS
DELETE FROM T_AKSAT_ITEMS
DELETE FROM T_BOOKING
DELETE FROM T_BOOKING_DATE
DELETE FROM T_BOOKING_DETAILS
DELETE FROM T_BOOKING_HOLIDAY
DELETE FROM T_BOOKING_QISM
DELETE FROM T_CONTAINER
DELETE FROM T_CONTAINER_DETAILS
DELETE FROM T_CONTAINER_EXPENSES
DELETE FROM T_DRIVERS
DELETE FROM T_VIDEO_LINK
DELETE FROM T_ATTACHMENT

DELETE FROM T_USERS_MAWJOOD
DELETE FROM T_SMS_MASSAGE_TYPE
DELETE FROM T_PRINTER_STORE
DELETE FROM T_NOTES
DELETE FROM T_MAWJOOD_STATUS
DELETE FROM T_AKSAT_DETAILS
DELETE FROM T_AKSAT_MODEL
DELETE FROM T_AKSAT_MODEL_DETAILS
DELETE FROM T_ITEM_CORRECT
DELETE FROM T_ITEM_RESTURANT
DELETE FROM T_ITEM_SERIAL
DELETE FROM T_ITEM_AVG_CURSER
DELETE FROM T_ITEM_MATERIAL
DELETE FROM T_ITEM_MATERIAL_EFFECTIVE
DELETE FROM T_TAG_PROCCESS WHERE TAG_PROCCESS_CODE>0

DELETE FROM TB_PROJECT
DELETE FROM TB_PROJECT_SUPPLIER
DELETE FROM TB_ZONE
DELETE FROM TB_BUILDING
DELETE FROM TB_FLOOR
DELETE FROM TB_HOUSE 
DELETE FROM TB_ATTACHMENT
DELETE FROM TB_CLIENT_INFO
DELETE FROM TB_HOUSE_TOKEN
DELETE FROM TB_MAINTENANCE
DELETE FROM TB_NEWS
DELETE FROM TB_NEWS_TYPE
DELETE FROM TB_RELATION_CLIENT
DELETE FROM TB_RENTER_HOUSE
DELETE FROM TB_SERVICE
DELETE FROM TB_SERVICE_DETAILS
DELETE FROM TB_AQED_AYGAR


DELETE FROM T_ITEM_MISWAK_INFO 
DELETE FROM T_OFFER
DELETE FROM T_OFFERS_DETAILS 
DELETE FROM T_APP_INVOICE 
DELETE FROM T_CLIENT_GIM_ENTRY 
DELETE FROM T_ITEMS_ARSHIF 
DELETE FROM T_ITEM_MATERIAL 
DELETE FROM T_ITEM_IMAGE 
DELETE FROM T_USER_ERROR 
DELETE FROM T_TELE_SCH 
DELETE FROM T_TELE_SYNC 
DELETE FROM T_CENTER_COST_INVOICE
DELETE FROM T_SALES_DISCOUNT
DELETE FROM T_SALES_IN_OUT
DELETE FROM T_SANAD_CNY
delete from T_SETTING
delete from T_SETTING_DISCOUNT
INSERT INTO [dbo].[T_SETTING_DISCOUNT] ([T_ID] ,[ST_SETTING]) VALUES(1,N''0;0;0;0;0;0'')
DELETE FROM T_NOTFICATION_TITLE          
 DELETE FROM T_NOTIFICATION          
    
           
          




DELETE FROM T_ACCOUNT_CHECKED 
delete from T_MAINTANACE
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=1
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=3
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=4
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=5 AND ACCOUNT_CODE <> 5000
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=6 AND ACCOUNT_CODE <> 6000
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=7 AND ACCOUNT_CODE <> 7000
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=8 AND ACCOUNT_CODE <> 8000
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=9 AND ACCOUNT_CODE <> 9000
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=21 AND ACCOUNT_CODE <> 2100000
DELETE FROM T_CLIENT WHERE  ACCOUNT_CODE <> 2100000
DELETE FROM T_AKSAT 
DELETE FROM T_BALANCE_FINAL 
DELETE FROM T_BARCODE_PRINT 
DELETE FROM T_BOX 
DELETE FROM T_BOX_REPORT_ACCOUNT 
DELETE FROM T_BOX_REPORT_ACCOUNT_DETAILS 
DELETE FROM T_SALES_IN_OUT 
DELETE FROM T_EMP_ENTER 
DELETE FROM T_EMP_ENTER_REPORT
DELETE FROM T_EMPLOYEE
DELETE FROM T_AA_ACCOUNT_NEW_YEAR
DELETE FROM T_AA_ITEM_NEW_YEAR
DELETE FROM T_CENTER_COST
DELETE FROM T_CENTER_COST_ITEMS

DELETE FROM T_VERSION
DELETE FROM T_VERSION_NEW
DELETE FROM T_VERSION_DATA

DELETE FROM T_KAFEL
DELETE FROM T_LEVEL WHERE LEVEL_CODE>1
DELETE FROM T_MANDOOB 
--INSERT INTO [dbo].[T_MANDOOB]   ([MANDOOB_CODE],[MANDOOB_NAME]  ,[MANDOOB_PERCENT]  ,[MANDOOB_ACTIVE]) VALUES (1 ,N''...'',0, 1 )
--INSERT INTO [dbo].[T_MANDOOB]   ([MANDOOB_CODE],[MANDOOB_NAME]  ,[MANDOOB_PERCENT]  ,[MANDOOB_ACTIVE]) VALUES (-10 ,N''غير محدد'',0, 0 )
           
DELETE FROM T_MOVE WHERE ACTIVE=0 OR MOVE_CODE>300
DELETE FROM T_PRINTER WHERE T_ID > 0
DELETE FROM T_SANAD 
DELETE FROM T_SANAD_DOLLAR
DELETE FROM T_SANAD_KAYD
DELETE FROM T_SANAD_KAYD_DETAILS
DELETE FROM T_SANAD_SMAH

delete FROM  T_COMPANY
--INSERT INTO [dbo].[T_COMPANY]  ([T_ID],[COMPANY_NAME],[COMPANY_TITAL] ) VALUES (1,N''فرعي'',N''SD'')

delete FROM T_SALES
DELETE FROM T_SALES_PATROL
DELETE FROM T_SALES_DETAILS
DELETE FROM T_SALES_TEMP

delete FROM  T_PURCHASE_ORDER
delete FROM  T_PURCHASE_ORDER_DETAILS 

delete FROM  T_BUY
delete FROM  T_BUY_DETAILS 
delete FROM  T_BUY_EXPENSES
delete FROM  T_BUY_RETURN
delete FROM  T_BUY_RETURN_DETAILS
delete FROM  T_FACTORY
delete FROM  T_FACTORY_DETAILS 
delete FROM  T_ITEM_BARCODE WHERE ITEM_CODE>0
delete FROM  T_ITEM_CATEGORY WHERE CATEGORY_CODE>0
delete FROM  T_ITEM_CATEGORY_RATING WHERE CATEGORY_RATING_CODE>0
delete FROM  T_ITEMS WHERE ITEM_CODE>0
delete FROM  T_ITEM_MISWAK_INFO
delete FROM  T_ITEM_UNIT WHERE ITEM_CODE>0
delete FROM  T_STORE_BOX 
delete FROM  T_STORE_TRANSFARE
delete FROM  T_STORE_TRANSFARE_DETAILS
delete FROM  T_STORE_TYPE WHERE STORE_CODE >0
delete FROM  T_UNIT_FORM
delete FROM  T_UNIT_FORM_INFO
delete FROM  T_USER_DETAILS
DELETE FROM T_USERS WHERE USER_CODE<>1 
UPDATE T_USERS SET USER_NAME=N''Admin'',USER_PWD=N''fpd2Te7d3NwzGck5qAgK8g=='',ACTIVE=1,LEVEL_CODE=1,LOG_IN=0,BOX_CODE=5000,IS_ENC=1,SECURETY_CODE=3,APP_PWD=NULL,STORE_CODE=-10,TYPE_PRICE_CODE=-10,MANDOOB_CODE=-10 WHERE USER_CODE=1
UPDATE T_WORK_JOB SET D_DATE=NULL ,[START_DATE]=NULL,IS_ON_OFF=0 WHERE T_ID=1
UPDATE T_PARAMETERS SET P_VALUE=2 WHERE P_CODE=1
UPDATE T_CURRANNCY SET CURRANCY_EQUAL=1,CURRANCY_PRIMARY=0
	SET @SUBMIT_FLAG=1
	
END





































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_DATA_BUT_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_DATA_BUT_ITEMS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE [dbo].[P_DELETE_DATA_BUT_ITEMS]

	
@SUBMIT_FLAG INT OUTPUT
AS
BEGIN
SET @SUBMIT_FLAG=0
DELETE FROM T_RULES_KIND
DELETE FROM T_RULES_KIND_PAY
DELETE FROM T_MANDOOB_VISITS
DELETE FROM T_POINTS
DELETE FROM T_SHAREEK
DELETE FROM T_SANAD_HAWALA_HISTORY
DELETE FROM T_SANAD_HAWALA
DELETE FROM T_SANAD_HISTORY
DELETE FROM T_PATH_BACKUP
DELETE FROM T_FORM_LAYOUT_FILE
DELETE FROM T_FACTORY_ITEM_WAITING
DELETE FROM T_SALES_PDF
DELETE FROM T_MAINTENANCE
DELETE FROM T_MAINTENANCE_DEVICE
DELETE FROM T_MAINTENANCE_LABEL
DELETE FROM T_MAINTENANCE_DEVICE_ERROR




DELETE FROM TA_PANDEL
DELETE FROM TA_PROJECT
DELETE FROM TA_PROJECT_KADER
DELETE FROM TA_PROJECT_PANDEL


DELETE FROM TH_ROOM
DELETE FROM TH_ROOM_BOOKING
DELETE FROM TH_ROOM_BOOKING_GUEST
DELETE FROM TH_ROOM_BOOKING_STATE
DELETE FROM TH_ROOM_FLOOR
DELETE FROM TH_ROOM_IMAGE
 

DELETE FROM T_FORM_APP
DELETE FROM T_FORM_SHORTCUT
DELETE FROM T_ITEM_APPLICATION
DELETE FROM T_ITEMS_REPORT
DELETE FROM T_KAFEL_CLIENT
DELETE FROM T_RECEVER_ORDER
DELETE FROM T_REGION_SHIP
DELETE FROM T_SALES_DIRECT
DELETE FROM T_SALES_DIRECT_DETAILS
DELETE FROM T_SALES_EXPENSES
DELETE FROM T_SALES_FRUIT
DELETE FROM T_SALES_FRUIT_DETAILS
DELETE FROM T_SALES_SHIPPING
DELETE FROM T_USERS_TAG
DELETE FROM tblAttendances
DELETE FROM tblDeleteUsers
DELETE FROM T_ITEMS_MANDOOB

DELETE FROM TA_STUDENT
DELETE FROM TA_STUDENT_DEGREE
DELETE FROM TA_STUDENT_ENTRY
DELETE FROM TA_STUDENT_GATE
DELETE FROM TA_STUDENT_GROUP
 

DELETE FROM TA_CARS
DELETE FROM TA_CARS_DETAILS
DELETE FROM TA_CARS_EXPENSES


DELETE FROM T_JOINT_SUBSCRIPTION
DELETE FROM T_JOINT_GATE
DELETE FROM T_JOINT
DELETE FROM T_SUBSCRIPTION
DELETE FROM T_GATE


DELETE FROM T_AKSAT_ITEM_DETAILS
DELETE FROM T_AKSAT_ITEMS
DELETE FROM T_BOOKING
DELETE FROM T_BOOKING_DATE
DELETE FROM T_BOOKING_DETAILS
DELETE FROM T_BOOKING_HOLIDAY
DELETE FROM T_BOOKING_QISM
DELETE FROM T_CONTAINER
DELETE FROM T_CONTAINER_DETAILS
DELETE FROM T_CONTAINER_EXPENSES
DELETE FROM T_DRIVERS
DELETE FROM T_VIDEO_LINK
DELETE FROM T_ATTACHMENT


DELETE FROM T_USERS_MAWJOOD
DELETE FROM T_SMS_MASSAGE_TYPE
DELETE FROM T_PRINTER_STORE
DELETE FROM T_NOTES
DELETE FROM T_MAWJOOD_STATUS
DELETE FROM T_AKSAT_DETAILS
DELETE FROM T_AKSAT_MODEL
DELETE FROM T_AKSAT_MODEL_DETAILS
DELETE FROM T_ITEM_CORRECT
DELETE FROM T_ITEM_RESTURANT
DELETE FROM T_ITEM_SERIAL
DELETE FROM T_ITEM_AVG_CURSER

DELETE FROM T_TAG_PROCCESS WHERE TAG_PROCCESS_CODE>0

DELETE FROM TB_AQED_AYGAR
DELETE FROM TB_PROJECT
DELETE FROM TB_PROJECT_SUPPLIER
DELETE FROM TB_ZONE
DELETE FROM TB_BUILDING
DELETE FROM TB_FLOOR
DELETE FROM TB_HOUSE 
DELETE FROM TB_ATTACHMENT
DELETE FROM TB_CLIENT_INFO
DELETE FROM TB_HOUSE_TOKEN
DELETE FROM TB_MAINTENANCE
DELETE FROM TB_NEWS
DELETE FROM TB_NEWS_TYPE
DELETE FROM TB_RELATION_CLIENT
DELETE FROM TB_RENTER_HOUSE
DELETE FROM TB_SERVICE
DELETE FROM TB_SERVICE_DETAILS

DELETE FROM T_OFFER
DELETE FROM T_OFFERS_DETAILS 
DELETE FROM T_APP_INVOICE 
DELETE FROM T_CLIENT_GIM_ENTRY 

DELETE FROM T_USER_ERROR 
DELETE FROM T_TELE_SCH 
DELETE FROM T_TELE_SYNC 
DELETE FROM T_CENTER_COST_INVOICE
DELETE FROM T_SALES_DISCOUNT
DELETE FROM T_SALES_IN_OUT
DELETE FROM T_SANAD_CNY
        
           
    



DELETE FROM T_ACCOUNT_CHECKED 
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=1
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=3
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=4
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=5 AND ACCOUNT_CODE <> 5000
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=6 AND ACCOUNT_CODE <> 6000
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=7 AND ACCOUNT_CODE <> 7000
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=8 AND ACCOUNT_CODE <> 8000
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=9 AND ACCOUNT_CODE <> 9000
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=21 AND ACCOUNT_CODE <> 2100000
DELETE FROM T_CLIENT WHERE  ACCOUNT_CODE <> 2100000
DELETE FROM T_AKSAT 
DELETE FROM T_BALANCE_FINAL 
DELETE FROM T_BARCODE_PRINT 
DELETE FROM T_BOX 
DELETE FROM T_BOX_REPORT_ACCOUNT 
DELETE FROM T_BOX_REPORT_ACCOUNT_DETAILS 

DELETE FROM T_EMP_ENTER 
DELETE FROM T_EMP_ENTER_REPORT
DELETE FROM T_EMPLOYEE
DELETE FROM T_AA_ACCOUNT_NEW_YEAR
DELETE FROM T_AA_ITEM_NEW_YEAR
DELETE FROM T_CENTER_COST
DELETE FROM T_CENTER_COST_ITEMS
DELETE FROM T_EXPENSES
DELETE FROM T_KAFEL
DELETE FROM T_LEVEL WHERE LEVEL_CODE>1
DELETE FROM T_MANDOOB 
INSERT INTO [dbo].[T_MANDOOB]   ([MANDOOB_CODE],[MANDOOB_NAME]  ,[MANDOOB_PERCENT]  ,[MANDOOB_ACTIVE]) VALUES (1 ,N''...'',0, 1 )
INSERT INTO [dbo].[T_MANDOOB]   ([MANDOOB_CODE],[MANDOOB_NAME]  ,[MANDOOB_PERCENT]  ,[MANDOOB_ACTIVE]) VALUES (-10 ,N''غير محدد'',0, 0 )
   
DELETE FROM T_MOVE WHERE ACTIVE=0 OR MOVE_CODE>300
DELETE FROM T_PRINTER WHERE T_ID > 0
DELETE FROM T_SANAD 
DELETE FROM T_SANAD_DOLLAR
DELETE FROM T_SANAD_KAYD
DELETE FROM T_SANAD_KAYD_DETAILS
DELETE FROM T_SANAD_SMAH




delete FROM T_SALES
DELETE FROM T_SALES_PATROL
DELETE FROM T_SALES_DETAILS
DELETE FROM T_SALES_TEMP

delete FROM  T_PURCHASE_ORDER
delete FROM  T_PURCHASE_ORDER_DETAILS 

delete FROM  T_BUY
delete FROM  T_BUY_DETAILS WHERE BILL_NUMBER<>0
delete FROM  T_BUY_EXPENSES
delete FROM  T_BUY_RETURN
delete FROM  T_BUY_RETURN_DETAILS
delete FROM  T_FACTORY
delete FROM  T_FACTORY_DETAILS 
--delete FROM  T_ITEM_BARCODE WHERE ITEM_CODE<>0
--delete FROM  T_ITEM_CATEGORY WHERE CATEGORY_CODE<>0
--delete FROM  T_ITEM_CATEGORY_RATING WHERE CATEGORY_RATING_CODE>0
--delete FROM  T_ITEMS WHERE ITEM_CODE<>0
--delete FROM  T_ITEM_UNIT WHERE ITEM_CODE<>0
--DELETE FROM T_ITEM_MATERIAL
--DELETE FROM T_ITEM_MATERIAL_EFFECTIVE
delete FROM  T_STORE_BOX WHERE BILL_NUMBER<>0
delete FROM  T_STORE_TRANSFARE
delete FROM  T_STORE_TRANSFARE_DETAILS
delete FROM  T_STORE_TYPE WHERE STORE_CODE >0

delete FROM  T_UNIT_FORM
delete FROM  T_UNIT_FORM_INFO
delete FROM  T_USER_DETAILS
DELETE FROM T_USERS WHERE USER_CODE<>1 
UPDATE T_USERS SET USER_NAME=N''Admin'',USER_PWD=22,ACTIVE=1,LEVEL_CODE=1,LOG_IN=0,BOX_CODE=5000,IS_ENC=0,SECURETY_CODE=3,APP_PWD=NULL,STORE_CODE=-10,TYPE_PRICE_CODE=-10,MANDOOB_CODE=-10 WHERE USER_CODE=1
UPDATE T_WORK_JOB SET D_DATE=NULL ,[START_DATE]=NULL,IS_ON_OFF=0 WHERE T_ID=1

	SET @SUBMIT_FLAG=1
	
END





































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_DATA_BUT_USERS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_DATA_BUT_USERS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_DELETE_DATA_BUT_USERS]

	
@SUBMIT_FLAG INT OUTPUT
AS
BEGIN
SET @SUBMIT_FLAG=0
DELETE FROM T_RULES_KIND
DELETE FROM T_RULES_KIND_PAY
DELETE FROM T_POINTS
DELETE FROM T_SHAREEK
DELETE FROM T_SANAD_HAWALA_HISTORY
DELETE FROM T_SANAD_HAWALA
DELETE FROM T_SANAD_HISTORY
DELETE FROM T_PATH_BACKUP
DELETE FROM T_FACTORY_ITEM_WAITING
DELETE FROM T_SALES_PDF
DELETE FROM T_BUY_DETAILS_TRANSFARE
DELETE FROM T_ITEM_FREE
DELETE FROM T_STAFF
DELETE FROM T_VISITOR


DELETE FROM T_MAINTENANCE
DELETE FROM T_MAINTENANCE_DEVICE
DELETE FROM T_MAINTENANCE_LABEL
 DELETE FROM T_MAINTENANCE_DEVICE_ERROR 




DELETE FROM TA_PANDEL
DELETE FROM TA_PROJECT
DELETE FROM TA_PROJECT_KADER
DELETE FROM TA_PROJECT_PANDEL


DELETE FROM TH_ROOM
DELETE FROM TH_ROOM_BOOKING
DELETE FROM TH_ROOM_BOOKING_GUEST
DELETE FROM TH_ROOM_BOOKING_STATE
DELETE FROM TH_ROOM_FLOOR
DELETE FROM TH_ROOM_IMAGE
 

DELETE FROM T_FORM_APP
DELETE FROM T_FORM_SHORTCUT
DELETE FROM T_ITEM_APPLICATION
DELETE FROM T_ITEMS_REPORT
DELETE FROM T_KAFEL_CLIENT
DELETE FROM T_RECEVER_ORDER
DELETE FROM T_REGION_SHIP
DELETE FROM T_SALES_DIRECT
DELETE FROM T_SALES_DIRECT_DETAILS
DELETE FROM T_SALES_EXPENSES
DELETE FROM T_SALES_FRUIT
DELETE FROM T_SALES_FRUIT_DETAILS
DELETE FROM T_SALES_SHIPPING
DELETE FROM T_USERS_TAG
DELETE FROM tblAttendances
DELETE FROM tblDeleteUsers
DELETE FROM T_ITEMS_MANDOOB


DELETE FROM TA_STUDENT
DELETE FROM TA_STUDENT_DEGREE
DELETE FROM TA_STUDENT_ENTRY
DELETE FROM TA_STUDENT_GATE
DELETE FROM TA_STUDENT_GROUP
 


DELETE FROM TA_CARS
DELETE FROM TA_CARS_DETAILS
DELETE FROM TA_CARS_EXPENSES


DELETE FROM T_JOINT_COURSES_FREE
DELETE FROM T_JOINT_COURSES
DELETE FROM T_JOINT_SUBSCRIPTION
DELETE FROM T_JOINT_GATE
DELETE FROM T_JOINT
DELETE FROM T_SUBSCRIPTION
DELETE FROM T_GATE

DELETE FROM T_AKSAT_ITEM_DETAILS
DELETE FROM T_AKSAT_ITEMS
DELETE FROM T_BOOKING
DELETE FROM T_BOOKING_DATE
DELETE FROM T_BOOKING_DETAILS
DELETE FROM T_BOOKING_HOLIDAY
DELETE FROM T_BOOKING_QISM
DELETE FROM T_CONTAINER
DELETE FROM T_CONTAINER_DETAILS
DELETE FROM T_CONTAINER_EXPENSES
DELETE FROM T_DRIVERS
DELETE FROM T_VIDEO_LINK
DELETE FROM T_ATTACHMENT

DELETE FROM T_USERS_MAWJOOD
DELETE FROM T_SMS_MASSAGE_TYPE
DELETE FROM T_PRINTER_STORE
DELETE FROM T_NOTES
DELETE FROM T_MAWJOOD_STATUS
DELETE FROM T_AKSAT_DETAILS
DELETE FROM T_AKSAT_MODEL
DELETE FROM T_AKSAT_MODEL_DETAILS
DELETE FROM T_ITEM_CORRECT
DELETE FROM T_ITEM_RESTURANT
DELETE FROM T_ITEM_SERIAL
DELETE FROM T_ITEM_AVG_CURSER
DELETE FROM T_ITEM_MATERIAL
DELETE FROM T_ITEM_MATERIAL_EFFECTIVE
DELETE FROM T_TAG_PROCCESS WHERE TAG_PROCCESS_CODE>0

DELETE FROM TB_PROJECT
DELETE FROM TB_PROJECT_SUPPLIER
DELETE FROM TB_ZONE
DELETE FROM TB_BUILDING
DELETE FROM TB_FLOOR
DELETE FROM TB_HOUSE 
DELETE FROM TB_ATTACHMENT
DELETE FROM TB_CLIENT_INFO
DELETE FROM TB_HOUSE_TOKEN
DELETE FROM TB_MAINTENANCE
DELETE FROM TB_NEWS
DELETE FROM TB_NEWS_TYPE
DELETE FROM TB_RELATION_CLIENT
DELETE FROM TB_RENTER_HOUSE
DELETE FROM TB_SERVICE
DELETE FROM TB_SERVICE_DETAILS
DELETE FROM TB_AQED_AYGAR


DELETE FROM T_ITEM_MISWAK_INFO 
DELETE FROM T_OFFER
DELETE FROM T_OFFERS_DETAILS 
DELETE FROM T_APP_INVOICE 
DELETE FROM T_CLIENT_GIM_ENTRY 
DELETE FROM T_ITEMS_ARSHIF 
DELETE FROM T_ITEM_MATERIAL 
DELETE FROM T_ITEM_IMAGE 
DELETE FROM T_USER_ERROR 
DELETE FROM T_TELE_SCH 
DELETE FROM T_TELE_SYNC 
DELETE FROM T_CENTER_COST_INVOICE
DELETE FROM T_SALES_DISCOUNT
DELETE FROM T_SALES_IN_OUT
DELETE FROM T_SANAD_CNY
--delete from T_SETTING
--delete from T_SETTING_DISCOUNT
--INSERT INTO [dbo].[T_SETTING_DISCOUNT] ([T_ID] ,[ST_SETTING]) VALUES(1,N''0;0;0;0;0;0'')
DELETE FROM T_NOTFICATION_TITLE          
 DELETE FROM T_NOTIFICATION          
    
           
          




DELETE FROM T_ACCOUNT_CHECKED 
delete from T_MAINTANACE
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=1
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=3
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=4
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=5 AND ACCOUNT_CODE <> 5000
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=6 AND ACCOUNT_CODE <> 6000
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=7 AND ACCOUNT_CODE <> 7000
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=8 AND ACCOUNT_CODE <> 8000
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=9 AND ACCOUNT_CODE <> 9000
DELETE FROM T_ACCOUNTS WHERE ACCOUNT_PARENT=21 AND ACCOUNT_CODE <> 2100000
DELETE FROM T_CLIENT WHERE  ACCOUNT_CODE <> 2100000
DELETE FROM T_AKSAT 
DELETE FROM T_BALANCE_FINAL 
DELETE FROM T_BARCODE_PRINT 
DELETE FROM T_BOX 
DELETE FROM T_BOX_REPORT_ACCOUNT 
DELETE FROM T_BOX_REPORT_ACCOUNT_DETAILS 
DELETE FROM T_SALES_IN_OUT 
DELETE FROM T_EMP_ENTER 
DELETE FROM T_EMP_ENTER_REPORT
DELETE FROM T_EMPLOYEE
DELETE FROM T_AA_ACCOUNT_NEW_YEAR
DELETE FROM T_AA_ITEM_NEW_YEAR
DELETE FROM T_CENTER_COST
DELETE FROM T_CENTER_COST_ITEMS

DELETE FROM T_VERSION
DELETE FROM T_VERSION_NEW
DELETE FROM T_VERSION_DATA

DELETE FROM T_KAFEL
--DELETE FROM T_LEVEL WHERE LEVEL_CODE>1
DELETE FROM T_MANDOOB 
        
DELETE FROM T_MOVE WHERE ACTIVE=0 OR MOVE_CODE>300
DELETE FROM T_PRINTER WHERE T_ID > 0
DELETE FROM T_SANAD 
DELETE FROM T_SANAD_DOLLAR
DELETE FROM T_SANAD_KAYD
DELETE FROM T_SANAD_KAYD_DETAILS
DELETE FROM T_SANAD_SMAH

delete FROM  T_COMPANY
 
delete FROM T_SALES
DELETE FROM T_SALES_PATROL
DELETE FROM T_SALES_DETAILS
DELETE FROM T_SALES_TEMP

delete FROM  T_PURCHASE_ORDER
delete FROM  T_PURCHASE_ORDER_DETAILS 

delete FROM  T_BUY
delete FROM  T_BUY_DETAILS 
delete FROM  T_BUY_EXPENSES
delete FROM  T_BUY_RETURN
delete FROM  T_BUY_RETURN_DETAILS
delete FROM  T_FACTORY
delete FROM  T_FACTORY_DETAILS 
delete FROM  T_ITEM_BARCODE WHERE ITEM_CODE>0
delete FROM  T_ITEM_CATEGORY WHERE CATEGORY_CODE>0
delete FROM  T_ITEM_CATEGORY_RATING WHERE CATEGORY_RATING_CODE>0
delete FROM  T_ITEMS WHERE ITEM_CODE>0
delete FROM  T_ITEM_MISWAK_INFO
delete FROM  T_ITEM_UNIT WHERE ITEM_CODE>0
delete FROM  T_STORE_BOX 
delete FROM  T_STORE_TRANSFARE
delete FROM  T_STORE_TRANSFARE_DETAILS
delete FROM  T_STORE_TYPE WHERE STORE_CODE >0
delete FROM  T_UNIT_FORM
delete FROM  T_UNIT_FORM_INFO
delete FROM  T_USER_DETAILS
--DELETE FROM T_USERS WHERE USER_CODE<>1 
--UPDATE T_USERS SET USER_NAME=N''Admin'',USER_PWD=N''fpd2Te7d3NwzGck5qAgK8g=='',ACTIVE=1,LEVEL_CODE=1,LOG_IN=0,BOX_CODE=5000,IS_ENC=1,SECURETY_CODE=3,APP_PWD=NULL,STORE_CODE=-10,TYPE_PRICE_CODE=-10,MANDOOB_CODE=-10 WHERE USER_CODE=1
--UPDATE T_WORK_JOB SET D_DATE=NULL ,[START_DATE]=NULL,IS_ON_OFF=0 WHERE T_ID=1
--UPDATE T_PARAMETERS SET P_VALUE=2 WHERE P_CODE=1
--UPDATE T_CURRANNCY SET CURRANCY_EQUAL=1,CURRANCY_PRIMARY=0
	SET @SUBMIT_FLAG=1
	
END





































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_DATA_NEW_YEAR]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_DATA_NEW_YEAR]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_DELETE_DATA_NEW_YEAR]

	
@SUBMIT_FLAG INT OUTPUT
AS
BEGIN
SET @SUBMIT_FLAG=0
DELETE FROM T_RULES_KIND
DELETE FROM T_RULES_KIND_PAY

DELETE FROM T_MANDOOB_VISITS
DELETE FROM T_POINTS
DELETE FROM T_SANAD_HAWALA_HISTORY
DELETE FROM T_SANAD_HAWALA
DELETE FROM T_SANAD_HISTORY
DELETE FROM T_PATH_BACKUP
DELETE FROM T_FORM_LAYOUT_FILE
DELETE FROM T_FACTORY_ITEM_WAITING
DELETE FROM T_SALES_PDF
DELETE FROM T_APP_INVOICE 
DELETE FROM T_CLIENT_GIM_ENTRY 

DELETE FROM T_USER_ERROR 
DELETE FROM T_TELE_SCH 
DELETE FROM T_TELE_SYNC 

DELETE FROM T_SALES_DISCOUNT
DELETE FROM T_SALES_IN_OUT
DELETE FROM T_SANAD_CNY

       
    



DELETE FROM T_ACCOUNT_CHECKED 


DELETE FROM T_BALANCE_FINAL 
DELETE FROM T_BARCODE_PRINT 
DELETE FROM T_BOX 
DELETE FROM T_BOX_REPORT_ACCOUNT 
DELETE FROM T_BOX_REPORT_ACCOUNT_DETAILS 
DELETE FROM T_SALES_IN_OUT 
DELETE FROM T_EMP_ENTER 
DELETE FROM T_EMP_ENTER_REPORT

DELETE FROM T_SANAD 
DELETE FROM T_SANAD_DOLLAR
DELETE FROM T_SANAD_KAYD
DELETE FROM T_SANAD_KAYD_DETAILS
DELETE FROM T_SANAD_SMAH

delete FROM T_SALES
DELETE FROM T_SALES_DETAILS
DELETE FROM T_SALES_TEMP

delete FROM  T_PURCHASE_ORDER
delete FROM  T_PURCHASE_ORDER_DETAILS 


delete FROM  T_BUY
delete FROM  T_BUY_DETAILS 
delete FROM  T_BUY_EXPENSES
delete FROM  T_BUY_RETURN
delete FROM  T_BUY_RETURN_DETAILS
delete FROM  T_FACTORY
delete FROM  T_FACTORY_DETAILS 
delete FROM  T_STORE_BOX 
delete FROM  T_STORE_TRANSFARE
delete FROM  T_STORE_TRANSFARE_DETAILS

delete FROM  T_USER_DETAILS

	SET @SUBMIT_FLAG=1
	
END





































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_DATA_SALES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_DATA_SALES]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_DELETE_DATA_SALES]

	
@SUBMIT_FLAG INT OUTPUT
AS
BEGIN
SET @SUBMIT_FLAG=0
DELETE FROM T_POINTS
DELETE FROM T_MANDOOB_VISITS
DELETE FROM T_SALES_PDF
DELETE FROM T_TELE_SCH 
DELETE FROM T_TELE_SYNC 
DELETE FROM T_APP_INVOICE 
DELETE FROM T_USER_ERROR 
DELETE FROM T_SALES_DISCOUNT
DELETE FROM T_SALES_IN_OUT
DELETE FROM T_ITEM_SERIAL

delete FROM  T_UNIT_FORM
delete FROM  T_UNIT_FORM_INFO
delete FROM T_SALES
DELETE FROM T_SALES_PATROL
DELETE FROM T_SALES_DETAILS
DELETE FROM T_SALES_TEMP
delete FROM  T_STORE_BOX  where B_CODE=2
delete FROM  T_BOX  where B_CODE=2
SET @SUBMIT_FLAG=1
	
END





































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_FACTORY_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_FACTORY_NOT_USE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_DELETE_FACTORY_NOT_USE]
    @USER_CREATE NVARCHAR(50),
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        DELETE FROM T_FACTORY
        WHERE USER_CREATE LIKE @USER_CREATE
          AND OFFER_CODE = 99;

        SET @SUBMIT_FLAG = 1;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;
        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_ITEM_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_ITEM_BARCODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[P_DELETE_ITEM_BARCODE]
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        DELETE FROM T_ITEM_BARCODE
        WHERE ITEM_CODE IN (
            SELECT ITEM_CODE
            FROM T_ITEMS
            WHERE ACTIVE = 0
        );

        SET @SUBMIT_FLAG = 1;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;
        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_delete_item_not_sales]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_delete_item_not_sales]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[P_delete_item_not_sales]
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        -- حذف السجلات التابعة أولاً
        DELETE FROM T_ITEM_BARCODE
        WHERE ITEM_CODE IN (SELECT ITEM_CODE FROM V_STORE_BOX WHERE BALANCE = 0);

        DELETE FROM T_ITEM_UNIT
        WHERE ITEM_CODE IN (SELECT ITEM_CODE FROM V_STORE_BOX WHERE BALANCE = 0);

        DELETE FROM T_STORE_BOX
        WHERE ITEM_CODE IN (SELECT ITEM_CODE FROM V_STORE_BOX WHERE BALANCE = 0);

        DELETE FROM T_BUY_DETAILS
        WHERE ITEM_CODE IN (SELECT ITEM_CODE FROM V_STORE_BOX WHERE BALANCE = 0);

        -- حذف السجل الرئيسي من T_ITEMS
        DELETE FROM T_ITEMS
        WHERE ITEM_CODE IN (SELECT ITEM_CODE FROM V_STORE_BOX WHERE BALANCE = 0);

        SET @SUBMIT_FLAG = 1;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;
        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_ITEMS_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_ITEMS_NOT_USE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[P_DELETE_ITEMS_NOT_USE]
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        -- نحدد مجموعة العناصر المراد حذفها من العرض (V_STORE_BOX_STORE_AVG_ON)
        -- حيث تكون قيمة BALANCE = 0.
        -- يتم حذف السجلات من الجداول التابعة أولاً ثم من الجدول الأساسي (T_ITEMS)
        DELETE FROM T_BUY_DETAILS
        WHERE BILL_NUMBER = 0
          AND ITEM_CODE IN (SELECT ITEM_CODE FROM V_STORE_BOX_STORE_AVG_ON WHERE BALANCE = 0);

        DELETE FROM T_STORE_BOX
        WHERE ITEM_CODE IN (SELECT ITEM_CODE FROM V_STORE_BOX_STORE_AVG_ON WHERE BALANCE = 0);

        DELETE FROM T_ITEM_BARCODE
        WHERE ITEM_CODE IN (SELECT ITEM_CODE FROM V_STORE_BOX_STORE_AVG_ON WHERE BALANCE = 0);

        DELETE FROM T_ITEM_UNIT
        WHERE ITEM_CODE IN (SELECT ITEM_CODE FROM V_STORE_BOX_STORE_AVG_ON WHERE BALANCE = 0);

        DELETE FROM T_ITEMS
        WHERE ITEM_CODE IN (SELECT ITEM_CODE FROM V_STORE_BOX_STORE_AVG_ON WHERE BALANCE = 0);

        SET @SUBMIT_FLAG = 1;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;
        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_PURCHASE_ORDER_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_PURCHASE_ORDER_NOT_USE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[P_DELETE_PURCHASE_ORDER_NOT_USE]
(
    @USER_CREATE NVARCHAR(50),
    @SUBMIT_FLAG INT OUTPUT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        -- حذف السجلات من T_PURCHASE_ORDER التي تطابق المستخدم وقيمة OFFER_CODE=99
        DELETE FROM T_PURCHASE_ORDER
        WHERE USER_CREATE = @USER_CREATE
          AND OFFER_CODE  = 99;

        SET @SUBMIT_FLAG = 1;

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SALES_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SALES_NOT_USE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'














CREATE PROCEDURE [dbo].[P_DELETE_SALES_NOT_USE]
(
    @USER_CREATE NVARCHAR(MAX),
    @SUBMIT_FLAG INT OUTPUT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        ------------------------------------------------------------------------
        -- 1) حذف السجلات من T_SALES_TEMP المرتبطة بـ T_SALES المطلوب حذفها
        ------------------------------------------------------------------------
        DELETE ST
        FROM T_SALES_TEMP AS ST
        JOIN T_SALES     AS S ON ST.BILL_NUMBER = S.BILL_NUMBER
        WHERE S.USER_CREATE = @USER_CREATE
          AND S.OFFER_CODE  = 99;

        ------------------------------------------------------------------------
        -- 2) حذف السجلات من T_SALES
        ------------------------------------------------------------------------
        DELETE FROM T_SALES
        WHERE USER_CREATE = @USER_CREATE
          AND OFFER_CODE  = 99;

        ------------------------------------------------------------------------
        -- 3) تحديد قيمة SUBMIT_FLAG = 1 عند النجاح
        ------------------------------------------------------------------------
        SET @SUBMIT_FLAG = 1;

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        -- إذا حدث خطأ، نعيد SUBMIT_FLAG بالقيمة 0
        SET @SUBMIT_FLAG = 0;

        THROW;  -- إعادة رمي الاستثناء
    END CATCH;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SALES_NOT_USE_ALL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SALES_NOT_USE_ALL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[P_DELETE_SALES_NOT_USE_ALL]
(
    @SUBMIT_FLAG INT OUTPUT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        ----------------------------------------------------------------------------
        -- 1) قراءة قيمة COMPANY_TITAL من T_COMPANY (افتراض أن T_ID=1 موجود)
        ----------------------------------------------------------------------------
        DECLARE @COMPANY_TITAL NVARCHAR(MAX);
        SELECT @COMPANY_TITAL = COMPANY_TITAL 
        FROM T_COMPANY 
        WHERE T_ID = 1;

        ----------------------------------------------------------------------------
        -- 2) حذف جميع السجلات في T_SALES وT_SALES_TEMP لـ OFFER_CODE=99
        ----------------------------------------------------------------------------
        -- أولاً: حذف السجلات المرتبطة في T_SALES_TEMP
        DELETE ST
        FROM T_SALES_TEMP AS ST
        JOIN T_SALES     AS S 
           ON ST.BILL_NUMBER = S.BILL_NUMBER
        WHERE S.OFFER_CODE = 99;

        -- ثانيًا: حذف السجلات من T_SALES
        DELETE 
        FROM T_SALES
        WHERE OFFER_CODE = 99;

        ----------------------------------------------------------------------------
        -- 3) إذا نجحت عمليات الحذف
        ----------------------------------------------------------------------------
        SET @SUBMIT_FLAG = 1;

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        -- عند حدوث أي خطأ
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        SET @SUBMIT_FLAG = 0;
        THROW;  -- إعادة طرح الاستثناء إلى المستدعي
    END CATCH;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SALES_NOT_USE_NEW_SALES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SALES_NOT_USE_NEW_SALES]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[P_DELETE_SALES_NOT_USE_NEW_SALES]
    @USER_CREATE   NVARCHAR(MAX),
    @COMPANY_TITAL NVARCHAR(MAX),
    @CURRANCY_CODE INT,
    @USER_BOX      INT,
    @BILL_NUMBER   INT OUTPUT,
    @SUBMIT_FLAG   INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        ----------------------------------------------------------------------------
        -- 1) حذف السجلات القديمة من T_SALES وT_SALES_TEMP للمستخدم Offer_Code=99
        ----------------------------------------------------------------------------
     --    DELETE ST
     --   FROM T_SALES_TEMP AS ST
     --   WHERE ST.BILL_NUMBER IN (
     --       SELECT BILL_NUMBER
     --       FROM T_SALES
     --       WHERE USER_CREATE = @USER_CREATE
     --         AND OFFER_CODE  = 99
     --   );
	   
	    --DELETE S
     --   FROM T_SALES AS S
     --   WHERE S.USER_CREATE = @USER_CREATE
     --     AND S.OFFER_CODE  = 99;

      

        ----------------------------------------------------------------------------
        -- 2) الحصول على الرقم الجديد لـ BILL_NUMBER
        ----------------------------------------------------------------------------
        SELECT @BILL_NUMBER = ISNULL(MAX(BILL_NUMBER), 0) + 1 
        FROM T_SALES WITH (TABLOCKX);

        ----------------------------------------------------------------------------
        -- 3) إدخال سجل جديد في T_SALES
        ----------------------------------------------------------------------------
        INSERT INTO [dbo].[T_SALES]
        (
             [BILL_BRANCH]
            ,[BILL_NUMBER]
            ,[BILL_INVOICE]
            ,[BILL_DATE]
            ,[OFFER_CODE]
            ,[CURRANCY_CODE]
            ,[CURRANCY_EQUAL]
            ,[CLIENT_CODE]
            ,[CLIENT_NAME]
            ,[CLIENT_PHONE]
            ,[CLIENT_ADRESS]
            ,[MANDOOB_CODE]
            ,[DESCRIPTION]
            ,[TYPE_PRICE_SELL]
            ,[STORE_CODE]
            ,[USER_CREATE]
            ,[SECURETY_CODE]
            ,[TOTAL_SALES]
            ,[DISCOUNT_ITEMS]
            ,[DISCOUNT_PERCENT]
            ,[DISCOUNT_AMOUNT]
            ,[TOTAL_DISCOUNT]
            ,[NET_SALES]
            ,[TOTAL_COST]
            ,[IVC_CODE]
            ,[DAY_CASH]
            ,[DATE_CASH]
            ,[TOT_CONV]
            ,[ACCOUNT_CODE]
            ,[CASH_USA]
            ,[REMAIN_USA]
            ,[CASH_IQ]
            ,[REMAIN_IQ]
            ,[C_DATE]
            ,[C_UPDATE]
            ,[USER_UPDATE]
            ,[ACTIVE]
        )
        VALUES
        (
            -- BILL_BRANCH (سلسلة = COMPANY_TITAL + رقم الفاتورة)
             @COMPANY_TITAL + CAST(@BILL_NUMBER AS VARCHAR(20))
            ,@BILL_NUMBER
            ,NULL                                  -- BILL_INVOICE
            ,GETDATE()                             -- BILL_DATE
            ,99                                    -- OFFER_CODE
            ,@CURRANCY_CODE                        -- CURRANCY_CODE
            ,1                                     -- CURRANCY_EQUAL
            ,2100000                               -- CLIENT_CODE (مثال افتراضي)
            ,NULL                                  -- CLIENT_NAME
            ,NULL                                  -- CLIENT_PHONE
            ,NULL                                  -- CLIENT_ADRESS
            ,1                                     -- MANDOOB_CODE (مثال)
            ,NULL                                  -- DESCRIPTION
            ,1                                     -- TYPE_PRICE_SELL
            ,0                                     -- STORE_CODE
            ,@USER_CREATE                          -- USER_CREATE
            ,1                                     -- SECURETY_CODE
            ,0                                     -- TOTAL_SALES
            ,0                                     -- DISCOUNT_ITEMS
            ,0                                     -- DISCOUNT_PERCENT
            ,0                                     -- DISCOUNT_AMOUNT
            ,0                                     -- TOTAL_DISCOUNT
            ,0                                     -- NET_SALES
            ,0                                     -- TOTAL_COST
            ,0                                     -- IVC_CODE
            ,1                                     -- DAY_CASH
            ,NULL                                  -- DATE_CASH
            ,NULL                                  -- TOT_CONV
            ,@USER_BOX                             -- ACCOUNT_CODE (مثال لوضع كاش الصندوق)
            ,0                                     -- CASH_USA
            ,0                                     -- REMAIN_USA
            ,0                                     -- CASH_IQ
            ,0                                     -- REMAIN_IQ
            ,GETDATE()                             -- C_DATE
            ,NULL                                  -- C_UPDATE
            ,NULL                                  -- USER_UPDATE
            ,0                                     -- ACTIVE
        );

        ----------------------------------------------------------------------------
        -- 4) إن نجحت العملية نُعيّن SUBMIT_FLAG = 1
        ----------------------------------------------------------------------------
        SET @SUBMIT_FLAG = 1;

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        -- عند أي خطأ، نعيد المعاملة
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        -- يمكنك وضع قيمة مميزة لـ SUBMIT_FLAG للدلالة على الفشل
        SET @SUBMIT_FLAG = 0;

        -- استدعاء الخطأ
        THROW;
    END CATCH;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SALES_NOT_USE_NEW_SALES_TABLE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SALES_NOT_USE_NEW_SALES_TABLE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_DELETE_SALES_NOT_USE_NEW_SALES_TABLE]
(
    @USER_CREATE   NVARCHAR(MAX),
    @COMPANY_TITAL NVARCHAR(MAX),
    @CURRANCY_CODE INT,
    @USER_BOX      INT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        ----------------------------------------------------------------------------
        -- 1) حذف السجلات في T_SALES و T_SALES_TEMP للمستخدم المعني و Offer_Code=99
        ----------------------------------------------------------------------------
        -- أولاً حذف من T_SALES_TEMP ما يرتبط بسجلات T_SALES المطلوب حذفها
        DELETE ST
        FROM T_SALES_TEMP AS ST
        JOIN T_SALES AS S 
           ON ST.BILL_NUMBER = S.BILL_NUMBER
        WHERE S.USER_CREATE = @USER_CREATE
          AND S.OFFER_CODE  = 99;

        -- ثانياً حذف من T_SALES
        DELETE S
        FROM T_SALES AS S
        WHERE S.USER_CREATE = @USER_CREATE
          AND S.OFFER_CODE  = 99;

        ----------------------------------------------------------------------------
        -- 2) الحصول على رقم BILL_NUMBER جديد وتسلسلي
        ----------------------------------------------------------------------------
        DECLARE @BILL_NUMBER INT;
        SELECT @BILL_NUMBER = ISNULL(MAX(BILL_NUMBER), 0) + 1 
        FROM T_SALES WITH (TABLOCKX);

        ----------------------------------------------------------------------------
        -- 3) إدخال سجل جديد في T_SALES
        ----------------------------------------------------------------------------
        INSERT INTO [dbo].[T_SALES]
        (
             [BILL_BRANCH]
            ,[BILL_NUMBER]
            ,[BILL_INVOICE]
            ,[BILL_DATE]
            ,[OFFER_CODE]
            ,[CURRANCY_CODE]
            ,[CURRANCY_EQUAL]
            ,[CLIENT_CODE]
            ,[CLIENT_NAME]
            ,[CLIENT_PHONE]
            ,[CLIENT_ADRESS]
            ,[MANDOOB_CODE]
            ,[DESCRIPTION]
            ,[TYPE_PRICE_SELL]
            ,[STORE_CODE]
            ,[USER_CREATE]
            ,[SECURETY_CODE]
            ,[TOTAL_SALES]
            ,[DISCOUNT_ITEMS]
            ,[DISCOUNT_PERCENT]
            ,[DISCOUNT_AMOUNT]
            ,[TOTAL_DISCOUNT]
            ,[NET_SALES]
            ,[TOTAL_COST]
            ,[IVC_CODE]
            ,[DAY_CASH]
            ,[DATE_CASH]
            ,[TOT_CONV]
            ,[ACCOUNT_CODE]
            ,[CASH_USA]
            ,[REMAIN_USA]
            ,[CASH_IQ]
            ,[REMAIN_IQ]
            ,[C_DATE]
            ,[C_UPDATE]
            ,[USER_UPDATE]
            ,[ACTIVE]
        )
        VALUES
        (
            @COMPANY_TITAL + CAST(@BILL_NUMBER AS VARCHAR(20)),  -- BILL_BRANCH
            @BILL_NUMBER,                                        -- BILL_NUMBER
            NULL,                                                -- BILL_INVOICE
            GETDATE(),                                           -- BILL_DATE
            99,                                                 -- OFFER_CODE
            @CURRANCY_CODE,                                      -- CURRANCY_CODE
            1,                                                  -- CURRANCY_EQUAL
            2100000,                                            -- CLIENT_CODE (قيمة افتراضية)
            NULL,                                               -- CLIENT_NAME
            NULL,                                               -- CLIENT_PHONE
            NULL,                                               -- CLIENT_ADRESS
            1,                                                  -- MANDOOB_CODE (مثال)
            NULL,                                               -- DESCRIPTION
            1,                                                  -- TYPE_PRICE_SELL
            0,                                                  -- STORE_CODE
            @USER_CREATE,                                       -- USER_CREATE
            1,                                                  -- SECURETY_CODE
            0,                                                  -- TOTAL_SALES
            0,                                                  -- DISCOUNT_ITEMS
            0,                                                  -- DISCOUNT_PERCENT
            0,                                                  -- DISCOUNT_AMOUNT
            0,                                                  -- TOTAL_DISCOUNT
            0,                                                  -- NET_SALES
            0,                                                  -- TOTAL_COST
            0,                                                  -- IVC_CODE
            1,                                                  -- DAY_CASH (مثال)
            NULL,                                               -- DATE_CASH
            NULL,                                               -- TOT_CONV
            @USER_BOX,                                          -- ACCOUNT_CODE
            0,                                                  -- CASH_USA
            0,                                                  -- REMAIN_USA
            0,                                                  -- CASH_IQ
            0,                                                  -- REMAIN_IQ
            GETDATE(),                                          -- C_DATE
            NULL,                                               -- C_UPDATE
            NULL,                                               -- USER_UPDATE
            0                                                   -- ACTIVE
        );

        ----------------------------------------------------------------------------
        -- 4) إنهاء المعاملة وقراءة السجل الذي تم إدخاله للتو
        ----------------------------------------------------------------------------
        COMMIT TRANSACTION;

        SELECT TOP(1) *
        FROM T_SALES
        WHERE BILL_NUMBER = @BILL_NUMBER;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        THROW;  -- إعادة طرح الاستثناء للجهة المستدعِية
    END CATCH;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SANAD_CNY_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SANAD_CNY_NOT_USE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_DELETE_SANAD_CNY_NOT_USE]
(
    @USER_CREATE NVARCHAR(MAX),
    @SUBMIT_FLAG INT OUTPUT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        -- حذف كل السجلات التي تتطابق فيها USER_CREATE و OFFER_CODE=99
        DELETE FROM T_SANAD_CNY
        WHERE USER_CREATE = @USER_CREATE
          AND OFFER_CODE  = 99;

        -- إذا نجحت العملية
        SET @SUBMIT_FLAG = 1;

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;
        
        SET @SUBMIT_FLAG = 0;
        THROW;  -- إعادة طرح الاستثناء
    END CATCH;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SANAD_DOLLAR_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SANAD_DOLLAR_NOT_USE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_DELETE_SANAD_DOLLAR_NOT_USE]
    @USER_CREATE NVARCHAR(MAX),
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        DELETE FROM T_SANAD_DOLLAR
        WHERE USER_CREATE LIKE @USER_CREATE
          AND OFFER_CODE = 99;

        SET @SUBMIT_FLAG = 1;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;
            
        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SANAD_HAWALA_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SANAD_HAWALA_NOT_USE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

















CREATE PROCEDURE [dbo].[P_DELETE_SANAD_HAWALA_NOT_USE]
    @USER_CREATE NVARCHAR(MAX),
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        DELETE FROM T_SANAD_HAWALA
        WHERE USER_CREATE LIKE @USER_CREATE
          AND OFFER_CODE = 99;

        SET @SUBMIT_FLAG = 1;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SANAD_KAYD_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SANAD_KAYD_NOT_USE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_DELETE_SANAD_KAYD_NOT_USE]
@USER_CREATE nvarchar(50),	
@SUBMIT_FLAG INT OUTPUT

AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  BILL_NUMBER FROM T_SANAD_KAYD WHERE USER_CREATE LIKE @USER_CREATE AND OFFER_CODE=99  ;

DECLARE
@BILL_NUMBER INT
BEGIN

OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @BILL_NUMBER
WHILE @@FETCH_STATUS = 0
BEGIN

delete FROM T_SANAD_KAYD WHERE BILL_NUMBER=@BILL_NUMBER


FETCH NEXT FROM BOX_CURSOR INTO @BILL_NUMBER

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SANAD_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SANAD_NOT_USE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
 
 

 CREATE PROCEDURE [dbo].[P_DELETE_SANAD_NOT_USE]
(
    @USER_CREATE NVARCHAR(MAX),
    @SUBMIT_FLAG INT OUTPUT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        ----------------------------------------------------------------------
        -- حذف السجلات مباشرة:
        -- نستهدف السجلات التي تساوي offer_code = 99
        -- ويوزر الإنشاء مطابق لقيمة @USER_CREATE
        ----------------------------------------------------------------------
        DELETE FROM T_SANAD
        WHERE USER_CREATE = @USER_CREATE
          AND OFFER_CODE  = 99;

        ----------------------------------------------------------------------
        -- إذا نجحت عملية الحذف
        ----------------------------------------------------------------------
        SET @SUBMIT_FLAG = 1;

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        -- في حال حدوث أي خطأ
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        -- وضع قيمة 0 للتدليل على فشل العملية
        SET @SUBMIT_FLAG = 0;

        -- إعادة طرح الاستثناء
        THROW;
    END CATCH;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_SANAD_SMAH_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_SANAD_SMAH_NOT_USE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_DELETE_SANAD_SMAH_NOT_USE]
    @USER_CREATE NVARCHAR(MAX),
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        DELETE FROM T_SANAD_SMAH
        WHERE USER_CREATE LIKE @USER_CREATE
          AND OFFER_CODE = 99;

        SET @SUBMIT_FLAG = 1;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;
        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DELETE_STORE_TRANSFARE_NOT_USE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DELETE_STORE_TRANSFARE_NOT_USE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'














CREATE PROCEDURE [dbo].[P_DELETE_STORE_TRANSFARE_NOT_USE]
    @USER_CREATE NVARCHAR(50),
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        DELETE FROM T_STORE_TRANSFARE
        WHERE USER_CREATE LIKE @USER_CREATE
          AND OFFER_CODE = 99;

        SET @SUBMIT_FLAG = 1;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DIGIT_CARDS_ADD_SALES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DIGIT_CARDS_ADD_SALES]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE PROCEDURE [dbo].[P_DIGIT_CARDS_ADD_SALES]
@CLIENT_BARCODE NVARCHAR(MAX),
@ITEM_BARCODE  NVARCHAR(MAX),
@QTY INT,
@USER_CODE INT,
@BALANCE float OUTPUT,
@SUBMIT_MSG NVARCHAR(MAX)OUTPUT,
@SUBMIT_FLAG INT OUTPUT



AS
DECLARE 
@ITEM_PRICE float ,
@ITEM_COST float ,
@CLIENT_CODE INT,
@CC_COUNT INT,
@CC_ITEM INT,
@UNIT_CODE INT,
@CURRANCY_CLIENT INT,
@CURRANCY_DIFOULT INT,
@CURRANCY_EQUAL_C float ,
@CURRANCY_SALES_C float ,
@CURRANCY_MOKAFEE_C float ,
@CURRANCY_EQUAL_SYS float ,
@CURRANCY_MOKAFEE_SYS float ,
@CURRANCY_SALES float	,
@ITEM_NAME  NVARCHAR(MAX),
@UNIT_NAME  NVARCHAR(MAX),
@ITEM_CODE INT

BEGIN
BEGIN TRANSACTION;
SET @SUBMIT_FLAG=0
SET @BALANCE=0

SELECT @CC_COUNT=COUNT(CLIENT_CODE )FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1

IF @CC_COUNT=0
BEGIN

SET @SUBMIT_FLAG=4
  SET @SUBMIT_MSG=N''باركود العميل غير صحيح''
GOTO FINSHSH

END

ELSE

BEGIN
SELECT TOP(1) @CURRANCY_DIFOULT=ISNULL(CURRANCY_CODE ,1)FROM T_CURRANNCY WHERE CURRANCY_PRIMARY = 1
SELECT TOP(1) @CURRANCY_EQUAL_SYS=ISNULL(CURRANCY_EQUAL ,1), @CURRANCY_MOKAFEE_SYS=ISNULL(CURRANCY_MOKAFEA ,1)FROM T_CURRANNCY WHERE CURRANCY_CODE = 2
 


SELECT TOP(1) @CLIENT_CODE=ISNULL(CLIENT_CODE ,0)FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1
SELECT TOP(1) @CURRANCY_CLIENT=ISNULL(CURRANCY_CODE ,1)FROM T_CLIENT WHERE CLIENT_CODE = @CLIENT_CODE
SELECT TOP(1) @CURRANCY_EQUAL_C=ISNULL(CURRANCY_EQUAL ,1), @CURRANCY_MOKAFEE_C=ISNULL(CURRANCY_MOKAFEA ,1)FROM T_CURRANNCY WHERE CURRANCY_CODE = @CURRANCY_CLIENT
IF @CURRANCY_CLIENT=1
BEGIN 
SELECT TOP(1)  @BALANCE=ISNULL(BALANCE ,0)*-1  FROM   V_ACC3  WHERE   ACCOUNT_CODE=@CLIENT_CODE 
END
ELSE IF @CURRANCY_CLIENT=2
BEGIN
SELECT TOP(1)  @BALANCE=ISNULL(BALANCE_IQ ,0)*-1  FROM   V_ACC3  WHERE   ACCOUNT_CODE=@CLIENT_CODE 
END
ELSE
BEGIN
SELECT TOP(1)  @BALANCE=ISNULL(BALANCE_CUR ,0)*-1  FROM   V_ACC3  WHERE   ACCOUNT_CODE=@CLIENT_CODE 
END

SELECT @CC_ITEM=count(ITEM_CODE)  FROM T_ITEMS WHERE ACTIVE=1 AND ITEM_CODE>0 AND ITEM_BARCODE LIKE @ITEM_BARCODE
if @CC_ITEM=0
begin
SET @SUBMIT_FLAG=3
SET @SUBMIT_MSG=N''باركود المادة غير صحيح''
GOTO FINSHSH
end
ELSE
BEGIN
DECLARE
@CH_ITEM_USA INT,
@PRICE_FOR_SALE FLOAT
SELECT @ITEM_PRICE=ISNULL(SELL,0),@ITEM_COST=ISNULL(COST,0),@ITEM_CODE=ITEM_CODE,@ITEM_NAME=ITEM_NAME,@CH_ITEM_USA=SELL_CNY  FROM T_ITEMS WHERE ACTIVE=1 AND ITEM_CODE>0 AND ITEM_BARCODE LIKE @ITEM_BARCODE
SELECT @UNIT_NAME=UNIT_NAME,@UNIT_CODE=UNIT_CODE  FROM T_ITEM_BARCODE WHERE ITEM_BARCODE LIKE @ITEM_BARCODE
IF @CH_ITEM_USA<>0
BEGIN
IF @CURRANCY_CLIENT=1 SET @ITEM_PRICE=@CH_ITEM_USA/@CURRANCY_MOKAFEE_SYS;SET @CURRANCY_SALES=1  ;SET @CURRANCY_SALES_C =1 -- اذا كانت عملة العميل دولار والمنتج بالدينار
IF @CURRANCY_CLIENT=2 SET @ITEM_PRICE=@CH_ITEM_USA;SET @CURRANCY_SALES=1/@CURRANCY_MOKAFEE_SYS  ;SET @CURRANCY_SALES_C =@CURRANCY_MOKAFEE_SYS   -- اذا كانت عملة العميل دينار والمنتج بالدينار

SET @PRICE_FOR_SALE=@ITEM_PRICE  


END
ELSE
BEGIN
IF @CURRANCY_CLIENT=1 SET @ITEM_PRICE=@ITEM_PRICE;SET @CURRANCY_SALES=1/@CURRANCY_EQUAL_SYS;SET @CURRANCY_SALES_C =1  -- اذا كانت عملة العميل دولار والمنتج دولار
IF @CURRANCY_CLIENT=2 SET @ITEM_PRICE=@ITEM_PRICE*@CURRANCY_EQUAL_SYS ;SET @CURRANCY_SALES=1 ;SET @CURRANCY_SALES_C =@CURRANCY_EQUAL_SYS       -- اذا كانت عملة العميل دينار والمنتج دولار
SET @PRICE_FOR_SALE=@ITEM_PRICE  

 
END






IF @BALANCE<(@ITEM_PRICE*@QTY)
BEGIN

SET @SUBMIT_FLAG=2
  SET @SUBMIT_MSG=N''رصيد العميل غير كافي''
GOTO FINSHSH

END
ELSE
BEGIN
DECLARE
@CURRANCY_CODE INT,
@CURRANCY_USA float	,
@CURRANCY_IQ float	,
@CURRANCY_EQUAL float	,

@MAX_BILL INT,
@USER_CREATE nvarchar(MAX),	
@CLIENT_NAME nvarchar(MAX),	
@COMPANY_TITAL NVARCHAR(MAX)
SELECT @COMPANY_TITAL=COMPANY_TITAL FROM T_COMPANY WHERE T_ID=1
--SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
SET @CURRANCY_CODE=@CURRANCY_CLIENT
SELECT @CLIENT_NAME=CLIENT_NAME FROM T_CLIENT WHERE CLIENT_CODE=@CLIENT_CODE
SELECT @USER_CREATE=[USER_NAME] FROM T_USERS WHERE  USER_CODE=@USER_CODE

  --****************************************************
  declare
  @COUNT_CARD INT

  select @COUNT_CARD=COUNT(T_ID) FROM T_ITEM_SERIAL WHERE ITEM_CODE=@ITEM_CODE AND IS_SALE=0 AND B_CODE=21 AND ACTIVE=1  
  IF @QTY>@COUNT_CARD 
  BEGIN
  SET @SUBMIT_FLAG=5
  SET @SUBMIT_MSG=N''رصيد المادة غير كافي''
GOTO FINSHSH
  END
   

  --****************************************************

SELECT @MAX_BILL=ISNULL(MAX(BILL_NUMBER),0) + 1 FROM T_SALES
INSERT INTO [dbo].[T_SALES]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_INVOICE]
           ,[BILL_DATE]
           ,[OFFER_CODE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[CLIENT_CODE]
           ,[CLIENT_NAME]
           ,[CLIENT_PHONE]
           ,[CLIENT_ADRESS]
           ,[MANDOOB_CODE]
           ,[DESCRIPTION]
           ,[TYPE_PRICE_SELL]
           ,[STORE_CODE]
           ,[USER_CREATE]
           ,[SECURETY_CODE]
           ,[TOTAL_SALES]
           ,[DISCOUNT_ITEMS]
           ,[DISCOUNT_PERCENT]
           ,[DISCOUNT_AMOUNT]
           ,[TOTAL_DISCOUNT]
           ,[NET_SALES]
           ,[TOTAL_COST]
           ,[IVC_CODE]
           ,[DAY_CASH]
           ,[DATE_CASH]
           ,[TOT_CONV]
           ,[ACCOUNT_CODE]
           ,[CASH_USA]
           ,[REMAIN_USA]
           ,[CASH_IQ]
           ,[REMAIN_IQ]
           ,[C_DATE]
           ,[C_UPDATE]
           ,[USER_UPDATE]
           ,[ACTIVE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[FLAG_CASH]
           ,[IS_OUT]
           ,[CURRANCY_SALES])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,NULL
           ,GETDATE()
           ,1
           ,@CURRANCY_CLIENT
           ,@CURRANCY_SALES
           ,@CLIENT_CODE
           ,@CLIENT_NAME
            ,NULL
           ,NULL
           ,0
           ,@ITEM_NAME+N'' * ''+ CAST( @QTY AS VARCHAR)
           ,1
           ,0
           ,@USER_CREATE
           ,1
           ,@ITEM_PRICE*@QTY
           ,0
           ,0
           ,0
           ,0
           ,@ITEM_PRICE*@QTY
           ,@ITEM_COST*@QTY
           ,2
           ,0
           ,GETDATE()
           ,NULL
           ,5000
           ,0
           ,0
           ,0
           ,0
           ,GETDATE()
           ,NULL
           ,NULL
           ,1
           ,0
           ,0
           ,1
           ,0
           ,@CURRANCY_SALES_C )



IF @CURRANCY_CLIENT=1
BEGIN
SELECT @CURRANCY_USA=CURRANCY_MOKAFEA FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=1/NULLIF(CURRANCY_MOKAFEA,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_IQ
INSERT INTO [dbo].[T_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_STR]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[MOVE_CODE]
           ,[B_CODE]
           ,[BRANCH_CODE]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_DESCRIPTION]
           ,[DEBIT]
           ,[CREDIT]
           ,[DEBIT_IQ]
           ,[CREDIT_IQ]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[DESCRIPTION]
           ,[DEAL_CODE]
           ,[USER_CODE]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,@MAX_BILL
           ,GETDATE()
          ,GETDATE()
           ,0
           ,2
           ,1
           ,@CLIENT_CODE
           ,NULL
           ,@ITEM_PRICE*@QTY
           ,0
           ,0
           ,0
           ,@CURRANCY_CODE
           ,@CURRANCY_EQUAL
            ,@ITEM_NAME+N'' * ''+ CAST( @QTY AS VARCHAR)
           ,0
           ,@USER_CODE
           ,GETDATE()
           ,1)


END

ELSE
BEGIN
SELECT @CURRANCY_USA=NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_USA

INSERT INTO [dbo].[T_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_STR]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[MOVE_CODE]
           ,[B_CODE]
           ,[BRANCH_CODE]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_DESCRIPTION]
           ,[DEBIT]
           ,[CREDIT]
           ,[DEBIT_IQ]
           ,[CREDIT_IQ]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[DESCRIPTION]
           ,[DEAL_CODE]
           ,[USER_CODE]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,@MAX_BILL
           ,GETDATE()
          ,GETDATE()
           ,0
           ,2
           ,1
           ,@CLIENT_CODE
           ,NULL
           ,0
           ,0
           ,@ITEM_PRICE*@QTY
           ,0
           ,@CURRANCY_CODE
           ,@CURRANCY_EQUAL
            ,@ITEM_NAME+N'' * ''+ CAST( @QTY AS VARCHAR)
           ,0
           ,@USER_CODE
           ,GETDATE()
           ,1)

END


INSERT INTO [dbo].[T_SALES_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[TOTAL]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY]
           ,[ITEM_NOTE_SALES])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
           ,@ITEM_CODE
           ,@ITEM_NAME
           ,@QTY
           ,@UNIT_NAME
           ,1
           ,0
           ,-999999
           ,NULL
           ,NULL
           ,@CURRANCY_CLIENT
           ,1
           ,@ITEM_COST
           ,@ITEM_PRICE
           ,@ITEM_PRICE*@QTY
           ,0
           ,0
           ,GETDATE()
           ,1
           ,-999999
           ,NULL)
INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[C_DATE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
           ,GETDATE()
           ,2
           ,-999999
           ,0
           ,GETDATE()
           ,@ITEM_CODE
           ,@UNIT_CODE
           ,0
           ,@QTY
           ,1
           ,GETDATE()
           ,0
           ,0
           ,1)
IF @CURRANCY_CLIENT=1
BEGIN 
SELECT TOP(1)  @BALANCE=ISNULL(BALANCE ,0)*-1  FROM   V_ACC3  WHERE   ACCOUNT_CODE=@CLIENT_CODE 
END
ELSE IF @CURRANCY_CLIENT=2
BEGIN
SELECT TOP(1)  @BALANCE=ISNULL(BALANCE_IQ ,0)*-1  FROM   V_ACC3  WHERE   ACCOUNT_CODE=@CLIENT_CODE 
END
ELSE
BEGIN
SELECT TOP(1)  @BALANCE=ISNULL(BALANCE_CUR ,0)*-1  FROM   V_ACC3  WHERE   ACCOUNT_CODE=@CLIENT_CODE 
END
 --****************************************************
 SELECT TOP(@QTY) * FROM T_ITEM_SERIAL WHERE B_CODE=21 AND IS_SALE=0 AND ITEM_CODE=@ITEM_CODE AND ACTIVE=1  ORDER BY T_ID ASC
 INSERT INTO [dbo].[T_ITEM_SERIAL]
           ([BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[ITEM_CODE]
           ,[QTY]
           ,[IME]
           ,[SERIAL]
           ,[EXP_DAY]
           ,[EXP_DATE]
           ,[ACTIVE]
           ,[C_DATE]
           ,[C_DELETE]
           ,[USER_DELETE]
           ,[IS_SALE])
     SELECT 
           @MAX_BILL
           ,GETDATE()
           ,2
           ,ITEM_CODE
           ,@QTY
           ,IME
           ,SERIAL
           ,365
           ,DATEADD(YEAR,1,GETDATE())
           ,1
           ,GETDATE()
           ,NULL
           ,NULL
           ,1 FROM T_ITEM_SERIAL WHERE T_ID IN(SELECT TOP(@QTY) T_ID FROM T_ITEM_SERIAL WHERE B_CODE=21 AND IS_SALE=0 AND ITEM_CODE=@ITEM_CODE AND ACTIVE=1   ORDER BY T_ID ASC)
UPDATE  T_ITEM_SERIAL SET IS_SALE=1 WHERE T_ID IN(SELECT TOP(@QTY) T_ID FROM T_ITEM_SERIAL WHERE B_CODE=21 AND IS_SALE=0 AND ITEM_CODE=@ITEM_CODE AND ACTIVE=1    ORDER BY T_ID ASC)


END

END

SET @SUBMIT_FLAG=1
SET @SUBMIT_MSG=N''تمت العملية بنجاح''


FINSHSH:


COMMIT
	IF @@ERROR <>0
	BEGIN
	ROLLBACK 
	SET @SUBMIT_fLAG=0
	SET @SUBMIT_MSG=N''هنالك خطأ في اتمام العميلة''
	RETURN
	END

return
END


END	--END OF PROGRAM





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DIGIT_CARDS_CLIENT_ADD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DIGIT_CARDS_CLIENT_ADD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE PROCEDURE [dbo].[P_DIGIT_CARDS_CLIENT_ADD]
@CLIENT_NAME NVARCHAR(MAX),
@CLIENT_CURRANCY INT,
@CLIENT_BARCODE NVARCHAR(MAX)OUTPUT,
@SUBMIT_MSG NVARCHAR(MAX)OUTPUT,
@CLIENT_CODE INT OUTPUT




AS
declare
@CC_COUNT INT,
@CURRANCY_CODE  INT,
@CL_BEFORE INT,
@CN_NEW NVARCHAR(MAX),
@CN_OLD NVARCHAR(MAX),
@BR_OLD NVARCHAR(MAX),
@BR_NEW NVARCHAR(MAX)

BEGIN TRAN
BEGIN

SELECT @CC_COUNT=COUNT(CLIENT_CODE )FROM T_CLIENT WHERE CLIENT_NAME LIKE @CLIENT_NAME AND CLIENT_ACTIVE=1

IF @CC_COUNT>0
BEGIN
SET @SUBMIT_MSG=N''اسم العميل مضاف مسبقا''
SET @CLIENT_BARCODE=N''0''
SET @CLIENT_CODE=0
GOTO FINSHSH
END

DECLARE @Upper DECIMAL(18,0);
DECLARE @Lower DECIMAL(18,0);
SET @Lower = 1111111111;     /* -- The lowest random number */
SET @Upper = 9999999999;    /* -- The highest random number */
    
    

SELECT @CLIENT_BARCODE=CONVERT(NVARCHAR(MAX), @Lower + CONVERT(DECIMAL(18,0), (@Upper-@Lower+1)*RAND()));

SELECT @CC_COUNT=COUNT(CLIENT_CODE )FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1

IF @CC_COUNT>0
BEGIN
SELECT @CLIENT_BARCODE=CONVERT(NVARCHAR(MAX), @Lower + CONVERT(DECIMAL(18,0), (@Upper-@Lower+1)*RAND()));
END
SELECT @CURRANCY_CODE=@CLIENT_CURRANCY


SELECT @CLIENT_CODE= ISNULL(MAX(CLIENT_CODE),2100000) + 1 FROM T_CLIENT


if not exists (select * from T_ACCOUNTS where ACCOUNT_CODE = @CLIENT_CODE )  INSERT INTO [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [C_DATE], [ACCOUNT_ACTIVE]) 
VALUES (@CLIENT_CODE, @CLIENT_NAME, 21, 1, 1, @CURRANCY_CODE, 2, 3, N'''', 1, 1, GETDATE(), 1)  
else 
UPDATE [dbo].[T_ACCOUNTS] SET [ACCOUNT_CODE] = @CLIENT_CODE, [ACCOUNT_NAME] = @CLIENT_NAME, [ACCOUNT_PARENT] = 21, [TYPE_ACCOUNT_CODE] = 1, [BRANCH_CODE] = 1, [CURRANCY_CODE] = @CURRANCY_CODE, [FINAL_CODE] = 2, [ACCOUNT_LEVEL] = 3, [ACCOUNT_NOTE] = N'''', [SECURETY_CODE] = 1, [ACCOUNT_ENTITY] = 1,  [ACCOUNT_ACTIVE] = 1  WHERE ACCOUNT_CODE=@CLIENT_CODE  


if not exists (select * from T_CLIENT where CLIENT_CODE = @CLIENT_CODE )  INSERT INTO [dbo].[T_CLIENT] ([CLIENT_CODE], [CLIENT_NAME], [CLIENT_TYPE], [ACCOUNT_CODE], [CURRANCY_CODE], [MANDOOB_CODE], [CLIENT_PHONE], [CLIENT_PHONE_SMS], [CLIENT_EMAILE], [CLIENT_REGION], [CLIENT_ADDRESS], [CLIENT_BARCODE], [CLIENT_CARD], [CLIENT_NOTE], [CLIENT_PIN_CODE], [DISCOUNT_PERCENT], [SECURETY_CODE], [MAX_DEBIT],  [CLIENT_BUSINESS],[CLIENT_ACTIVE], [C_DATE], [C_USER], [LAT], [LNG], [TYPE_PRICE_CODE], [MAIN_ACCOUNT])
 VALUES (@CLIENT_CODE, @CLIENT_NAME, 1, @CLIENT_CODE, @CURRANCY_CODE, 1,  N'''', N'''', N'''',  N'''',  N'''', @CLIENT_BARCODE, N'''', N'''', N'''', 0, 1, 0,  N'''', 1, GETDATE(), N''APP'', N'''', N'''',1,0)  
 else 
 UPDATE [dbo].[T_CLIENT] SET [CLIENT_CODE] = @CLIENT_CODE, [CLIENT_NAME] = @CLIENT_NAME, [CLIENT_TYPE] = 1, [ACCOUNT_CODE] = @CLIENT_CODE, [CURRANCY_CODE] = @CURRANCY_CODE, [MANDOOB_CODE] = 1, [CLIENT_PHONE] = N'''', [CLIENT_PHONE_SMS] = N'''', [CLIENT_EMAILE] = N'''', [CLIENT_REGION] = N'''', [CLIENT_ADDRESS] =  N'''', [CLIENT_BARCODE] =@CLIENT_BARCODE, [CLIENT_CARD] = N'''', [CLIENT_NOTE] = N'''', [CLIENT_PIN_CODE] = N'''', [DISCOUNT_PERCENT] = 0, [SECURETY_CODE] = 1, [MAX_DEBIT] = 0, [CLIENT_BUSINESS] = N'''', [CLIENT_ACTIVE] = 1, [C_DATE] = GETDATE(), [C_USER] = N''APP'',TYPE_PRICE_CODE=1 ,MAIN_ACCOUNT=0  WHERE CLIENT_CODE=@CLIENT_CODE

--------------------------- ADD CLIENT DEBIT----------------------------

SET @CL_BEFORE=@CLIENT_CODE
SET @CN_NEW=@CLIENT_NAME+N'' - ''+N''ديون''
SET @BR_NEW=@CLIENT_BARCODE+N''-''+N''1''
SET @BR_OLD=@CLIENT_BARCODE
SELECT @CLIENT_CODE= ISNULL(MAX(CLIENT_CODE),2100000) + 1 FROM T_CLIENT

SET @CN_OLD=@CLIENT_NAME
SET @CLIENT_NAME=@CN_NEW
SET @CLIENT_BARCODE=@BR_NEW
if not exists (select * from T_ACCOUNTS where ACCOUNT_CODE = @CLIENT_CODE )  INSERT INTO [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [C_DATE], [ACCOUNT_ACTIVE]) 
VALUES (@CLIENT_CODE, @CLIENT_NAME, 21, 1, 1, @CURRANCY_CODE, 2, 3, N'''', 4, 1, GETDATE(), 1)  
else 
UPDATE [dbo].[T_ACCOUNTS] SET [ACCOUNT_CODE] = @CLIENT_CODE, [ACCOUNT_NAME] = @CLIENT_NAME, [ACCOUNT_PARENT] = 21, [TYPE_ACCOUNT_CODE] = 1, [BRANCH_CODE] = 1, [CURRANCY_CODE] = @CURRANCY_CODE, [FINAL_CODE] = 2, [ACCOUNT_LEVEL] = 3, [ACCOUNT_NOTE] = N'''', [SECURETY_CODE] = 1, [ACCOUNT_ENTITY] = 1,  [ACCOUNT_ACTIVE] = 1  WHERE ACCOUNT_CODE=@CLIENT_CODE  


if not exists (select * from T_CLIENT where CLIENT_CODE = @CLIENT_CODE )  INSERT INTO [dbo].[T_CLIENT] ([CLIENT_CODE], [CLIENT_NAME], [CLIENT_TYPE], [ACCOUNT_CODE], [CURRANCY_CODE], [MANDOOB_CODE], [CLIENT_PHONE], [CLIENT_PHONE_SMS], [CLIENT_EMAILE], [CLIENT_REGION], [CLIENT_ADDRESS], [CLIENT_BARCODE], [CLIENT_CARD], [CLIENT_NOTE], [CLIENT_PIN_CODE], [DISCOUNT_PERCENT], [SECURETY_CODE], [MAX_DEBIT],  [CLIENT_BUSINESS],[CLIENT_ACTIVE], [C_DATE], [C_USER], [LAT], [LNG], [TYPE_PRICE_CODE], [MAIN_ACCOUNT])
 VALUES (@CLIENT_CODE, @CLIENT_NAME, 1, @CLIENT_CODE, @CURRANCY_CODE, 1,  N'''', N'''', N'''',  N'''',  N'''', @CLIENT_BARCODE, N'''', N'''', N'''', 0, 4, 0,  N'''', 1, GETDATE(), N''APP'', N'''', N'''',1,@CL_BEFORE)  
 else 
 UPDATE [dbo].[T_CLIENT] SET [CLIENT_CODE] = @CLIENT_CODE, [CLIENT_NAME] = @CLIENT_NAME, [CLIENT_TYPE] = 1, [ACCOUNT_CODE] = @CLIENT_CODE, [CURRANCY_CODE] = @CURRANCY_CODE, [MANDOOB_CODE] = 1, [CLIENT_PHONE] = N'''', [CLIENT_PHONE_SMS] = N'''', [CLIENT_EMAILE] = N'''', [CLIENT_REGION] = N'''', [CLIENT_ADDRESS] =  N'''', [CLIENT_BARCODE] =@CLIENT_BARCODE, [CLIENT_CARD] = N'''', [CLIENT_NOTE] = N'''', [CLIENT_PIN_CODE] = N'''', [DISCOUNT_PERCENT] = 0, [SECURETY_CODE] = 1, [MAX_DEBIT] = 0, [CLIENT_BUSINESS] = N'''', [CLIENT_ACTIVE] = 1, [C_DATE] = GETDATE(), [C_USER] = N''APP'',TYPE_PRICE_CODE=1 ,MAIN_ACCOUNT=@CL_BEFORE  WHERE CLIENT_CODE=@CLIENT_CODE

SET @CLIENT_NAME=@CN_OLD
SET @CLIENT_CODE=@CL_BEFORE
 SET @CLIENT_BARCODE=@BR_OLD
   SET @SUBMIT_MSG=N''تمت العملية بنجاح''


 FINSHSH:

END	--END OF PROGRAM
commit




























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DIGIT_CARDS_CLIENT_BALANCE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DIGIT_CARDS_CLIENT_BALANCE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE PROCEDURE [dbo].[P_DIGIT_CARDS_CLIENT_BALANCE]
@CLIENT_BARCODE NVARCHAR(MAX),
@SUBMIT_MSG NVARCHAR(MAX)OUTPUT,
@SUBMIT_FLAG INT OUTPUT



AS
DECLARE 
@CC_COUNT INT, 
@CLIENT_CODE INT 
BEGIN TRAN
BEGIN
SET @SUBMIT_FLAG=0
 

SELECT @CC_COUNT=COUNT(CLIENT_CODE )FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1

IF @CC_COUNT=0
BEGIN
 SET @SUBMIT_MSG=N''باركود العميل غير صحيح''
SET @SUBMIT_FLAG=0
GOTO FINSHSH

END

ELSE

BEGIN
SELECT TOP(1) @CLIENT_CODE=ISNULL(CLIENT_CODE ,0)FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1
--SELECT TOP(1)  *  FROM   V_ACC3  WHERE   ACCOUNT_CODE=@CLIENT_CODE 
 SELECT TOP(1) [ACCOUNT_CODE]
      ,[ACCOUNT_NAME]
      ,[BALANCE]*-1 AS BALANCE
      ,[BALANCE_IQ]*-1 AS BALANCE_IQ
      ,[BALANCE_CUR]*-1 AS BALANCE_CUR
      ,[ACCOUNT_PARENT]
      ,[ACCOUNT_LEVEL]
      ,[SECURETY_CODE]
  FROM [dbo].[V_ACC3]   WHERE   ACCOUNT_CODE=@CLIENT_CODE 
 
  SET @SUBMIT_MSG=N''تمت العملية بنجاح''
SET @SUBMIT_FLAG=1
END

 


FINSHSH:

END	--END OF PROGRAM
commit




























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_DIGIT_CARDS_CLIENT_KASHIF]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_DIGIT_CARDS_CLIENT_KASHIF]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




CREATE PROCEDURE [dbo].[P_DIGIT_CARDS_CLIENT_KASHIF]
@CLIENT_BARCODE NVARCHAR(MAX),
@D1 DATE,
@D2 DATE,
@SUBMIT_MSG NVARCHAR(MAX)OUTPUT,
@SUBMIT_FLAG INT OUTPUT



AS
DECLARE 
@CC_COUNT INT, 
@CLIENT_CURRANCY INT, 
@CLIENT_CODE INT 

BEGIN TRAN
BEGIN
SET @SUBMIT_FLAG=0
 

SELECT @CC_COUNT=COUNT(CLIENT_CODE )FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1

IF @CC_COUNT=0
BEGIN
 SET @SUBMIT_MSG=N''باركود العميل غير صحيح''
SET @SUBMIT_FLAG=0
GOTO FINSHSH

END

ELSE

BEGIN
SELECT TOP(1) @CLIENT_CODE=ISNULL(CLIENT_CODE ,0),@CLIENT_CURRANCY =CURRANCY_CODE FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1
--SELECT TOP(1)  *  FROM   V_ACC3  WHERE   ACCOUNT_CODE=@CLIENT_CODE 
 

 
 IF OBJECT_ID(''tempdb..#TEMP_BOX'') IS NOT NULL DROP Table #TEMP_BOX
SELECT ROW_NUMBER() OVER(ORDER BY  BILL_DATE,B_CODE,BILL_NUMBER ASC) AS T_ID_BOX
      
		,[BILL_NUMBER]
		,[BILL_DATE]
		,[B_NAME]
		,[MOVE_NAME]
		,IIF(@CLIENT_CURRANCY=1,[DEBIT],[DEBIT_IQ]) AS AMO_DEBIT
		,IIF(@CLIENT_CURRANCY=1,[CREDIT],[CREDIT_IQ]) AS  AMO_CREDIT
		 ,[DESCRIPTION]
      		INTO #TEMP_BOX FROM V_BOX WHERE ACCOUNT_CODE=@CLIENT_CODE AND BILL_DATE BETWEEN @D1 AND @D2 order by BILL_DATE,B_CODE,BILL_NUMBER asc




DECLARE

@ID_REPORT numeric(18, 0),
@BALANCEEE_FIRST		float	,
@BALANCEEE_FIRST_IQ		float	,
@BALANCEEE_FIRST_CUR		float	





SELECT @BALANCEEE_FIRST =ISNULL(SUM(DEBIT -CREDIT ),0) FROM T_BOX WHERE ACCOUNT_CODE=@CLIENT_CODE AND BILL_DATE < @D1 and ACTIVE=1
SELECT @BALANCEEE_FIRST_IQ =ISNULL(SUM(DEBIT_IQ -CREDIT_IQ ),0) FROM T_BOX WHERE ACCOUNT_CODE=@CLIENT_CODE AND BILL_DATE < @D1 and ACTIVE=1
SELECT @BALANCEEE_FIRST_CUR=ISNULL(SUM(DEBIT_CUR -CREDIT_CUR ),0) FROM T_BOX WHERE ACCOUNT_CODE=@CLIENT_CODE AND BILL_DATE < @D1 and ACTIVE=1



SET @ID_REPORT=0

INSERT INTO #TEMP_BOX
           ([T_ID_BOX]
		,[BILL_NUMBER]
		,[BILL_DATE]
		,[B_NAME]
		,[MOVE_NAME]
		,[AMO_DEBIT]
		,[AMO_CREDIT]
		 ,[DESCRIPTION])
     VALUES
           (@ID_REPORT
			,0
           ,@D1
           ,N''رصيد اولي''
           ,N'' ''
           ,IIF(@CLIENT_CURRANCY=1, IIF(@BALANCEEE_FIRST>=0,@BALANCEEE_FIRST,0) ,IIF(@BALANCEEE_FIRST_IQ>=0,@BALANCEEE_FIRST_IQ,0))
           ,IIF(@CLIENT_CURRANCY=1, IIF(@BALANCEEE_FIRST<0,@BALANCEEE_FIRST*-1,0) ,IIF(@BALANCEEE_FIRST_IQ<0,@BALANCEEE_FIRST_IQ*-1,0))
            , N''رصيد سابق ماقبل الفترة''
          )

     

 
SELECT * FROM #TEMP_BOX ORDER BY T_ID_BOX
DROP Table #TEMP_BOX
  SET @SUBMIT_MSG=N''تمت العملية بنجاح''
SET @SUBMIT_FLAG=1
END

FINSHSH:

END	--END OF PROGRAM
commit





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_FILL_UNIT_FORM]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_FILL_UNIT_FORM]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_FILL_UNIT_FORM]
    @ITEM_CODE INT,
    @USER_CODE INT,
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN

    SET NOCOUNT ON;

    BEGIN TRY

        SET @SUBMIT_FLAG = 0;

        -- تنظيف البيانات السابقة الخاصة بالمستخدم
        DELETE FROM T_UNIT_FORM
        WHERE USER_CODE = @USER_CODE;

        -- تعبئة البيانات الجديدة
        INSERT INTO [dbo].[T_UNIT_FORM] (
            [USER_CODE],
            [STORE_NAME],
            [UNIT_CODE],
            [UNIT_NAME],
            [BALANCE],
            [UNIT_QTY]
        )
        SELECT
            @USER_CODE,
            STORE_NAME,
            UNIT_CODE,
            UNIT_NAME,
            BALANCE,
            UNIT_QTY
        FROM V_STORE_BOX_STORE
        WHERE ITEM_CODE = @ITEM_CODE AND STORE_CODE > -10;

        SET @SUBMIT_FLAG = 1;

    END TRY

    BEGIN CATCH
        SET @SUBMIT_FLAG = 0;
        -- يمكنك إضافة سجل للأخطاء هنا إذا رغبت
        THROW; -- أو يمكنك استخدام RAISERROR حسب تفضيلاتك
    END CATCH

END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_FILL_UNIT_FORM_INFO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_FILL_UNIT_FORM_INFO]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_FILL_UNIT_FORM_INFO]
    @CLIENT_CODE INT,
    @ITEM_CODE INT,
    @USER_CODE INT,
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET @SUBMIT_FLAG = 0;

    BEGIN TRY
        -- حذف البيانات السابقة للمستخدم
        DELETE FROM T_UNIT_FORM_INFO WHERE USER_CODE = @USER_CODE;

        -- تعريف المتغيرات لتخزين النتائج الوسيطة
        DECLARE @LAST_SALE NVARCHAR(MAX),
                @LAST_DIFF FLOAT,
                @SELL_PERCENT NVARCHAR(MAX),
                @QTY_SELL_PERCENT FLOAT,
                @LAST_BILL_DATE NVARCHAR(MAX),
                @LAST_PRICE FLOAT,
                @BEST_CLIENT_NAME NVARCHAR(MAX),
                @BEST_CLIENT_QTY FLOAT,
                @MAX_SELL NVARCHAR(MAX),
                @MIN_SELL NVARCHAR(MAX),
                @UUNIT_NAME NVARCHAR(MAX),
                @UNIT_QTY FLOAT,
                @UNIT_NAME NVARCHAR(MAX);

        -- استرجاع البيانات من V_ITEM_UNIT_FORM_INFO باستخدام (NOLOCK)
        SELECT TOP (1)
            @LAST_SALE = [LAST_SALE],
            @LAST_DIFF = ISNULL([LAST_DIFF], 0),
            @SELL_PERCENT = [SELL_PERCENT],
            @QTY_SELL_PERCENT = ISNULL(QTY_SELL_PERCENT, 0),
            @MAX_SELL = [MAX_SELL],
            @MIN_SELL = [MIN_SELL],
            @UUNIT_NAME = [UUNIT_NAME],
            @UNIT_QTY = [UNIT_QTY]
        FROM [dbo].[V_ITEM_UNIT_FORM_INFO] WITH (NOLOCK)
        WHERE ITEM_CODE = @ITEM_CODE;

        -- إدراج معلومات "أيام الركود"
        INSERT INTO [dbo].[T_UNIT_FORM_INFO] ([USER_CODE], [L_NAME], [INFO_NAME], [VALUE_ID], [VALUE_NAME])
        VALUES (@USER_CODE, N''ايام الركود'', @LAST_SALE, @LAST_DIFF, N''يوم'');

        -- إدراج معلومات "نسبة بيع المنتج"
        INSERT INTO [dbo].[T_UNIT_FORM_INFO] ([USER_CODE], [L_NAME], [INFO_NAME], [VALUE_ID], [VALUE_NAME])
        VALUES (@USER_CODE, N''نسبة بيع المنتج'', @SELL_PERCENT, @QTY_SELL_PERCENT, N''عدد'');

        -- إدراج معلومات "اخر سعر بيع للعميل" في حال كان CLIENT_CODE غير 0
        IF @CLIENT_CODE <> 0
        BEGIN
            SELECT TOP (1)
                @LAST_BILL_DATE = ISNULL(CAST(BILL_DATE AS NVARCHAR(MAX)), N''''),
                @LAST_PRICE = ISNULL(PRICE, 0)
            FROM [dbo].[V_SALES_DETAILS] WITH (NOLOCK)
            WHERE ITEM_CODE = @ITEM_CODE AND CLIENT_CODE = @CLIENT_CODE
            ORDER BY BILL_NUMBER DESC;

            INSERT INTO [dbo].[T_UNIT_FORM_INFO] ([USER_CODE], [L_NAME], [INFO_NAME], [VALUE_ID], [VALUE_NAME])
            VALUES (@USER_CODE, N''اخر سعر بيع للعميل'', @LAST_BILL_DATE, @LAST_PRICE, N''سعر'');
        END;

        -- استرجاع بيانات أفضل عميل للمنتج باستخدام (NOLOCK)
        SELECT TOP (1)
            @BEST_CLIENT_NAME = CLIENT_NAME,
            @BEST_CLIENT_QTY = ISNULL(SUM(QTY * UNIT_QTY), 0)
        FROM dbo.V_SALES_DETAILS WITH (NOLOCK)
        WHERE ITEM_CODE = @ITEM_CODE AND CLIENT_CODE <> 2100000
        GROUP BY CLIENT_NAME, ITEM_CODE, ITEM_NAME
        ORDER BY SUM(QTY * UNIT_QTY) DESC;

        -- إدراج معلومات "افضل عميل لهذا المنتج"
        INSERT INTO [dbo].[T_UNIT_FORM_INFO] ([USER_CODE], [L_NAME], [INFO_NAME], [VALUE_ID], [VALUE_NAME])
        VALUES (@USER_CODE, N''افضل عميل لهذا المنتج'', @BEST_CLIENT_NAME, @BEST_CLIENT_QTY, N''عدد'');

        -- إدراج معلومات "اعلى سعر بيع للمنتج"
        INSERT INTO [dbo].[T_UNIT_FORM_INFO] ([USER_CODE], [L_NAME], [INFO_NAME], [VALUE_ID], [VALUE_NAME])
        VALUES (@USER_CODE, N''اعلى سعر بيع للمنتج'', @MAX_SELL, 0, N''سعر'');

        -- إدراج معلومات "اقل سعر بيع للمنتج"
        INSERT INTO [dbo].[T_UNIT_FORM_INFO] ([USER_CODE], [L_NAME], [INFO_NAME], [VALUE_ID], [VALUE_NAME])
        VALUES (@USER_CODE, N''اقل سعر بيع للمنتج'', @MIN_SELL, 0, N''سعر'');

        -- استرجاع بيانات "التعبئة" من T_ITEM_UNIT باستخدام (NOLOCK)
        SELECT TOP (1)
            @UNIT_NAME = UNIT_NAME
        FROM T_ITEM_UNIT WITH (NOLOCK)
        WHERE ITEM_CODE = @ITEM_CODE AND UNIT_CODE = 1;

        -- إدراج معلومات "التعبئة"
        INSERT INTO [dbo].[T_UNIT_FORM_INFO] ([USER_CODE], [L_NAME], [INFO_NAME], [VALUE_ID], [VALUE_NAME])
        VALUES (@USER_CODE, N''التعبئة'', @UUNIT_NAME, @UNIT_QTY, @UNIT_NAME);

        -- تعيين العلم للدلالة على النجاح
        SET @SUBMIT_FLAG = 1;
    END TRY
    BEGIN CATCH
        -- في حال حدوث خطأ، يمكن تسجيله أو التعامل معه حسب الحاجة
        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_FIX_ERROR_T_STORE_BOX_SALES_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_FIX_ERROR_T_STORE_BOX_SALES_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[P_FIX_ERROR_T_STORE_BOX_SALES_DETAILS]


@SUBMIT_FLAG INT OUTPUT

AS


DECLARE BOX_CURSOR CURSOR FOR SELECT  BILL_NUMBER,ITEM_CODE FROM [V_A_ERROR_T_STORE_BOX_SALES_DETAILS]   ;


DECLARE
@ITEM_CODE_CURSOR INT,
@BILL_NUMBER_CURSOR INT,
@QTY_CURSOR  float

BEGIN
SET @SUBMIT_FLAG=0

   
OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @BILL_NUMBER_CURSOR,@ITEM_CODE_CURSOR
WHILE @@FETCH_STATUS = 0
BEGIN
 
DELETE FROM T_STORE_BOX WHERE BILL_NUMBER = @BILL_NUMBER_CURSOR AND B_CODE=2 AND ITEM_CODE=@ITEM_CODE_CURSOR
  INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[ACTIVE])
		   SELECT [BILL_BRANCH]
      ,[BILL_NUMBER]
	  ,(SELECT TOP(1) BILL_DATE FROM T_SALES WHERE BILL_NUMBER = @BILL_NUMBER_CURSOR ORDER BY BILL_NUMBER DESC)
	  ,2
	  ,0
	 ,[STORE_CODE]
	  ,NULL
	  ,[ITEM_CODE]
     ,(SELECT TOP(1) UNIT_CODE FROM T_ITEM_UNIT WHERE (ITEM_CODE= (SELECT TOP(1) ITEM_CODE FROM [dbo].[T_SALES_DETAILS] WHERE BILL_NUMBER = @BILL_NUMBER_CURSOR AND ITEM_CODE=[T_SALES_DETAILS].ITEM_CODE AND UNIT_NAME = [T_SALES_DETAILS].UNIT_NAME) ))
      ,0
	  ,[TOTAL_QTY]
      ,[UNIT_QTY]
      ,1
      
  FROM [dbo].[T_SALES_DETAILS] WHERE BILL_NUMBER = @BILL_NUMBER_CURSOR  AND ITEM_CODE=@ITEM_CODE_CURSOR AND ACTIVE=1


FETCH NEXT FROM BOX_CURSOR INTO  @BILL_NUMBER_CURSOR,@ITEM_CODE_CURSOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR



SET @SUBMIT_FLAG=1

END	--END OF PROGRAM





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GENERATE_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GENERATE_BARCODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_GENERATE_BARCODE]
    @CATEGORY_CODE INT,
    @ITEM_BARCODE  VARCHAR(20) OUTPUT  -- إخراج نصّي
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE 
        @P_VAL INT,
        @P_COUNT INT,
        @BARCODE_FROM BIGINT,
        @BARCODE_TO   BIGINT,
        @Lower BIGINT,
        @Upper BIGINT,
        @ITEM_BARCODE_NUM BIGINT,       -- حساب داخلي رقمي
        @tries INT = 0,
        @MAX_TRIES INT = 1000;

    -- 1) جلب إعداد التوليد
    SELECT @P_VAL = ISNULL(P_VALUE, 0)
    FROM dbo.T_PARAMETERS
    WHERE P_CODE = 3;

    -- نبدأ معاملة لحماية “أعلى قيمة + 1” من التنافس
    SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
    BEGIN TRAN;

    BEGIN TRY
        IF @P_VAL = 0
        BEGIN
            -- أعلى قيمة رقمية (من نص) بين 10000 و 99999 (1..5 خانات؟ الكود القديم يفلتر 1-5)
            SELECT @ITEM_BARCODE_NUM =
                ISNULL(
                    MAX(x.num), 10000
                ) + 1
            FROM (
                SELECT TRY_CONVERT(BIGINT, ITEM_BARCODE) AS num
                FROM dbo.T_ITEM_BARCODE WITH (UPDLOCK, HOLDLOCK)
                WHERE ITEM_BARCODE NOT LIKE ''%[^0-9]%''  -- أرقام فقط
                  AND LEN(ITEM_BARCODE) BETWEEN 1 AND 5
            ) AS x
            WHERE x.num BETWEEN 10000 AND 99999;
        END
        ELSE IF @P_VAL = 99
        BEGIN
            -- نطاق الفئة
            SELECT 
                @BARCODE_FROM = TRY_CONVERT(BIGINT, ISNULL(BARCODE_FROM, 0)),
                @BARCODE_TO   = TRY_CONVERT(BIGINT, ISNULL(BARCODE_TO, 0))
            FROM dbo.T_ITEM_CATEGORY
            WHERE CATEGORY_CODE = @CATEGORY_CODE;

            IF ISNULL(@BARCODE_FROM,0) > 0 AND ISNULL(@BARCODE_TO,0) >= @BARCODE_FROM
            BEGIN
                SET @Lower = @BARCODE_FROM;
                SET @Upper = @BARCODE_TO;
            END
            ELSE
            BEGIN
                SET @Lower = 10000;
                SET @Upper = 99999;
            END

            -- حاولة عشوائية مع سقف محاولات
            WHILE 1=1
            BEGIN
                SET @tries += 1;
                IF @tries > @MAX_TRIES
                BEGIN
                    -- نفد النطاق على الأرجح
                    THROW 50001, ''لا توجد أرقام شاغرة في النطاق المحدد للباركود.'', 1;
                END

                SET @ITEM_BARCODE_NUM = @Lower + (ABS(CHECKSUM(NEWID())) % (@Upper - @Lower + 1));

                SELECT @P_COUNT = COUNT(*)
                FROM dbo.T_ITEM_BARCODE WITH (UPDLOCK, HOLDLOCK)
                WHERE ITEM_BARCODE = CONVERT(VARCHAR(20), @ITEM_BARCODE_NUM);

                IF @P_COUNT = 0 BREAK;
            END
        END
        ELSE
        BEGIN
            -- من أعلى قيمة، مثل فرع ELSE القديم
            SELECT @ITEM_BARCODE_NUM =
                ISNULL(MAX(x.num), 10000) + 1
            FROM (
                SELECT TRY_CONVERT(BIGINT, ITEM_BARCODE) AS num
                FROM dbo.T_ITEM_BARCODE WITH (UPDLOCK, HOLDLOCK)
                WHERE ITEM_BARCODE NOT LIKE ''%[^0-9]%''
                  AND LEN(ITEM_BARCODE) BETWEEN 1 AND 5
            ) AS x
            WHERE x.num BETWEEN 10000 AND 99999;
        END

        -- تحقق نهائي ضد التكرار (ومحاولة تصحيح لو اصطدمنا أثناء التنافس)
        SET @tries = 0;
        WHILE 1=1
        BEGIN
            SELECT @P_COUNT = COUNT(*)
            FROM dbo.T_ITEM_BARCODE WITH (UPDLOCK, HOLDLOCK)
            WHERE ITEM_BARCODE = CONVERT(VARCHAR(20), @ITEM_BARCODE_NUM);

            IF @P_COUNT = 0 BREAK;

            SET @tries += 1;
            IF @tries > @MAX_TRIES
                THROW 50002, ''تعذر توليد باركود فريد بعد عدد كبير من المحاولات.'', 1;

            IF @P_VAL = 99
            BEGIN
                SET @ITEM_BARCODE_NUM = @Lower + (ABS(CHECKSUM(NEWID())) % (@Upper - @Lower + 1));
            END
            ELSE
            BEGIN
                -- اذهب إلى أعلى+1 مرة أخرى
                SELECT @ITEM_BARCODE_NUM =
                    ISNULL(MAX(x.num), 10000) + 1
                FROM (
                    SELECT TRY_CONVERT(BIGINT, ITEM_BARCODE) AS num
                    FROM dbo.T_ITEM_BARCODE WITH (UPDLOCK, HOLDLOCK)
                    WHERE ITEM_BARCODE NOT LIKE ''%[^0-9]%''
                      AND LEN(ITEM_BARCODE) BETWEEN 1 AND 5
                ) AS x
                WHERE x.num BETWEEN 10000 AND 99999;
            END
        END

        -- مرّر الناتج كنص
        SET @ITEM_BARCODE = CONVERT(VARCHAR(20), @ITEM_BARCODE_NUM);

        COMMIT;
    END TRY
    BEGIN CATCH
        IF XACT_STATE() <> 0 ROLLBACK;
        THROW; -- ارمي الخطأ للأعلى
    END CATCH
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_AKSAT_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_AKSAT_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_GET_AKSAT_DETAILS]
    @D1 DATE
AS
BEGIN
    SET NOCOUNT ON;
    
    BEGIN TRY
        -- (اختياري) حذف البيانات السابقة من التقرير
        DELETE FROM T_AKSAT_DETAILS;
        
        INSERT INTO T_AKSAT_DETAILS (
            T_ID,
            CLIENT_NAME,
            CLIENT_PHONE,
            CLIENT_REGION,
            CLIENT_ADDRESS,
            CLIENT_BUSINESS,
            KAFEL_NAME,
            AKSAT_MONTH,
            TOTAL_AKSAT,
            TOTAL_CASH,
            TOTAL_REMAIN,
            AKSAT_REMAIN,
            DATE_DUE,
            DATE_DUE_ANME,
            ITEM_NAME_LIST
        )
        SELECT
            ROW_NUMBER() OVER (ORDER BY A.DATE_DUE ASC) AS T_ID,
            C.CLIENT_NAME,
            C.CLIENT_PHONE,
            C.CLIENT_REGION,
             C.CLIENT_ADDRESS,  
            C.CLIENT_BUSINESS,
            K.KAFEL_NAME,
            A.AMO_REMAIN AS AKSAT_MONTH,
            A.TOTAL_INVOICE AS TOTAL_AKSAT,
            (SELECT SUM(ISNULL(AMO_CASH,0))
             FROM T_AKSAT X WITH (NOLOCK)
             WHERE X.BILL_NUMBER = A.BILL_NUMBER) AS TOTAL_CASH,
            (SELECT SUM(ISNULL(AMO_REMAIN,0))
             FROM T_AKSAT X WITH (NOLOCK)
             WHERE X.BILL_NUMBER = A.BILL_NUMBER) AS TOTAL_REMAIN,
            (SELECT COUNT(T_ID)
             FROM T_AKSAT X WITH (NOLOCK)
             WHERE X.BILL_NUMBER = A.BILL_NUMBER AND CASH_CODE <> 2) AS AKSAT_REMAIN,
            A.DATE_DUE,
            DATENAME(WEEKDAY, A.DATE_DUE) AS DATE_DUE_ANME,
            (
              SELECT STUFF((
                     SELECT CHAR(13) + CHAR(10) + ITEM_NAME
                     FROM T_SALES_DETAILS
                     WHERE BILL_NUMBER = A.BILL_NUMBER
                     ORDER BY T_ID
                     FOR XML PATH(''''), TYPE
                    ).value(''.'', ''NVARCHAR(MAX)''), 1, 2, '''')
            ) AS ITEM_NAME_LIST
        FROM T_AKSAT A WITH (NOLOCK)
        LEFT JOIN T_CLIENT C WITH (NOLOCK) ON C.CLIENT_CODE = A.ACCOUNT_CODE
        LEFT JOIN T_KAFEL K WITH (NOLOCK) ON K.KAFEL_CODE = A.KAFEL_CODE
        WHERE DATEDIFF(DAY, A.DATE_DUE, @D1) >= 0
          AND A.CASH_CODE < 2;
    
    END TRY
    BEGIN CATCH
        -- يمكن هنا تسجيل الخطأ أو التعامل معه حسب الحاجة
        THROW;
    END CATCH
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_BALANCE_CLIENT_BEFORE_BILL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_BALANCE_CLIENT_BEFORE_BILL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'









CREATE PROCEDURE [dbo].[P_GET_BALANCE_CLIENT_BEFORE_BILL]
    @BILL_BRANCH NVARCHAR(50),
    @B_CODE INT,
    @ACCOUNT_CODE INT, 
    @B_USA FLOAT OUTPUT,
    @B_IQ FLOAT OUTPUT,
    @B_CUR FLOAT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    -- تعيين القيم الافتراضية
    SET @B_USA = 0;
    SET @B_IQ = 0;
    SET @B_CUR = 0;

    -- إذا كان حساب العميل يساوي 2100000، يتم إعادة 0 لجميع القيم
    IF @ACCOUNT_CODE = 2100000
    BEGIN 
        RETURN;
    END

    -- حساب إجمالي الرصيد للعميل ثم خصم الرصيد الخاص بالفاتورة حسب الفرع والكود المحدد
    SELECT 
         @B_USA = ISNULL(SUM(B_USA), 0)
                   - ISNULL(SUM(CASE WHEN BILL_BRANCH LIKE @BILL_BRANCH AND B_CODE = @B_CODE THEN B_USA ELSE 0 END), 0),
         @B_IQ  = ISNULL(SUM(B_IQ), 0)
                   - ISNULL(SUM(CASE WHEN BILL_BRANCH LIKE @BILL_BRANCH AND B_CODE = @B_CODE THEN B_IQ ELSE 0 END), 0),
         @B_CUR = ISNULL(SUM(B_CUR), 0)
                   - ISNULL(SUM(CASE WHEN BILL_BRANCH LIKE @BILL_BRANCH AND B_CODE = @B_CODE THEN B_CUR ELSE 0 END), 0)
    FROM T_BOX
    WHERE ACCOUNT_CODE = @ACCOUNT_CODE
      AND ACTIVE = 1;

END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_BALANCE_CLIENT_BEFORE_BILL_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_BALANCE_CLIENT_BEFORE_BILL_SANAD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[P_GET_BALANCE_CLIENT_BEFORE_BILL_SANAD]
    @BILL_BRANCH NVARCHAR(50),
    @B_CODE INT,
    @ACCOUNT_CODE INT, 
    @B_USA FLOAT OUTPUT,
    @B_IQ FLOAT OUTPUT,
    @B_CUR FLOAT OUTPUT,
    @A_USA FLOAT OUTPUT,
    @A_IQ FLOAT OUTPUT,
    @A_CUR FLOAT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    -- تعيين القيم الافتراضية
    SET @B_USA = 0;
    SET @B_IQ  = 0;
    SET @B_CUR = 0;
    SET @A_USA = 0;
    SET @A_IQ  = 0;
    SET @A_CUR = 0;

    -- إذا كان رقم الحساب يساوي 2100000، يتم إعادة 0 لجميع المتغيرات
    IF @ACCOUNT_CODE = 2100000
    BEGIN 
        RETURN;
    END

    -- حساب الإجماليات من T_BOX (للعميل النشط)
    SELECT
        @A_USA = ISNULL(SUM(B_USA), 0),
        @A_IQ  = ISNULL(SUM(B_IQ), 0),
        @A_CUR = ISNULL(SUM(B_CUR), 0),
        @B_USA = ISNULL(SUM(B_USA), 0)
                - ISNULL(SUM(CASE WHEN BILL_BRANCH LIKE @BILL_BRANCH AND B_CODE = @B_CODE THEN B_USA ELSE 0 END), 0),
        @B_IQ  = ISNULL(SUM(B_IQ), 0)
                - ISNULL(SUM(CASE WHEN BILL_BRANCH LIKE @BILL_BRANCH AND B_CODE = @B_CODE THEN B_IQ ELSE 0 END), 0),
        @B_CUR = ISNULL(SUM(B_CUR), 0)
                - ISNULL(SUM(CASE WHEN BILL_BRANCH LIKE @BILL_BRANCH AND B_CODE = @B_CODE THEN B_CUR ELSE 0 END), 0)
    FROM T_BOX
    WHERE ACCOUNT_CODE = @ACCOUNT_CODE
      AND ACTIVE = 1;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_BALANCE_CLIENT_DISCOUNT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_BALANCE_CLIENT_DISCOUNT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[P_GET_BALANCE_CLIENT_DISCOUNT]
    @D1 DATE,
    @D2 DATE,
    @BILL_BRANCH NVARCHAR(50),
    @B_CODE INT,
    @ACCOUNT_CODE INT, 
    @B_USA FLOAT OUTPUT,
    @B_IQ FLOAT OUTPUT,
    @B_CUR FLOAT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    -- تعيين القيم الافتراضية
    SET @B_USA = 0;
    SET @B_IQ  = 0;
    SET @B_CUR = 0;

    IF @ACCOUNT_CODE = 2100000
    BEGIN 
        RETURN;
    END

    SELECT
         @B_USA = ISNULL(SUM(CREDIT), 0)
                  - ISNULL(SUM(CASE WHEN BILL_BRANCH LIKE @BILL_BRANCH AND B_CODE = @B_CODE THEN CREDIT ELSE 0 END), 0),
         @B_IQ  = ISNULL(SUM(CREDIT_IQ), 0)
                  - ISNULL(SUM(CASE WHEN BILL_BRANCH LIKE @BILL_BRANCH AND B_CODE = @B_CODE THEN CREDIT_IQ ELSE 0 END), 0),
         @B_CUR = ISNULL(SUM(CREDIT_CUR), 0)
                  - ISNULL(SUM(CASE WHEN BILL_BRANCH LIKE @BILL_BRANCH AND B_CODE = @B_CODE THEN CREDIT_CUR ELSE 0 END), 0)
    FROM T_BOX
    WHERE ACCOUNT_CODE = @ACCOUNT_CODE
      AND ACTIVE = 1
      AND BILL_DATE BETWEEN @D1 AND @D2;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_BALANCE_ITEM_STORE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_BALANCE_ITEM_STORE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[P_GET_BALANCE_ITEM_STORE]
    @BILL_BRANCH NVARCHAR(50),
    @B_CODE INT,
    @STORE_CODE INT,
    @ITEM_CODE INT, 
    @UNIT_NAME NVARCHAR(MAX),
    @BALANCE FLOAT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ITEM_TYPE INT;

    -- تهيئة القيمة الافتراضية للباولانس
    SET @BALANCE = 0;

    -- الحصول على نوع العنصر من T_ITEMS
    SELECT TOP(1) @ITEM_TYPE = TYPE_CODE
    FROM T_ITEMS
    WHERE ITEM_CODE = @ITEM_CODE;

    -- إذا كان ITEM_CODE صفر أو النوع يساوي 5، يتم تعيين قيمة ثابتة
    IF @ITEM_CODE = 0 OR @ITEM_TYPE = 5
    BEGIN
         SET @BALANCE = 100000;
    END
    ELSE
    BEGIN
         -- حساب الرصيد الحالي للعنصر من عرض V_STORE_BOX_STORE
         -- ثم طرح مجموع المبالغ من T_STORE_BOX (يتم ضرب SUM(BALANCE_M) في -1 تعبيرياً)
         SELECT 
            @BALANCE = ISNULL(
                          (SELECT TOP(1) BALANCE
                           FROM V_STORE_BOX_STORE
                           WHERE ITEM_CODE = @ITEM_CODE
                             AND UNIT_NAME LIKE @UNIT_NAME
                             AND STORE_CODE = @STORE_CODE
                          ), 0)
                       - ISNULL(
                          (SELECT SUM(BALANCE_M)
                           FROM T_STORE_BOX
                           WHERE ITEM_CODE = @ITEM_CODE
                             AND STORE_CODE = @STORE_CODE
                             AND BILL_BRANCH LIKE @BILL_BRANCH
                             AND B_CODE = @B_CODE
                             AND ACTIVE = 1
                          ), 0);
    END
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_BALANCE_ITEM_STORE_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_BALANCE_ITEM_STORE_TEMP]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[P_GET_BALANCE_ITEM_STORE_TEMP]
    @BILL_BRANCH NVARCHAR(50),
    @B_CODE INT,
    @STORE_CODE INT,
    @ITEM_CODE INT, 
    @UNIT_NAME NVARCHAR(MAX),
    @BALANCE FLOAT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ITEM_TYPE INT;
    SET @BALANCE = 0;

    -- الحصول على نوع العنصر من جدول T_ITEMS
    SELECT TOP(1)
        @ITEM_TYPE = TYPE_CODE
    FROM T_ITEMS
    WHERE ITEM_CODE = @ITEM_CODE;

    IF @ITEM_TYPE = 5
    BEGIN
        SET @BALANCE = 100000;
    END
    ELSE
    BEGIN
        SELECT @BALANCE =
            ISNULL(
                (
                    SELECT TOP(1) ISNULL(BALANCE, 0)
                    FROM V_STORE_BOX_STORE
                    WHERE ITEM_CODE = @ITEM_CODE
                      AND UNIT_NAME LIKE @UNIT_NAME
                      AND STORE_CODE = @STORE_CODE
                )
                -
                (
                    SELECT ISNULL(SUM(BALANCE_M), 0)
                    FROM T_STORE_BOX
                    WHERE ITEM_CODE = @ITEM_CODE
                      AND STORE_CODE = @STORE_CODE
                      AND BILL_BRANCH LIKE @BILL_BRANCH
                      AND B_CODE = @B_CODE
                      AND ACTIVE = 1
                ), 0);
    END
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_CLIENT_GIM]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_CLIENT_GIM]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[P_GET_CLIENT_GIM]
@CLIENT_BARCODE NVARCHAR(MAX),
@ITEM_BARCODE  NVARCHAR(MAX),
@CLIENT_IMG_PATH  NVARCHAR(MAX) OUTPUT,
@SUBMIT_FLAG INT OUTPUT



AS
DECLARE 
@BILL_BRANCH NVARCHAR(MAX),
@CLIENT_CODE INT,
@CC_COUNT INT,
@CC_ITEM INT,
@ITEM_CC INT,
@CC_PATROL INT
BEGIN
SET @CLIENT_IMG_PATH=N''https://img.autobytel.com/2022/audi/e-tron-gt/2-800-oem-exterior-front1300-97050.jpg''
SET @SUBMIT_FLAG=0


SELECT @CC_COUNT=COUNT(CLIENT_CODE )FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1
 
IF @CC_COUNT=0
BEGIN
SET @CLIENT_IMG_PATH=N''https://img.autobytel.com/2022/audi/e-tron-gt/2-800-oem-exterior-front1300-97050.jpg''
SET @SUBMIT_FLAG=0 -- العميل غير موجود
RETURN

END

ELSE

BEGIN

SELECT TOP(1) @CLIENT_CODE=ISNULL(CLIENT_CODE ,0)FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1
SELECT   @CC_PATROL=COUNT(BILL_NUMBER ) FROM   V_SALES_PATROL  WHERE  IS_ARSHEF=0 AND ACTIVE =1 AND  DATE_NEXT>GETDATE() AND CLIENT_CODE=@CLIENT_CODE 
IF @CC_PATROL=0
BEGIN
SET @CLIENT_IMG_PATH=N''https://img.autobytel.com/2022/audi/e-tron-gt/2-800-oem-exterior-front1300-97050.jpg''
SET @SUBMIT_FLAG=2 -- العميل منتهي الاشتراك
RETURN

END
ELSE
BEGIN

--SELECT  TOP(1) @BILL_BRANCH=BILL_BRANCH FROM  V_SALES_PATROL  WHERE  IS_ARSHEF=0 AND ACTIVE =1 AND  DATE_NEXT<=GETDATE() AND CLIENT_CODE=@CLIENT_CODE  ORDER BY DATE_NEXT ASC
IF @ITEM_BARCODE =N''0''
BEGIN
SET @CLIENT_IMG_PATH=N''https://img.autobytel.com/2022/audi/e-tron-gt/2-800-oem-exterior-front1300-97050.jpg''
SET @SUBMIT_FLAG=1 -- مسموح بالدخول

INSERT INTO [dbo].[T_CLIENT_GIM_ENTRY]
           ([ACCOUNT_CODE]
           ,[DATE_ENTRY]
           ,[ITEM_CODE])
     VALUES
           (@CLIENT_CODE
           ,GETDATE() 
           ,0)
RETURN
END
ELSE
BEGIN
SELECT   @CC_ITEM=COUNT(BILL_NUMBER ) FROM   V_SALES_PATROL  WHERE  IS_ARSHEF=0 AND ACTIVE =1 AND  DATE_NEXT>GETDATE() AND CLIENT_CODE=@CLIENT_CODE AND ITEM_BARCODE LIKE @ITEM_BARCODE 
IF @CC_ITEM=0 
BEGIN
SET @CLIENT_IMG_PATH=N''https://img.autobytel.com/2022/audi/e-tron-gt/2-800-oem-exterior-front1300-97050.jpg''
SET @SUBMIT_FLAG=2 -- الايتم (الاشتراك)غير موجود ولايسمح بالدخول
RETURN
END
ELSE
BEGIN
SET @CLIENT_IMG_PATH=N''https://img.autobytel.com/2022/audi/e-tron-gt/2-800-oem-exterior-front1300-97050.jpg''
SET @SUBMIT_FLAG=1  -- مسموح بالدخول
SELECT  TOP(1) @ITEM_CC=ITEM_CODE FROM   V_SALES_PATROL  WHERE  IS_ARSHEF=0 AND ACTIVE =1 AND  DATE_NEXT>GETDATE() AND CLIENT_CODE=@CLIENT_CODE AND ITEM_BARCODE LIKE @ITEM_BARCODE 
INSERT INTO [dbo].[T_CLIENT_GIM_ENTRY]
           ([ACCOUNT_CODE]
           ,[DATE_ENTRY]
           ,[ITEM_CODE])
     VALUES
           (@CLIENT_CODE
           ,GETDATE() 
           ,@ITEM_CC)
RETURN
END
END



END

END





END	--END OF PROGRAM






























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_CLIENT_PLAYER]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_CLIENT_PLAYER]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE PROCEDURE [dbo].[P_GET_CLIENT_PLAYER]
@CLIENT_BARCODE NVARCHAR(MAX),
@ITEM_BARCODE  NVARCHAR(MAX),
@USER_CODE INT,
@BALANCE float OUTPUT,
@SUBMIT_FLAG INT OUTPUT



AS
DECLARE 
@ITEM_PRICE float ,
@ITEM_COST float ,
@CLIENT_CODE INT,
@CC_COUNT INT,
@CC_ITEM INT,
@UNIT_CODE INT,
@CC_COUNT_TIME INT,
@ITEM_NAME  NVARCHAR(MAX),
@UNIT_NAME  NVARCHAR(MAX),
@FROM_TIME TIME(7),
@TO_TIME TIME(7),
@ITEM_CODE INT,
@IS_GATE INT,
@CLIENT_TYPE_CODE INT
BEGIN TRAN
BEGIN
SET @SUBMIT_FLAG=0
SET @BALANCE=0

SELECT @IS_GATE=ISNULL(P_VALUE,0)  FROM T_PARAMETERS WHERE P_CODE=6
IF @IS_GATE=0 
BEGIN
SET @SUBMIT_FLAG=88 --GATE IS OFF
GOTO FINSHSH
END
--------------------------CHECK minus BARCODE------------------------------------------------
IF CAST(@CLIENT_BARCODE AS decimal(18,0))<0
BEGIN
SET @CLIENT_BARCODE=CAST((CAST(@CLIENT_BARCODE AS decimal(18,0))+4294967296) AS nvarchar(MAX)) 
END
PRINT @CLIENT_BARCODE
--------------------------CHECK PIN CODE------------------------------------------------
SELECT @CC_COUNT=COUNT(CLIENT_CODE )FROM T_CLIENT WHERE CLIENT_PIN_CODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1

IF @CC_COUNT>0
BEGIN

SELECT TOP(1)@CLIENT_CODE=CLIENT_CODE, @FROM_TIME=FROM_TIME,@TO_TIME=TO_TIME FROM T_CLIENT WHERE CLIENT_PIN_CODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1

SELECT @CC_COUNT_TIME=COUNT(CLIENT_CODE ) FROM T_CLIENT WHERE CONVERT(time, GETDATE()) BETWEEN @FROM_TIME AND @TO_TIME
IF @CC_COUNT_TIME=0
BEGIN

SET @SUBMIT_FLAG=0
 
GOTO FINSHSH

END

ELSE
BEGIN
SET @BALANCE=1000000
GOTO JUMP_PIN_CODE
END

END
----------------------END------CHECK PIN CODE------------------------------------------------
SELECT @CC_COUNT=COUNT(CLIENT_CODE )FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1

IF @CC_COUNT=0
BEGIN

SET @SUBMIT_FLAG=0
GOTO FINSHSH

END

ELSE

BEGIN
SELECT TOP(1) @CLIENT_CODE=ISNULL(CLIENT_CODE ,0),@CLIENT_TYPE_CODE=CLIENT_TYPE FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1
IF @CLIENT_TYPE_CODE=9 -- MASTER
BEGIN
SET @SUBMIT_FLAG=1 -- MASTER
GOTO FINSHSH
END

SELECT TOP(1)  @BALANCE=ISNULL(BALANCE_CUR ,0)*-1  FROM   V_ACC3  WHERE   ACCOUNT_CODE=@CLIENT_CODE 
JUMP_PIN_CODE:
SELECT @CC_ITEM=count(ITEM_CODE)  FROM T_ITEMS WHERE ACTIVE=1 AND ITEM_CODE>0 AND ITEM_BARCODE LIKE @ITEM_BARCODE
if @CC_ITEM=0
begin
SET @SUBMIT_FLAG=0
GOTO FINSHSH
end
ELSE
BEGIN

SELECT @ITEM_PRICE=ISNULL(SELL,0),@ITEM_COST=ISNULL(COST,0),@ITEM_CODE=ITEM_CODE,@ITEM_NAME=ITEM_NAME  FROM T_ITEMS WHERE ACTIVE=1 AND ITEM_CODE>0 AND ITEM_BARCODE LIKE @ITEM_BARCODE
SELECT @UNIT_NAME=UNIT_NAME,@UNIT_CODE=UNIT_CODE  FROM T_ITEM_BARCODE WHERE ITEM_BARCODE LIKE @ITEM_BARCODE

IF @BALANCE<@ITEM_PRICE
BEGIN

SET @SUBMIT_FLAG=2
GOTO FINSHSH

END
ELSE
BEGIN
DECLARE
@CURRANCY_CODE INT,
@CURRANCY_USA float	,
@CURRANCY_IQ float	,
@CURRANCY_EQUAL float	,
@MAX_BILL INT,
@USER_CREATE nvarchar(MAX),	
@CLIENT_NAME nvarchar(MAX),	
@COMPANY_TITAL NVARCHAR(MAX)
SELECT @COMPANY_TITAL=COMPANY_TITAL FROM T_COMPANY WHERE T_ID=1
SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
SELECT @CLIENT_NAME=CLIENT_NAME FROM T_CLIENT WHERE CLIENT_CODE=@CLIENT_CODE
SELECT @USER_CREATE=[USER_NAME] FROM T_USERS WHERE  USER_CODE=@USER_CODE

REBILL:

SELECT @MAX_BILL=ISNULL(MAX(BILL_NUMBER),0) + 1 FROM T_SALES
INSERT INTO [dbo].[T_SALES]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_INVOICE]
           ,[BILL_DATE]
           ,[OFFER_CODE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[CLIENT_CODE]
           ,[CLIENT_NAME]
           ,[CLIENT_PHONE]
           ,[CLIENT_ADRESS]
           ,[MANDOOB_CODE]
           ,[DESCRIPTION]
           ,[TYPE_PRICE_SELL]
           ,[STORE_CODE]
           ,[USER_CREATE]
           ,[SECURETY_CODE]
           ,[TOTAL_SALES]
           ,[DISCOUNT_ITEMS]
           ,[DISCOUNT_PERCENT]
           ,[DISCOUNT_AMOUNT]
           ,[TOTAL_DISCOUNT]
           ,[NET_SALES]
           ,[TOTAL_COST]
           ,[IVC_CODE]
           ,[DAY_CASH]
           ,[DATE_CASH]
           ,[TOT_CONV]
           ,[ACCOUNT_CODE]
           ,[CASH_USA]
           ,[REMAIN_USA]
           ,[CASH_IQ]
           ,[REMAIN_IQ]
           ,[C_DATE]
           ,[C_UPDATE]
           ,[USER_UPDATE]
           ,[ACTIVE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[FLAG_CASH]
           ,[IS_OUT]
           ,[CURRANCY_SALES])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,NULL
           ,GETDATE()
           ,1
           ,@CURRANCY_CODE
           ,1
           ,@CLIENT_CODE
           ,@CLIENT_NAME
            ,NULL
           ,NULL
           ,0
           ,NULL
           ,1
           ,0
           ,@USER_CREATE
           ,1
           ,@ITEM_PRICE
           ,0
           ,0
           ,0
           ,0
           ,@ITEM_PRICE
           ,@ITEM_COST
           ,2
           ,0
           ,GETDATE()
           ,NULL
           ,5000
           ,0
           ,0
           ,0
           ,0
           ,GETDATE()
           ,NULL
           ,NULL
           ,1
           ,0
           ,0
           ,1
           ,0
           ,1)

DECLARE
@COUNT_DETAILS INT
SELECT @COUNT_DETAILS=COUNT(T_ID) FROM T_SALES_DETAILS WHERE BILL_NUMBER=@MAX_BILL
IF @COUNT_DETAILS>0
BEGIN
DELETE FROM T_SALES WHERE BILL_NUMBER=@MAX_BILL
GOTO REBILL
END 

INSERT INTO [dbo].[T_SALES_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[TOTAL]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY]
           ,[ITEM_NOTE_SALES])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
           ,@ITEM_CODE
           ,@ITEM_NAME
           ,1
           ,@UNIT_NAME
           ,1
           ,0
           ,-999999
           ,NULL
           ,NULL
           ,@CURRANCY_CODE
           ,1
           ,@ITEM_COST
           ,@ITEM_PRICE
           ,@ITEM_PRICE
           ,0
           ,0
           ,GETDATE()
           ,1
           ,-999999
           ,NULL)
INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[C_DATE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
           ,GETDATE()
           ,2
           ,-999999
           ,0
           ,GETDATE()
           ,@ITEM_CODE
           ,@UNIT_CODE
           ,0
           ,1
           ,1
           ,GETDATE()
           ,0
           ,0
           ,1)



		   
IF @CURRANCY_CODE=1
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=1/NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_IQ
INSERT INTO [dbo].[T_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_STR]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[MOVE_CODE]
           ,[B_CODE]
           ,[BRANCH_CODE]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_DESCRIPTION]
           ,[DEBIT]
           ,[CREDIT]
           ,[DEBIT_IQ]
           ,[CREDIT_IQ]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[DESCRIPTION]
           ,[DEAL_CODE]
           ,[USER_CODE]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,@MAX_BILL
           ,GETDATE()
          ,GETDATE()
           ,0
           ,2
           ,1
           ,@CLIENT_CODE
           ,NULL
           ,@ITEM_PRICE
           ,0
           ,0
           ,0
           ,@CURRANCY_CODE
           ,@CURRANCY_EQUAL
           ,NULL
           ,0
           ,@USER_CODE
           ,GETDATE()
           ,1)


END

ELSE
BEGIN
SELECT @CURRANCY_USA=NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_USA

INSERT INTO [dbo].[T_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_STR]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[MOVE_CODE]
           ,[B_CODE]
           ,[BRANCH_CODE]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_DESCRIPTION]
           ,[DEBIT]
           ,[CREDIT]
           ,[DEBIT_IQ]
           ,[CREDIT_IQ]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[DESCRIPTION]
           ,[DEAL_CODE]
           ,[USER_CODE]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,@MAX_BILL
           ,GETDATE()
          ,GETDATE()
           ,0
           ,2
           ,1
           ,@CLIENT_CODE
           ,NULL
           ,0
           ,0
           ,@ITEM_PRICE
           ,0
           ,@CURRANCY_CODE
           ,@CURRANCY_EQUAL
           ,NULL
           ,0
           ,@USER_CODE
           ,GETDATE()
           ,1)

END


SELECT TOP(1)  @BALANCE=ISNULL(BALANCE_CUR ,0)*-1  FROM   V_ACC3  WHERE   ACCOUNT_CODE=@CLIENT_CODE 
 --****************************************************

SET @SUBMIT_FLAG=1
END

END

END



FINSHSH:

END	--END OF PROGRAM
commit



























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_CLIENT_PLAYER_MSG]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_CLIENT_PLAYER_MSG]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE PROCEDURE [dbo].[P_GET_CLIENT_PLAYER_MSG]
@CLIENT_BARCODE NVARCHAR(200),
@ITEM_BARCODE  NVARCHAR(200),
@USER_CODE INT,
@BALANCE decimal(18,0) OUTPUT,
@MSG NVARCHAR(200) OUTPUT,
@SUBMIT_FLAG INT OUTPUT



AS
DECLARE 
 
@ITEM_PRICE float ,
@ITEM_COST float ,
@CLIENT_CODE INT,
@CC_COUNT INT,
@CC_COUNT_TIME INT,
@CC_ITEM INT,
@UNIT_CODE INT,
@ITEM_NAME  NVARCHAR(MAX),
@UNIT_NAME  NVARCHAR(MAX),
@FROM_TIME TIME(7),
@TO_TIME TIME(7),
@ITEM_CODE INT
BEGIN TRAN
BEGIN
SET @SUBMIT_FLAG=0
SET @BALANCE=0

----------------------------CHECK PIN CODE------------------------------------------------
SELECT @CC_COUNT=COUNT(CLIENT_CODE )FROM T_CLIENT WHERE CLIENT_PIN_CODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1

IF @CC_COUNT>0
BEGIN

SELECT TOP(1)@CLIENT_CODE=CLIENT_CODE, @FROM_TIME=FROM_TIME,@TO_TIME=TO_TIME FROM T_CLIENT WHERE CLIENT_PIN_CODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1

SELECT @CC_COUNT_TIME=COUNT(CLIENT_CODE ) FROM T_CLIENT WHERE CONVERT(time, GETDATE()) BETWEEN @FROM_TIME AND @TO_TIME
IF @CC_COUNT_TIME=0
BEGIN

SET @SUBMIT_FLAG=0
SET @MSG =N''البطاقة خارج الوقت المحدد''
GOTO FINSHSH

END

ELSE
BEGIN

GOTO JUMP_PIN_CODE
END

END
----------------------END------CHECK PIN CODE------------------------------------------------


SELECT @CC_COUNT=COUNT(CLIENT_CODE )FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1

IF @CC_COUNT=0
BEGIN

SET @SUBMIT_FLAG=0
SET @MSG =N''باركود العميل غير موجود''
GOTO FINSHSH

END

ELSE

BEGIN
SELECT TOP(1) @CLIENT_CODE=ISNULL(CLIENT_CODE ,0)FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1
SELECT TOP(1)  @BALANCE=ISNULL(BALANCE_CUR ,0)*-1  FROM   V_ACC_BALANCE_CLIENT  WHERE   ACCOUNT_CODE=@CLIENT_CODE 
JUMP_PIN_CODE:
SELECT @CC_ITEM=count(ITEM_CODE)  FROM T_ITEMS WHERE ACTIVE=1 AND ITEM_CODE>0 AND ITEM_BARCODE LIKE @ITEM_BARCODE
if @CC_ITEM=0
begin
SET @SUBMIT_FLAG=0
SET @MSG =N''رمز الجهاز حطأ''
GOTO FINSHSH
end
ELSE
BEGIN

SELECT @ITEM_PRICE=ISNULL(SELL,0),@ITEM_COST=ISNULL(COST,0),@ITEM_CODE=ITEM_CODE,@ITEM_NAME=ITEM_NAME  FROM T_ITEMS WHERE ACTIVE=1 AND ITEM_CODE>0 AND ITEM_BARCODE LIKE @ITEM_BARCODE
SELECT @UNIT_NAME=UNIT_NAME,@UNIT_CODE=UNIT_CODE  FROM T_ITEM_BARCODE WHERE ITEM_BARCODE LIKE @ITEM_BARCODE

IF @BALANCE<@ITEM_PRICE
BEGIN
SET @MSG =N''لايوجد رصيد , الرصيد المتبقي هو : ''+CAST(CAST (@BALANCE AS decimal(18,0))  AS NVARCHAR(MAX))
SET @SUBMIT_FLAG=2
GOTO FINSHSH

END
ELSE
BEGIN
DECLARE
@CURRANCY_CODE INT,
@CURRANCY_USA float	,
@CURRANCY_IQ float	,
@CURRANCY_EQUAL float	,
@MAX_BILL INT,
@USER_CREATE nvarchar(MAX),	
@CLIENT_NAME nvarchar(MAX),	
@COMPANY_TITAL NVARCHAR(MAX)
SELECT @COMPANY_TITAL=COMPANY_TITAL FROM T_COMPANY WHERE T_ID=1
SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
SELECT @CLIENT_NAME=CLIENT_NAME FROM T_CLIENT WHERE CLIENT_CODE=@CLIENT_CODE
SELECT @USER_CREATE=[USER_NAME] FROM T_USERS WHERE  USER_CODE=@USER_CODE


SELECT @MAX_BILL=ISNULL(MAX(BILL_NUMBER),0) + 1 FROM T_SALES
INSERT INTO [dbo].[T_SALES]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_INVOICE]
           ,[BILL_DATE]
           ,[OFFER_CODE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[CLIENT_CODE]
           ,[CLIENT_NAME]
           ,[CLIENT_PHONE]
           ,[CLIENT_ADRESS]
           ,[MANDOOB_CODE]
           ,[DESCRIPTION]
           ,[TYPE_PRICE_SELL]
           ,[STORE_CODE]
           ,[USER_CREATE]
           ,[SECURETY_CODE]
           ,[TOTAL_SALES]
           ,[DISCOUNT_ITEMS]
           ,[DISCOUNT_PERCENT]
           ,[DISCOUNT_AMOUNT]
           ,[TOTAL_DISCOUNT]
           ,[NET_SALES]
           ,[TOTAL_COST]
           ,[IVC_CODE]
           ,[DAY_CASH]
           ,[DATE_CASH]
           ,[TOT_CONV]
           ,[ACCOUNT_CODE]
           ,[CASH_USA]
           ,[REMAIN_USA]
           ,[CASH_IQ]
           ,[REMAIN_IQ]
           ,[C_DATE]
           ,[C_UPDATE]
           ,[USER_UPDATE]
           ,[ACTIVE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[FLAG_CASH]
           ,[IS_OUT]
           ,[CURRANCY_SALES])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,NULL
           ,GETDATE()
           ,1
           ,@CURRANCY_CODE
           ,1
           ,@CLIENT_CODE
           ,@CLIENT_NAME
            ,NULL
           ,NULL
           ,0
           ,NULL
           ,1
           ,0
           ,@USER_CREATE
           ,1
           ,@ITEM_PRICE
           ,0
           ,0
           ,0
           ,0
           ,@ITEM_PRICE
           ,@ITEM_COST
           ,2
           ,0
           ,GETDATE()
           ,NULL
           ,5000
           ,0
           ,0
           ,0
           ,0
           ,GETDATE()
           ,NULL
           ,NULL
           ,1
           ,0
           ,0
           ,1
           ,0
           ,1)



IF @CURRANCY_CODE=1
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=1/NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_IQ
INSERT INTO [dbo].[T_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_STR]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[MOVE_CODE]
           ,[B_CODE]
           ,[BRANCH_CODE]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_DESCRIPTION]
           ,[DEBIT]
           ,[CREDIT]
           ,[DEBIT_IQ]
           ,[CREDIT_IQ]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[DESCRIPTION]
           ,[DEAL_CODE]
           ,[USER_CODE]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,@MAX_BILL
           ,GETDATE()
          ,GETDATE()
           ,0
           ,2
           ,1
           ,@CLIENT_CODE
           ,NULL
           ,@ITEM_PRICE
           ,0
           ,0
           ,0
           ,@CURRANCY_CODE
           ,@CURRANCY_EQUAL
           ,NULL
           ,0
           ,@USER_CODE
           ,GETDATE()
           ,1)


END

ELSE
BEGIN
SELECT @CURRANCY_USA=NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_USA

INSERT INTO [dbo].[T_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_STR]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[MOVE_CODE]
           ,[B_CODE]
           ,[BRANCH_CODE]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_DESCRIPTION]
           ,[DEBIT]
           ,[CREDIT]
           ,[DEBIT_IQ]
           ,[CREDIT_IQ]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[DESCRIPTION]
           ,[DEAL_CODE]
           ,[USER_CODE]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,@MAX_BILL
           ,GETDATE()
          ,GETDATE()
           ,0
           ,2
           ,1
           ,@CLIENT_CODE
           ,NULL
           ,0
           ,0
           ,@ITEM_PRICE
           ,0
           ,@CURRANCY_CODE
           ,@CURRANCY_EQUAL
           ,NULL
           ,0
           ,@USER_CODE
           ,GETDATE()
           ,1)

END


INSERT INTO [dbo].[T_SALES_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[TOTAL]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY]
           ,[ITEM_NOTE_SALES])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
           ,@ITEM_CODE
           ,@ITEM_NAME
           ,1
           ,@UNIT_NAME
           ,1
           ,0
           ,-999999
           ,NULL
           ,NULL
           ,@CURRANCY_CODE
           ,1
           ,@ITEM_COST
           ,@ITEM_PRICE
           ,@ITEM_PRICE
           ,0
           ,0
           ,GETDATE()
           ,1
           ,-999999
           ,NULL)
INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[C_DATE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
           ,GETDATE()
           ,2
           ,-999999
           ,0
           ,GETDATE()
           ,@ITEM_CODE
           ,@UNIT_CODE
           ,0
           ,1
           ,1
           ,GETDATE()
           ,0
           ,0
           ,1)
SELECT TOP(1)  @BALANCE=ISNULL(BALANCE_CUR ,0)*-1  FROM   V_ACC_BALANCE_CLIENT  WHERE   ACCOUNT_CODE=@CLIENT_CODE 
 --****************************************************
SET @MSG =N''الرصيد المتبقي هو : ''+  CAST(CAST (@BALANCE AS decimal(18,0))  AS NVARCHAR(MAX))

SET @SUBMIT_FLAG=1
END

END

END



FINSHSH:

END	--END OF PROGRAM
commit




























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_CLIENT_PLAYER_OLD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_CLIENT_PLAYER_OLD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE PROCEDURE [dbo].[P_GET_CLIENT_PLAYER_OLD]
@CLIENT_BARCODE NVARCHAR(MAX),
@ITEM_BARCODE  NVARCHAR(MAX),
@USER_CODE INT,
@BALANCE float OUTPUT,
@SUBMIT_FLAG INT OUTPUT



AS
DECLARE 
@ITEM_PRICE float ,
@ITEM_COST float ,
@CLIENT_CODE INT,
@CC_COUNT INT,
@CC_ITEM INT,
@UNIT_CODE INT,
@ITEM_NAME  NVARCHAR(MAX),
@UNIT_NAME  NVARCHAR(MAX),
@ITEM_CODE INT
BEGIN TRAN
BEGIN
SET @SUBMIT_FLAG=0
SET @BALANCE=0

SELECT @CC_COUNT=COUNT(CLIENT_CODE )FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1

IF @CC_COUNT=0
BEGIN

SET @SUBMIT_FLAG=0
GOTO FINSHSH

END

ELSE

BEGIN
SELECT TOP(1) @CLIENT_CODE=ISNULL(CLIENT_CODE ,0)FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1
SELECT TOP(1)  @BALANCE=ISNULL(BALANCE_CUR ,0)*-1  FROM   V_ACC3  WHERE   ACCOUNT_CODE=@CLIENT_CODE 
SELECT @CC_ITEM=count(ITEM_CODE)  FROM T_ITEMS WHERE ACTIVE=1 AND ITEM_CODE>0 AND ITEM_BARCODE LIKE @ITEM_BARCODE
if @CC_ITEM=0
begin
SET @SUBMIT_FLAG=0
GOTO FINSHSH
end
ELSE
BEGIN

SELECT @ITEM_PRICE=ISNULL(SELL,0),@ITEM_COST=ISNULL(COST,0),@ITEM_CODE=ITEM_CODE,@ITEM_NAME=ITEM_NAME  FROM T_ITEMS WHERE ACTIVE=1 AND ITEM_CODE>0 AND ITEM_BARCODE LIKE @ITEM_BARCODE
SELECT @UNIT_NAME=UNIT_NAME,@UNIT_CODE=UNIT_CODE  FROM T_ITEM_BARCODE WHERE ITEM_BARCODE LIKE @ITEM_BARCODE

IF @BALANCE<@ITEM_PRICE
BEGIN

SET @SUBMIT_FLAG=2
GOTO FINSHSH

END
ELSE
BEGIN
DECLARE
@CURRANCY_CODE INT,
@CURRANCY_USA float	,
@CURRANCY_IQ float	,
@CURRANCY_EQUAL float	,
@MAX_BILL INT,
@USER_CREATE nvarchar(MAX),	
@CLIENT_NAME nvarchar(MAX),	
@COMPANY_TITAL NVARCHAR(MAX)
SELECT @COMPANY_TITAL=COMPANY_TITAL FROM T_COMPANY WHERE T_ID=1
SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
SELECT @CLIENT_NAME=CLIENT_NAME FROM T_CLIENT WHERE CLIENT_CODE=@CLIENT_CODE
SELECT @USER_CREATE=[USER_NAME] FROM T_USERS WHERE  USER_CODE=@USER_CODE


SELECT @MAX_BILL=ISNULL(MAX(BILL_NUMBER),0) + 1 FROM T_SALES
INSERT INTO [dbo].[T_SALES]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_INVOICE]
           ,[BILL_DATE]
           ,[OFFER_CODE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[CLIENT_CODE]
           ,[CLIENT_NAME]
           ,[CLIENT_PHONE]
           ,[CLIENT_ADRESS]
           ,[MANDOOB_CODE]
           ,[DESCRIPTION]
           ,[TYPE_PRICE_SELL]
           ,[STORE_CODE]
           ,[USER_CREATE]
           ,[SECURETY_CODE]
           ,[TOTAL_SALES]
           ,[DISCOUNT_ITEMS]
           ,[DISCOUNT_PERCENT]
           ,[DISCOUNT_AMOUNT]
           ,[TOTAL_DISCOUNT]
           ,[NET_SALES]
           ,[TOTAL_COST]
           ,[IVC_CODE]
           ,[DAY_CASH]
           ,[DATE_CASH]
           ,[TOT_CONV]
           ,[ACCOUNT_CODE]
           ,[CASH_USA]
           ,[REMAIN_USA]
           ,[CASH_IQ]
           ,[REMAIN_IQ]
           ,[C_DATE]
           ,[C_UPDATE]
           ,[USER_UPDATE]
           ,[ACTIVE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[FLAG_CASH]
           ,[IS_OUT]
           ,[CURRANCY_SALES])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,NULL
           ,GETDATE()
           ,1
           ,@CURRANCY_CODE
           ,1
           ,@CLIENT_CODE
           ,@CLIENT_NAME
            ,NULL
           ,NULL
           ,0
           ,NULL
           ,1
           ,0
           ,@USER_CREATE
           ,1
           ,@ITEM_PRICE
           ,0
           ,0
           ,0
           ,0
           ,@ITEM_PRICE
           ,@ITEM_COST
           ,2
           ,0
           ,GETDATE()
           ,NULL
           ,5000
           ,0
           ,0
           ,0
           ,0
           ,GETDATE()
           ,NULL
           ,NULL
           ,1
           ,0
           ,0
           ,1
           ,0
           ,1)



IF @CURRANCY_CODE=1
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=1/NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_IQ
INSERT INTO [dbo].[T_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_STR]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[MOVE_CODE]
           ,[B_CODE]
           ,[BRANCH_CODE]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_DESCRIPTION]
           ,[DEBIT]
           ,[CREDIT]
           ,[DEBIT_IQ]
           ,[CREDIT_IQ]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[DESCRIPTION]
           ,[DEAL_CODE]
           ,[USER_CODE]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,@MAX_BILL
           ,GETDATE()
          ,GETDATE()
           ,0
           ,2
           ,1
           ,@CLIENT_CODE
           ,NULL
           ,@ITEM_PRICE
           ,0
           ,0
           ,0
           ,@CURRANCY_CODE
           ,@CURRANCY_EQUAL
           ,NULL
           ,0
           ,@USER_CODE
           ,GETDATE()
           ,1)


END

ELSE
BEGIN
SELECT @CURRANCY_USA=NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_USA

INSERT INTO [dbo].[T_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_STR]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[MOVE_CODE]
           ,[B_CODE]
           ,[BRANCH_CODE]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_DESCRIPTION]
           ,[DEBIT]
           ,[CREDIT]
           ,[DEBIT_IQ]
           ,[CREDIT_IQ]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[DESCRIPTION]
           ,[DEAL_CODE]
           ,[USER_CODE]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,@MAX_BILL
           ,GETDATE()
          ,GETDATE()
           ,0
           ,2
           ,1
           ,@CLIENT_CODE
           ,NULL
           ,0
           ,0
           ,@ITEM_PRICE
           ,0
           ,@CURRANCY_CODE
           ,@CURRANCY_EQUAL
           ,NULL
           ,0
           ,@USER_CODE
           ,GETDATE()
           ,1)

END


INSERT INTO [dbo].[T_SALES_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[TOTAL]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY]
           ,[ITEM_NOTE_SALES])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
           ,@ITEM_CODE
           ,@ITEM_NAME
           ,1
           ,@UNIT_NAME
           ,1
           ,0
           ,-999999
           ,NULL
           ,NULL
           ,@CURRANCY_CODE
           ,1
           ,@ITEM_COST
           ,@ITEM_PRICE
           ,@ITEM_PRICE
           ,0
           ,0
           ,GETDATE()
           ,1
           ,-999999
           ,NULL)
INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[C_DATE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
           ,GETDATE()
           ,2
           ,-999999
           ,0
           ,GETDATE()
           ,@ITEM_CODE
           ,@UNIT_CODE
           ,0
           ,1
           ,1
           ,GETDATE()
           ,0
           ,0
           ,1)
SELECT TOP(1)  @BALANCE=ISNULL(BALANCE_CUR ,0)*-1  FROM   V_ACC3  WHERE   ACCOUNT_CODE=@CLIENT_CODE 
 --****************************************************

SET @SUBMIT_FLAG=1
END

END

END



FINSHSH:

END	--END OF PROGRAM
commit




























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_CLIENT_PLAYER_orgenal]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_CLIENT_PLAYER_orgenal]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE PROCEDURE [dbo].[P_GET_CLIENT_PLAYER_orgenal]
@CLIENT_BARCODE NVARCHAR(MAX),
@ITEM_BARCODE  NVARCHAR(MAX),
@USER_CODE INT,
@BALANCE float OUTPUT,
@SUBMIT_FLAG INT OUTPUT



AS
DECLARE 
@ITEM_PRICE float ,
@ITEM_COST float ,
@CLIENT_CODE INT,
@CC_COUNT INT,
@CC_ITEM INT,
@UNIT_CODE INT,
@CC_COUNT_TIME INT,
@ITEM_NAME  NVARCHAR(MAX),
@UNIT_NAME  NVARCHAR(MAX),
@FROM_TIME TIME(7),
@TO_TIME TIME(7),
@ITEM_CODE INT,
@CLIENT_TYPE_CODE INT
BEGIN TRAN
BEGIN
SET @SUBMIT_FLAG=0
SET @BALANCE=0
--------------------------CHECK PIN CODE------------------------------------------------
SELECT @CC_COUNT=COUNT(CLIENT_CODE )FROM T_CLIENT WHERE CLIENT_PIN_CODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1

IF @CC_COUNT>0
BEGIN

SELECT TOP(1)@CLIENT_CODE=CLIENT_CODE, @FROM_TIME=FROM_TIME,@TO_TIME=TO_TIME FROM T_CLIENT WHERE CLIENT_PIN_CODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1

SELECT @CC_COUNT_TIME=COUNT(CLIENT_CODE ) FROM T_CLIENT WHERE CONVERT(time, GETDATE()) BETWEEN @FROM_TIME AND @TO_TIME
IF @CC_COUNT_TIME=0
BEGIN

SET @SUBMIT_FLAG=0
 
GOTO FINSHSH

END

ELSE
BEGIN
SET @BALANCE=1000000
GOTO JUMP_PIN_CODE
END

END
----------------------END------CHECK PIN CODE------------------------------------------------
SELECT @CC_COUNT=COUNT(CLIENT_CODE )FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1

IF @CC_COUNT=0
BEGIN

SET @SUBMIT_FLAG=0
GOTO FINSHSH

END

ELSE

BEGIN
SELECT TOP(1) @CLIENT_CODE=ISNULL(CLIENT_CODE ,0),@CLIENT_TYPE_CODE=CLIENT_TYPE FROM T_CLIENT WHERE CLIENT_BARCODE LIKE @CLIENT_BARCODE AND CLIENT_ACTIVE=1
IF @CLIENT_TYPE_CODE=9 -- MASTER
BEGIN
SET @SUBMIT_FLAG=1 -- MASTER
GOTO FINSHSH
END

SELECT TOP(1)  @BALANCE=ISNULL(BALANCE_CUR ,0)*-1  FROM   V_ACC3  WHERE   ACCOUNT_CODE=@CLIENT_CODE 
JUMP_PIN_CODE:
SELECT @CC_ITEM=count(ITEM_CODE)  FROM T_ITEMS WHERE ACTIVE=1 AND ITEM_CODE>0 AND ITEM_BARCODE LIKE @ITEM_BARCODE
if @CC_ITEM=0
begin
SET @SUBMIT_FLAG=0
GOTO FINSHSH
end
ELSE
BEGIN

SELECT @ITEM_PRICE=ISNULL(SELL,0),@ITEM_COST=ISNULL(COST,0),@ITEM_CODE=ITEM_CODE,@ITEM_NAME=ITEM_NAME  FROM T_ITEMS WHERE ACTIVE=1 AND ITEM_CODE>0 AND ITEM_BARCODE LIKE @ITEM_BARCODE
SELECT @UNIT_NAME=UNIT_NAME,@UNIT_CODE=UNIT_CODE  FROM T_ITEM_BARCODE WHERE ITEM_BARCODE LIKE @ITEM_BARCODE

IF @BALANCE<@ITEM_PRICE
BEGIN

SET @SUBMIT_FLAG=2
GOTO FINSHSH

END
ELSE
BEGIN
DECLARE
@CURRANCY_CODE INT,
@CURRANCY_USA float	,
@CURRANCY_IQ float	,
@CURRANCY_EQUAL float	,
@MAX_BILL INT,
@USER_CREATE nvarchar(MAX),	
@CLIENT_NAME nvarchar(MAX),	
@COMPANY_TITAL NVARCHAR(MAX)
SELECT @COMPANY_TITAL=COMPANY_TITAL FROM T_COMPANY WHERE T_ID=1
SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
SELECT @CLIENT_NAME=CLIENT_NAME FROM T_CLIENT WHERE CLIENT_CODE=@CLIENT_CODE
SELECT @USER_CREATE=[USER_NAME] FROM T_USERS WHERE  USER_CODE=@USER_CODE


SELECT @MAX_BILL=ISNULL(MAX(BILL_NUMBER),0) + 1 FROM T_SALES
INSERT INTO [dbo].[T_SALES]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_INVOICE]
           ,[BILL_DATE]
           ,[OFFER_CODE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[CLIENT_CODE]
           ,[CLIENT_NAME]
           ,[CLIENT_PHONE]
           ,[CLIENT_ADRESS]
           ,[MANDOOB_CODE]
           ,[DESCRIPTION]
           ,[TYPE_PRICE_SELL]
           ,[STORE_CODE]
           ,[USER_CREATE]
           ,[SECURETY_CODE]
           ,[TOTAL_SALES]
           ,[DISCOUNT_ITEMS]
           ,[DISCOUNT_PERCENT]
           ,[DISCOUNT_AMOUNT]
           ,[TOTAL_DISCOUNT]
           ,[NET_SALES]
           ,[TOTAL_COST]
           ,[IVC_CODE]
           ,[DAY_CASH]
           ,[DATE_CASH]
           ,[TOT_CONV]
           ,[ACCOUNT_CODE]
           ,[CASH_USA]
           ,[REMAIN_USA]
           ,[CASH_IQ]
           ,[REMAIN_IQ]
           ,[C_DATE]
           ,[C_UPDATE]
           ,[USER_UPDATE]
           ,[ACTIVE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[FLAG_CASH]
           ,[IS_OUT]
           ,[CURRANCY_SALES])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,NULL
           ,GETDATE()
           ,1
           ,@CURRANCY_CODE
           ,1
           ,@CLIENT_CODE
           ,@CLIENT_NAME
            ,NULL
           ,NULL
           ,0
           ,NULL
           ,1
           ,0
           ,@USER_CREATE
           ,1
           ,@ITEM_PRICE
           ,0
           ,0
           ,0
           ,0
           ,@ITEM_PRICE
           ,@ITEM_COST
           ,2
           ,0
           ,GETDATE()
           ,NULL
           ,5000
           ,0
           ,0
           ,0
           ,0
           ,GETDATE()
           ,NULL
           ,NULL
           ,1
           ,0
           ,0
           ,1
           ,0
           ,1)



IF @CURRANCY_CODE=1
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=1/NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_IQ
INSERT INTO [dbo].[T_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_STR]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[MOVE_CODE]
           ,[B_CODE]
           ,[BRANCH_CODE]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_DESCRIPTION]
           ,[DEBIT]
           ,[CREDIT]
           ,[DEBIT_IQ]
           ,[CREDIT_IQ]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[DESCRIPTION]
           ,[DEAL_CODE]
           ,[USER_CODE]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,@MAX_BILL
           ,GETDATE()
          ,GETDATE()
           ,0
           ,2
           ,1
           ,@CLIENT_CODE
           ,NULL
           ,@ITEM_PRICE
           ,0
           ,0
           ,0
           ,@CURRANCY_CODE
           ,@CURRANCY_EQUAL
           ,NULL
           ,0
           ,@USER_CODE
           ,GETDATE()
           ,1)


END

ELSE
BEGIN
SELECT @CURRANCY_USA=NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_USA

INSERT INTO [dbo].[T_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_STR]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[MOVE_CODE]
           ,[B_CODE]
           ,[BRANCH_CODE]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_DESCRIPTION]
           ,[DEBIT]
           ,[CREDIT]
           ,[DEBIT_IQ]
           ,[CREDIT_IQ]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[DESCRIPTION]
           ,[DEAL_CODE]
           ,[USER_CODE]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
          ,@MAX_BILL
           ,GETDATE()
          ,GETDATE()
           ,0
           ,2
           ,1
           ,@CLIENT_CODE
           ,NULL
           ,0
           ,0
           ,@ITEM_PRICE
           ,0
           ,@CURRANCY_CODE
           ,@CURRANCY_EQUAL
           ,NULL
           ,0
           ,@USER_CODE
           ,GETDATE()
           ,1)

END


INSERT INTO [dbo].[T_SALES_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[TOTAL]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY]
           ,[ITEM_NOTE_SALES])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
           ,@ITEM_CODE
           ,@ITEM_NAME
           ,1
           ,@UNIT_NAME
           ,1
           ,0
           ,-999999
           ,NULL
           ,NULL
           ,@CURRANCY_CODE
           ,1
           ,@ITEM_COST
           ,@ITEM_PRICE
           ,@ITEM_PRICE
           ,0
           ,0
           ,GETDATE()
           ,1
           ,-999999
           ,NULL)
INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[C_DATE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@MAX_BILL AS varchar)
           ,@MAX_BILL
           ,GETDATE()
           ,2
           ,-999999
           ,0
           ,GETDATE()
           ,@ITEM_CODE
           ,@UNIT_CODE
           ,0
           ,1
           ,1
           ,GETDATE()
           ,0
           ,0
           ,1)
SELECT TOP(1)  @BALANCE=ISNULL(BALANCE_CUR ,0)*-1  FROM   V_ACC3  WHERE   ACCOUNT_CODE=@CLIENT_CODE 
 --****************************************************

SET @SUBMIT_FLAG=1
END

END

END



FINSHSH:

END	--END OF PROGRAM
commit




























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_BALANCE_FINAL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_BALANCE_FINAL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_GET_FILL_BALANCE_FINAL]
    @D1 DATE,
    @D2 DATE,
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        -- تهيئة متغير الإشارة للإخراج
        SET @SUBMIT_FLAG = 0;

        -- مسح الجدول قبل الملء
        DELETE FROM [dbo].[T_BALANCE_FINAL];

        ----------------------------------------------------------------
        -- استرجاع بيانات العملة الأساسية
        ----------------------------------------------------------------
        DECLARE 
            @CURRANCY_CODE INT,
            @CURRANCY_USA  FLOAT,
            @CURRANCY_IQ   FLOAT,
            @CURRANCY_EQUAL FLOAT;

        SELECT @CURRANCY_CODE = CURRANCY_CODE 
        FROM T_CURRANNCY 
        WHERE CURRANCY_PRIMARY = 1;

        IF @CURRANCY_CODE = 1
        BEGIN
            SELECT @CURRANCY_USA = CURRANCY_EQUAL 
            FROM T_CURRANNCY 
            WHERE CURRANCY_CODE = 1;

            SELECT @CURRANCY_IQ = 1 / NULLIF(CURRANCY_EQUAL, 1) 
            FROM T_CURRANNCY 
            WHERE CURRANCY_CODE = 2;

            SET @CURRANCY_EQUAL = @CURRANCY_IQ;
        END
        ELSE
        BEGIN
            SELECT @CURRANCY_USA = NULLIF(CURRANCY_EQUAL, 1) 
            FROM T_CURRANNCY 
            WHERE CURRANCY_CODE = 1;

            SELECT @CURRANCY_IQ = CURRANCY_EQUAL 
            FROM T_CURRANNCY 
            WHERE CURRANCY_CODE = 2;

            SET @CURRANCY_EQUAL = @CURRANCY_USA;
        END

        ----------------------------------------------------------------
        -- تعريف المتغيرات المستخدمة للحساب
        ----------------------------------------------------------------
        DECLARE 
            @AMO     FLOAT,
            @BALANCE FLOAT,
            @DEBIT   FLOAT,
            @CREDIT  FLOAT;

        -----------------------------------------
        -- القسم الأول: T_ID = -3
        -- "القيود المحاسبية للموجودات الثابتة"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(B_CUR), 0)
        FROM T_BOX 
        WHERE ACCOUNT_CODE BETWEEN 100 AND 199
          AND ACTIVE = 1 
          AND B_CODE <> 13;
        SET @BALANCE = @AMO;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (-3, @D1, @D2, N''القيود المحاسبية للموجودات الثابتة'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم الثاني: T_ID = -2
        -- "قيمة الموجودات الثابتة الحالية"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(BALANCE_CUR), 0)
        FROM V_ACCOUNT3 
        WHERE ACCOUNT_PARENT = 1;
        SET @BALANCE = @AMO;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (-2, @D1, @D2, N''قيمة الموجودات الثابتة الحالية '', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم الثالث: T_ID = -1
        -- "القيود المحاسبية لرأس المال"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(B_CUR), 0)
        FROM T_BOX 
        WHERE ACCOUNT_CODE BETWEEN 7000 AND 7999
          AND ACTIVE = 1;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (-1, @D1, @D2, N''القيود المحاسبية لرأس المال'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم الرابع: T_ID = 0
        -- "رصيد افتتاحي لنا"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(B_CUR), 0)
        FROM T_BOX 
        WHERE ACCOUNT_CODE BETWEEN 2100000 AND 2199999
          AND ACTIVE = 1 
          AND BILL_NUMBER = 0 
          AND B_CUR > 0;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (0, @D1, @D2, N''رصيد افتتاحي لنا'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم الخامس: T_ID = 1
        -- "رصيد افتتاحي علينا"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(B_CUR), 0)
        FROM T_BOX 
        WHERE ACCOUNT_CODE BETWEEN 2100000 AND 2199999
          AND ACTIVE = 1 
          AND BILL_NUMBER = 0 
          AND B_CUR < 0;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (1, @D1, @D2, N''رصيد افتتاحي علينا'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم السادس: T_ID = 2
        -- "رصيد افتتاحي صناديق"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(B_CUR), 0)
        FROM T_BOX 
        WHERE ACCOUNT_CODE BETWEEN 5000 AND 5999
          AND ACTIVE = 1 
          AND BILL_NUMBER = 0;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (2, @D1, @D2, N''رصيد افتتاحي صناديق'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم السابع: T_ID = 3
        -- "رصيد اولي للمواد"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(TOTAL_COST), 0)
        FROM T_BUY_DETAILS 
        WHERE BILL_NUMBER = 0;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (3, @D1, @D2, N''رصيد اولي للمواد'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم الثامن: T_ID = 4
        -- "اجمالي الارصدة الاولية"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(DEBIT - CREDIT), 0)
        FROM [dbo].[T_BALANCE_FINAL]
        WHERE T_ID BETWEEN 0 AND 3;
        -- عكس الإشارة للحسابات الأولية
        SET @BALANCE = @AMO * -1;
        SET @AMO = @AMO * -1;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (4, @D1, @D2, N'' اجمالي الارصدة الاولية '', @DEBIT, @CREDIT, 0);

        -----------------------------------------
        -- القسم التاسع: T_ID = 5
        -- "راس المال الاجمالي الافتتاحي"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(DEBIT - CREDIT), 0)
             FROM [dbo].[T_BALANCE_FINAL]
             WHERE T_ID BETWEEN -2 AND 3
             - (SELECT ISNULL(SUM(B_CUR), 0) 
                FROM T_BOX 
                WHERE ACCOUNT_CODE BETWEEN 7000 AND 7999 AND ACTIVE = 1);
        SET @BALANCE = @AMO * -1;
        SET @AMO = @AMO * -1;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (5, @D1, @D2, N''راس المال الاجمالي الافتتاحي'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم العاشر: T_ID = 6
        -- "اجمالي مبيعات للفترة"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(TOTAL_SALES), 0) * -1
        FROM V_SALES 
        WHERE ACTIVE = 1 
          AND TOTAL_SALES >= 0 
          AND BILL_DATE BETWEEN @D1 AND @D2;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (6, @D1, @D2, N''اجمالي مبيعات للفترة'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم الحادي عشر: T_ID = 7
        -- "اجمالي مرتجع مبيعات للفترة"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(TOTAL_SALES), 0) * -1
        FROM V_SALES 
        WHERE ACTIVE = 1 
          AND TOTAL_SALES < 0 
          AND BILL_DATE BETWEEN @D1 AND @D2;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (7, @D1, @D2, N''اجمالي مرتجع مبيعات للفترة'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم الثاني عشر: T_ID = 8
        -- "اجمالي كلفة بضاعة مباعة للفترة"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        DECLARE @ID_COSTE_SALES INT;
        SELECT @ID_COSTE_SALES = ISNULL(P_VALUE, 0)
        FROM T_PARAMETERS 
        WHERE P_CODE = 1;

        IF @ID_COSTE_SALES = 0
            SELECT @AMO = ISNULL(SUM(PRICE_COST * UNIT_QTY * TOTAL_QTY), 0)
            FROM V_SALES_DETAILS 
            WHERE ACTIVE = 1 AND NET_TOTAL >= 0 AND BILL_DATE BETWEEN @D1 AND @D2;
        ELSE IF @ID_COSTE_SALES = 1
            SELECT @AMO = ISNULL(SUM(PRICE_BUY * UNIT_QTY * TOTAL_QTY), 0)
            FROM V_SALES_DETAILS 
            WHERE ACTIVE = 1 AND NET_TOTAL >= 0 AND BILL_DATE BETWEEN @D1 AND @D2;
        ELSE IF @ID_COSTE_SALES = 2
            SELECT @AMO = ISNULL(SUM(AVG_BUY * UNIT_QTY * TOTAL_QTY), 0)
            FROM V_SALES_DETAILS 
            WHERE ACTIVE = 1 AND NET_TOTAL >= 0 AND BILL_DATE BETWEEN @D1 AND @D2;

        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (8, @D1, @D2, N''اجمالي كلفة بضاعة مباعة للفترة'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم الثالث عشر: T_ID = 9
        -- "اجمالي كلفة بضاعة مرتجعة للفترة"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        DECLARE @ID_COST_RE_SALES INT;
        SELECT @ID_COST_RE_SALES = ISNULL(P_VALUE, 0)
        FROM T_PARAMETERS 
        WHERE P_CODE = 1;

        IF @ID_COST_RE_SALES = 0
            SELECT @AMO = ISNULL(SUM(PRICE_COST * UNIT_QTY * TOTAL_QTY), 0)
            FROM V_SALES_DETAILS 
            WHERE ACTIVE = 1 AND NET_TOTAL < 0 AND BILL_DATE BETWEEN @D1 AND @D2;
        ELSE IF @ID_COST_RE_SALES = 1
            SELECT @AMO = ISNULL(SUM(PRICE_BUY * UNIT_QTY * TOTAL_QTY), 0)
            FROM V_SALES_DETAILS 
            WHERE ACTIVE = 1 AND NET_TOTAL < 0 AND BILL_DATE BETWEEN @D1 AND @D2;
        ELSE IF @ID_COST_RE_SALES = 2
            SELECT @AMO = ISNULL(SUM(AVG_BUY * UNIT_QTY * TOTAL_QTY), 0)
            FROM V_SALES_DETAILS 
            WHERE ACTIVE = 1 AND NET_TOTAL < 0 AND BILL_DATE BETWEEN @D1 AND @D2;

        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (9, @D1, @D2, N''اجمالي كلفة بضاعة مرتجعة للفترة'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم الرابع عشر: T_ID = 10
        -- "اجمالي خصومات + اضافات للفترة"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(TOTAL_DISCOUNT), 0)
             - (SELECT ISNULL(SUM(DISCOUNT_AMOUNT), 0)
                FROM V_BUY 
                WHERE ACTIVE = 1 AND BILL_DATE BETWEEN @D1 AND @D2)
        FROM V_SALES 
        WHERE ACTIVE = 1 AND BILL_DATE BETWEEN @D1 AND @D2;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (10, @D1, @D2, N''اجمالي خصومات + اضافات للفترة'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم الخامس عشر: T_ID = 11
        -- "اجمالي ارباح المبيعات للفترة"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(DEBIT - CREDIT), 0)
        FROM [dbo].[T_BALANCE_FINAL]
        WHERE T_ID BETWEEN 6 AND 10;
        SET @BALANCE = @AMO;
        

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (11, @D1, @D2, N''اجمالي ارباح المبيعات للفترة'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم السادس عشر: T_ID = 12
        -- (السماحات المكتسبة والممنوحة للفترة)
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        -- ملاحظة: الكود الأصلي لم يحتوِ على عملية حساب؛ لذا بقيت القيمة صفرًا
        IF @AMO <= 0 
            SET @DEBIT = ABS(@AMO); 
        ELSE 
            SET @CREDIT = @AMO;

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (12, @D1, @D2, N'' '', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم السابع عشر: T_ID = 13
        -- "اجمالي ارباح المصاريف الاضافية للفترة"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(BALANCE_CUR), 0)
        FROM V_ACCOUNT3_DATE 
        WHERE ACCOUNT_CODE = 202;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);
        SET @BALANCE = @AMO;

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (13, @D1, @D2, N''اجمالي ارباح المصاريف الاضافية للفترة'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم الثامن عشر: T_ID = 14
        -- "اجمالي قيمة تصحيح المخزن والتلف"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        DECLARE @ID_COST_MI INT;
        SELECT @ID_COST_MI = ISNULL(P_VALUE, 0)
        FROM T_PARAMETERS 
        WHERE P_CODE = 1;

        IF @ID_COST_MI = 0
            SELECT @AMO = ISNULL(SUM(QTY * COST) * -1, 0)
            FROM V_BUY_DETAILS_CORRECT 
            WHERE BILL_DATE BETWEEN @D1 AND @D2;
        ELSE IF @ID_COST_MI = 1
            SELECT @AMO = ISNULL(SUM(QTY * COST) * -1, 0)
            FROM V_BUY_DETAILS_CORRECT 
            WHERE BILL_DATE BETWEEN @D1 AND @D2;
        ELSE IF @ID_COST_MI = 2
            SELECT @AMO = ISNULL(SUM(QTY * COST) * -1, 0)
            FROM V_BUY_DETAILS_CORRECT 
            WHERE BILL_DATE BETWEEN @D1 AND @D2;

        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);
        SET @BALANCE = @AMO;

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (14, @D1, @D2, N''اجمالي قيمة تصحيح المخزن والتلف'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم التاسع عشر: T_ID = 15
        -- "اجمالي قيمة المخازن لغاية الفترة"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        DECLARE @ID_COST INT;
        SELECT @ID_COST = ISNULL(P_VALUE, 0)
        FROM T_PARAMETERS 
        WHERE P_CODE = 1;

        IF @ID_COST = 0
            SELECT @AMO = ISNULL(SUM(BALANCE_PRICE_COST), 0)
            FROM V_STORE_BOX_STORE_AVG_ON_MOVE 
            WHERE BILL_DATE BETWEEN @D1 AND @D2;
        ELSE IF @ID_COST = 1
            SELECT @AMO = ISNULL(SUM(BALANCE_PRICE_BUY), 0)
            FROM V_STORE_BOX_STORE_AVG_ON_MOVE 
            WHERE BILL_DATE BETWEEN @D1 AND @D2;
        ELSE IF @ID_COST = 2
            SELECT @AMO = ISNULL(SUM(BALANCE_AVG_BUY), 0)
            FROM V_STORE_BOX_STORE_AVG_ON_MOVE 
            WHERE BILL_DATE BETWEEN @D1 AND @D2;

        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (15, @D1, @D2, N''اجمالي قيمة المخازن لغاية الفترة'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- تحديث تاريخ الحسابات
        -----------------------------------------
        UPDATE T_DATE_ACCOUNT SET D_DATE = @D2;

        -----------------------------------------
        -- القسم العشرون: T_ID = 16
        -- "اجمالي مدينون لغاية الفترة"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(BALANCE_CUR), 0)
        FROM V_ACCOUNT3_DATE 
        WHERE ACCOUNT_CODE BETWEEN 2100000 AND 2199999
          AND BALANCE_CUR > 0;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (16, @D1, @D2, N''اجمالي مدينون لغاية الفترة'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم الحادي والعشرون: T_ID = 17
        -- "اجمالي دائنون لغاية الفترة"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(BALANCE_CUR), 0)
        FROM V_ACCOUNT3_DATE 
        WHERE ACCOUNT_CODE BETWEEN 2100000 AND 2199999
          AND BALANCE_CUR < 0;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (17, @D1, @D2, N''اجمالي دائنون لغاية الفترة'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم الثاني والعشرون: T_ID = 18
        -- "اجمالي ارصدة الصناديق لغاية الفترة"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(BALANCE_CUR), 0)
        FROM V_ACCOUNT3_DATE 
        WHERE ACCOUNT_CODE BETWEEN 5000 AND 5999;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (18, @D1, @D2, N''اجمالي ارصدة الصناديق لغاية الفترة'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم الثالث والعشرون: T_ID = 19
        -- "اجمالي المصاريف لغاية الفترة"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(BALANCE_CUR), 0)
        FROM V_ACCOUNT3_DATE 
        WHERE ACCOUNT_CODE BETWEEN 300 AND 399;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (19, @D1, @D2, N''اجمالي المصاريف لغاية الفترة'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم الرابع والعشرون: T_ID = 20
        -- "اجمالي الايرادات لغاية الفترة"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(BALANCE_CUR), 0)
        FROM V_ACCOUNT3_DATE 
        WHERE ACCOUNT_CODE BETWEEN 400 AND 499;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (20, @D1, @D2, N''اجمالي الايرادات لغاية الفترة'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم الخامس والعشرون: T_ID = 21
        -- "اجمالي سحوبات ارباح لغاية الفترة"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0; SET @BALANCE = 0;
        SELECT @AMO = ISNULL(SUM(BALANCE_CUR), 0)
        FROM V_ACCOUNT3_DATE 
        WHERE ACCOUNT_CODE BETWEEN 6000 AND 6999;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);

        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (21, @D1, @D2, N''اجمالي سحوبات ارباح لغاية الفترة'', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم السادس والعشرون: T_ID = 22
        -- "السماحات المكتسبة والممنوحة لغاية الفترة"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0;
        SELECT @DEBIT = ISNULL(SUM(DEBIT_CUR), 0)
        FROM T_BOX 
        WHERE ACCOUNT_CODE = 4000 
          AND ACTIVE = 1 
          AND BILL_DATE BETWEEN @D1 AND @D2;
        SELECT @CREDIT = ISNULL(SUM(CREDIT_CUR), 0)
        FROM T_BOX 
        WHERE ACCOUNT_CODE = 4000 
          AND ACTIVE = 1 
          AND BILL_DATE BETWEEN @D1 AND @D2;
        -- يُترك @BALANCE كما هو (0)
        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (22, @D1, @D2, N''السماحات المكتسبة والممنوحة لغاية الفترة'', @DEBIT, @CREDIT, 0);

        -----------------------------------------
        -- القسم السابع والعشرون: T_ID = 23
        -- "صافي ارباح لغاية الفترة"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0;
        SET @BALANCE = (SELECT ISNULL(BALANCE, 0) FROM [dbo].[T_BALANCE_FINAL] WHERE T_ID = 11)
                     + (SELECT ISNULL(BALANCE, 0) FROM [dbo].[T_BALANCE_FINAL] WHERE T_ID = 13);
        SELECT @AMO = ISNULL(SUM(DEBIT - CREDIT), 0)
        FROM [dbo].[T_BALANCE_FINAL]
        WHERE T_ID BETWEEN 19 AND 22;
        SET @BALANCE = @BALANCE + @AMO;
        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (23, @D1, @D2, N''صافي ارباح لغاية الفترة'', 0, 0, @BALANCE);

        -----------------------------------------
        -- القسم الثامن والعشرون: T_ID = 24
        -- "صافي حسابات الارباح والخسائر"
        -----------------------------------------
        SET @AMO = 0; SET @DEBIT = 0; SET @CREDIT = 0;
        SELECT @AMO = ISNULL(SUM(BALANCE_CUR), 0)
        FROM V_ACCOUNT3_DATE 
        WHERE ACCOUNT_PARENT = 8;
        IF @AMO >= 0 
            SET @DEBIT = @AMO; 
        ELSE 
            SET @CREDIT = ABS(@AMO);
        SET @BALANCE = @AMO;
        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (24, @D1, @D2, N''صافي حسابات الارباح والخسائر '', @DEBIT, @CREDIT, @BALANCE);

        -----------------------------------------
        -- القسم الأخير: T_ID = 25
        -- "صافي راس المال العام  لغاية الفترة"
        -----------------------------------------
        DECLARE 
            @FIRSTT               FLOAT,
            @BOXX                 FLOAT,
            @MADENOON             FLOAT,
            @DAENOON              FLOAT,
            @STORERR_CORRECT      FLOAT,
            @SMAH                 FLOAT,
            @ARNAH_WA_HKSAEER     FLOAT,
            @ARBAH                FLOAT;

        SET @BOXX = (SELECT ISNULL((DEBIT - CREDIT), 0) FROM [dbo].[T_BALANCE_FINAL] WHERE T_ID = 18);
        SET @MADENOON = (SELECT ISNULL(DEBIT - CREDIT, 0) FROM [dbo].[T_BALANCE_FINAL] WHERE T_ID = 16);
        SET @DAENOON = (SELECT ISNULL(DEBIT - CREDIT, 0) FROM [dbo].[T_BALANCE_FINAL] WHERE T_ID = 17);
        SET @STORERR_CORRECT = (SELECT ISNULL(DEBIT - CREDIT, 0) FROM [dbo].[T_BALANCE_FINAL] WHERE T_ID = 14);
        SET @SMAH = (SELECT ISNULL(DEBIT - CREDIT, 0) FROM [dbo].[T_BALANCE_FINAL] WHERE T_ID = 22);
        SET @ARBAH = (SELECT ISNULL(BALANCE, 0) FROM [dbo].[T_BALANCE_FINAL] WHERE T_ID = 23);
        SET @ARNAH_WA_HKSAEER = (SELECT ISNULL(BALANCE, 0) FROM [dbo].[T_BALANCE_FINAL] WHERE T_ID = 24);
        SET @FIRSTT = (SELECT ISNULL(BALANCE, 0) FROM [dbo].[T_BALANCE_FINAL] WHERE T_ID = 5);

        SET @AMO = @FIRSTT + @ARBAH + @STORERR_CORRECT + @ARNAH_WA_HKSAEER;
        SET @BALANCE = @AMO;
        INSERT INTO [dbo].[T_BALANCE_FINAL]
            ([T_ID], [S_DATE], [T_DATE], [NAME], [DEBIT], [CREDIT], [BALANCE])
        VALUES
            (25, @D1, @D2, N''صافي راس المال العام  لغاية الفترة'', 0, 0, @BALANCE);

        ----------------------------------------------------------------
        -- إنهاء العملية بنجاح
        ----------------------------------------------------------------
        SET @SUBMIT_FLAG = 1;
    END TRY
    BEGIN CATCH
        -- في حالة حدوث خطأ يتم تعيين العلم إلى 0 وإعادة الخطأ للمستدعي
        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_DAYLY_ALL_REPORT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_DAYLY_ALL_REPORT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_GET_FILL_DAYLY_ALL_REPORT]
    @D1 DATE,
    @D2 DATE,
    @SECURETY_CODE INT,
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET @SUBMIT_FLAG = 0;
    
    BEGIN TRY
        DECLARE 
            @CURRANCY_CODE INT,
            @CURRANCY_USA FLOAT,
            @CURRANCY_IQ FLOAT,
            @CURRANCY_EQUAL FLOAT,
            @TOT_SALES FLOAT,
            @TOT_SALES_CASH FLOAT,
            @TOT_SALES_DEBIT FLOAT,
            @TOT_ARBAH_SALES FLOAT,
            @TOT_RE_SALES FLOAT,
            @TOT_RE_SALES_CASH FLOAT,
            @TOT_RE_SALES_DEBIT FLOAT,
            @TOT_RE_ARBAH_SALES FLOAT,
            @TOT_BUY FLOAT,
            @TOT_BUY_CASH FLOAT,
            @TOT_BUY_DEBIT FLOAT,
            @TOT_RE_BUY FLOAT,
            @TOT_RE_BUY_CASH FLOAT,
            @TOT_RE_BUY_DEBIT FLOAT,
            @TOT_EXPENSES FLOAT,
            @TOT_CASH_SUPPLIER FLOAT,
            @TOT_ERADAT FLOAT,
            @TOT_SMAHAT FLOAT,
            @TOT_INCOME FLOAT,
            @TOT_CASH_CLIENT FLOAT,
            @TOT_BOX_BALANCE FLOAT,
            @TOT_OUT_SHAREEK FLOAT;
        
        SET @TOT_OUT_SHAREEK = 0;
        
        -- تحديد العملة الأساسية
        SELECT @CURRANCY_CODE = CURRANCY_CODE 
        FROM T_CURRANNCY 
        WHERE CURRANCY_PRIMARY = 1;
        
        IF @CURRANCY_CODE = 1
        BEGIN
            SELECT @CURRANCY_USA = CURRANCY_EQUAL 
            FROM T_CURRANNCY WHERE CURRANCY_CODE = 1;
            
            SELECT @CURRANCY_IQ = 1 / CURRANCY_EQUAL 
            FROM T_CURRANNCY WHERE CURRANCY_CODE = 2;
            
            SET @CURRANCY_EQUAL = @CURRANCY_IQ;
        END
        ELSE
        BEGIN
            SELECT @CURRANCY_USA = CURRANCY_EQUAL 
            FROM T_CURRANNCY WHERE CURRANCY_CODE = 1;
            
            SELECT @CURRANCY_IQ = CURRANCY_EQUAL 
            FROM T_CURRANNCY WHERE CURRANCY_CODE = 2;
            
            SET @CURRANCY_EQUAL = @CURRANCY_USA;
        END

        --------------------------------------------------------------------------------
        -- حساب إيرادات المبيعات (الإيجابية)
        SELECT 
            @TOT_SALES = ISNULL(SUM(
                CASE 
                    WHEN CURRANCY_CODE = 1 THEN NET_SALES * @CURRANCY_USA
                    WHEN CURRANCY_CODE = 2 THEN NET_SALES * @CURRANCY_IQ
                END
            ),0),
            @TOT_SALES_CASH = ISNULL(SUM(
                CASE 
                    WHEN CURRANCY_CODE = 1 THEN CASH_USA * @CURRANCY_USA
                    WHEN CURRANCY_CODE = 2 THEN CASH_IQ * @CURRANCY_IQ
                END
            ),0),
            @TOT_SALES_DEBIT = ISNULL(SUM(
                CASE WHEN @CURRANCY_CODE = 1 THEN REMAIN_USA ELSE REMAIN_IQ END
            ),0),
            @TOT_ARBAH_SALES = ISNULL(SUM(
                CASE 
                    WHEN CURRANCY_CODE = 1 THEN (NET_SALES - TOTAL_COST) * @CURRANCY_USA
                    WHEN CURRANCY_CODE = 2 THEN (NET_SALES - TOTAL_COST) * @CURRANCY_IQ
                END
            ),0)
        FROM T_SALES WITH (NOLOCK)
        WHERE NET_SALES >= 0 
          AND IVC_CODE <> 10 
          AND ACTIVE = 1 
          AND BILL_DATE BETWEEN @D1 AND @D2
          AND SECURETY_CODE <= @SECURETY_CODE;
        
        --------------------------------------------------------------------------------
        -- حساب مردود المبيعات (السالبة)
        SELECT 
            @TOT_RE_SALES = ISNULL(SUM(
                CASE 
                    WHEN CURRANCY_CODE = 1 THEN NET_SALES * @CURRANCY_USA
                    WHEN CURRANCY_CODE = 2 THEN NET_SALES * @CURRANCY_IQ
                END
            ),0),
            @TOT_RE_SALES_CASH = ISNULL(SUM(
                CASE 
                    WHEN CURRANCY_CODE = 1 THEN CASH_USA * @CURRANCY_USA
                    WHEN CURRANCY_CODE = 2 THEN CASH_IQ * @CURRANCY_IQ
                END
            ),0),
            @TOT_RE_SALES_DEBIT = ISNULL(SUM(
                CASE WHEN @CURRANCY_CODE = 1 THEN REMAIN_USA ELSE REMAIN_IQ END
            ),0),
            @TOT_RE_ARBAH_SALES = ISNULL(SUM(
                CASE 
                    WHEN CURRANCY_CODE = 1 THEN (NET_SALES - TOTAL_COST) * @CURRANCY_USA
                    WHEN CURRANCY_CODE = 2 THEN (NET_SALES - TOTAL_COST) * @CURRANCY_IQ
                END
            ),0)
        FROM T_SALES WITH (NOLOCK)
        WHERE NET_SALES < 0 
          AND IVC_CODE <> 10 
          AND ACTIVE = 1 
          AND BILL_DATE BETWEEN @D1 AND @D2
          AND SECURETY_CODE <= @SECURETY_CODE;
        
        --------------------------------------------------------------------------------
        -- حساب المشتريات (الإيجابية)
        SELECT 
            @TOT_BUY = ISNULL(SUM(NET_BUY),0),
            @TOT_BUY_CASH = ISNULL(SUM(
                CASE 
                    WHEN CURRANCY_CODE = 1 THEN CASH_USA * @CURRANCY_USA
                    WHEN CURRANCY_CODE = 2 THEN CASH_IQ * @CURRANCY_IQ
                END
            ),0),
            @TOT_BUY_DEBIT = ISNULL(SUM(
                CASE WHEN @CURRANCY_CODE = 1 THEN REMAIN_USA ELSE REMAIN_IQ END
            ),0)
        FROM T_BUY WITH (NOLOCK)
        WHERE ACTIVE = 1 
          AND TOTAL_COST >= 0 
          AND BILL_DATE BETWEEN @D1 AND @D2
          AND SECURETY_CODE <= @SECURETY_CODE;
        
        --------------------------------------------------------------------------------
        -- حساب مردود المشتريات (السالبة)
        SELECT 
            @TOT_RE_BUY = ISNULL(SUM(NET_BUY),0),
            @TOT_RE_BUY_CASH = ISNULL(SUM(
                CASE 
                    WHEN CURRANCY_CODE = 1 THEN CASH_USA * @CURRANCY_USA
                    WHEN CURRANCY_CODE = 2 THEN CASH_IQ * @CURRANCY_IQ
                END
            ),0),
            @TOT_RE_BUY_DEBIT = ISNULL(SUM(
                CASE WHEN @CURRANCY_CODE = 1 THEN REMAIN_USA ELSE REMAIN_IQ END
            ),0)
        FROM T_BUY WITH (NOLOCK)
        WHERE ACTIVE = 1 
          AND TOTAL_COST < 0 
          AND BILL_DATE BETWEEN @D1 AND @D2
          AND SECURETY_CODE <= @SECURETY_CODE;
        
        --------------------------------------------------------------------------------
        -- حساب المصروفات من T_BOX (للفترة المحددة) للفئات المختلفة
        SELECT 
            @TOT_EXPENSES = ISNULL(SUM((DEBIT - CREDIT)*@CURRANCY_USA + (DEBIT_IQ - CREDIT_IQ)*@CURRANCY_IQ),0)
        FROM T_BOX WITH (NOLOCK)
        WHERE ACTIVE = 1 
          AND BILL_DATE BETWEEN @D1 AND @D2 
          AND ACCOUNT_CODE BETWEEN 300 AND 399;
        
        SELECT 
            @TOT_OUT_SHAREEK = ISNULL(SUM((DEBIT - CREDIT)*@CURRANCY_USA + (DEBIT_IQ - CREDIT_IQ)*@CURRANCY_IQ),0)
        FROM T_BOX WITH (NOLOCK)
        WHERE ACTIVE = 1 
          AND BILL_DATE BETWEEN @D1 AND @D2 
          AND ACCOUNT_CODE BETWEEN 6000 AND 6999;
        
        SELECT 
            @TOT_CASH_SUPPLIER = ISNULL(SUM(DEBIT)*@CURRANCY_USA + SUM(DEBIT_IQ)*@CURRANCY_IQ,0)
        FROM T_BOX WITH (NOLOCK)
        WHERE ACTIVE = 1 
          AND BILL_DATE BETWEEN @D1 AND @D2 
          AND ACCOUNT_CODE BETWEEN 2100000 AND 2199999 
          AND (B_CODE  IN(5,7,15,28));
        
        SELECT 
            @TOT_ERADAT = ISNULL(SUM((DEBIT - CREDIT)*@CURRANCY_USA + (DEBIT_IQ - CREDIT_IQ)*@CURRANCY_IQ),0)
        FROM T_BOX WITH (NOLOCK)
        WHERE ACTIVE = 1 
          AND BILL_DATE BETWEEN @D1 AND @D2 
          AND ACCOUNT_CODE BETWEEN 400 AND 499;
        
        SELECT 
            @TOT_SMAHAT = ISNULL(SUM((DEBIT - CREDIT)*@CURRANCY_USA + (DEBIT_IQ - CREDIT_IQ)*@CURRANCY_IQ),0)
        FROM T_BOX WITH (NOLOCK)
        WHERE ACTIVE = 1 
          AND BILL_DATE BETWEEN @D1 AND @D2 
          AND ACCOUNT_CODE = 4000;
        
        SELECT 
            @TOT_INCOME = ISNULL(SUM((CREDIT - DEBIT)*@CURRANCY_USA + (CREDIT_IQ - DEBIT_IQ)*@CURRANCY_IQ),0)
        FROM T_BOX WITH (NOLOCK)
        WHERE ACTIVE = 1 
          AND BILL_DATE BETWEEN @D1 AND @D2 
          AND ACCOUNT_CODE BETWEEN 400 AND 499;
        
        SELECT 
            @TOT_CASH_CLIENT = ISNULL(SUM(CREDIT)*@CURRANCY_USA + SUM(CREDIT_IQ)*@CURRANCY_IQ,0)
        FROM T_BOX WITH (NOLOCK)
        WHERE ACTIVE = 1 
          AND BILL_DATE BETWEEN @D1 AND @D2 
          AND ACCOUNT_CODE BETWEEN 2100000 AND 2199999 
          AND (B_CODE IN(5,7,15,28));
        
        -- حساب رصيد الصندوق من العرض في V_ACCOUNT3
        SELECT 
            @TOT_BOX_BALANCE = ISNULL(SUM(BALANCE)*@CURRANCY_USA + SUM(BALANCE_IQ)*@CURRANCY_IQ,0)
        FROM V_ACCOUNT3 WITH (NOLOCK)
        WHERE SECURETY_CODE <= @SECURETY_CODE 
          AND ACCOUNT_CODE BETWEEN 5000 AND 5999;
        
        --------------------------------------------------------------------------------
        -- حذف البيانات السابقة من التقرير وإدراج القيم المحسوبة
        DELETE FROM T_DAYLE_ALL_REPORT;
        
        INSERT INTO [dbo].[T_DAYLE_ALL_REPORT]
        (
            [T_ID],
            [D_DATE],
            [SECURETY_CODE],
            [CURRANCY_CODE],
            [CURRANCY_EQUAL],
            [TOT_SALES],
            [TOT_SALES_CASH],
            [TOT_SALES_DEBIT],
            [TOT_ARBAH_SALES],
            [TOT_RE_SALES],
            [TOT_RE_SALES_CASH],
            [TOT_RE_SALES_DEBIT],
            [TOT_RE_ARBAH_SALES],
            [TOT_BUY],
            [TOT_BUY_CASH],
            [TOT_BUY_DEBIT],
            [TOT_RE_BUY],
            [TOT_RE_BUY_CASH],
            [TOT_RE_BUY_DEBIT],
            [TOT_EXPENSES],
            [TOT_CASH_SUPPLIER],
            [TOT_ERADAT],
            [TOT_SMAHAT],
            [TOT_INCOME],
            [TOT_CASH_CLIENT],
            [TOT_BOX_BALANCE]
        )
        VALUES
        (
            1,
            @D1,
            @SECURETY_CODE,
            @CURRANCY_CODE,
            @TOT_OUT_SHAREEK,
            @TOT_SALES,
            @TOT_SALES_CASH,
            @TOT_SALES_DEBIT,
            @TOT_ARBAH_SALES,
            @TOT_RE_SALES,
            @TOT_RE_SALES_CASH,
            @TOT_RE_SALES_DEBIT,
            @TOT_RE_ARBAH_SALES,
            @TOT_BUY,
            @TOT_BUY_CASH,
            @TOT_BUY_DEBIT,
            @TOT_RE_BUY,
            @TOT_RE_BUY_CASH,
            @TOT_RE_BUY_DEBIT,
            @TOT_EXPENSES,
            @TOT_CASH_SUPPLIER,
            @TOT_ERADAT,
            @TOT_SMAHAT,
            @TOT_INCOME,
            @TOT_CASH_CLIENT,
            @TOT_BOX_BALANCE
        );
        
        SET @SUBMIT_FLAG = 1;
    END TRY
    BEGIN CATCH
        -- في حال حدوث أي خطأ، يتم إعادة الخطأ
        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_DAYLY_ALL_REPORT_USER_ONLY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_DAYLY_ALL_REPORT_USER_ONLY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_GET_FILL_DAYLY_ALL_REPORT_USER_ONLY]
    @D1 DATE,
    @D2 DATE,
    @USER_NAME NVARCHAR(MAX),
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET @SUBMIT_FLAG = 0;
    
    BEGIN TRY
        -- حذف بيانات التقرير السابقة
        DELETE FROM T_DAYLE_ALL_REPORT;

        DECLARE 
            @T_ID INT,
            @D_DATE DATE,
            @CURRANCY_CODE INT,
            @CURRANCY_USA FLOAT,
            @CURRANCY_IQ FLOAT,
            @CURRANCY_EQUAL FLOAT,
            @TOT_SALES FLOAT,
            @TOT_SALES_CASH FLOAT,
            @TOT_SALES_DEBIT FLOAT,
            @TOT_ARBAH_SALES FLOAT,
            @TOT_RE_SALES FLOAT,
            @TOT_RE_SALES_CASH FLOAT,
            @TOT_RE_SALES_DEBIT FLOAT,
            @TOT_RE_ARBAH_SALES FLOAT,

			 @TOT_DISCOUNT_SALES FLOAT,
			@TOT_RE_DISCOUNT_SALES FLOAT,
			@TOT_DISCOUNT  FLOAT,

            @TOT_BUY FLOAT,
            @TOT_BUY_CASH FLOAT,
            @TOT_BUY_DEBIT FLOAT,
            @TOT_RE_BUY FLOAT,
            @TOT_RE_BUY_CASH FLOAT,
            @TOT_RE_BUY_DEBIT FLOAT,
            @TOT_EXPENSES FLOAT,
            @TOT_CASH_SUPPLIER FLOAT,
            @TOT_INCOME FLOAT,
            @TOT_CASH_CLIENT FLOAT,
            @TOT_BOX_BALANCE FLOAT,
            @NET_ARBAH FLOAT,
            @USER_CODE INT;

        -- الحصول على العملة الأساسية
        SELECT @CURRANCY_CODE = CURRANCY_CODE 
        FROM T_CURRANNCY WITH (NOLOCK)
        WHERE CURRANCY_PRIMARY = 1;

        IF @CURRANCY_CODE = 1
        BEGIN
            SELECT @CURRANCY_USA = CURRANCY_EQUAL 
            FROM T_CURRANNCY WITH (NOLOCK)
            WHERE CURRANCY_CODE = 1;

            SELECT @CURRANCY_IQ = 1 / CURRANCY_EQUAL 
            FROM T_CURRANNCY WITH (NOLOCK)
            WHERE CURRANCY_CODE = 2;

            SET @CURRANCY_EQUAL = @CURRANCY_IQ;
        END
        ELSE
        BEGIN
            SELECT @CURRANCY_USA = CURRANCY_EQUAL 
            FROM T_CURRANNCY WITH (NOLOCK)
            WHERE CURRANCY_CODE = 1;

            SELECT @CURRANCY_IQ = CURRANCY_EQUAL 
            FROM T_CURRANNCY WITH (NOLOCK)
            WHERE CURRANCY_CODE = 2;

            SET @CURRANCY_EQUAL = @CURRANCY_USA;
        END

        -- الحصول على معرف المستخدم بناءً على اسم المستخدم (يستخدم LIKE للتحقق)
        SELECT @USER_CODE = USER_CODE 
        FROM T_USERS WITH (NOLOCK)
        WHERE USER_NAME LIKE @USER_NAME 
          AND ACTIVE = 1;

        -- تعيين القيم الافتراضية للمتغيرات التي لم تُحسب
        SET @TOT_SALES = 0;
        SET @TOT_SALES_DEBIT = 0;
        SET @TOT_ARBAH_SALES = 0;
        SET @TOT_RE_SALES = 0;
        SET @TOT_RE_SALES_CASH = 0;
        SET @TOT_RE_SALES_DEBIT = 0;
        SET @TOT_RE_ARBAH_SALES = 0;
        SET @TOT_BUY = 0;
        SET @TOT_BUY_CASH = 0;
        SET @TOT_BUY_DEBIT = 0;
        SET @TOT_RE_BUY = 0;
        SET @TOT_RE_BUY_CASH = 0;
        SET @TOT_RE_BUY_DEBIT = 0;
        SET @TOT_CASH_SUPPLIER = 0;
        SET @TOT_INCOME = 0;
		SET @TOT_DISCOUNT_SALES= 0;
		SET @TOT_RE_DISCOUNT_SALES= 0;
		-------------------------------------------------------
	
        --------------------------------------------------------------------------------
        -- حساب مردود المبيعات (السالبة)
        SELECT 
            @TOT_RE_SALES = ISNULL(SUM(
                CASE 
                    WHEN CURRANCY_CODE = 1 THEN NET_SALES * @CURRANCY_USA
                    WHEN CURRANCY_CODE = 2 THEN NET_SALES * @CURRANCY_IQ
                END
            ),0),
            @TOT_RE_SALES_CASH = ISNULL(SUM(
                CASE 
                    WHEN CURRANCY_CODE = 1 THEN CASH_USA * @CURRANCY_USA
                    WHEN CURRANCY_CODE = 2 THEN CASH_IQ * @CURRANCY_IQ
                END
            ),0),
            @TOT_RE_SALES_DEBIT = ISNULL(SUM(
                CASE WHEN @CURRANCY_CODE = 1 THEN REMAIN_USA ELSE REMAIN_IQ END
            ),0),
            @TOT_RE_ARBAH_SALES = ISNULL(SUM(
                CASE 
                    WHEN CURRANCY_CODE = 1 THEN (NET_SALES - TOTAL_COST) * @CURRANCY_USA
                    WHEN CURRANCY_CODE = 2 THEN (NET_SALES - TOTAL_COST) * @CURRANCY_IQ
                END
            ),0),
            @TOT_RE_DISCOUNT_SALES = ISNULL(SUM(
                CASE 
                    WHEN CURRANCY_CODE = 1 THEN TOTAL_DISCOUNT * @CURRANCY_USA
                    WHEN CURRANCY_CODE = 2 THEN TOTAL_DISCOUNT * @CURRANCY_IQ
                END
            ),0)
        FROM T_SALES WITH (NOLOCK)
        WHERE NET_SALES < 0 
          AND IVC_CODE <> 10 
          AND ACTIVE = 1 
           AND BILL_DATE BETWEEN @D1 AND @D2 
          AND USER_CREATE LIKE @USER_NAME;
        	      --------------------------------------------------------------------------------
        -- حساب إيرادات المبيعات (الإيجابية)
        SELECT 
            @TOT_SALES = ISNULL(SUM(
                CASE 
                    WHEN CURRANCY_CODE = 1 THEN NET_SALES * @CURRANCY_USA
                    WHEN CURRANCY_CODE = 2 THEN NET_SALES * @CURRANCY_IQ
                END
            ),0),
            @TOT_SALES_CASH = ISNULL(SUM(
                CASE 
                    WHEN CURRANCY_CODE = 1 THEN CASH_USA * @CURRANCY_USA
                    WHEN CURRANCY_CODE = 2 THEN CASH_IQ * @CURRANCY_IQ
                END
            ),0),
            @TOT_SALES_DEBIT = ISNULL(SUM(
                CASE WHEN @CURRANCY_CODE = 1 THEN REMAIN_USA ELSE REMAIN_IQ END
            ),0),
            @TOT_ARBAH_SALES = ISNULL(SUM(
                CASE 
                    WHEN CURRANCY_CODE = 1 THEN (NET_SALES - TOTAL_COST) * @CURRANCY_USA
                    WHEN CURRANCY_CODE = 2 THEN (NET_SALES - TOTAL_COST) * @CURRANCY_IQ
                END
            ),0),
            @TOT_DISCOUNT_SALES = ISNULL(SUM(
                CASE 
                    WHEN CURRANCY_CODE = 1 THEN TOTAL_DISCOUNT * @CURRANCY_USA
                    WHEN CURRANCY_CODE = 2 THEN TOTAL_DISCOUNT * @CURRANCY_IQ
                END
            ),0)
        FROM T_SALES WITH (NOLOCK)
        WHERE NET_SALES >= 0 
          AND IVC_CODE <> 10 
           AND ACTIVE = 1 
          AND BILL_DATE BETWEEN @D1 AND @D2 
          AND USER_CREATE LIKE @USER_NAME;
        
		-------------------------------------------------------
		SET @TOT_DISCOUNT=@TOT_DISCOUNT_SALES-@TOT_RE_DISCOUNT_SALES

		   -- حساب المصروفات من T_BOX (للفترة المحددة) للفئات المختلفة
        SELECT 
            @TOT_EXPENSES = ISNULL(SUM((DEBIT - CREDIT)*@CURRANCY_USA + (DEBIT_IQ - CREDIT_IQ)*@CURRANCY_IQ),0)
        FROM T_BOX WITH (NOLOCK)
        WHERE ACTIVE = 1 
          AND BILL_DATE BETWEEN @D1 AND @D2 
          AND ACCOUNT_CODE BETWEEN 300 AND 399 
		  AND USER_CODE = @USER_CODE;


        -- حساب إجمالي النقد المستلم من العملاء للمستخدم من T_BOX (حسابات محددة مع B_CODE 5 أو 7)
        SELECT @TOT_CASH_CLIENT = ISNULL(SUM(CREDIT),0)*@CURRANCY_USA 
                                  + ISNULL(SUM(CREDIT_IQ),0)*@CURRANCY_IQ
        FROM T_BOX WITH (NOLOCK)
        WHERE ACTIVE = 1 
          AND BILL_DATE BETWEEN @D1 AND @D2 
          AND ACCOUNT_CODE BETWEEN 2100000 AND 2199999 
          AND (B_CODE  IN(5,7,15,28))
          AND USER_CODE = @USER_CODE;

        -- حساب رصيد الصندوق اعتماداً على النقدية الداخلة والمصروفات والنقد المستلم
        SET @TOT_BOX_BALANCE = (@TOT_SALES_CASH+@TOT_RE_SALES_CASH - @TOT_EXPENSES) + @TOT_CASH_CLIENT;

        -- إدراج سجل التقرير في الجدول
        INSERT INTO [dbo].[T_DAYLE_ALL_REPORT]
        (
            [T_ID],
            [D_DATE],
            [SECURETY_CODE],
            [CURRANCY_CODE],
            [CURRANCY_EQUAL],
            [TOT_SALES],
            [TOT_SALES_CASH],
            [TOT_SALES_DEBIT],
            [TOT_ARBAH_SALES],
            [TOT_RE_SALES],
            [TOT_RE_SALES_CASH],
            [TOT_RE_SALES_DEBIT],
            [TOT_RE_ARBAH_SALES],
            [TOT_BUY],
            [TOT_BUY_CASH],
            [TOT_BUY_DEBIT],
            [TOT_RE_BUY],
            [TOT_RE_BUY_CASH],
            [TOT_RE_BUY_DEBIT],
            [TOT_EXPENSES],
            [TOT_CASH_SUPPLIER],
            [TOT_INCOME],
            [TOT_CASH_CLIENT],
            [TOT_BOX_BALANCE]
        )
        VALUES
        (
            1,
            @D1,
            @USER_CODE,
            @CURRANCY_CODE,
            @CURRANCY_EQUAL,
            @TOT_SALES,
            @TOT_SALES_CASH,
            @TOT_SALES_DEBIT,
            @TOT_ARBAH_SALES,
            @TOT_RE_SALES,
            @TOT_RE_SALES_CASH,
            @TOT_RE_SALES_DEBIT,
            @TOT_RE_ARBAH_SALES,
            @TOT_BUY+@TOT_DISCOUNT,
            @TOT_BUY_CASH,
            @TOT_BUY_DEBIT,
            @TOT_RE_BUY,
            @TOT_RE_BUY_CASH,
            @TOT_RE_BUY_DEBIT,
            @TOT_EXPENSES,
            @TOT_CASH_SUPPLIER,
            @TOT_INCOME,
            @TOT_CASH_CLIENT,
            @TOT_BOX_BALANCE
        );
        
        SET @SUBMIT_FLAG = 1;
    END TRY
    BEGIN CATCH
        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_DAYLY_ARBAH_NET_REPORT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_DAYLY_ARBAH_NET_REPORT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_GET_FILL_DAYLY_ARBAH_NET_REPORT]
    @D1 DATE,
    @D2 DATE,
    @SECURETY_CODE INT,
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET @SUBMIT_FLAG = 0;

    BEGIN TRY
        -- حذف البيانات السابقة من تقرير اليومي
        DELETE FROM T_DAYLE_ALL_REPORT;

        -- الحصول على الإعدادات الخاصة بالعملة
        DECLARE 
            @CURRANCY_CODE INT,
            @CURRANCY_USA FLOAT,
            @CURRANCY_IQ FLOAT,
            @CURRANCY_EQUAL FLOAT;
        
        SELECT @CURRANCY_CODE = CURRANCY_CODE 
        FROM T_CURRANNCY WITH (NOLOCK)
        WHERE CURRANCY_PRIMARY = 1;

        IF @CURRANCY_CODE = 1
        BEGIN
            SELECT @CURRANCY_USA = CURRANCY_EQUAL 
            FROM T_CURRANNCY WITH (NOLOCK)
            WHERE CURRANCY_CODE = 1;
            SELECT @CURRANCY_IQ = 1 / CURRANCY_EQUAL 
            FROM T_CURRANNCY WITH (NOLOCK)
            WHERE CURRANCY_CODE = 2;
            SET @CURRANCY_EQUAL = @CURRANCY_IQ;
        END
        ELSE
        BEGIN
            SELECT @CURRANCY_USA = CURRANCY_EQUAL 
            FROM T_CURRANNCY WITH (NOLOCK)
            WHERE CURRANCY_CODE = 1;
            SELECT @CURRANCY_IQ = CURRANCY_EQUAL 
            FROM T_CURRANNCY WITH (NOLOCK)
            WHERE CURRANCY_CODE = 2;
            SET @CURRANCY_EQUAL = @CURRANCY_USA;
        END

        /*
          نقوم باستخراج قائمة التواريخ المميزة الموجودة في T_BOX للفترة المحددة (بشرط ACTIVE=1)
          ومن ثم نجمع البيانات من V_SALES وT_BOX لكل تاريخ باستخدام OUTER APPLY
        */
        INSERT INTO T_DAYLE_ALL_REPORT
        (
            [T_ID],
            [D_DATE],
            [SECURETY_CODE],
            [CURRANCY_CODE],
            [CURRANCY_EQUAL],
            [TOT_SALES],
            [TOT_SALES_CASH],
            [TOT_SALES_DEBIT],
            [TOT_ARBAH_SALES],
            [TOT_RE_SALES],
            [TOT_RE_SALES_CASH],
            [TOT_RE_SALES_DEBIT],
            [TOT_RE_ARBAH_SALES],
            [TOT_BUY],
            [TOT_BUY_CASH],
            [TOT_BUY_DEBIT],
            [TOT_RE_BUY],
            [TOT_RE_BUY_CASH],
            [TOT_RE_BUY_DEBIT],
            [TOT_EXPENSES],
            [TOT_CASH_SUPPLIER],
            [TOT_INCOME],
            [TOT_CASH_CLIENT],
            [TOT_BOX_BALANCE]
        )
        SELECT
            1 AS T_ID,                                  -- قيمة ثابتة كما في الإجراء الأصلي
            D.BILL_DATE AS D_DATE,
            1 AS SECURETY_CODE,                         -- ثابتة كما في الإجراء الأصلي
            @CURRANCY_CODE,
            @CURRANCY_EQUAL,
            S.TOT_SALES,                                -- مجموع (NET_SALES - TOTAL_TAX_ITEM - TOTAL_MANDOOB_ITEM - TOTAL_ADD_AMO)
            S.TOT_SALES_CASH,                           -- مجموع TOTAL_COST
            S.TOT_ADD_COST,                             -- مجموع TOTAL_ADD_COST سيتم وضعه في عمود TOT_SALES_DEBIT
            S.TOT_ARBAH_SALES,                          -- مجموع TOTAL_ARBAH
            0 AS TOT_RE_SALES,                          -- تم تعيينه إلى 0
            0 AS TOT_RE_SALES_CASH,                       -- تم تعيينه إلى 0
            S.TOT_ADD_AMO,                              -- مجموع TOTAL_ADD_AMO يوضع في عمود TOT_RE_SALES_DEBIT
            0 AS TOT_RE_ARBAH_SALES,                     -- تم تعيينه إلى 0
            0 AS TOT_BUY, 0 AS TOT_BUY_CASH, 0 AS TOT_BUY_DEBIT,
            0 AS TOT_RE_BUY, 0 AS TOT_RE_BUY_CASH, 0 AS TOT_RE_BUY_DEBIT,
            B.TOT_EXPENSES,                             -- مجموع (DEBIT_CUR - CREDIT_CUR) من T_BOX للفواتير الخاصة بالمصروفات
            0 AS TOT_CASH_SUPPLIER,                      -- لم يتم حسابه في الإجراء الأصلي
            0 AS TOT_INCOME,                            -- لم يتم حسابه في الإجراء الأصلي
            0 AS TOT_CASH_CLIENT,                       -- لم يتم حسابه في الإجراء الأصلي
            0 AS TOT_BOX_BALANCE                        -- لم يتم حسابه في هذا الإجراء
        FROM 
        (
            SELECT DISTINCT BILL_DATE
            FROM T_BOX WITH (NOLOCK)
            WHERE ACTIVE = 1
              AND BILL_DATE BETWEEN @D1 AND @D2
        ) D
        OUTER APPLY
        (
            SELECT 
                ISNULL(SUM(NET_SALES - TOTAL_TAX_ITEM - TOTAL_MANDOOB_ITEM - TOTAL_ADD_AMO), 0) AS TOT_SALES,
                ISNULL(SUM(TOTAL_COST), 0) AS TOT_SALES_CASH,
                ISNULL(SUM(TOTAL_ADD_COST), 0) AS TOT_ADD_COST,
                ISNULL(SUM(TOTAL_ADD_AMO), 0) AS TOT_ADD_AMO,
                ISNULL(SUM(TOTAL_ARBAH), 0) AS TOT_ARBAH_SALES
            FROM V_SALES WITH (NOLOCK)
            WHERE BILL_DATE = D.BILL_DATE
              AND SECURETY_CODE <= @SECURETY_CODE
        ) S
        OUTER APPLY
        (
            SELECT 
                ISNULL(SUM(DEBIT_CUR - CREDIT_CUR), 0) AS TOT_EXPENSES
            FROM T_BOX WITH (NOLOCK)
            WHERE ACTIVE = 1
              AND BILL_DATE = D.BILL_DATE
              AND ACCOUNT_CODE BETWEEN 300 AND 399
        ) B
        ORDER BY D.BILL_DATE;

        SET @SUBMIT_FLAG = 1;
    END TRY
    BEGIN CATCH
        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT]
(
    @IDD           INT,
    @ACCOUNT_CODE  INT,
    @D1            DATE,
    @D2            DATE,
    @CNY_CODE      INT,
    @SUBMIT_FLAG   INT OUTPUT
)
AS
BEGIN
    SET NOCOUNT ON;
    SET @SUBMIT_FLAG = 0;

    ------------------------------------------------------------------------
    -- 1) جلب المعلومات الأساسية عن الحساب والعميل والمندوب ونوع الفاتورة الافتراضي
    ------------------------------------------------------------------------
    DECLARE 
        @ACCOUNT_NAME        NVARCHAR(MAX),
        @CLIENT_PHONE_SMS    NVARCHAR(MAX),
        @CLIENT_REGION       NVARCHAR(MAX),
        @MANDOOB_CODE        INT,
        @MANDOOB_NAME        NVARCHAR(MAX),
        @B_NAME              NVARCHAR(MAX),
        @B_COLOR             NVARCHAR(MAX);

    SELECT @ACCOUNT_NAME = ACCOUNT_NAME
      FROM T_ACCOUNTS
     WHERE ACCOUNT_CODE = @ACCOUNT_CODE;

    SELECT 
        @CLIENT_PHONE_SMS = CLIENT_FULL_PHONE,
        @CLIENT_REGION    = CLIENT_REGION,
        @MANDOOB_CODE     = MANDOOB_CODE
    FROM T_CLIENT
    WHERE CLIENT_CODE = @ACCOUNT_CODE;

    SELECT @MANDOOB_NAME = MANDOOB_NAME
      FROM T_MANDOOB
     WHERE MANDOOB_CODE = @MANDOOB_CODE;

    SELECT 
        @B_NAME  = B_NAME,
        @B_COLOR = B_COLOR
    FROM T_BILL_TYPE
    WHERE B_CODE = 0;  -- (الفاتورة الافتراضية)

    ------------------------------------------------------------------------
    -- 2) جلب الرصيد الافتتاحي (ما قبل الفترة المحددة أو ما قبل IDD)
    ------------------------------------------------------------------------
    DECLARE 
        @BalanceFirstUSA  DECIMAL(18,4) = 0,
        @BalanceFirstIQ   DECIMAL(18,4) = 0,
        @BalanceFirstCur  DECIMAL(18,4) = 0;

    SELECT 
        @BalanceFirstUSA = ISNULL(SUM(DEBIT - CREDIT), 0),
        @BalanceFirstIQ  = ISNULL(SUM(DEBIT_IQ - CREDIT_IQ), 0),
        @BalanceFirstCur = ISNULL(SUM(DEBIT_CUR - CREDIT_CUR), 0)
    FROM T_BOX
    WHERE ACCOUNT_CODE = @ACCOUNT_CODE
      AND ACTIVE = 1
      AND (
           (@IDD = 0 AND BILL_DATE < @D1)
           OR (@IDD <> 0 AND T_ID_BOX <= @IDD)
          );

    ------------------------------------------------------------------------
    -- 3) جدول مؤقت لحفظ النتائج
    ------------------------------------------------------------------------
    IF OBJECT_ID(''tempdb..#TMP_REPORT_ACCOUNT'') IS NOT NULL
       DROP TABLE #TMP_REPORT_ACCOUNT;

    CREATE TABLE #TMP_REPORT_ACCOUNT
    (
        T_ID_BOX            INT NOT NULL PRIMARY KEY,
        BILL_BRANCH         NVARCHAR(50),
        BILL_NUMBER         NVARCHAR(50),
        BILL_DATE           DATE,
        BILL_TIME           DATETIME,
        B_CODE              INT,
        B_NAME              NVARCHAR(MAX),
        MOVE_CODE           INT,
        MOVE_NAME           NVARCHAR(MAX),
        ACCOUNT_CODE        INT,
        ACCOUNT_NAME        NVARCHAR(MAX),
        ACCOUNT_FULL_NAME   NVARCHAR(MAX),
        ACCOUNT_DESCRIPTION NVARCHAR(MAX),
        AMO_DEBIT           DECIMAL(18,4),
        AMO_CREDIT          DECIMAL(18,4),
        BALANCE_USA         DECIMAL(18,4),
        AMO_DEBIT_IQ        DECIMAL(18,4),
        AMO_CREDIT_IQ       DECIMAL(18,4),
        BALANCE_IQ          DECIMAL(18,4),
        AMO_DEBIT_CUR       DECIMAL(18,3),
        AMO_CREDIT_CUR      DECIMAL(18,3),
        BALANCE_CUR         DECIMAL(18,3),
        DESCRIPTION         NVARCHAR(MAX),
        USER_CODE           INT,
        USER_NAME           NVARCHAR(MAX),
        DEAL_CODE           INT,
        DEAL_NAME           NVARCHAR(MAX),
        BRANCH_CODE         INT,
        BRANCH_NAME         NVARCHAR(MAX),
        MANDOB_NAME         NVARCHAR(MAX),
        CLIENT_REGION       NVARCHAR(MAX),
        CLIENT_PHONE_SMS    NVARCHAR(MAX),
        B_COLOR             NVARCHAR(MAX),
        CHECKED             BIT,
        ID_BOX              INT
    );

    ------------------------------------------------------------------------
    -- 4) إدخال "رصيد سابق" كسجل أولي في كشف الحساب
    ------------------------------------------------------------------------
    INSERT INTO #TMP_REPORT_ACCOUNT
    (
        T_ID_BOX, BILL_BRANCH, BILL_NUMBER, BILL_DATE, BILL_TIME,
        B_CODE, B_NAME, MOVE_CODE, MOVE_NAME, ACCOUNT_CODE, ACCOUNT_NAME, ACCOUNT_FULL_NAME,
        ACCOUNT_DESCRIPTION, AMO_DEBIT, AMO_CREDIT, BALANCE_USA,
        AMO_DEBIT_IQ, AMO_CREDIT_IQ, BALANCE_IQ,
        AMO_DEBIT_CUR, AMO_CREDIT_CUR, BALANCE_CUR,
        DESCRIPTION, USER_CODE, USER_NAME, DEAL_CODE, DEAL_NAME,
        BRANCH_CODE, BRANCH_NAME, MANDOB_NAME, CLIENT_REGION, CLIENT_PHONE_SMS,
        B_COLOR, CHECKED, ID_BOX
    )
    SELECT
        0 AS T_ID_BOX,
        NULL AS BILL_BRANCH,
        ''0'' AS BILL_NUMBER,
        CONVERT(NVARCHAR(MAX), @D1, 111) AS BILL_DATE,
        NULL AS BILL_TIME,
        0 AS B_CODE,
        @B_NAME AS B_NAME,
        0 AS MOVE_CODE,
        NULL AS MOVE_NAME,
        @ACCOUNT_CODE,
        @ACCOUNT_NAME,
        NULL,
        NULL,
        NULL, NULL,
        @BalanceFirstUSA,
        NULL, NULL,
	    @BalanceFirstIQ ,
        NULL, NULL,
        @BalanceFirstCur,
        N''رصيد سابق ماقبل الفترة'',
        0, NULL,
        0, NULL,
        0, NULL,
        @MANDOOB_NAME,
        @CLIENT_REGION,
        @CLIENT_PHONE_SMS,
        @B_COLOR,
        0,
        0;

    ------------------------------------------------------------------------
    -- 5) جلب الحركات التفصيلية من T_BOX حسب قيمة @IDD
    ------------------------------------------------------------------------
    IF (@IDD = 0)
    BEGIN
        -- إذا @IDD=0: نعتمد التاريخ Between @D1 AND @D2
        WITH BaseData AS
        (
            SELECT
                T_ID_BOX,
                BILL_BRANCH,
                BILL_NUMBER,
                BILL_DATE,
                BILL_TIME,
                MOVE_CODE,
                B_CODE,
                BRANCH_CODE,
                ACCOUNT_CODE,
                ACCOUNT_DESCRIPTION,
                DEBIT,
                CREDIT,
                DEBIT_IQ,
                CREDIT_IQ,
                DEBIT_CUR,
                CREDIT_CUR,
                DESCRIPTION,
                USER_CODE,
                DEAL_CODE,
                CHECKED,
                ACTIVE
            FROM T_BOX
            WHERE ACTIVE = 1
              AND ACCOUNT_CODE = @ACCOUNT_CODE
              AND BILL_DATE BETWEEN @D1 AND @D2
        )
        INSERT INTO #TMP_REPORT_ACCOUNT
        SELECT
            ROW_NUMBER() OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) AS T_ID_BOX,
            bd.BILL_BRANCH,
            CONVERT(NVARCHAR(MAX), bd.BILL_NUMBER),
            CONVERT(NVARCHAR(MAX), bd.BILL_DATE, 111),
            bd.BILL_TIME,
            bd.B_CODE,
            bt.B_NAME,
            bd.MOVE_CODE,
            mv.MOVE_NAME,
            bd.ACCOUNT_CODE,
            @ACCOUNT_NAME,
            NULL AS ACCOUNT_FULL_NAME,
            bd.ACCOUNT_DESCRIPTION,
            bd.DEBIT AS AMO_DEBIT,
            bd.CREDIT AS AMO_CREDIT,
            SUM(bd.DEBIT - bd.CREDIT) OVER 
                (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + @BalanceFirstUSA AS BALANCE_USA,
            bd.DEBIT_IQ AS AMO_DEBIT_IQ,
            bd.CREDIT_IQ AS AMO_CREDIT_IQ,
            SUM(bd.DEBIT_IQ - bd.CREDIT_IQ) OVER 
                (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + @BalanceFirstIQ AS BALANCE_IQ,
            bd.DEBIT_CUR AS AMO_DEBIT_CUR,
            bd.CREDIT_CUR AS AMO_CREDIT_CUR,
            SUM(CAST(bd.DEBIT_CUR AS DECIMAL(18,3)) - CAST(bd.CREDIT_CUR AS DECIMAL(18,3)))
                OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + @BalanceFirstCur AS BALANCE_CUR,
            bd.DESCRIPTION,
            bd.USER_CODE,
            us.USER_NAME,
            bd.DEAL_CODE,
            dl.DEAL_NAME,
            bd.BRANCH_CODE,
            NULL AS BRANCH_NAME,
            @MANDOOB_NAME,
            @CLIENT_REGION,
            @CLIENT_PHONE_SMS,
            bt.B_COLOR,
            bd.CHECKED,
            bd.T_ID_BOX AS ID_BOX
        FROM BaseData bd
        LEFT JOIN T_DEAL       dl ON bd.DEAL_CODE = dl.DEAL_CODE
        LEFT JOIN T_MOVE       mv ON bd.MOVE_CODE = mv.MOVE_CODE
        LEFT JOIN T_BILL_TYPE  bt ON bd.B_CODE    = bt.B_CODE
        LEFT JOIN T_USERS      us ON bd.USER_CODE = us.USER_CODE
        WHERE bd.ACTIVE = 1;
    END
    ELSE
    BEGIN
        -- إذا @IDD <> 0: نعتمد T_ID_BOX > @IDD
        WITH BaseData AS
        (
            SELECT
                T_ID_BOX,
                BILL_BRANCH,
                BILL_NUMBER,
                BILL_DATE,
                BILL_TIME,
                MOVE_CODE,
                B_CODE,
                BRANCH_CODE,
                ACCOUNT_CODE,
                ACCOUNT_DESCRIPTION,
                DEBIT,
                CREDIT,
                DEBIT_IQ,
                CREDIT_IQ,
                DEBIT_CUR,
                CREDIT_CUR,
                DESCRIPTION,
                USER_CODE,
                DEAL_CODE,
                CHECKED,
                ACTIVE
            FROM T_BOX
            WHERE ACTIVE = 1
              AND ACCOUNT_CODE = @ACCOUNT_CODE
              AND T_ID_BOX > @IDD
        )
        INSERT INTO #TMP_REPORT_ACCOUNT
        SELECT
            ROW_NUMBER() OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) AS T_ID_BOX,
            bd.BILL_BRANCH,
            CONVERT(NVARCHAR(MAX), bd.BILL_NUMBER),
            CONVERT(NVARCHAR(MAX), bd.BILL_DATE, 111),
            bd.BILL_TIME,
            bd.B_CODE,
            bt.B_NAME,
            bd.MOVE_CODE,
            mv.MOVE_NAME,
            bd.ACCOUNT_CODE,
            @ACCOUNT_NAME,
            NULL AS ACCOUNT_FULL_NAME,
            bd.ACCOUNT_DESCRIPTION,
            bd.DEBIT AS AMO_DEBIT,
            bd.CREDIT AS AMO_CREDIT,
            SUM(bd.DEBIT - bd.CREDIT) OVER 
                (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + @BalanceFirstUSA AS BALANCE_USA,
            bd.DEBIT_IQ AS AMO_DEBIT_IQ,
            bd.CREDIT_IQ AS AMO_CREDIT_IQ,
            SUM(bd.DEBIT_IQ - bd.CREDIT_IQ) OVER 
                (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + @BalanceFirstIQ AS BALANCE_IQ,
            bd.DEBIT_CUR AS AMO_DEBIT_CUR,
            bd.CREDIT_CUR AS AMO_CREDIT_CUR,
            SUM(CAST(bd.DEBIT_CUR AS DECIMAL(18,3)) - CAST(bd.CREDIT_CUR AS DECIMAL(18,3)))
                OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + @BalanceFirstCur AS BALANCE_CUR,
            bd.DESCRIPTION,
            bd.USER_CODE,
            us.USER_NAME,
            bd.DEAL_CODE,
            dl.DEAL_NAME,
            bd.BRANCH_CODE,
            NULL AS BRANCH_NAME,
            @MANDOOB_NAME,
            @CLIENT_REGION,
            @CLIENT_PHONE_SMS,
            bt.B_COLOR,
            bd.CHECKED,
            bd.T_ID_BOX AS ID_BOX
        FROM BaseData bd
        LEFT JOIN T_DEAL       dl ON bd.DEAL_CODE = dl.DEAL_CODE
        LEFT JOIN T_MOVE       mv ON bd.MOVE_CODE = mv.MOVE_CODE
        LEFT JOIN T_BILL_TYPE  bt ON bd.B_CODE    = bt.B_CODE
        LEFT JOIN T_USERS      us ON bd.USER_CODE = us.USER_CODE
        WHERE bd.ACTIVE = 1;
    END

    ------------------------------------------------------------------------
    -- 6) ترشيح السجلات بناءً على قيمة @CNY_CODE
    --    1 = عملة USD   2 = عملة IQD  (حسب ما ورد في الإجراء الأصلي)
    ------------------------------------------------------------------------
    IF (@CNY_CODE = 1)
    BEGIN
        DELETE FROM #TMP_REPORT_ACCOUNT
         WHERE (AMO_DEBIT = 0 AND AMO_CREDIT = 0 AND BILL_NUMBER <> ''0'');
    END
    ELSE IF (@CNY_CODE = 2)
    BEGIN
        DELETE FROM #TMP_REPORT_ACCOUNT
         WHERE (AMO_DEBIT_IQ = 0 AND AMO_CREDIT_IQ = 0 AND BILL_NUMBER <> ''0'');
    END

    ------------------------------------------------------------------------
    -- 7) إرجاع النتائج 
    ------------------------------------------------------------------------
DROP TABLE T_BOX_REPORT_ACCOUNT;

-- 1) Create the new table using SELECT INTO
SELECT *
INTO T_BOX_REPORT_ACCOUNT
FROM #TMP_REPORT_ACCOUNT   ORDER BY T_ID_BOX;

-- 1) التحقق إن كان القيد موجودًا
IF NOT EXISTS 
(
    SELECT 1
    FROM sys.key_constraints
    WHERE 
        [type] = ''PK''
        AND [name] = ''PK_T_BOX_REPORT_ACCOUNT''
        AND [parent_object_id] = OBJECT_ID(''dbo.T_BOX_REPORT_ACCOUNT'', ''U'')
)
BEGIN
   -- 3) الآن يمكنك إضافة المفتاح الرئيسي على الحقل المطلوب
ALTER TABLE dbo.T_BOX_REPORT_ACCOUNT
ADD CONSTRAINT PK_T_BOX_REPORT_ACCOUNT
PRIMARY KEY (T_ID_BOX);
END
 

------------------------------------------------------------------------
    -- 7) إرجاع النتائج 
    ------------------------------------------------------------------------
    SELECT *
    FROM #TMP_REPORT_ACCOUNT
    ORDER BY T_ID_BOX;

    SET @SUBMIT_FLAG = 1;
    SET NOCOUNT OFF;
END;

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_ADVANCE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_ADVANCE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_ADVANCE]
(
    @IDD          INT,
    @ACCOUNT_CODE INT,
    @D1           DATE,
    @D2           DATE,
    @CNY_CODE     INT,
    @SUBMIT_FLAG  INT OUTPUT
)
AS
BEGIN
    SET NOCOUNT ON;
    ------------------------------------------------------------------------
    -- ضبط قيمة المخرج قبل البدء
    ------------------------------------------------------------------------
    SET @SUBMIT_FLAG = 0;

    ------------------------------------------------------------------------
    -- متغيرات مساعدة
    ------------------------------------------------------------------------
    DECLARE 
          @ACCOUNT_NAME        NVARCHAR(MAX),
          @CLIENT_REGION       NVARCHAR(MAX),
          @CLIENT_PHONE_SMS    NVARCHAR(MAX),
          @MANDOB_CODE         INT,
          @MANDOB_NAME         NVARCHAR(MAX),
          @B_NAME              NVARCHAR(MAX),
          @B_COLOR             NVARCHAR(MAX),
          @BALANCEEE_FIRST     FLOAT = 0,
          @BALANCEEE_FIRST_IQ  FLOAT = 0,
          @BALANCEEE_FIRST_CUR FLOAT = 0;

    ------------------------------------------------------------------------
    -- 1) قراءة بعض المعلومات من الجداول (الحساب / العميل / المندوب)
    ------------------------------------------------------------------------
    SELECT @ACCOUNT_NAME = A.ACCOUNT_NAME
    FROM T_ACCOUNTS A
    WHERE A.ACCOUNT_CODE = @ACCOUNT_CODE;

    SELECT 
        @CLIENT_PHONE_SMS = C.CLIENT_FULL_PHONE,
        @CLIENT_REGION    = C.CLIENT_REGION,
        @MANDOB_CODE      = C.MANDOOB_CODE
    FROM T_CLIENT C
    WHERE C.CLIENT_CODE = @ACCOUNT_CODE;

    SELECT @MANDOB_NAME = M.MANDOOB_NAME
    FROM T_MANDOOB M
    WHERE M.MANDOOB_CODE = @MANDOB_CODE;

    ------------------------------------------------------------------------
    -- 2) حساب رصيد ماقبل الفترة (BALANCEEE_FIRST) بناءً على @IDD
    ------------------------------------------------------------------------
    IF @IDD = 0
    BEGIN
        -- الرصيد قبل التاريخ @D1
        SELECT @BALANCEEE_FIRST =
            ISNULL(SUM(DEBIT - CREDIT), 0)
        FROM T_BOX
        WHERE ACCOUNT_CODE = @ACCOUNT_CODE
          AND BILL_DATE < @D1
          AND ACTIVE = 1;

        SELECT @BALANCEEE_FIRST_IQ =
            ISNULL(SUM(DEBIT_IQ - CREDIT_IQ), 0)
        FROM T_BOX
        WHERE ACCOUNT_CODE = @ACCOUNT_CODE
          AND BILL_DATE < @D1
          AND ACTIVE = 1;

        SELECT @BALANCEEE_FIRST_CUR =
            ISNULL(SUM(DEBIT_CUR - CREDIT_CUR), 0)
        FROM T_BOX
        WHERE ACCOUNT_CODE = @ACCOUNT_CODE
          AND BILL_DATE < @D1
          AND ACTIVE = 1;
    END
    ELSE
    BEGIN
        -- الرصيد حتى المعرف @IDD
        SELECT @BALANCEEE_FIRST =
            ISNULL(SUM(DEBIT - CREDIT), 0)
        FROM T_BOX
        WHERE ACCOUNT_CODE = @ACCOUNT_CODE
          AND T_ID_BOX <= @IDD
          AND ACTIVE = 1;

        SELECT @BALANCEEE_FIRST_IQ =
            ISNULL(SUM(DEBIT_IQ - CREDIT_IQ), 0)
        FROM T_BOX
        WHERE ACCOUNT_CODE = @ACCOUNT_CODE
          AND T_ID_BOX <= @IDD
          AND ACTIVE = 1;

        SELECT @BALANCEEE_FIRST_CUR =
            ISNULL(SUM(DEBIT_CUR - CREDIT_CUR), 0)
        FROM T_BOX
        WHERE ACCOUNT_CODE = @ACCOUNT_CODE
          AND T_ID_BOX <= @IDD
          AND ACTIVE = 1;
    END;

    ------------------------------------------------------------------------
    -- 3) تفريغ جداول التقرير القديم
    ------------------------------------------------------------------------
    DELETE FROM T_BOX_REPORT_ACCOUNT;
    DELETE FROM T_BOX_REPORT_ACCOUNT_DETAILS;

---- 1) التحقق إن كان القيد موجودًا
--IF NOT EXISTS 
--(
--    SELECT 1
--    FROM sys.key_constraints
--    WHERE 
--        [type] = ''PK''
--        AND [name] = ''PK_T_BOX_REPORT_ACCOUNT''
--        AND [parent_object_id] = OBJECT_ID(''dbo.T_BOX_REPORT_ACCOUNT'', ''U'')
--)
--BEGIN
--   -- 3) الآن يمكنك إضافة المفتاح الرئيسي على الحقل المطلوب
--ALTER TABLE dbo.T_BOX_REPORT_ACCOUNT
--ADD CONSTRAINT PK_T_BOX_REPORT_ACCOUNT
--PRIMARY KEY (T_ID_BOX);
--END
 


 

    ------------------------------------------------------------------------
    -- 4) إضافة صف (الرصيد السابق) في بداية التقرير
    ------------------------------------------------------------------------
    INSERT INTO T_BOX_REPORT_ACCOUNT
    (
        T_ID_BOX,          -- تمييزه بالقيمة 0 في سطر الرصيد السابق
        BILL_NUMBER,
        BILL_DATE,
        BILL_TIME,
        B_CODE,
        B_NAME,
        MOVE_CODE,
        MOVE_NAME,
        ACCOUNT_CODE,
        ACCOUNT_NAME,
        ACCOUNT_DESCRIPTION,
        AMO_DEBIT,
        AMO_CREDIT,
        BALANCE_USA,
        AMO_DEBIT_IQ,
        AMO_CREDIT_IQ,
        BALANCE_IQ,
        AMO_DEBIT_CUR,
        AMO_CREDIT_CUR,
        BALANCE_CUR,
        [DESCRIPTION],
        USER_CODE,
        USER_NAME,
        DEAL_CODE,
        DEAL_NAME,
        BRANCH_CODE,
        BRANCH_NAME,
        MANDOB_NAME,
        CLIENT_REGION,
        CLIENT_PHONE_SMS,
        B_COLOR,
        [CHECKED],
        ID_BOX
    )
    VALUES
    (
        0,                -- T_ID_BOX = 0 (رقم افتراضي لسطر الرصيد السابق)
        0,                -- BILL_NUMBER
        @D1,              -- تاريخ البداية
        N'''',              -- BILL_TIME
        0,                -- B_CODE
        N''الرصيد السابق'', -- اسم رمزي
        0,                -- MOVE_CODE
        N'''',              -- MOVE_NAME
        @ACCOUNT_CODE,
        @ACCOUNT_NAME,
        N'''',              -- ACCOUNT_DESCRIPTION
        NULL,
        NULL,
        @BALANCEEE_FIRST,     -- الرصيد بالدولار (مثلاً)
        NULL,
        NULL,
        @BALANCEEE_FIRST_IQ,  -- الرصيد بالدينار
        NULL,
        NULL,
        @BALANCEEE_FIRST_CUR, -- الرصيد بعملة أخرى
        N''رصيد سابق ماقبل الفترة'',
        0,                -- USER_CODE
        NULL,             -- USER_NAME
        0,                -- DEAL_CODE
        NULL,             -- DEAL_NAME
        0,                -- BRANCH_CODE
        NULL,             -- BRANCH_NAME
        @MANDOB_NAME,
        @CLIENT_REGION,
        @CLIENT_PHONE_SMS,
        N'''',              -- B_COLOR
        0,                -- CHECKED
        0                 -- ID_BOX
    );

    -- إن أردت إضافة تفاصيل لهذا السطر (عموماً لا يوجد تفاصيل لرصيد سابق)
    INSERT INTO T_BOX_REPORT_ACCOUNT_DETAILS
    (
        ID_REPORT,
        ITEM_NAME,
        QTY,
        PRICE,
        TOTAL
    )
    VALUES
    (
        0,
        NULL,
        NULL,
        NULL,
        NULL
    );

    ------------------------------------------------------------------------
    -- 5) تحضير حركة T_BOX الأساسية + الربط بالجداول الأخرى.
    --    سنستعمل دالة نافذة (Window Function) لجمع الرصيد التراكمي.
    ------------------------------------------------------------------------
    ;WITH CTE_BOX AS
    (
        SELECT
            ROW_NUMBER() OVER (
                ORDER BY T.BILL_DATE ASC, T.T_ID_BOX ASC
            ) AS RowNum,   -- سنستعمله للترتيب/الهوية في تقريرنا

            T.T_ID_BOX       AS BOX_KEY,
            T.BILL_NUMBER,
            T.BILL_DATE,
            T.BILL_TIME,
            T.B_CODE,
            BT.B_NAME,
            BT.B_COLOR,
            T.MOVE_CODE,
            MV.MOVE_NAME,
            T.ACCOUNT_CODE,
            ACCT.ACCOUNT_NAME,
            T.ACCOUNT_DESCRIPTION,
            T.[DESCRIPTION],
            T.CURRANCY_CODE,
            CURR.CURRANCY_NAME,
            T.CURRANCY_EQUAL,
            T.USER_CODE,
            USR.USER_NAME,
            T.DEAL_CODE,
            DL.DEAL_NAME,
            T.[CHECKED],

            T.DEBIT       AS DE_USA,
            T.CREDIT      AS CR_USA,
            T.DEBIT_IQ    AS DE_IQ,
            T.CREDIT_IQ   AS CR_IQ,
            T.DEBIT_CUR   AS DE_CUR,
            T.CREDIT_CUR  AS CR_CUR,

            -- الرصيد التراكمي بالدولار
            SUM(T.DEBIT - T.CREDIT) 
                OVER (ORDER BY T.BILL_DATE ASC, T.T_ID_BOX ASC
                      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
                + @BALANCEEE_FIRST AS RUN_BALANCE_USA,

            -- الرصيد التراكمي بالدينار
            SUM(T.DEBIT_IQ - T.CREDIT_IQ) 
                OVER (ORDER BY T.BILL_DATE ASC, T.T_ID_BOX ASC
                      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
                + @BALANCEEE_FIRST_IQ AS RUN_BALANCE_IQ,

            -- الرصيد التراكمي بالعملة الأخرى
            SUM(T.DEBIT_CUR - T.CREDIT_CUR) 
                OVER (ORDER BY T.BILL_DATE ASC, T.T_ID_BOX ASC
                      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
                + @BALANCEEE_FIRST_CUR AS RUN_BALANCE_CUR
        FROM T_BOX T
            LEFT JOIN T_BILL_TYPE  BT ON BT.B_CODE       = T.B_CODE
            LEFT JOIN T_MOVE       MV ON MV.MOVE_CODE    = T.MOVE_CODE
            LEFT JOIN T_CURRANNCY  CURR ON CURR.CURRANCY_CODE = T.CURRANCY_CODE
            LEFT JOIN T_USERS      USR ON USR.USER_CODE   = T.USER_CODE
            LEFT JOIN T_DEAL       DL  ON DL.DEAL_CODE    = T.DEAL_CODE
            LEFT JOIN T_ACCOUNTS   ACCT ON ACCT.ACCOUNT_CODE = T.ACCOUNT_CODE
        WHERE 
            T.ACTIVE       = 1
            AND T.ACCOUNT_CODE = @ACCOUNT_CODE
            AND
            (
                (@IDD = 0 AND T.BILL_DATE BETWEEN @D1 AND @D2)
                OR (@IDD <> 0 AND T.T_ID_BOX > @IDD)
            )
    )
    ------------------------------------------------------------------------
    -- 6) إدراج النتائج في T_BOX_REPORT_ACCOUNT وفقًا للترتيب
    ------------------------------------------------------------------------
    INSERT INTO T_BOX_REPORT_ACCOUNT
    (
        T_ID_BOX,
        BILL_NUMBER,
        BILL_DATE,
        BILL_TIME,
        B_CODE,
        B_NAME,
        MOVE_CODE,
        MOVE_NAME,
        ACCOUNT_CODE,
        ACCOUNT_NAME,
        ACCOUNT_DESCRIPTION,
        AMO_DEBIT,
        AMO_CREDIT,
        BALANCE_USA,
        AMO_DEBIT_IQ,
        AMO_CREDIT_IQ,
        BALANCE_IQ,
        AMO_DEBIT_CUR,
        AMO_CREDIT_CUR,
        BALANCE_CUR,
        [DESCRIPTION],
        USER_CODE,
        USER_NAME,
        DEAL_CODE,
        DEAL_NAME,
        BRANCH_CODE,
        BRANCH_NAME,
        MANDOB_NAME,
        CLIENT_REGION,
        CLIENT_PHONE_SMS,
        B_COLOR,
        [CHECKED],
        ID_BOX
    )
    SELECT
        RowNum,              -- قيمة تتابعية (كأنها ID_REPORT)
        BILL_NUMBER,
        BILL_DATE,
        BILL_TIME,
        B_CODE,
        B_NAME,
        MOVE_CODE,
        MOVE_NAME,
        ACCOUNT_CODE,
        ACCOUNT_NAME,
        ACCOUNT_DESCRIPTION,
        DE_USA,
        CR_USA,
        RUN_BALANCE_USA,
        DE_IQ,
        CR_IQ,
        RUN_BALANCE_IQ,
        DE_CUR,
        CR_CUR,
        RUN_BALANCE_CUR,
        [DESCRIPTION],
        USER_CODE,
        USER_NAME,
        DEAL_CODE,
        DEAL_NAME,
        0,                   -- BRANCH_CODE، مثال
        NULL,                -- BRANCH_NAME
        @MANDOB_NAME,
        @CLIENT_REGION,
        @CLIENT_PHONE_SMS,
        B_COLOR,
        [CHECKED],
        BOX_KEY  -- نخزن المفتاح الأصلي من T_BOX في حقل ID_BOX لو احتجنا له
    FROM CTE_BOX
    ORDER BY 
        RowNum;   -- لأن RowNum = BILL_DATE ASC, T_ID_BOX ASC

    ------------------------------------------------------------------------
    -- 7) إدراج التفاصيل حسب نوع الفاتورة (B_CODE)
    --    نستخرج فواتيرنا المدخلة للتوّ في جدول T_BOX_REPORT_ACCOUNT
    ------------------------------------------------------------------------
    ;WITH CTE_REPORT AS
    (
        SELECT T_ID_BOX AS ID_REPORT,  -- أخذنا نفس القيمة التي أدخلناها
               BILL_NUMBER,
               B_CODE
        FROM T_BOX_REPORT_ACCOUNT
        WHERE T_ID_BOX <> 0  -- استبعاد سجل الرصيد السابق
    )
    INSERT INTO T_BOX_REPORT_ACCOUNT_DETAILS
    (
        ID_REPORT,
        ITEM_NAME,
        QTY,
        PRICE,
        TOTAL,
        MANDOOB_NAME,
        WIDTH_CM,
        LENGTH_CM,
        AREA_M2,
        DRIVER_NAME,
        NOTE_PRINT,
        COL_STR1,
        COL_STR2,
        COL_STR3,
        COL_INT1,
        COL_INT2,
        COL_INT3,
        NOTE_PRINT_2,
        ITEM_NOTE_SALES
    )
    ----------------------------------------------------------------------------
    -- (1) & (2) => فواتير المبيعات (V_SALES_INVOICE_DETAILS)
    ----------------------------------------------------------------------------
    SELECT 
        R.ID_REPORT,
        S.ITEM_NAME,
        S.QTY,
        S.PRICE,
        S.NET_TOTAL,
        S.MANDOOB_NAME,
        S.WIDTH_CM,
        S.LENGTH_CM,
        S.AREA_M2,
        S.DRIVER_NAME,
        S.NOTE_PRINT,
        S.COL_STR1,
        S.COL_STR2,
        S.COL_STR3,
        S.COL_INT1,
        S.COL_INT2,
        S.COL_INT3,
        S.NOTE_PRINT_2,
        S.ITEM_NOTE_SALES
    FROM CTE_REPORT R
    JOIN V_SALES_INVOICE_DETAILS S ON S.BILL_NUMBER = R.BILL_NUMBER
                                  AND S.ACTIVE     = 1
    WHERE R.B_CODE IN (1, 2)
    
    UNION ALL
 

    ----------------------------------------------------------------------------
    -- (21) => فواتير الشراء (V_BUY_DETAILS)
    ----------------------------------------------------------------------------
    SELECT
        R.ID_REPORT,
        B.ITEM_NAME,
        B.QTY,
        B.PRICE,
        B.TOTAL,
        NULL,  -- MANDOOB_NAME
        NULL,  -- WIDTH_CM
        NULL,  -- LENGTH_CM
        NULL,  -- AREA_M2
        NULL,  -- DRIVER_NAME
        NULL,   -- NOTE_PRINT
		NULL,   -- S.COL_STR1,
        NULL,   -- S.COL_STR2,
        NULL,   -- S.COL_STR3,
        NULL,   -- S.COL_INT1,
        NULL,   -- S.COL_INT2,
        NULL,   -- S.COL_INT3,
        NULL,   -- S.NOTE_PRINT_2,
        NULL    --  S.ITEM_NOTE_SALES
    FROM CTE_REPORT R
    JOIN V_BUY_DETAILS B ON B.BILL_NUMBER = R.BILL_NUMBER
    WHERE R.B_CODE = 21

    UNION ALL
    ----------------------------------------------------------------------------
    -- (22) => فواتير مردودات الشراء (V_BUY_DETAILS_RETURN)
    ----------------------------------------------------------------------------
    SELECT
        R.ID_REPORT,
        BR.ITEM_NAME,
        BR.QTY,
        BR.PRICE,
        BR.TOTAL,
        NULL,  -- MANDOOB_NAME
        NULL,  -- WIDTH_CM
        NULL,  -- LENGTH_CM
        NULL,  -- AREA_M2
        NULL,  -- DRIVER_NAME
         NULL,   -- NOTE_PRINT
		NULL,   -- S.COL_STR1,
        NULL,   -- S.COL_STR2,
        NULL,   -- S.COL_STR3,
        NULL,   -- S.COL_INT1,
        NULL,   -- S.COL_INT2,
        NULL,   -- S.COL_INT3,
        NULL,   -- S.NOTE_PRINT_2,
        NULL    --  S.ITEM_NOTE_SALES
    FROM CTE_REPORT R
    JOIN V_BUY_DETAILS_RETURN BR ON BR.BILL_NUMBER = R.BILL_NUMBER
    WHERE R.B_CODE = 22;

    ------------------------------------------------------------------------
    -- 8) حذف الصفوف غير المطلوبة اعتمادًا على العملة @CNY_CODE
    ------------------------------------------------------------------------
    IF @CNY_CODE = 1
    BEGIN
        DELETE FROM T_BOX_REPORT_ACCOUNT
        WHERE T_ID_BOX <> 0
          AND AMO_DEBIT = 0
          AND AMO_CREDIT = 0;
    END
    ELSE IF @CNY_CODE = 2
    BEGIN
        DELETE FROM T_BOX_REPORT_ACCOUNT
        WHERE T_ID_BOX <> 0
          AND AMO_DEBIT_IQ = 0
          AND AMO_CREDIT_IQ = 0;
    END;

    ------------------------------------------------------------------------
    -- 9) إنهاء الإجراء
    ------------------------------------------------------------------------
    SET @SUBMIT_FLAG = 1;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_ADVANCE_old14-3]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_ADVANCE_old14-3]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'












CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_ADVANCE_old14-3]

@IDD INT,
@ACCOUNT_CODE INT, 
@D1 DATE,
@D2 DATE,
@CNY_CODE INT,
@SUBMIT_FLAG INT OUTPUT

AS

IF @IDD=0
BEGIN
DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID_BOX FROM T_BOX  WHERE ACTIVE=1and ACCOUNT_CODE=@ACCOUNT_CODE AND  BILL_DATE BETWEEN @D1 AND @D2  order by BILL_DATE asc;
END
ELSE
BEGIN
DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID_BOX FROM T_BOX  WHERE ACTIVE=1and ACCOUNT_CODE=@ACCOUNT_CODE AND  T_ID_BOX>@IDD	  order by BILL_DATE asc;
END


DECLARE
@T_ID_BOX_CURCOR INT,
@ID_REPORT numeric(18, 0),
@BILL_DATE_ID DATE,
@BILL_TIME DATETIME,
@CR_USA float,
@DE_USA  float,
@CR_IQ float,
@DE_IQ  float,
@CR_CUR float,
@DE_CUR  float,
@REMAIN_USA float,
@REMAIN_IQ float,
@REMAIN_CUR float,
@BILL_NUMBER	INT	,
@BILL_DATE DATE,
@B_CODE	int,
@B_NAME	nvarchar(MAX)	,
@MOVE_CODE	int,
@MOVE_NAME	nvarchar(MAX)	,
@ACCOUNT_NAME	nvarchar(MAX)	,
@ACCOUNT_DESCRIPTION	nvarchar(MAX)	,
@DESCRIPTION	nvarchar(MAX)	,
@CURRANCY_CODE	int	,
@CURRANCY_NAME	nvarchar(MAX),
@CURRANCY_EQUAL	float	,
@BALANCE_USA_ID	float	,
@USER_CODE	int	,
@USER_NAME	nvarchar(MAX)	,
@BALANCEEE		float	,
@BALANCEEE_IQ		float	,
@BALANCEEE_FIRST		float	,
@BALANCEEE_FIRST_IQ		float	,
@BALANCEEE_CUR		float	,
@BALANCEEE_FIRST_CUR		float	,
@MANDOB_CODE	int	,
@MANDOB_NAME  nvarchar(max), 
@CLIENT_REGION  nvarchar(max), 
@CLIENT_PHONE_SMS nvarchar(max), 
@DEAL_CODE	int	,
@DEAL_NAME	nvarchar(MAX)	,
@B_COLOR	nvarchar(MAX),

@ITEM_NAME	nvarchar(MAX)	,
@QTY	float	,
@PRICE	float	,
@TOTAL	float	,


@CHECKED	int	

BEGIN
SET @SUBMIT_FLAG=0

SELECT @ACCOUNT_NAME=ACCOUNT_NAME  FROM T_ACCOUNTS WHERE ACCOUNT_CODE=@ACCOUNT_CODE
SELECT @CLIENT_PHONE_SMS=CLIENT_FULL_PHONE ,@CLIENT_REGION=CLIENT_REGION,@MANDOB_CODE=MANDOOB_CODE FROM T_CLIENT WHERE CLIENT_CODE=@ACCOUNT_CODE
SELECT @MANDOB_NAME=MANDOOB_NAME FROM T_MANDOOB WHERE MANDOOB_CODE=@MANDOB_CODE

 SELECT @B_NAME=B_NAME,@B_COLOR=B_COLOR  FROM T_BILL_TYPE WHERE B_CODE=0


IF @IDD=0
BEGIN

SELECT @BALANCEEE_FIRST =ISNULL(SUM(DEBIT -CREDIT ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1
SELECT @BALANCEEE_FIRST_IQ =ISNULL(SUM(DEBIT_IQ -CREDIT_IQ ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1
SELECT @BALANCEEE_FIRST_CUR=ISNULL(SUM(DEBIT_CUR -CREDIT_CUR ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1

END
ELSE
BEGIN
SELECT @BALANCEEE_FIRST =ISNULL(SUM(DEBIT -CREDIT ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD  and ACTIVE=1
SELECT @BALANCEEE_FIRST_IQ =ISNULL(SUM(DEBIT_IQ -CREDIT_IQ ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD and ACTIVE=1
SELECT @BALANCEEE_FIRST_CUR=ISNULL(SUM(DEBIT_CUR -CREDIT_CUR ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD  and ACTIVE=1
END


DELETE FROM T_BOX_REPORT_ACCOUNT
DELETE FROM T_BOX_REPORT_ACCOUNT_DETAILS
SET @ID_REPORT=0

INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT]
           ([T_ID_BOX]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[B_CODE]
           ,[B_NAME]
           ,[MOVE_CODE]
           ,[MOVE_NAME]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_NAME]
           ,[ACCOUNT_DESCRIPTION]
           ,[AMO_DEBIT]
           ,[AMO_CREDIT]
           ,[BALANCE_USA]
           ,[AMO_DEBIT_IQ]
           ,[AMO_CREDIT_IQ]
           ,[BALANCE_IQ]
           ,[AMO_DEBIT_CUR]
           ,[AMO_CREDIT_CUR]
           ,[BALANCE_CUR]
           ,[DESCRIPTION]
           ,[USER_CODE]
           ,[USER_NAME]
            ,[DEAL_CODE]
           ,[DEAL_NAME]
           ,[BRANCH_CODE]
           ,[BRANCH_NAME]
           ,[MANDOB_NAME]
           ,[CLIENT_REGION]
           ,[CLIENT_PHONE_SMS]
		   ,[B_COLOR]
		  ,[CHECKED]
		   ,[ID_BOX])
     VALUES
           (@ID_REPORT
           ,0
           ,@D1
           ,N'' ''
           ,0
           ,@B_NAME
           ,0
           ,N'' ''
           ,@ACCOUNT_CODE
           ,@ACCOUNT_NAME
           ,@ACCOUNT_DESCRIPTION
           ,NULL
           ,NULL
           ,@BALANCEEE_FIRST
           ,NULL
           ,NULL
           ,@BALANCEEE_FIRST_IQ
           ,NULL
           ,NULL
           ,@BALANCEEE_FIRST_CUR
           ,N''رصيد سابق ماقبل الفترة''
           ,0
           ,NULL
           ,0
           ,NULL
           ,0
           ,NULL
           ,@MANDOB_NAME
           ,@CLIENT_REGION
           ,@CLIENT_PHONE_SMS
		   ,@B_COLOR
		   ,0
		   ,0)

     INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT_DETAILS]
           ([ID_REPORT]
           ,[ITEM_NAME]
           ,[QTY]
           ,[PRICE]
           ,[TOTAL])
     VALUES
           (@ID_REPORT
           ,NULL
           ,NULL
           ,NULL
           ,NULL)

OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN
SET @BALANCEEE_IQ=0 
 SET @REMAIN_IQ=0
 SET @BALANCEEE=0 
 SET @REMAIN_USA=0

SET @ID_REPORT=@ID_REPORT+1
SELECT @DE_USA=DEBIT,@CR_USA=CREDIT, @DE_IQ=DEBIT_IQ,@CR_IQ=CREDIT_IQ, @BILL_DATE=BILL_DATE,@BILL_NUMBER=BILL_NUMBER,@BILL_TIME=BILL_TIME
 ,@B_CODE=B_CODE,@ACCOUNT_DESCRIPTION=ACCOUNT_DESCRIPTION,@DESCRIPTION=DESCRIPTION,@CURRANCY_CODE=CURRANCY_CODE,@CURRANCY_EQUAL=CURRANCY_EQUAL
 ,@USER_CODE=USER_CODE,@DEAL_CODE=DEAL_CODE,@MOVE_CODE=MOVE_CODE,@CHECKED=CHECKED FROM T_BOX WHERE T_ID_BOX=@T_ID_BOX_CURCOR
 SELECT @DEAL_NAME=DEAL_NAME  FROM T_DEAL WHERE DEAL_CODE=@DEAL_CODE
 SELECT @MOVE_NAME=MOVE_NAME  FROM T_MOVE WHERE MOVE_CODE=@MOVE_CODE
  SELECT @B_NAME=B_NAME,@B_COLOR=B_COLOR  FROM T_BILL_TYPE WHERE B_CODE=@B_CODE
   SELECT @CURRANCY_NAME=CURRANCY_NAME FROM T_CURRANNCY WHERE CURRANCY_CODE=@CURRANCY_CODE
 SELECT @USER_NAME=USER_NAME FROM T_USERS WHERE USER_CODE=@USER_CODE
-----++++ BEGIN

 SELECT @BALANCEEE =ISNULL(SUM(AMO_DEBIT -AMO_CREDIT ),0) FROM T_BOX_REPORT_ACCOUNT WHERE   T_ID_BOX <= @ID_REPORT 
 SELECT @BALANCEEE_IQ =ISNULL(SUM(AMO_DEBIT_IQ -AMO_CREDIT_IQ ),0) FROM T_BOX_REPORT_ACCOUNT WHERE   T_ID_BOX <= @ID_REPORT 
 SELECT @BALANCEEE_CUR =ISNULL(SUM(AMO_DEBIT_CUR -AMO_CREDIT_CUR ),0) FROM T_BOX_REPORT_ACCOUNT WHERE   T_ID_BOX <= @ID_REPORT 
 
 SET @REMAIN_USA=(@DE_USA-@CR_USA)+@BALANCEEE_FIRST
 SET @REMAIN_IQ=(@DE_IQ-@CR_IQ)+@BALANCEEE_FIRST_IQ
 SET @REMAIN_CUR=(@DE_CUR-@CR_CUR)+@BALANCEEE_FIRST_CUR
INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT]
           ([T_ID_BOX]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[B_CODE]
           ,[B_NAME]
           ,[MOVE_CODE]
           ,[MOVE_NAME]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_NAME]
           ,[ACCOUNT_DESCRIPTION]
           ,[AMO_DEBIT]
           ,[AMO_CREDIT]
           ,[BALANCE_USA]
           ,[AMO_DEBIT_IQ]
           ,[AMO_CREDIT_IQ]
           ,[BALANCE_IQ]
           ,[AMO_DEBIT_CUR]
           ,[AMO_CREDIT_CUR]
           ,[BALANCE_CUR]
           ,[DESCRIPTION]
           ,[USER_CODE]
           ,[USER_NAME]
           ,[DEAL_CODE]
           ,[DEAL_NAME]
           ,[BRANCH_CODE]
           ,[BRANCH_NAME]
           ,[MANDOB_NAME]
           ,[CLIENT_REGION]
           ,[CLIENT_PHONE_SMS]
		   ,[B_COLOR]
		   ,[CHECKED]
		   ,[ID_BOX])
     VALUES
           (@ID_REPORT
           ,@BILL_NUMBER
           ,@BILL_DATE
           ,@BILL_TIME
           ,@B_CODE
           ,@B_NAME
           ,@MOVE_CODE
           ,@MOVE_NAME
           ,@ACCOUNT_CODE
           ,@ACCOUNT_NAME
           ,@ACCOUNT_DESCRIPTION
           ,@DE_USA
           ,@CR_USA
           ,@BALANCEEE +@REMAIN_USA
           ,@DE_IQ
           ,@CR_IQ
           ,@BALANCEEE_IQ +@REMAIN_IQ
			,@DE_CUR
           ,@CR_CUR
           ,@BALANCEEE_CUR +@REMAIN_CUR
           ,@DESCRIPTION
           ,@USER_CODE
           ,@USER_NAME
           ,@DEAL_CODE
           ,@DEAL_NAME
           ,0
           ,NULL
           ,@MANDOB_NAME
           ,@CLIENT_REGION
           ,@CLIENT_PHONE_SMS
		   ,@B_COLOR
		   ,@CHECKED
		   ,@T_ID_BOX_CURCOR);

IF @B_CODE=2
BEGIN

 INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT_DETAILS]
           ([ID_REPORT]
           ,[ITEM_NAME]
           ,[QTY]
           ,[PRICE]
           ,[TOTAL]
		   ,[MANDOOB_NAME]
           ,[WIDTH_CM]
           ,[LENGTH_CM]
           ,[AREA_M2]
           ,[DRIVER_NAME]
           ,[NOTE_PRINT])
  SELECT 
           @ID_REPORT
           ,ITEM_NAME
           ,QTY
           ,PRICE
           ,NET_TOTAL
		   ,[MANDOOB_NAME]
           ,[WIDTH_CM]
           ,[LENGTH_CM]
           ,[AREA_M2]
           ,[DRIVER_NAME]
           ,[NOTE_PRINT] FROM V_SALES_INVOICE_DETAILS WHERE BILL_NUMBER=@BILL_NUMBER AND ACTIVE=1
END
ELSE IF @B_CODE=1
BEGIN
INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT_DETAILS]
           ([ID_REPORT]
           ,[ITEM_NAME]
           ,[QTY]
           ,[PRICE]
           ,[TOTAL]
		   ,[MANDOOB_NAME]
           ,[WIDTH_CM]
           ,[LENGTH_CM]
           ,[AREA_M2]
           ,[DRIVER_NAME]
           ,[NOTE_PRINT])
  SELECT 
           @ID_REPORT
           ,ITEM_NAME
           ,QTY
           ,PRICE
           ,NET_TOTAL
		   ,[MANDOOB_NAME]
           ,[WIDTH_CM]
           ,[LENGTH_CM]
           ,[AREA_M2]
           ,[DRIVER_NAME]
           ,[NOTE_PRINT] FROM V_SALES_INVOICE_DETAILS WHERE BILL_NUMBER=@BILL_NUMBER AND ACTIVE=1
END
ELSE IF @B_CODE=21
BEGIN
INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT_DETAILS]
           ([ID_REPORT]
           ,[ITEM_NAME]
           ,[QTY]
           ,[PRICE]
           ,[TOTAL] )
  SELECT 
           @ID_REPORT
           ,ITEM_NAME
           ,QTY
           ,PRICE
           ,TOTAL FROM V_BUY_DETAILS WHERE BILL_NUMBER=@BILL_NUMBER
END
ELSE IF @B_CODE=22
BEGIN
INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT_DETAILS]
           ([ID_REPORT]
           ,[ITEM_NAME]
           ,[QTY]
           ,[PRICE]
           ,[TOTAL] )
  SELECT 
           @ID_REPORT
           ,ITEM_NAME
           ,QTY
           ,PRICE
           ,TOTAL FROM V_BUY_DETAILS_RETURN WHERE BILL_NUMBER=@BILL_NUMBER
END



FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR

IF @CNY_CODE=1
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE AMO_DEBIT=0 AND AMO_CREDIT=0
END
IF @CNY_CODE=2
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE AMO_DEBIT_IQ=0 AND AMO_CREDIT_IQ=0
END


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM






























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_B_TEST]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_B_TEST]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_B_TEST]
    @IDD INT,
    @ACCOUNT_CODE INT,
    @D1 DATE,
    @D2 DATE,
    @CNY_CODE INT,
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET @SUBMIT_FLAG = 0;

    DECLARE 
        @ACCOUNT_NAME NVARCHAR(MAX),
        @CLIENT_PHONE_SMS NVARCHAR(MAX),
        @CLIENT_REGION NVARCHAR(MAX),
        @MANDOOB_CODE INT,
        @MANDOOB_NAME NVARCHAR(MAX),
        @B_NAME NVARCHAR(MAX),
        @B_COLOR NVARCHAR(MAX),
        @BALANCEEE_FIRST FLOAT = 0,
        @BALANCEEE_FIRST_IQ FLOAT = 0,
        @BALANCEEE_FIRST_CUR FLOAT = 0;

    -- الحصول على اسم الحساب
    SELECT @ACCOUNT_NAME = ACCOUNT_NAME
      FROM T_ACCOUNTS
     WHERE ACCOUNT_CODE = @ACCOUNT_CODE;

    -- الحصول على معلومات العميل والمندوب
    SELECT @CLIENT_PHONE_SMS = CLIENT_FULL_PHONE,
           @CLIENT_REGION = CLIENT_REGION,
           @MANDOOB_CODE = MANDOOB_CODE
      FROM T_CLIENT
     WHERE CLIENT_CODE = @ACCOUNT_CODE;

    SELECT @MANDOOB_NAME = MANDOOB_NAME
      FROM T_MANDOOB
     WHERE MANDOOB_CODE = @MANDOOB_CODE;

    -- الحصول على بيانات نوع الفاتورة الافتراضية
    SELECT @B_NAME = B_NAME,
           @B_COLOR = B_COLOR
      FROM T_BILL_TYPE
     WHERE B_CODE = 0;


    -- CTE لحساب الرصيد السابق
    WITH InitialBalance AS
    (
        SELECT 
            BALANCEEE_FIRST     = ISNULL(SUM(DEBIT - CREDIT),0),
            BALANCEEE_FIRST_IQ  = ISNULL(SUM(DEBIT_IQ - CREDIT_IQ),0),
            BALANCEEE_FIRST_CUR = ISNULL(SUM(DEBIT_CUR - CREDIT_CUR),0)
        FROM T_BOX
        WHERE ACCOUNT_CODE = @ACCOUNT_CODE
          AND ACTIVE = 1
          AND (
               (@IDD = 0 AND BILL_DATE < @D1)
               OR (@IDD <> 0 AND T_ID_BOX <= @IDD)
              )
    ),
    BaseData AS
    (
        SELECT 
            T_ID_BOX,
            BILL_BRANCH,
            BILL_NUMBER,
            BILL_DATE,
            BILL_TIME,
            MOVE_CODE,
            B_CODE,
            BRANCH_CODE,
            ACCOUNT_CODE,
            ACCOUNT_DESCRIPTION,
            DEBIT,
            CREDIT,
            DEBIT_IQ,
            CREDIT_IQ,
            DEBIT_CUR,
            CREDIT_CUR,
            DESCRIPTION,
            USER_CODE,
            DEAL_CODE,
            CHECKED
        FROM T_BOX
        WHERE ACTIVE = 1
          AND ACCOUNT_CODE = @ACCOUNT_CODE
          AND (
              (@IDD = 0 AND BILL_DATE BETWEEN @D1 AND @D2)
              OR (@IDD <> 0 AND T_ID_BOX > @IDD)
          )
    ),
    ReportData AS
    (
        SELECT 
            0 AS T_ID_BOX,
            NULL AS BILL_BRANCH,
            ''0'' AS BILL_NUMBER,
            CONVERT(NVARCHAR(MAX), @D1, 111) AS BILL_DATE,
            CAST(NULL AS DATETIME) AS BILL_TIME,
            0 AS B_CODE,
            @B_NAME AS B_NAME,
            0 AS MOVE_CODE,
            CAST(NULL AS NVARCHAR(MAX)) AS MOVE_NAME,
            @ACCOUNT_CODE AS ACCOUNT_CODE,
            @ACCOUNT_NAME AS ACCOUNT_NAME,
            CAST(NULL AS NVARCHAR(MAX)) AS ACCOUNT_DESCRIPTION,
            NULL AS AMO_DEBIT,
            NULL AS AMO_CREDIT,
            ib.BALANCEEE_FIRST AS BALANCE_USA,
            NULL AS AMO_DEBIT_IQ,
            NULL AS AMO_CREDIT_IQ,
            ib.BALANCEEE_FIRST_IQ AS BALANCE_IQ,
            NULL AS AMO_DEBIT_CUR,
            NULL AS AMO_CREDIT_CUR,
            ib.BALANCEEE_FIRST_CUR AS BALANCE_CUR,
            N''رصيد سابق ماقبل الفترة'' AS DESCRIPTION,
            0 AS USER_CODE,
            CAST(NULL AS NVARCHAR(MAX)) AS USER_NAME,
            0 AS DEAL_CODE,
            CAST(NULL AS NVARCHAR(MAX)) AS DEAL_NAME,
            0 AS BRANCH_CODE,
            CAST(NULL AS NVARCHAR(MAX)) AS BRANCH_NAME,
            @MANDOOB_NAME AS MANDOB_NAME,
            @CLIENT_REGION AS CLIENT_REGION,
            @CLIENT_PHONE_SMS AS CLIENT_PHONE_SMS,
            @B_COLOR AS B_COLOR,
            0 AS CHECKED,
            0 AS ID_BOX
        FROM InitialBalance ib

        UNION ALL

        SELECT 
            ROW_NUMBER() OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) AS T_ID_BOX,
            bd.BILL_BRANCH,
            CONVERT(NVARCHAR(MAX), bd.BILL_NUMBER) AS BILL_NUMBER,
            CONVERT(NVARCHAR(MAX), bd.BILL_DATE, 111) AS BILL_DATE,
            bd.BILL_TIME,
            bd.B_CODE,
            d.B_NAME,
            bd.MOVE_CODE,
            m.MOVE_NAME,
            bd.ACCOUNT_CODE,
            @ACCOUNT_NAME,
            bd.ACCOUNT_DESCRIPTION,
            bd.DEBIT AS AMO_DEBIT,
            bd.CREDIT AS AMO_CREDIT,
            SUM(bd.DEBIT - bd.CREDIT) OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + ib.BALANCEEE_FIRST AS BALANCE_USA,
            bd.DEBIT_IQ AS AMO_DEBIT_IQ,
            bd.CREDIT_IQ AS AMO_CREDIT_IQ,
            SUM(bd.DEBIT_IQ - bd.CREDIT_IQ) OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + ib.BALANCEEE_FIRST_IQ AS BALANCE_IQ,
            bd.DEBIT_CUR AS AMO_DEBIT_CUR,
            bd.CREDIT_CUR AS AMO_CREDIT_CUR,
            SUM(CAST(bd.DEBIT_CUR AS DECIMAL(18,3)) - CAST(bd.CREDIT_CUR AS DECIMAL(18,3))) OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + ib.BALANCEEE_FIRST_CUR AS BALANCE_CUR,
            bd.DESCRIPTION,
            bd.USER_CODE,
            f.USER_NAME,
            bd.DEAL_CODE,
            dl.DEAL_NAME,
            bd.BRANCH_CODE,
            CAST(NULL AS NVARCHAR(MAX)) AS BRANCH_NAME,
            @MANDOOB_NAME AS MANDOB_NAME,
            @CLIENT_REGION AS CLIENT_REGION,
            @CLIENT_PHONE_SMS AS CLIENT_PHONE_SMS,
            d.B_COLOR,
            bd.CHECKED,
            bd.T_ID_BOX AS ID_BOX
        FROM BaseData bd
        CROSS JOIN InitialBalance ib
        LEFT JOIN T_DEAL dl ON bd.DEAL_CODE = dl.DEAL_CODE
        LEFT JOIN T_MOVE m ON bd.MOVE_CODE = m.MOVE_CODE
        LEFT JOIN T_BILL_TYPE d ON bd.B_CODE = d.B_CODE
        LEFT JOIN T_USERS f ON bd.USER_CODE = f.USER_CODE
    )

	
    SELECT *
    FROM ReportData
    WHERE 
        NOT(@CNY_CODE = 1 AND AMO_DEBIT = 0 AND AMO_CREDIT = 0)
        AND NOT(@CNY_CODE = 2 AND AMO_DEBIT_IQ = 0 AND AMO_CREDIT_IQ = 0)
    ORDER BY T_ID_BOX;

DROP TABLE T_BOX_REPORT_ACCOUNT
	SELECT * INTO T_BOX_REPORT_ACCOUNT FROM ReportData
    WHERE 
        NOT(@CNY_CODE = 1 AND AMO_DEBIT = 0 AND AMO_CREDIT = 0)
        AND NOT(@CNY_CODE = 2 AND AMO_DEBIT_IQ = 0 AND AMO_CREDIT_IQ = 0)
    ORDER BY T_ID_BOX

   ALTER TABLE T_BOX_REPORT_ACCOUNT
ADD PRIMARY KEY (T_ID_BOX) 


    SET @SUBMIT_FLAG = 1;
    SET NOCOUNT OFF;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_CODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_CODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'












CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_CODE]


@ACCOUNT_CODE INT, 
@CNY_CODE INT,
@SUBMIT_FLAG INT OUTPUT

AS


BEGIN
SET @SUBMIT_FLAG=0

IF OBJECT_ID(''tempdb..#TEMP_ACC_CODE'') IS NOT NULL DROP Table #TEMP_ACC_CODE
SELECT ACCOUNT_CODE AS T_ID_BOX
      ,N''0'' AS  BILL_BRANCH 
      ,0 AS BILL_NUMBER 
      , GETDATE() AS BILL_DATE 
      ,GETDATE() AS BILL_TIME 
      ,0 AS B_CODE 
      ,N'''' AS B_NAME 
      ,0 AS MOVE_CODE 
      , N'''' AS  MOVE_NAME 
      , ACCOUNT_CODE 
      , ACCOUNT_NAME 
      , N'''' AS  ACCOUNT_DESCRIPTION   
      , 0 AS DEBIT 
      , 0 AS CREDIT 
			, BALANCE AS BALANCE_USA
      ,0 AS DEBIT_IQ 
      ,0 AS CREDIT_IQ 
       ,     BALANCE_IQ AS BALANCE_IQ
      , 0 AS DEBIT_CUR 
      ,0 AS  CREDIT_CUR 
       ,	 BALANCE_CUR AS BALANCE_CUR
      ,N'''' AS DESCRIPTION
      ,0 AS USER_CODE
      ,N'''' ASUSER_NAME
      ,0 AS DEAL_CODE
      ,N'''' AS DEAL_NAME
           , 0 AS BRANCH_CODE 
           , N'''' AS BRANCH_NAME 
           , MANDOOB_NAME  AS MANDOB_NAME
           , CLIENT_REGION 
           , CLIENT_PHONE_SMS 
           ,N'''' AS B_COLOR
      ,0 AS CHECKED
     ,0 AS  ID_BOX
	 INTO #TEMP_ACC_CODE FROM  [dbo].[V_ACCOUNT3] WHERE ACCOUNT_CODE=@ACCOUNT_CODE

IF @CNY_CODE=1
BEGIN
DELETE FROM #TEMP_ACC_CODE WHERE BALANCE_USA=0 
END
IF @CNY_CODE=2
BEGIN
DELETE FROM #TEMP_ACC_CODE WHERE BALANCE_IQ=0 
END
SELECT * FROM #TEMP_ACC_CODE order by ACCOUNT_NAME asc
DROP TABLE #TEMP_ACC_CODE

SET @SUBMIT_FLAG=1

END	--END OF PROGRAM






























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_DESC]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_DESC]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_DESC]
    @IDD INT,
    @ACCOUNT_CODE INT,
    @D1 DATE,
    @D2 DATE,
    @CNY_CODE INT,
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN -- CREATE TABLE AND FILTER DATA TO TABLE TEMP
    CREATE TABLE #TEMP_T_BOX ([T_ID_BOX] DECIMAL(18, 0),
                              [BILL_BRANCH] NVARCHAR(50),
                              [BILL_NUMBER] DECIMAL(18, 0),
                              [BILL_STR] NVARCHAR(MAX),
                              [FULL_BILL] NVARCHAR(MAX),
                              [BILL_DATE] DATE,
                              [BILL_TIME] DATETIME,
                              [MOVE_CODE] INT,
                              [B_CODE] INT,
                              [BRANCH_CODE] INT,
                              [ACCOUNT_CODE] INT,
                              [ACCOUNT_DESCRIPTION] NVARCHAR(MAX),
                              [DEBIT] DECIMAL(18, 3),
                              [CREDIT] DECIMAL(18, 3),
                              [B_USA] DECIMAL(19, 3),
                              [DEBIT_IQ] DECIMAL(18, 0),
                              [CREDIT_IQ] DECIMAL(18, 0),
                              [B_IQ] DECIMAL(19, 0),
                              [CURRANCY_CODE] INT,
                              [CURRANCY_EQUAL] DECIMAL(18, 3),
                              [DEBIT_CUR] DECIMAL(38, 6),
                              [CREDIT_CUR] DECIMAL(38, 6),
                              [B_CUR] DECIMAL(38, 6),
                              [DESCRIPTION] NVARCHAR(MAX),
                              [DEAL_CODE] INT,
                              [USER_CODE] INT,
                              [CHECKED] BIT,
                              [C_DATE] DATETIME,
                              [ACTIVE] BIT,
                              [GUIDS] UNIQUEIDENTIFIER,
                              [BILL_RELATION] INT,
                              [B_RELATION] INT,
                              [DATE_RELATION] DATE,
                              [FLAG_RELATION] INT);
    -- create new struct table like Table T_BOX
    IF @IDD = 0
    BEGIN



        INSERT INTO #TEMP_T_BOX (T_ID_BOX,
                                 BILL_BRANCH,
                                 BILL_NUMBER,
                                 BILL_STR,
                                 FULL_BILL,
                                 BILL_DATE,
                                 BILL_TIME,
                                 MOVE_CODE,
                                 B_CODE,
                                 BRANCH_CODE,
                                 ACCOUNT_CODE,
                                 ACCOUNT_DESCRIPTION,
                                 DEBIT,
                                 CREDIT,
                                 B_USA,
                                 DEBIT_IQ,
                                 CREDIT_IQ,
                                 B_IQ,
                                 CURRANCY_CODE,
                                 CURRANCY_EQUAL,
                                 DEBIT_CUR,
                                 CREDIT_CUR,
                                 B_CUR,
                                 DESCRIPTION,
                                 DEAL_CODE,
                                 USER_CODE,
                                 CHECKED,
                                 C_DATE,
                                 ACTIVE,
                                 GUIDS,
                                 BILL_RELATION,
                                 B_RELATION,
                                 DATE_RELATION,
                                 FLAG_RELATION)
        SELECT T_ID_BOX,
               BILL_BRANCH,
               BILL_NUMBER,
               BILL_STR,
               FULL_BILL,
               BILL_DATE,
               BILL_TIME,
               MOVE_CODE,
               B_CODE,
               BRANCH_CODE,
               ACCOUNT_CODE,
               ACCOUNT_DESCRIPTION,
               DEBIT,
               CREDIT,
               B_USA,
               DEBIT_IQ,
               CREDIT_IQ,
               B_IQ,
               CURRANCY_CODE,
               CURRANCY_EQUAL,
               DEBIT_CUR,
               CREDIT_CUR,
               B_CUR,
               DESCRIPTION,
               DEAL_CODE,
               USER_CODE,
               CHECKED,
               C_DATE,
               ACTIVE,
               GUIDS,
               BILL_RELATION,
               B_RELATION,
               DATE_RELATION,
               FLAG_RELATION
          FROM dbo.T_BOX
         WHERE ACTIVE       = 1
           AND ACCOUNT_CODE = @ACCOUNT_CODE
           AND BILL_DATE BETWEEN @D1 AND @D2
		   ORDER BY  BILL_DATE,B_CODE,BILL_NUMBER ASC;

    END;
    ELSE
    BEGIN

        INSERT INTO #TEMP_T_BOX (T_ID_BOX,
                                 BILL_BRANCH,
                                 BILL_NUMBER,
                                 BILL_STR,
                                 FULL_BILL,
                                 BILL_DATE,
                                 BILL_TIME,
                                 MOVE_CODE,
                                 B_CODE,
                                 BRANCH_CODE,
                                 ACCOUNT_CODE,
                                 ACCOUNT_DESCRIPTION,
                                 DEBIT,
                                 CREDIT,
                                 B_USA,
                                 DEBIT_IQ,
                                 CREDIT_IQ,
                                 B_IQ,
                                 CURRANCY_CODE,
                                 CURRANCY_EQUAL,
                                 DEBIT_CUR,
                                 CREDIT_CUR,
                                 B_CUR,
                                 DESCRIPTION,
                                 DEAL_CODE,
                                 USER_CODE,
                                 CHECKED,
                                 C_DATE,
                                 ACTIVE,
                                 GUIDS,
                                 BILL_RELATION,
                                 B_RELATION,
                                 DATE_RELATION,
                                 FLAG_RELATION)
        SELECT T_ID_BOX,
               BILL_BRANCH,
               BILL_NUMBER,
               BILL_STR,
               FULL_BILL,
               BILL_DATE,
               BILL_TIME,
               MOVE_CODE,
               B_CODE,
               BRANCH_CODE,
               ACCOUNT_CODE,
               ACCOUNT_DESCRIPTION,
               DEBIT,
               CREDIT,
               B_USA,
               DEBIT_IQ,
               CREDIT_IQ,
               B_IQ,
               CURRANCY_CODE,
               CURRANCY_EQUAL,
               DEBIT_CUR,
               CREDIT_CUR,
               B_CUR,
               DESCRIPTION,
               DEAL_CODE,
               USER_CODE,
               CHECKED,
               C_DATE,
               ACTIVE,
               GUIDS,
               BILL_RELATION,
               B_RELATION,
               DATE_RELATION,
               FLAG_RELATION
          FROM dbo.T_BOX
         WHERE ACTIVE       = 1
           AND ACCOUNT_CODE = @ACCOUNT_CODE
           AND T_ID_BOX     > @IDD 
		   ORDER BY  BILL_DATE,B_CODE,BILL_NUMBER ASC;
    END;
END;
-- BEGIN CALC
DECLARE @T_ID_BOX_CURCOR     INT,
        @ID_REPORT           NUMERIC(18, 0),
        @BILL_DATE_ID        DATE,
        @BILL_TIME           DATETIME,
        @CR_USA              FLOAT,
        @DE_USA              FLOAT,
        @CR_IQ               FLOAT,
        @DE_IQ               FLOAT,
        @CR_CUR              FLOAT,
        @DE_CUR              FLOAT,
        @REMAIN_USA          FLOAT,
        @REMAIN_IQ           FLOAT,
        @REMAIN_CUR          FLOAT,
        @BILL_BRANCH         NVARCHAR(50),
        @BILL_NUMBER         INT,
        @BILL_DATE           DATE,
        @B_CODE              INT,
        @B_NAME              NVARCHAR(MAX),
        @MOVE_CODE           INT,
        @MOVE_NAME           NVARCHAR(MAX),
        @ACCOUNT_NAME        NVARCHAR(MAX),
        @ACCOUNT_DESCRIPTION NVARCHAR(MAX),
        @DESCRIPTION         NVARCHAR(MAX),
        @CURRANCY_CODE       INT,
        @CURRANCY_NAME       NVARCHAR(MAX),
        @CURRANCY_EQUAL      FLOAT,
        @BALANCE_USA_ID      FLOAT,
        @USER_CODE           INT,
        @USER_NAME           NVARCHAR(MAX),
        @BALANCEEE           FLOAT,
        @BALANCEEE_IQ        FLOAT,
        @BALANCEEE_FIRST     FLOAT,
        @BALANCEEE_FIRST_IQ  FLOAT,
        @BALANCEEE_CUR       FLOAT,
        @BALANCEEE_FIRST_CUR FLOAT,
        @MANDOB_CODE         INT,
        @MANDOB_NAME         NVARCHAR(MAX),
        @CLIENT_REGION       NVARCHAR(MAX),
        @CLIENT_PHONE_SMS    NVARCHAR(MAX),
        @DEAL_CODE           INT,
        @DEAL_NAME           NVARCHAR(MAX),
        @B_COLOR             NVARCHAR(MAX),
        @CHECKED             INT;

BEGIN
    SET @SUBMIT_FLAG = 0;

    SELECT @ACCOUNT_NAME = ACCOUNT_NAME
      FROM T_ACCOUNTS
     WHERE ACCOUNT_CODE = @ACCOUNT_CODE;
    SELECT @CLIENT_PHONE_SMS = CLIENT_FULL_PHONE,
           @CLIENT_REGION = CLIENT_REGION,
           @MANDOB_CODE = MANDOOB_CODE
      FROM T_CLIENT
     WHERE CLIENT_CODE = @ACCOUNT_CODE;
    SELECT @MANDOB_NAME = MANDOOB_NAME
      FROM T_MANDOOB
     WHERE MANDOOB_CODE = @MANDOB_CODE;

    SELECT @B_NAME = B_NAME,
           @B_COLOR = B_COLOR
      FROM T_BILL_TYPE
     WHERE B_CODE = 0;


    IF @IDD = 0
    BEGIN

        SELECT @BALANCEEE_FIRST = ISNULL(SUM(DEBIT - CREDIT), 0),
               @BALANCEEE_FIRST_IQ = ISNULL(SUM(DEBIT_IQ - CREDIT_IQ), 0),
               @BALANCEEE_FIRST_CUR = ISNULL(SUM(DEBIT_CUR - CREDIT_CUR), 0)
          FROM T_BOX
         WHERE ACCOUNT_CODE = @ACCOUNT_CODE
           AND BILL_DATE    < @D1
           AND ACTIVE       = 1;
    END;
    ELSE
    BEGIN
        SELECT @BALANCEEE_FIRST = ISNULL(SUM(DEBIT - CREDIT), 0),
               @BALANCEEE_FIRST_IQ = ISNULL(SUM(DEBIT_IQ - CREDIT_IQ), 0),
               @BALANCEEE_FIRST_CUR = ISNULL(SUM(DEBIT_CUR - CREDIT_CUR), 0)
          FROM T_BOX
         WHERE ACCOUNT_CODE = @ACCOUNT_CODE
           AND T_ID_BOX     <= @IDD
           AND ACTIVE       = 1
		   

    END;

    CREATE TABLE #TEMP_T_BOX_REPORT_ACCOUNT ([T_ID_BOX] [NUMERIC](18, 0) NOT NULL primary key ,
                                             [BILL_BRANCH] [NVARCHAR](50) COLLATE Arabic_CI_AS NULL,
                                             [BILL_NUMBER] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [BILL_DATE] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [BILL_TIME] [DATETIME] NULL,
                                             [B_CODE] [INT] NULL,
                                             [B_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [MOVE_CODE] [INT] NULL,
                                             [MOVE_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [ACCOUNT_CODE] [INT] NULL,
                                             [ACCOUNT_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [ACCOUNT_FULL_NAME] AS
                                                 ((CONVERT([VARCHAR](MAX), [ACCOUNT_CODE]) + '' - '') + [ACCOUNT_NAME]),
                                             [ACCOUNT_DESCRIPTION] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [AMO_DEBIT] [DECIMAL](18, 3) NULL,
                                             [AMO_CREDIT] [DECIMAL](18, 3) NULL,
                                             [BALANCE_USA] [DECIMAL](18, 3) NULL,
                                             [AMO_DEBIT_IQ] [DECIMAL](18, 0) NULL,
                                             [AMO_CREDIT_IQ] [DECIMAL](18, 0) NULL,
                                             [BALANCE_IQ] [DECIMAL](18, 0) NULL,
                                             [AMO_DEBIT_CUR] [DECIMAL](18, 3) NULL,
                                             [AMO_CREDIT_CUR] [DECIMAL](18, 3) NULL,
                                             [BALANCE_CUR] [DECIMAL](18, 3) NULL,
                                             [DESCRIPTION] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [USER_CODE] [INT] NULL,
                                             [USER_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [DEAL_CODE] [INT] NULL,
                                             [DEAL_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [BRANCH_CODE] [INT] NULL
                                                 DEFAULT ((0)),
                                             [BRANCH_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [MANDOB_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [CLIENT_REGION] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [CLIENT_PHONE_SMS] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [B_COLOR] [NVARCHAR](100) COLLATE Arabic_CI_AS NULL,
                                             [CHECKED] [BIT] NULL
                                                 DEFAULT ((0)),
                                             [ID_BOX] [NUMERIC](18, 0) NULL
                                                 DEFAULT ((0)),
                                             [REMAIN_USA] [NUMERIC](18, 0) NULL
                                                 DEFAULT ((0)),
                                             [REMAIN_IQ] [NUMERIC](18, 0) NULL
                                                 DEFAULT ((0)),
                                             [REMAIN_CUR] [NUMERIC](18, 0) NULL
                                                 DEFAULT ((0)));


    INSERT INTO #TEMP_T_BOX_REPORT_ACCOUNT ([T_ID_BOX],
                                            [BILL_BRANCH],
                                            [BILL_NUMBER],
                                            [BILL_DATE],
                                            [BILL_TIME],
                                            [B_CODE],
                                            [B_NAME],
                                            [MOVE_CODE],
                                            [MOVE_NAME],
                                            [ACCOUNT_CODE],
                                            [ACCOUNT_NAME],
                                            [ACCOUNT_DESCRIPTION],
                                            [AMO_DEBIT],
                                            [AMO_CREDIT],
                                            [BALANCE_USA],
                                            [AMO_DEBIT_IQ],
                                            [AMO_CREDIT_IQ],
                                            [BALANCE_IQ],
                                            [AMO_DEBIT_CUR],
                                            [AMO_CREDIT_CUR],
                                            [BALANCE_CUR],
                                            [DESCRIPTION],
                                            [USER_CODE],
                                            [USER_NAME],
                                            [DEAL_CODE],
                                            [DEAL_NAME],
                                            [BRANCH_CODE],
                                            [BRANCH_NAME],
                                            [MANDOB_NAME],
                                            [CLIENT_REGION],
                                            [CLIENT_PHONE_SMS],
                                            [B_COLOR],
                                            [CHECKED],
                                            [ID_BOX])
    VALUES (0, 0, 0, @D1, N'' '', 0, @B_NAME, 0, N'' '', @ACCOUNT_CODE, @ACCOUNT_NAME, @ACCOUNT_DESCRIPTION, NULL, NULL,
            @BALANCEEE_FIRST, NULL, NULL, @BALANCEEE_FIRST_IQ, NULL, NULL, @BALANCEEE_FIRST_CUR,
            N''رصيد سابق ماقبل الفترة'', 0, NULL, 0, NULL, 0, NULL, @MANDOB_NAME, @CLIENT_REGION, @CLIENT_PHONE_SMS,
            @B_COLOR, 0, 0);

    BEGIN

        INSERT INTO #TEMP_T_BOX_REPORT_ACCOUNT ([T_ID_BOX],
                                                [BILL_BRANCH],
                                                [BILL_NUMBER],
                                                [BILL_DATE],
                                                [BILL_TIME],
                                                [B_CODE],
                                                [B_NAME],
                                                [MOVE_CODE],
                                                [MOVE_NAME],
                                                [ACCOUNT_CODE],
                                                [ACCOUNT_NAME],
                                                [ACCOUNT_DESCRIPTION],
                                                [AMO_DEBIT],
                                                [AMO_CREDIT],
                                                [BALANCE_USA],
                                                [AMO_DEBIT_IQ],
                                                [AMO_CREDIT_IQ],
                                                [BALANCE_IQ],
                                                [AMO_DEBIT_CUR],
                                                [AMO_CREDIT_CUR],
                                                [BALANCE_CUR],
                                                [DESCRIPTION],
                                                [USER_CODE],
                                                [USER_NAME],
                                                [DEAL_CODE],
                                                [DEAL_NAME],
                                                [BRANCH_CODE],
                                                [BRANCH_NAME],
                                                [MANDOB_NAME],
                                                [CLIENT_REGION],
                                                [CLIENT_PHONE_SMS],
                                                [B_COLOR],
                                                [CHECKED],
                                                [ID_BOX])

        SELECT      ROW_NUMBER() OVER (ORDER BY a.BILL_DATE, a.B_CODE, a.BILL_NUMBER ASC),
                    a.BILL_BRANCH,
                    a.BILL_NUMBER,
                    a.BILL_DATE,
                    a.BILL_TIME,
                    a.B_CODE,
                    d.B_NAME,
                    a.MOVE_CODE,
                    c.MOVE_NAME,
                    a.ACCOUNT_CODE,
                    @ACCOUNT_NAME,
                    a.ACCOUNT_DESCRIPTION,
                    a.DEBIT,
                    a.CREDIT,
                    SUM(a.DEBIT - a.CREDIT) OVER (ORDER BY a.BILL_DATE, a.B_CODE, a.BILL_NUMBER ASC)+@BALANCEEE_FIRST, -- NULL, -- @BALANCEEE + @REMAIN_USA (Last update)
                    a.DEBIT_IQ,
                    a.CREDIT_IQ,
                    SUM(a.DEBIT_IQ - a.CREDIT_IQ) OVER (ORDER BY a.BILL_DATE, a.B_CODE, a.BILL_NUMBER ASC)+@BALANCEEE_FIRST_IQ, -- NULL, -- @BALANCEEE + @REMAIN_IQ (Last update)
                    a.DEBIT_CUR,
                    a.CREDIT_CUR,
                    SUM(CAST(a.DEBIT_CUR AS DECIMAL(18,3)) - CAST(a.CREDIT_CUR AS DECIMAL(18,3))) OVER (ORDER BY a.BILL_DATE, a.B_CODE, a.BILL_NUMBER ASC)++@BALANCEEE_FIRST_CUR, -- @BALANCEEE_CUR + @REMAIN_CUR (last update)
					-- IT''S IN TABLE DESIGN IS SET DECIMAL (38,6) ::) NOT SAME IN YOUR OLD PROCEDURE 
                    a.DESCRIPTION,
                    a.USER_CODE,
                    f.USER_NAME,
                    a.DEAL_CODE,
                    b.DEAL_NAME,
                    0,
                    NULL,
                    @MANDOB_NAME,
                    @CLIENT_REGION,
                    @CLIENT_PHONE_SMS,
                    d.B_COLOR,
                    a.CHECKED,
                    a.T_ID_BOX
          FROM      #TEMP_T_BOX a
          LEFT JOIN dbo.T_DEAL b
            ON a.DEAL_CODE     = b.DEAL_CODE
          LEFT JOIN dbo.T_MOVE c
            ON a.MOVE_CODE     = c.MOVE_CODE
          LEFT JOIN dbo.T_BILL_TYPE d
            ON a.B_CODE        = d.B_CODE
          LEFT JOIN dbo.T_CURRANNCY e
            ON a.CURRANCY_CODE = e.CURRANCY_CODE
          LEFT JOIN dbo.T_USERS f
            ON a.USER_CODE     = f.USER_CODE;


    END;
    IF @CNY_CODE = 1
    BEGIN
        DELETE FROM #TEMP_T_BOX_REPORT_ACCOUNT
         WHERE AMO_DEBIT  = 0
           AND AMO_CREDIT = 0;
    END;
    IF @CNY_CODE = 2
    BEGIN
        DELETE FROM #TEMP_T_BOX_REPORT_ACCOUNT
         WHERE AMO_DEBIT_IQ  = 0
           AND AMO_CREDIT_IQ = 0;
    END;

	DROP TABLE T_BOX_REPORT_ACCOUNT
	SELECT * INTO T_BOX_REPORT_ACCOUNT FROM #TEMP_T_BOX_REPORT_ACCOUNT
   ALTER TABLE T_BOX_REPORT_ACCOUNT
ADD PRIMARY KEY (T_ID_BOX);
    SELECT *
      --FROM #TEMP_T_BOX_REPORT_ACCOUNT order by T_ID_BOX;
   FROM #TEMP_T_BOX_REPORT_ACCOUNT ORDER BY  T_ID_BOX DESC;
    SET @SUBMIT_FLAG = 1;

END;


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_MAIN]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_MAIN]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_MAIN]


@ACCOUNT_MAIN INT, 
@CNY_CODE INT,
@SUBMIT_FLAG INT OUTPUT

AS


BEGIN
SET @SUBMIT_FLAG=0
IF OBJECT_ID(''tempdb..#TEMP_MAIN_ACC'') IS NOT NULL DROP Table #TEMP_MAIN_ACC
SELECT ACCOUNT_CODE AS T_ID_BOX
      ,N''0'' AS  BILL_BRANCH 
      ,0 AS BILL_NUMBER 
      , GETDATE() AS BILL_DATE 
      ,GETDATE() AS BILL_TIME 
      ,0 AS B_CODE 
      ,N'''' AS B_NAME 
      ,0 AS MOVE_CODE 
      , N'''' AS  MOVE_NAME 
      , ACCOUNT_CODE 
      , ACCOUNT_NAME 
      , N'''' AS  ACCOUNT_DESCRIPTION   
      , 0 AS DEBIT 
      , 0 AS CREDIT 
			, BALANCE AS BALANCE_USA
      ,0 AS DEBIT_IQ 
      ,0 AS CREDIT_IQ 
       ,     BALANCE_IQ AS BALANCE_IQ
      , 0 AS DEBIT_CUR 
      ,0 AS  CREDIT_CUR 
       ,	 BALANCE_CUR AS BALANCE_CUR
      ,N'''' AS DESCRIPTION
      ,0 AS USER_CODE
      ,N'''' ASUSER_NAME
      ,0 AS DEAL_CODE
      ,N'''' AS DEAL_NAME
           , 0 AS BRANCH_CODE 
           , N'''' AS BRANCH_NAME 
           , MANDOOB_NAME  AS MANDOB_NAME
           , CLIENT_REGION 
           , CLIENT_PHONE_SMS 
           ,N'''' AS B_COLOR
      ,0 AS CHECKED
     ,0 AS  ID_BOX
	 INTO #TEMP_MAIN_ACC FROM  [dbo].[V_ACCOUNT3] WHERE ACCOUNT_PARENT=@ACCOUNT_MAIN 





IF @CNY_CODE=1
BEGIN
DELETE FROM #TEMP_MAIN_ACC WHERE BALANCE_USA=0 
END
IF @CNY_CODE=2
BEGIN
DELETE FROM #TEMP_MAIN_ACC WHERE BALANCE_IQ=0 
END
SELECT * FROM #TEMP_MAIN_ACC order by ACCOUNT_NAME asc
DROP TABLE #TEMP_MAIN_ACC
SET @SUBMIT_FLAG=1

END	--END OF PROGRAM





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_MANDOOB]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_MANDOOB]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_MANDOOB]


@MANDOOB_CODE INT, 
@CNY_CODE INT,
@SUBMIT_FLAG INT OUTPUT

AS


BEGIN
SET @SUBMIT_FLAG=0

DELETE FROM T_BOX_REPORT_ACCOUNT

INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT]
           ([T_ID_BOX]
            ,[ACCOUNT_CODE]
           ,[ACCOUNT_NAME]
           ,[BALANCE_USA]
           ,[BALANCE_IQ]
           ,[BALANCE_CUR]
           ,[CLIENT_REGION]
           ,[CLIENT_PHONE_SMS]
		   ,[MANDOB_NAME]
		   ,[DEAL_NAME]
		   ,DEAL_CODE)
		   
     SELECT [ACCOUNT_CODE]
	 ,[ACCOUNT_CODE]
      ,[ACCOUNT_NAME]
      ,[BALANCE]
      ,[BALANCE_IQ]
      ,[BALANCE_CUR]
       ,[CLIENT_REGION]
      ,[CLIENT_FULL_PHONE]
	  ,[MANDOOB_NAME]
		,[CLIENT_BUSINESS]
		,ISNULL(DATEDIFF(DAY, (SELECT        ISNULL(MAX(BILL_DATE), NULL) AS Expr1
                               FROM            dbo.T_BOX
                               WHERE        (ACCOUNT_CODE = dbo.V_ACCOUNT3.ACCOUNT_CODE) AND ACTIVE = 1 AND( B_CODE = 5 OR B_CODE = 7 OR B_CODE=15  OR B_CODE=28 OR B_CODE=70 OR B_CODE=71)), 
                         GETDATE()), 0)
  
    
  FROM [dbo].[V_ACCOUNT3] WHERE MANDOOB_CODE = @MANDOOB_CODE AND ACCOUNT_PARENT=21


IF @CNY_CODE=1
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE BALANCE_USA=0 
END
IF @CNY_CODE=2
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE BALANCE_IQ=0 
END


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_MANDOOB_ALL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_MANDOOB_ALL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'














CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_MANDOOB_ALL]


@CNY_CODE INT,
@SUBMIT_FLAG INT OUTPUT

AS


BEGIN
SET @SUBMIT_FLAG=0

DELETE FROM T_BOX_REPORT_ACCOUNT

INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT]
           ([T_ID_BOX]
            ,[ACCOUNT_CODE]
           ,[ACCOUNT_NAME]
           ,[BALANCE_USA]
           ,[BALANCE_IQ]
           ,[BALANCE_CUR]
           ,[CLIENT_REGION]
           ,[CLIENT_PHONE_SMS]
		   ,[MANDOB_NAME]
		   ,[DEAL_NAME]
		   ,DEAL_CODE)
		   
     SELECT [ACCOUNT_CODE]
	 ,[ACCOUNT_CODE]
      ,[ACCOUNT_NAME]
      ,[BALANCE]
      ,[BALANCE_IQ]
      ,[BALANCE_CUR]
       ,[CLIENT_REGION]
      ,[CLIENT_FULL_PHONE]
	  ,[MANDOOB_NAME]
		,[CLIENT_BUSINESS]
		,ISNULL(DATEDIFF(DAY, (SELECT        ISNULL(MAX(BILL_DATE), NULL) AS Expr1
                               FROM            dbo.T_BOX
                               WHERE        (ACCOUNT_CODE = dbo.V_ACCOUNT3.ACCOUNT_CODE) AND ACTIVE = 1 AND( B_CODE = 5 OR B_CODE = 7 OR B_CODE=15  OR B_CODE=28 OR B_CODE=70 OR B_CODE=71)), 
                         GETDATE()), 0)
  
  FROM [dbo].[V_ACCOUNT3] WHERE  ACCOUNT_PARENT=21


IF @CNY_CODE=1
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE BALANCE_USA=0 
END
IF @CNY_CODE=2
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE BALANCE_IQ=0 
END


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_new]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_new]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
create PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_new]
    @IDD INT,
    @ACCOUNT_CODE INT,
    @D1 DATE,
    @D2 DATE,
    @CNY_CODE INT,
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN -- CREATE TABLE AND FILTER DATA TO TABLE TEMP
    CREATE TABLE #TEMP_T_BOX ([T_ID_BOX] DECIMAL(18, 0),
                              [BILL_BRANCH] NVARCHAR(50),
                              [BILL_NUMBER] DECIMAL(18, 0),
                              [BILL_STR] NVARCHAR(MAX),
                              [FULL_BILL] NVARCHAR(MAX),
                              [BILL_DATE] DATE,
                              [BILL_TIME] DATETIME,
                              [MOVE_CODE] INT,
                              [B_CODE] INT,
                              [BRANCH_CODE] INT,
                              [ACCOUNT_CODE] INT,
                              [ACCOUNT_DESCRIPTION] NVARCHAR(MAX),
                              [DEBIT] DECIMAL(18, 3),
                              [CREDIT] DECIMAL(18, 3),
                              [B_USA] DECIMAL(19, 3),
                              [DEBIT_IQ] DECIMAL(18, 0),
                              [CREDIT_IQ] DECIMAL(18, 0),
                              [B_IQ] DECIMAL(19, 0),
                              [CURRANCY_CODE] INT,
                              [CURRANCY_EQUAL] DECIMAL(18, 3),
                              [DEBIT_CUR] DECIMAL(38, 6),
                              [CREDIT_CUR] DECIMAL(38, 6),
                              [B_CUR] DECIMAL(38, 6),
                              [DESCRIPTION] NVARCHAR(MAX),
                              [DEAL_CODE] INT,
                              [USER_CODE] INT,
                              [CHECKED] BIT,
                              [C_DATE] DATETIME,
                              [ACTIVE] BIT,
                              [GUIDS] UNIQUEIDENTIFIER,
                              [BILL_RELATION] INT,
                              [B_RELATION] INT,
                              [DATE_RELATION] DATE,
                              [FLAG_RELATION] INT);
    -- create new struct table like Table T_BOX
    IF @IDD = 0
    BEGIN



        INSERT INTO #TEMP_T_BOX (T_ID_BOX,
                                 BILL_BRANCH,
                                 BILL_NUMBER,
                                 BILL_STR,
                                 FULL_BILL,
                                 BILL_DATE,
                                 BILL_TIME,
                                 MOVE_CODE,
                                 B_CODE,
                                 BRANCH_CODE,
                                 ACCOUNT_CODE,
                                 ACCOUNT_DESCRIPTION,
                                 DEBIT,
                                 CREDIT,
                                 B_USA,
                                 DEBIT_IQ,
                                 CREDIT_IQ,
                                 B_IQ,
                                 CURRANCY_CODE,
                                 CURRANCY_EQUAL,
                                 DEBIT_CUR,
                                 CREDIT_CUR,
                                 B_CUR,
                                 DESCRIPTION,
                                 DEAL_CODE,
                                 USER_CODE,
                                 CHECKED,
                                 C_DATE,
                                 ACTIVE,
                                 GUIDS,
                                 BILL_RELATION,
                                 B_RELATION,
                                 DATE_RELATION,
                                 FLAG_RELATION)
        SELECT T_ID_BOX,
               BILL_BRANCH,
               BILL_NUMBER,
               BILL_STR,
               FULL_BILL,
               BILL_DATE,
               BILL_TIME,
               MOVE_CODE,
               B_CODE,
               BRANCH_CODE,
               ACCOUNT_CODE,
               ACCOUNT_DESCRIPTION,
               DEBIT,
               CREDIT,
               B_USA,
               DEBIT_IQ,
               CREDIT_IQ,
               B_IQ,
               CURRANCY_CODE,
               CURRANCY_EQUAL,
               DEBIT_CUR,
               CREDIT_CUR,
               B_CUR,
               DESCRIPTION,
               DEAL_CODE,
               USER_CODE,
               CHECKED,
               C_DATE,
               ACTIVE,
               GUIDS,
               BILL_RELATION,
               B_RELATION,
               DATE_RELATION,
               FLAG_RELATION
          FROM dbo.T_BOX
         WHERE ACTIVE       = 1
           AND ACCOUNT_CODE = @ACCOUNT_CODE
           AND BILL_DATE BETWEEN @D1 AND @D2
		   ORDER BY  BILL_DATE,B_CODE,BILL_NUMBER ASC;

    END;
    ELSE
    BEGIN

        INSERT INTO #TEMP_T_BOX (T_ID_BOX,
                                 BILL_BRANCH,
                                 BILL_NUMBER,
                                 BILL_STR,
                                 FULL_BILL,
                                 BILL_DATE,
                                 BILL_TIME,
                                 MOVE_CODE,
                                 B_CODE,
                                 BRANCH_CODE,
                                 ACCOUNT_CODE,
                                 ACCOUNT_DESCRIPTION,
                                 DEBIT,
                                 CREDIT,
                                 B_USA,
                                 DEBIT_IQ,
                                 CREDIT_IQ,
                                 B_IQ,
                                 CURRANCY_CODE,
                                 CURRANCY_EQUAL,
                                 DEBIT_CUR,
                                 CREDIT_CUR,
                                 B_CUR,
                                 DESCRIPTION,
                                 DEAL_CODE,
                                 USER_CODE,
                                 CHECKED,
                                 C_DATE,
                                 ACTIVE,
                                 GUIDS,
                                 BILL_RELATION,
                                 B_RELATION,
                                 DATE_RELATION,
                                 FLAG_RELATION)
        SELECT T_ID_BOX,
               BILL_BRANCH,
               BILL_NUMBER,
               BILL_STR,
               FULL_BILL,
               BILL_DATE,
               BILL_TIME,
               MOVE_CODE,
               B_CODE,
               BRANCH_CODE,
               ACCOUNT_CODE,
               ACCOUNT_DESCRIPTION,
               DEBIT,
               CREDIT,
               B_USA,
               DEBIT_IQ,
               CREDIT_IQ,
               B_IQ,
               CURRANCY_CODE,
               CURRANCY_EQUAL,
               DEBIT_CUR,
               CREDIT_CUR,
               B_CUR,
               DESCRIPTION,
               DEAL_CODE,
               USER_CODE,
               CHECKED,
               C_DATE,
               ACTIVE,
               GUIDS,
               BILL_RELATION,
               B_RELATION,
               DATE_RELATION,
               FLAG_RELATION
          FROM dbo.T_BOX
         WHERE ACTIVE       = 1
           AND ACCOUNT_CODE = @ACCOUNT_CODE
           AND T_ID_BOX     > @IDD 
		   ORDER BY  BILL_DATE,B_CODE,BILL_NUMBER ASC;
    END;
END;
-- BEGIN CALC
DECLARE @T_ID_BOX_CURCOR     INT,
        @ID_REPORT           NUMERIC(18, 0),
        @BILL_DATE_ID        DATE,
        @BILL_TIME           DATETIME,
        @CR_USA              FLOAT,
        @DE_USA              FLOAT,
        @CR_IQ               FLOAT,
        @DE_IQ               FLOAT,
        @CR_CUR              FLOAT,
        @DE_CUR              FLOAT,
        @REMAIN_USA          FLOAT,
        @REMAIN_IQ           FLOAT,
        @REMAIN_CUR          FLOAT,
        @BILL_BRANCH         NVARCHAR(50),
        @BILL_NUMBER         INT,
        @BILL_DATE           DATE,
        @B_CODE              INT,
        @B_NAME              NVARCHAR(MAX),
        @MOVE_CODE           INT,
        @MOVE_NAME           NVARCHAR(MAX),
        @ACCOUNT_NAME        NVARCHAR(MAX),
        @ACCOUNT_DESCRIPTION NVARCHAR(MAX),
        @DESCRIPTION         NVARCHAR(MAX),
        @CURRANCY_CODE       INT,
        @CURRANCY_NAME       NVARCHAR(MAX),
        @CURRANCY_EQUAL      FLOAT,
        @BALANCE_USA_ID      FLOAT,
        @USER_CODE           INT,
        @USER_NAME           NVARCHAR(MAX),
        @BALANCEEE           FLOAT,
        @BALANCEEE_IQ        FLOAT,
        @BALANCEEE_FIRST     FLOAT,
        @BALANCEEE_FIRST_IQ  FLOAT,
        @BALANCEEE_CUR       FLOAT,
        @BALANCEEE_FIRST_CUR FLOAT,
        @MANDOB_CODE         INT,
        @MANDOB_NAME         NVARCHAR(MAX),
        @CLIENT_REGION       NVARCHAR(MAX),
        @CLIENT_PHONE_SMS    NVARCHAR(MAX),
        @DEAL_CODE           INT,
        @DEAL_NAME           NVARCHAR(MAX),
        @B_COLOR             NVARCHAR(MAX),
        @CHECKED             INT;

BEGIN
    SET @SUBMIT_FLAG = 0;

    SELECT @ACCOUNT_NAME = ACCOUNT_NAME
      FROM T_ACCOUNTS
     WHERE ACCOUNT_CODE = @ACCOUNT_CODE;
    SELECT @CLIENT_PHONE_SMS = CLIENT_FULL_PHONE,
           @CLIENT_REGION = CLIENT_REGION,
           @MANDOB_CODE = MANDOOB_CODE
      FROM T_CLIENT
     WHERE CLIENT_CODE = @ACCOUNT_CODE;
    SELECT @MANDOB_NAME = MANDOOB_NAME
      FROM T_MANDOOB
     WHERE MANDOOB_CODE = @MANDOB_CODE;

    SELECT @B_NAME = B_NAME,
           @B_COLOR = B_COLOR
      FROM T_BILL_TYPE
     WHERE B_CODE = 0;


    IF @IDD = 0
    BEGIN

        SELECT @BALANCEEE_FIRST = ISNULL(SUM(DEBIT - CREDIT), 0),
               @BALANCEEE_FIRST_IQ = ISNULL(SUM(DEBIT_IQ - CREDIT_IQ), 0),
               @BALANCEEE_FIRST_CUR = ISNULL(SUM(DEBIT_CUR - CREDIT_CUR), 0)
          FROM T_BOX
         WHERE ACCOUNT_CODE = @ACCOUNT_CODE
           AND BILL_DATE    < @D1
           AND ACTIVE       = 1;
    END;
    ELSE
    BEGIN
        SELECT @BALANCEEE_FIRST = ISNULL(SUM(DEBIT - CREDIT), 0),
               @BALANCEEE_FIRST_IQ = ISNULL(SUM(DEBIT_IQ - CREDIT_IQ), 0),
               @BALANCEEE_FIRST_CUR = ISNULL(SUM(DEBIT_CUR - CREDIT_CUR), 0)
          FROM T_BOX
         WHERE ACCOUNT_CODE = @ACCOUNT_CODE
           AND T_ID_BOX     <= @IDD
           AND ACTIVE       = 1
		   

    END;

    CREATE TABLE #TEMP_T_BOX_REPORT_ACCOUNT ([T_ID_BOX] [NUMERIC](18, 0) NOT NULL primary key ,
                                             [BILL_BRANCH] [NVARCHAR](50) COLLATE Arabic_CI_AS NULL,
                                             [BILL_NUMBER] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [BILL_DATE] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [BILL_TIME] [DATETIME] NULL,
                                             [B_CODE] [INT] NULL,
                                             [B_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [MOVE_CODE] [INT] NULL,
                                             [MOVE_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [ACCOUNT_CODE] [INT] NULL,
                                             [ACCOUNT_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [ACCOUNT_FULL_NAME] AS
                                                 ((CONVERT([VARCHAR](MAX), [ACCOUNT_CODE]) + '' - '') + [ACCOUNT_NAME]),
                                             [ACCOUNT_DESCRIPTION] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [AMO_DEBIT] [DECIMAL](18, 3) NULL,
                                             [AMO_CREDIT] [DECIMAL](18, 3) NULL,
                                             [BALANCE_USA] [DECIMAL](18, 3) NULL,
                                             [AMO_DEBIT_IQ] [DECIMAL](18, 0) NULL,
                                             [AMO_CREDIT_IQ] [DECIMAL](18, 0) NULL,
                                             [BALANCE_IQ] [DECIMAL](18, 0) NULL,
                                             [AMO_DEBIT_CUR] [DECIMAL](18, 3) NULL,
                                             [AMO_CREDIT_CUR] [DECIMAL](18, 3) NULL,
                                             [BALANCE_CUR] [DECIMAL](18, 3) NULL,
                                             [DESCRIPTION] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [USER_CODE] [INT] NULL,
                                             [USER_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [DEAL_CODE] [INT] NULL,
                                             [DEAL_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [BRANCH_CODE] [INT] NULL
                                                 DEFAULT ((0)),
                                             [BRANCH_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [MANDOB_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [CLIENT_REGION] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [CLIENT_PHONE_SMS] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [B_COLOR] [NVARCHAR](100) COLLATE Arabic_CI_AS NULL,
                                             [CHECKED] [BIT] NULL
                                                 DEFAULT ((0)),
                                             [ID_BOX] [NUMERIC](18, 0) NULL
                                                 DEFAULT ((0)),
                                             [REMAIN_USA] [NUMERIC](18, 0) NULL
                                                 DEFAULT ((0)),
                                             [REMAIN_IQ] [NUMERIC](18, 0) NULL
                                                 DEFAULT ((0)),
                                             [REMAIN_CUR] [NUMERIC](18, 0) NULL
                                                 DEFAULT ((0)));


    INSERT INTO #TEMP_T_BOX_REPORT_ACCOUNT ([T_ID_BOX],
                                            [BILL_BRANCH],
                                            [BILL_NUMBER],
                                            [BILL_DATE],
                                            [BILL_TIME],
                                            [B_CODE],
                                            [B_NAME],
                                            [MOVE_CODE],
                                            [MOVE_NAME],
                                            [ACCOUNT_CODE],
                                            [ACCOUNT_NAME],
                                            [ACCOUNT_DESCRIPTION],
                                            [AMO_DEBIT],
                                            [AMO_CREDIT],
                                            [BALANCE_USA],
                                            [AMO_DEBIT_IQ],
                                            [AMO_CREDIT_IQ],
                                            [BALANCE_IQ],
                                            [AMO_DEBIT_CUR],
                                            [AMO_CREDIT_CUR],
                                            [BALANCE_CUR],
                                            [DESCRIPTION],
                                            [USER_CODE],
                                            [USER_NAME],
                                            [DEAL_CODE],
                                            [DEAL_NAME],
                                            [BRANCH_CODE],
                                            [BRANCH_NAME],
                                            [MANDOB_NAME],
                                            [CLIENT_REGION],
                                            [CLIENT_PHONE_SMS],
                                            [B_COLOR],
                                            [CHECKED],
                                            [ID_BOX])
    VALUES (0, 0, 0, @D1, N'' '', 0, @B_NAME, 0, N'' '', @ACCOUNT_CODE, @ACCOUNT_NAME, @ACCOUNT_DESCRIPTION, NULL, NULL,
            @BALANCEEE_FIRST, NULL, NULL, @BALANCEEE_FIRST_IQ, NULL, NULL, @BALANCEEE_FIRST_CUR,
            N''رصيد سابق ماقبل الفترة'', 0, NULL, 0, NULL, 0, NULL, @MANDOB_NAME, @CLIENT_REGION, @CLIENT_PHONE_SMS,
            @B_COLOR, 0, 0);

    BEGIN

        INSERT INTO #TEMP_T_BOX_REPORT_ACCOUNT ([T_ID_BOX],
                                                [BILL_BRANCH],
                                                [BILL_NUMBER],
                                                [BILL_DATE],
                                                [BILL_TIME],
                                                [B_CODE],
                                                [B_NAME],
                                                [MOVE_CODE],
                                                [MOVE_NAME],
                                                [ACCOUNT_CODE],
                                                [ACCOUNT_NAME],
                                                [ACCOUNT_DESCRIPTION],
                                                [AMO_DEBIT],
                                                [AMO_CREDIT],
                                                [BALANCE_USA],
                                                [AMO_DEBIT_IQ],
                                                [AMO_CREDIT_IQ],
                                                [BALANCE_IQ],
                                                [AMO_DEBIT_CUR],
                                                [AMO_CREDIT_CUR],
                                                [BALANCE_CUR],
                                                [DESCRIPTION],
                                                [USER_CODE],
                                                [USER_NAME],
                                                [DEAL_CODE],
                                                [DEAL_NAME],
                                                [BRANCH_CODE],
                                                [BRANCH_NAME],
                                                [MANDOB_NAME],
                                                [CLIENT_REGION],
                                                [CLIENT_PHONE_SMS],
                                                [B_COLOR],
                                                [CHECKED],
                                                [ID_BOX])

        SELECT      ROW_NUMBER() OVER (ORDER BY a.BILL_DATE, a.B_CODE, a.BILL_NUMBER ASC),
                    a.BILL_BRANCH,
                    a.BILL_NUMBER,
                    a.BILL_DATE,
                    a.BILL_TIME,
                    a.B_CODE,
                    d.B_NAME,
                    a.MOVE_CODE,
                    c.MOVE_NAME,
                    a.ACCOUNT_CODE,
                    @ACCOUNT_NAME,
                    a.ACCOUNT_DESCRIPTION,
                    a.DEBIT,
                    a.CREDIT,
                    SUM(a.DEBIT - a.CREDIT) OVER (ORDER BY a.BILL_DATE, a.B_CODE, a.BILL_NUMBER ASC), -- NULL, -- @BALANCEEE + @REMAIN_USA (Last update)
                    a.DEBIT_IQ,
                    a.CREDIT_IQ,
                    SUM(a.DEBIT_IQ - a.CREDIT_IQ) OVER (ORDER BY a.BILL_DATE, a.B_CODE, a.BILL_NUMBER ASC), -- NULL, -- @BALANCEEE + @REMAIN_IQ (Last update)
                    a.DEBIT_CUR,
                    a.CREDIT_CUR,
                    SUM(CAST(a.DEBIT_CUR AS DECIMAL(18,3)) - CAST(a.CREDIT_CUR AS DECIMAL(18,3))) OVER (ORDER BY a.BILL_DATE, a.B_CODE, a.BILL_NUMBER ASC), -- @BALANCEEE_CUR + @REMAIN_CUR (last update)
					-- IT''S IN TABLE DESIGN IS SET DECIMAL (38,6) ::) NOT SAME IN YOUR OLD PROCEDURE 
                    a.DESCRIPTION,
                    a.USER_CODE,
                    f.USER_NAME,
                    a.DEAL_CODE,
                    b.DEAL_NAME,
                    0,
                    NULL,
                    @MANDOB_NAME,
                    @CLIENT_REGION,
                    @CLIENT_PHONE_SMS,
                    d.B_COLOR,
                    a.CHECKED,
                    a.T_ID_BOX
          FROM      #TEMP_T_BOX a
          LEFT JOIN dbo.T_DEAL b
            ON a.DEAL_CODE     = b.DEAL_CODE
          LEFT JOIN dbo.T_MOVE c
            ON a.MOVE_CODE     = c.MOVE_CODE
          LEFT JOIN dbo.T_BILL_TYPE d
            ON a.B_CODE        = d.B_CODE
          LEFT JOIN dbo.T_CURRANNCY e
            ON a.CURRANCY_CODE = e.CURRANCY_CODE
          LEFT JOIN dbo.T_USERS f
            ON a.USER_CODE     = f.USER_CODE;


    END;
    IF @CNY_CODE = 1
    BEGIN
        DELETE FROM #TEMP_T_BOX_REPORT_ACCOUNT
         WHERE AMO_DEBIT  = 0
           AND AMO_CREDIT = 0;
    END;
    IF @CNY_CODE = 2
    BEGIN
        DELETE FROM #TEMP_T_BOX_REPORT_ACCOUNT
         WHERE AMO_DEBIT_IQ  = 0
           AND AMO_CREDIT_IQ = 0;
    END;

	DROP TABLE T_BOX_REPORT_ACCOUNT
	SELECT * INTO T_BOX_REPORT_ACCOUNT FROM #TEMP_T_BOX_REPORT_ACCOUNT
   ALTER TABLE T_BOX_REPORT_ACCOUNT
ADD PRIMARY KEY (T_ID_BOX);
    SELECT *
      --FROM #TEMP_T_BOX_REPORT_ACCOUNT order by T_ID_BOX;
   FROM #TEMP_T_BOX_REPORT_ACCOUNT ORDER BY  T_ID_BOX ASC;
    SET @SUBMIT_FLAG = 1;

END;

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_OLD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_OLD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_OLD]

@IDD INT,
@ACCOUNT_CODE INT, 
@D1 DATE,
@D2 DATE,
@CNY_CODE INT,
@SUBMIT_FLAG INT OUTPUT

AS

IF @IDD=0
BEGIN
DECLARE BOX_CURSOR CURSOR FAST_FORWARD FOR SELECT  T_ID_BOX FROM T_BOX  WHERE ACTIVE=1and ACCOUNT_CODE=@ACCOUNT_CODE AND  BILL_DATE BETWEEN @D1 AND @D2  order by BILL_DATE asc;
END
ELSE
BEGIN
DECLARE BOX_CURSOR CURSOR FAST_FORWARD FOR SELECT  T_ID_BOX FROM T_BOX  WHERE ACTIVE=1and ACCOUNT_CODE=@ACCOUNT_CODE AND  T_ID_BOX>@IDD	  order by BILL_DATE asc;
END


DECLARE
@T_ID_BOX_CURCOR INT,
@ID_REPORT numeric(18, 0),
@BILL_DATE_ID DATE,
@BILL_TIME DATETIME,
@CR_USA float,
@DE_USA  float,
@CR_IQ float,
@DE_IQ  float,
@CR_CUR float,
@DE_CUR  float,
@REMAIN_USA float,
@REMAIN_IQ float,
@REMAIN_CUR float,
@BILL_BRANCH	nvarchar(50)	,
@BILL_NUMBER	INT	,
@BILL_DATE DATE,
@B_CODE	int,
@B_NAME	nvarchar(MAX)	,
@MOVE_CODE	int,
@MOVE_NAME	nvarchar(MAX)	,
@ACCOUNT_NAME	nvarchar(MAX)	,
@ACCOUNT_DESCRIPTION	nvarchar(MAX)	,
@DESCRIPTION	nvarchar(MAX)	,
@CURRANCY_CODE	int	,
@CURRANCY_NAME	nvarchar(MAX),
@CURRANCY_EQUAL	float	,
@BALANCE_USA_ID	float	,
@USER_CODE	int	,
@USER_NAME	nvarchar(MAX)	,
@BALANCEEE		float	,
@BALANCEEE_IQ		float	,
@BALANCEEE_FIRST		float	,
@BALANCEEE_FIRST_IQ		float	,
@BALANCEEE_CUR		float	,
@BALANCEEE_FIRST_CUR		float	,
@MANDOB_CODE	int	,
@MANDOB_NAME  nvarchar(max), 
@CLIENT_REGION  nvarchar(max), 
@CLIENT_PHONE_SMS nvarchar(max), 
@DEAL_CODE	int	,
@DEAL_NAME	nvarchar(MAX)	,
@B_COLOR	nvarchar(MAX),
@CHECKED	int	

BEGIN
SET @SUBMIT_FLAG=0

SELECT @ACCOUNT_NAME=ACCOUNT_NAME  FROM T_ACCOUNTS WHERE ACCOUNT_CODE=@ACCOUNT_CODE
SELECT @CLIENT_PHONE_SMS=CLIENT_FULL_PHONE ,@CLIENT_REGION=CLIENT_REGION,@MANDOB_CODE=MANDOOB_CODE FROM T_CLIENT WHERE CLIENT_CODE=@ACCOUNT_CODE
SELECT @MANDOB_NAME=MANDOOB_NAME FROM T_MANDOOB WHERE MANDOOB_CODE=@MANDOB_CODE

 SELECT @B_NAME=B_NAME,@B_COLOR=B_COLOR  FROM T_BILL_TYPE WHERE B_CODE=0


IF @IDD=0
BEGIN

SELECT @BALANCEEE_FIRST =ISNULL(SUM(DEBIT -CREDIT ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1
SELECT @BALANCEEE_FIRST_IQ =ISNULL(SUM(DEBIT_IQ -CREDIT_IQ ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1
SELECT @BALANCEEE_FIRST_CUR=ISNULL(SUM(DEBIT_CUR -CREDIT_CUR ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1

END
ELSE
BEGIN
SELECT @BALANCEEE_FIRST =ISNULL(SUM(DEBIT -CREDIT ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD  and ACTIVE=1
SELECT @BALANCEEE_FIRST_IQ =ISNULL(SUM(DEBIT_IQ -CREDIT_IQ ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD and ACTIVE=1
SELECT @BALANCEEE_FIRST_CUR=ISNULL(SUM(DEBIT_CUR -CREDIT_CUR ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD  and ACTIVE=1
END


DELETE FROM T_BOX_REPORT_ACCOUNT
SET @ID_REPORT=0

INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT]
           ([T_ID_BOX]
		,[BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[B_CODE]
           ,[B_NAME]
           ,[MOVE_CODE]
           ,[MOVE_NAME]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_NAME]
           ,[ACCOUNT_DESCRIPTION]
           ,[AMO_DEBIT]
           ,[AMO_CREDIT]
           ,[BALANCE_USA]
           ,[AMO_DEBIT_IQ]
           ,[AMO_CREDIT_IQ]
           ,[BALANCE_IQ]
           ,[AMO_DEBIT_CUR]
           ,[AMO_CREDIT_CUR]
           ,[BALANCE_CUR]
           ,[DESCRIPTION]
           ,[USER_CODE]
           ,[USER_NAME]
            ,[DEAL_CODE]
           ,[DEAL_NAME]
           ,[BRANCH_CODE]
           ,[BRANCH_NAME]
           ,[MANDOB_NAME]
           ,[CLIENT_REGION]
           ,[CLIENT_PHONE_SMS]
		   ,[B_COLOR]
		  ,[CHECKED]
		   ,[ID_BOX])
     VALUES
           (@ID_REPORT
			,0
           ,0
           ,@D1
           ,N'' ''
           ,0
           ,@B_NAME
           ,0
           ,N'' ''
           ,@ACCOUNT_CODE
           ,@ACCOUNT_NAME
           ,@ACCOUNT_DESCRIPTION
           ,NULL
           ,NULL
           ,@BALANCEEE_FIRST
           ,NULL
           ,NULL
           ,@BALANCEEE_FIRST_IQ
           ,NULL
           ,NULL
           ,@BALANCEEE_FIRST_CUR
           ,N''رصيد سابق ماقبل الفترة''
           ,0
           ,NULL
           ,0
           ,NULL
           ,0
           ,NULL
           ,@MANDOB_NAME
           ,@CLIENT_REGION
           ,@CLIENT_PHONE_SMS
		   ,@B_COLOR
		   ,0
		   ,0)

     
OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN
SET @BALANCEEE_IQ=0 
 SET @REMAIN_IQ=0
 SET @BALANCEEE=0 
 SET @REMAIN_USA=0
SET @BALANCEEE_CUR=0 
 SET @REMAIN_CUR=0
SET @ID_REPORT=@ID_REPORT+1
SELECT @DE_USA=DEBIT,@CR_USA=CREDIT, @DE_IQ=DEBIT_IQ,@CR_IQ=CREDIT_IQ,@DE_CUR=DEBIT_CUR,@CR_CUR=CREDIT_CUR, @BILL_DATE=BILL_DATE,@BILL_BRANCH=BILL_BRANCH,@BILL_NUMBER=BILL_NUMBER,@BILL_TIME=BILL_TIME
 ,@B_CODE=B_CODE,@ACCOUNT_DESCRIPTION=ACCOUNT_DESCRIPTION,@DESCRIPTION=DESCRIPTION,@CURRANCY_CODE=CURRANCY_CODE,@CURRANCY_EQUAL=CURRANCY_EQUAL
 ,@USER_CODE=USER_CODE,@DEAL_CODE=DEAL_CODE,@CHECKED=CHECKED,@MOVE_CODE=MOVE_CODE FROM T_BOX WHERE T_ID_BOX=@T_ID_BOX_CURCOR
 SELECT @DEAL_NAME=DEAL_NAME  FROM T_DEAL WHERE DEAL_CODE=@DEAL_CODE
 SELECT @MOVE_NAME=MOVE_NAME  FROM T_MOVE WHERE MOVE_CODE=@MOVE_CODE
  SELECT @B_NAME=B_NAME,@B_COLOR=B_COLOR  FROM T_BILL_TYPE WHERE B_CODE=@B_CODE
   SELECT @CURRANCY_NAME=CURRANCY_NAME FROM T_CURRANNCY WHERE CURRANCY_CODE=@CURRANCY_CODE
 SELECT @USER_NAME=USER_NAME FROM T_USERS WHERE USER_CODE=@USER_CODE
-----++++ BEGIN

 SELECT @BALANCEEE =ISNULL(SUM(AMO_DEBIT -AMO_CREDIT ),0) FROM T_BOX_REPORT_ACCOUNT WHERE   T_ID_BOX <= @ID_REPORT 
 SELECT @BALANCEEE_IQ =ISNULL(SUM(AMO_DEBIT_IQ -AMO_CREDIT_IQ ),0) FROM T_BOX_REPORT_ACCOUNT WHERE   T_ID_BOX <= @ID_REPORT 
 SELECT @BALANCEEE_CUR =ISNULL(SUM(AMO_DEBIT_CUR -AMO_CREDIT_CUR ),0) FROM T_BOX_REPORT_ACCOUNT WHERE   T_ID_BOX <= @ID_REPORT 
 
 SET @REMAIN_USA=(@DE_USA-@CR_USA)+@BALANCEEE_FIRST
 SET @REMAIN_IQ=(@DE_IQ-@CR_IQ)+@BALANCEEE_FIRST_IQ
 SET @REMAIN_CUR=(@DE_CUR-@CR_CUR)+@BALANCEEE_FIRST_CUR
INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT]
           ([T_ID_BOX]
			,[BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[B_CODE]
           ,[B_NAME]
           ,[MOVE_CODE]
           ,[MOVE_NAME]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_NAME]
           ,[ACCOUNT_DESCRIPTION]
           ,[AMO_DEBIT]
           ,[AMO_CREDIT]
           ,[BALANCE_USA]
           ,[AMO_DEBIT_IQ]
           ,[AMO_CREDIT_IQ]
           ,[BALANCE_IQ]
           ,[AMO_DEBIT_CUR]
           ,[AMO_CREDIT_CUR]
           ,[BALANCE_CUR]
           ,[DESCRIPTION]
           ,[USER_CODE]
           ,[USER_NAME]
           ,[DEAL_CODE]
           ,[DEAL_NAME]
           ,[BRANCH_CODE]
           ,[BRANCH_NAME]
           ,[MANDOB_NAME]
           ,[CLIENT_REGION]
           ,[CLIENT_PHONE_SMS]
		   ,[B_COLOR]
		   ,[CHECKED]
		   ,[ID_BOX])
     VALUES
           (@ID_REPORT
			,@BILL_BRANCH
           ,@BILL_NUMBER
           ,@BILL_DATE
           ,@BILL_TIME
           ,@B_CODE
           ,@B_NAME
           ,@MOVE_CODE
           ,@MOVE_NAME
           ,@ACCOUNT_CODE
           ,@ACCOUNT_NAME
           ,@ACCOUNT_DESCRIPTION
           ,@DE_USA
           ,@CR_USA
           ,@BALANCEEE +@REMAIN_USA
           ,@DE_IQ
           ,@CR_IQ
           ,@BALANCEEE_IQ +@REMAIN_IQ
			,@DE_CUR
           ,@CR_CUR
           ,@BALANCEEE_CUR +@REMAIN_CUR
           ,@DESCRIPTION
           ,@USER_CODE
           ,@USER_NAME
           ,@DEAL_CODE
           ,@DEAL_NAME
           ,0
           ,NULL
           ,@MANDOB_NAME
           ,@CLIENT_REGION
           ,@CLIENT_PHONE_SMS
		   ,@B_COLOR
		   ,@CHECKED
		   ,@T_ID_BOX_CURCOR)

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR

IF @CNY_CODE=1
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE AMO_DEBIT=0 AND AMO_CREDIT=0
END
IF @CNY_CODE=2
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE AMO_DEBIT_IQ=0 AND AMO_CREDIT_IQ=0
END

SELECT * FROM [T_BOX_REPORT_ACCOUNT]
SET @SUBMIT_FLAG=1

END	--END OF PROGRAM




























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_old14-3]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_old14-3]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_old14-3]
    @IDD INT,
    @ACCOUNT_CODE INT,
    @D1 DATE,
    @D2 DATE,
    @CNY_CODE INT,
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET @SUBMIT_FLAG = 0;

    IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N''[dbo].[T_BOX_REPORT_ACCOUNT]'') AND type = N''U'')
    BEGIN
        DROP TABLE [dbo].[T_BOX_REPORT_ACCOUNT];
    END

    DECLARE 
        @ACCOUNT_NAME NVARCHAR(MAX),
        @CLIENT_PHONE_SMS NVARCHAR(MAX),
        @CLIENT_REGION NVARCHAR(MAX),
        @MANDOOB_CODE INT,
        @MANDOOB_NAME NVARCHAR(MAX),
        @B_NAME NVARCHAR(MAX),
        @B_COLOR NVARCHAR(MAX);

    -- الحصول على اسم الحساب
    SELECT @ACCOUNT_NAME = ACCOUNT_NAME
      FROM T_ACCOUNTS
     WHERE ACCOUNT_CODE = @ACCOUNT_CODE;

    -- الحصول على معلومات العميل والمندوب
    SELECT @CLIENT_PHONE_SMS = CLIENT_FULL_PHONE,
           @CLIENT_REGION = CLIENT_REGION,
           @MANDOOB_CODE = MANDOOB_CODE
      FROM T_CLIENT
     WHERE CLIENT_CODE = @ACCOUNT_CODE;

    SELECT @MANDOOB_NAME = MANDOOB_NAME
      FROM T_MANDOOB
     WHERE MANDOOB_CODE = @MANDOOB_CODE;

    -- الحصول على بيانات نوع الفاتورة الافتراضية
    SELECT @B_NAME = B_NAME,
           @B_COLOR = B_COLOR
      FROM T_BILL_TYPE
     WHERE B_CODE = 0;

    WITH InitialBalance AS
    (
        SELECT 
            BALANCEEE_FIRST     = ISNULL(SUM(DEBIT - CREDIT),0),
            BALANCEEE_FIRST_IQ  = ISNULL(SUM(DEBIT_IQ - CREDIT_IQ),0),
            BALANCEEE_FIRST_CUR = ISNULL(SUM(DEBIT_CUR - CREDIT_CUR),0)
        FROM T_BOX
        WHERE ACCOUNT_CODE = @ACCOUNT_CODE
          AND ACTIVE = 1
          AND (
               (@IDD = 0 AND BILL_DATE < @D1)
               OR (@IDD <> 0 AND T_ID_BOX <= @IDD)
              )
    ),
    BaseData AS
    (
        SELECT 
            T_ID_BOX,
            BILL_BRANCH,
            BILL_NUMBER,
            BILL_DATE,
            BILL_TIME,
            MOVE_CODE,
            B_CODE,
            BRANCH_CODE,
            ACCOUNT_CODE,
            ACCOUNT_DESCRIPTION,
            DEBIT,
            CREDIT,
            DEBIT_IQ,
            CREDIT_IQ,
            DEBIT_CUR,
            CREDIT_CUR,
            DESCRIPTION,
            USER_CODE,
            DEAL_CODE,
            CHECKED
        FROM T_BOX
        WHERE ACTIVE = 1
          AND ACCOUNT_CODE = @ACCOUNT_CODE
          AND (
              (@IDD = 0 AND BILL_DATE BETWEEN @D1 AND @D2)
              OR (@IDD <> 0 AND T_ID_BOX > @IDD)
          )
    ),
    ReportData AS
    (
        SELECT 
            0 AS T_ID_BOX,
            CAST(NULL AS NVARCHAR(50)) AS BILL_BRANCH,
            ''0'' AS BILL_NUMBER,
            CONVERT(NVARCHAR(MAX), @D1, 111) AS BILL_DATE,
            CAST(NULL AS DATETIME) AS BILL_TIME,
            0 AS B_CODE,
            @B_NAME AS B_NAME,
            0 AS MOVE_CODE,
            CAST(NULL AS NVARCHAR(MAX)) AS MOVE_NAME,
            @ACCOUNT_CODE AS ACCOUNT_CODE,
            @ACCOUNT_NAME AS ACCOUNT_NAME,
			NULL AS ACCOUNT_FULL_NAME,
            CAST(NULL AS NVARCHAR(MAX)) AS ACCOUNT_DESCRIPTION,
            NULL AS AMO_DEBIT,
            NULL AS AMO_CREDIT,
            ib.BALANCEEE_FIRST AS BALANCE_USA,
            NULL AS AMO_DEBIT_IQ,
            NULL AS AMO_CREDIT_IQ,
            ib.BALANCEEE_FIRST_IQ AS BALANCE_IQ,
            NULL AS AMO_DEBIT_CUR,
            NULL AS AMO_CREDIT_CUR,
            ib.BALANCEEE_FIRST_CUR AS BALANCE_CUR,
            N''رصيد سابق ماقبل الفترة'' AS DESCRIPTION,
            0 AS USER_CODE,
            CAST(NULL AS NVARCHAR(MAX)) AS USER_NAME,
            0 AS DEAL_CODE,
            CAST(NULL AS NVARCHAR(MAX)) AS DEAL_NAME,
            0 AS BRANCH_CODE,
            CAST(NULL AS NVARCHAR(MAX)) AS BRANCH_NAME,
            @MANDOOB_NAME AS MANDOB_NAME,
            @CLIENT_REGION AS CLIENT_REGION,
            @CLIENT_PHONE_SMS AS CLIENT_PHONE_SMS,
            @B_COLOR AS B_COLOR,
            0 AS CHECKED,
            0 AS ID_BOX
        FROM InitialBalance ib

        UNION ALL

        SELECT 
            ROW_NUMBER() OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) AS T_ID_BOX,
            bd.BILL_BRANCH,
            CONVERT(NVARCHAR(MAX), bd.BILL_NUMBER) AS BILL_NUMBER,
            CONVERT(NVARCHAR(MAX), bd.BILL_DATE, 111) AS BILL_DATE,
            bd.BILL_TIME,
            bd.B_CODE,
            d.B_NAME,
            bd.MOVE_CODE,
            m.MOVE_NAME,
            bd.ACCOUNT_CODE,
            @ACCOUNT_NAME,
			NULL AS ACCOUNT_FULL_NAME,
            bd.ACCOUNT_DESCRIPTION,
            bd.DEBIT AS AMO_DEBIT,
            bd.CREDIT AS AMO_CREDIT,
            SUM(bd.DEBIT - bd.CREDIT) OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + ib.BALANCEEE_FIRST AS BALANCE_USA,
            bd.DEBIT_IQ AS AMO_DEBIT_IQ,
            bd.CREDIT_IQ AS AMO_CREDIT_IQ,
            SUM(bd.DEBIT_IQ - bd.CREDIT_IQ) OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + ib.BALANCEEE_FIRST_IQ AS BALANCE_IQ,
            bd.DEBIT_CUR AS AMO_DEBIT_CUR,
            bd.CREDIT_CUR AS AMO_CREDIT_CUR,
            SUM(CAST(bd.DEBIT_CUR AS DECIMAL(18,3)) - CAST(bd.CREDIT_CUR AS DECIMAL(18,3))) OVER (ORDER BY bd.BILL_DATE, bd.B_CODE, bd.BILL_NUMBER) + ib.BALANCEEE_FIRST_CUR AS BALANCE_CUR,
            bd.DESCRIPTION,
            bd.USER_CODE,
            f.USER_NAME,
            bd.DEAL_CODE,
            dl.DEAL_NAME,
            bd.BRANCH_CODE,
            CAST(NULL AS NVARCHAR(MAX)) AS BRANCH_NAME,
            @MANDOOB_NAME AS MANDOB_NAME,
            @CLIENT_REGION AS CLIENT_REGION,
            @CLIENT_PHONE_SMS AS CLIENT_PHONE_SMS,
            d.B_COLOR,
            bd.CHECKED,
            bd.T_ID_BOX AS ID_BOX
        FROM BaseData bd
        CROSS JOIN InitialBalance ib
        LEFT JOIN T_DEAL dl ON bd.DEAL_CODE = dl.DEAL_CODE
        LEFT JOIN T_MOVE m ON bd.MOVE_CODE = m.MOVE_CODE
        LEFT JOIN T_BILL_TYPE d ON bd.B_CODE = d.B_CODE
        LEFT JOIN T_USERS f ON bd.USER_CODE = f.USER_CODE
    )

    SELECT 
        T_ID_BOX,
        BILL_BRANCH,
        BILL_NUMBER,
        BILL_DATE,
        BILL_TIME,
        B_CODE,
        B_NAME,
        MOVE_CODE,
        MOVE_NAME,
        ACCOUNT_CODE,
        ACCOUNT_NAME,
		 ACCOUNT_FULL_NAME,
        ACCOUNT_DESCRIPTION,
        AMO_DEBIT,
        AMO_CREDIT,
        BALANCE_USA,
        AMO_DEBIT_IQ,
        AMO_CREDIT_IQ,
        BALANCE_IQ,
        AMO_DEBIT_CUR,
        AMO_CREDIT_CUR,
        BALANCE_CUR,
        DESCRIPTION,
        USER_CODE,
        USER_NAME,
        DEAL_CODE,
        DEAL_NAME,
        BRANCH_CODE,
        BRANCH_NAME,
        MANDOB_NAME,
        CLIENT_REGION,
        CLIENT_PHONE_SMS,
        B_COLOR,
        CHECKED,
        ID_BOX
    INTO T_BOX_REPORT_ACCOUNT
    FROM ReportData
    WHERE 
        NOT(@CNY_CODE = 1 AND AMO_DEBIT = 0 AND AMO_CREDIT = 0 AND BILL_NUMBER<>0)
        AND NOT(@CNY_CODE = 2 AND AMO_DEBIT_IQ = 0 AND AMO_CREDIT_IQ = 0 AND BILL_NUMBER<>0);

    SELECT * 
      FROM T_BOX_REPORT_ACCOUNT
      ORDER BY T_ID_BOX;

    SET @SUBMIT_FLAG = 1;
    SET NOCOUNT OFF;
END;


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_REGION]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_REGION]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'












CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_REGION]


@REGION NVARCHAR(MAX), 
@CNY_CODE INT,
@SUBMIT_FLAG INT OUTPUT

AS


BEGIN
SET @SUBMIT_FLAG=0

DELETE FROM T_BOX_REPORT_ACCOUNT

INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT]
           ([T_ID_BOX]
            ,[ACCOUNT_CODE]
           ,[ACCOUNT_NAME]
           ,[BALANCE_USA]
           ,[BALANCE_IQ]
           ,[BALANCE_CUR]
           ,[CLIENT_REGION]
           ,[CLIENT_PHONE_SMS]
		   ,[MANDOB_NAME]
		   ,[DEAL_NAME]
		   ,DEAL_CODE)
		   
     SELECT [ACCOUNT_CODE]
	 ,[ACCOUNT_CODE]
      ,[ACCOUNT_NAME]
      ,[BALANCE]
      ,[BALANCE_IQ]
      ,[BALANCE_CUR]
       ,[CLIENT_REGION]
      ,[CLIENT_FULL_PHONE]
	  ,[MANDOOB_NAME]
		,[CLIENT_BUSINESS]
		,ISNULL(DATEDIFF(DAY, (SELECT        ISNULL(MAX(BILL_DATE), NULL) AS Expr1
                               FROM            dbo.T_BOX
                               WHERE        (ACCOUNT_CODE = dbo.V_ACCOUNT3.ACCOUNT_CODE) AND ACTIVE = 1 AND( B_CODE = 5 OR B_CODE = 7 OR B_CODE=15  OR B_CODE=28 OR B_CODE=70 OR B_CODE=71)), 
                         GETDATE()), 0)
  
    
  FROM [dbo].[V_ACCOUNT3] WHERE CLIENT_REGION LIKE @REGION AND ACCOUNT_PARENT=21


IF @CNY_CODE=1
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE BALANCE_USA=0 
END
IF @CNY_CODE=2
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE BALANCE_IQ=0 
END


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM






























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_REGION_ALL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_REGION_ALL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_REGION_ALL]


@CNY_CODE INT,
@SUBMIT_FLAG INT OUTPUT

AS


BEGIN
SET @SUBMIT_FLAG=0

DELETE FROM T_BOX_REPORT_ACCOUNT

INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT]
           ([T_ID_BOX]
            ,[ACCOUNT_CODE]
           ,[ACCOUNT_NAME]
           ,[BALANCE_USA]
           ,[BALANCE_IQ]
           ,[BALANCE_CUR]
           ,[CLIENT_REGION]
           ,[CLIENT_PHONE_SMS]
		   ,[MANDOB_NAME]
		   ,[DEAL_NAME]
		   ,DEAL_CODE)
		   
     SELECT [ACCOUNT_CODE]
	 ,[ACCOUNT_CODE]
      ,[ACCOUNT_NAME]
      ,[BALANCE]
      ,[BALANCE_IQ]
      ,[BALANCE_CUR]
       ,[CLIENT_REGION]
      ,[CLIENT_FULL_PHONE]
	  ,[MANDOOB_NAME]
		,[CLIENT_BUSINESS]
		,ISNULL(DATEDIFF(DAY, (SELECT        ISNULL(MAX(BILL_DATE), NULL) AS Expr1
                               FROM            dbo.T_BOX
                               WHERE        (ACCOUNT_CODE = dbo.V_ACCOUNT3.ACCOUNT_CODE) AND ACTIVE = 1 AND( B_CODE = 5 OR B_CODE = 7 OR B_CODE=15  OR B_CODE=28 OR B_CODE=70 OR B_CODE=71)), 
                         GETDATE()), 0)
  
  FROM [dbo].[V_ACCOUNT3] WHERE  ACCOUNT_PARENT=21


IF @CNY_CODE=1
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE BALANCE_USA=0 
END
IF @CNY_CODE=2
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE BALANCE_IQ=0 
END


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_RELATION]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_RELATION]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_RELATION]

@IDD INT,
@ACCOUNT_CODE INT, 
@D1 DATE,
@D2 DATE,
@CNY_CODE INT,
@SUBMIT_FLAG INT OUTPUT

AS

IF @IDD=0
BEGIN
DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID_BOX FROM T_BOX  WHERE ACTIVE=1and ACCOUNT_CODE=@ACCOUNT_CODE AND  BILL_DATE BETWEEN @D1 AND @D2 AND FLAG_RELATION<=1  order by BILL_DATE asc;
END
ELSE
BEGIN
DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID_BOX FROM T_BOX  WHERE ACTIVE=1and ACCOUNT_CODE=@ACCOUNT_CODE AND  T_ID_BOX>@IDD	  order by BILL_DATE asc;
END


DECLARE
@T_ID_BOX_CURCOR INT,
@ID_REPORT numeric(18, 0),
@BILL_DATE_ID DATE,
@BILL_TIME DATETIME,
@CR_USA float,
@DE_USA  float,
@CR_IQ float,
@DE_IQ  float,
@CR_CUR float,
@DE_CUR  float,
@REMAIN_USA float,
@REMAIN_IQ float,
@REMAIN_CUR float,
@BILL_BRANCH	nvarchar(50)	,
@BILL_NUMBER	INT	,
@BILL_DATE DATE,
@B_CODE	int,
@B_NAME	nvarchar(MAX)	,
@MOVE_CODE	int,
@MOVE_NAME	nvarchar(MAX)	,
@ACCOUNT_NAME	nvarchar(MAX)	,
@ACCOUNT_DESCRIPTION	nvarchar(MAX)	,
@DESCRIPTION	nvarchar(MAX)	,
@CURRANCY_CODE	int	,
@CURRANCY_NAME	nvarchar(MAX),
@CURRANCY_EQUAL	float	,
@BALANCE_USA_ID	float	,
@USER_CODE	int	,
@USER_NAME	nvarchar(MAX)	,
@BALANCEEE		float	,
@BALANCEEE_IQ		float	,
@BALANCEEE_FIRST		float	,
@BALANCEEE_FIRST_IQ		float	,
@BALANCEEE_CUR		float	,
@BALANCEEE_FIRST_CUR		float	,
@MANDOB_CODE	int	,
@MANDOB_NAME  nvarchar(max), 
@CLIENT_REGION  nvarchar(max), 
@CLIENT_PHONE_SMS nvarchar(max), 
@DEAL_CODE	int	,
@DEAL_NAME	nvarchar(MAX)	,
@B_COLOR	nvarchar(MAX),
@CHECKED	int	,
@BILL_RELATION	int	,
@B_RELATION	int	,
@DATE_RELATION	date	,
@FLAG_RELATION	int
BEGIN
SET @SUBMIT_FLAG=0
--/////////////////////////////////
SELECT @BALANCEEE_FIRST_CUR=ISNULL(SUM(DEBIT_CUR -CREDIT_CUR ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE  and ACTIVE=1
IF @BALANCEEE_FIRST_CUR<0
BEGIN
SET @SUBMIT_FLAG=1
DELETE FROM T_BOX_REPORT_ACCOUNT
RETURN
END
--/////////////////////////////////
SELECT @ACCOUNT_NAME=ACCOUNT_NAME  FROM T_ACCOUNTS WHERE ACCOUNT_CODE=@ACCOUNT_CODE
SELECT @CLIENT_PHONE_SMS=CLIENT_FULL_PHONE ,@CLIENT_REGION=CLIENT_REGION,@MANDOB_CODE=MANDOOB_CODE FROM T_CLIENT WHERE CLIENT_CODE=@ACCOUNT_CODE
SELECT @MANDOB_NAME=MANDOOB_NAME FROM T_MANDOOB WHERE MANDOOB_CODE=@MANDOB_CODE

 SELECT @B_NAME=B_NAME,@B_COLOR=B_COLOR  FROM T_BILL_TYPE WHERE B_CODE=0


IF @IDD=0
BEGIN



SELECT @BALANCEEE_FIRST =ISNULL(SUM(DEBIT -CREDIT ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1
SELECT @BALANCEEE_FIRST_IQ =ISNULL(SUM(DEBIT_IQ -CREDIT_IQ ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1

END
ELSE
BEGIN
SELECT @BALANCEEE_FIRST =ISNULL(SUM(DEBIT -CREDIT ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD  and ACTIVE=1
SELECT @BALANCEEE_FIRST_IQ =ISNULL(SUM(DEBIT_IQ -CREDIT_IQ ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD and ACTIVE=1
SELECT @BALANCEEE_FIRST_CUR=ISNULL(SUM(DEBIT_CUR -CREDIT_CUR ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD  and ACTIVE=1
END


DELETE FROM T_BOX_REPORT_ACCOUNT
SET @ID_REPORT=0

INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT]
           ([T_ID_BOX]
		,[BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[B_CODE]
           ,[B_NAME]
           ,[MOVE_CODE]
           ,[MOVE_NAME]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_NAME]
           ,[ACCOUNT_DESCRIPTION]
           ,[AMO_DEBIT]
           ,[AMO_CREDIT]
           ,[BALANCE_USA]
           ,[AMO_DEBIT_IQ]
           ,[AMO_CREDIT_IQ]
           ,[BALANCE_IQ]
           ,[AMO_DEBIT_CUR]
           ,[AMO_CREDIT_CUR]
           ,[BALANCE_CUR]
           ,[DESCRIPTION]
           ,[USER_CODE]
           ,[USER_NAME]
            ,[DEAL_CODE]
           ,[DEAL_NAME]
           ,[BRANCH_CODE]
           ,[BRANCH_NAME]
           ,[MANDOB_NAME]
           ,[CLIENT_REGION]
           ,[CLIENT_PHONE_SMS]
		   ,[B_COLOR]
		  ,[CHECKED]
		   ,[ID_BOX])
     VALUES
           (@ID_REPORT
			,0
           ,0
           ,@D1
           ,N'' ''
           ,0
           ,@B_NAME
           ,0
           ,N'' ''
           ,@ACCOUNT_CODE
           ,@ACCOUNT_NAME
           ,@ACCOUNT_DESCRIPTION
           ,NULL
           ,NULL
           ,@BALANCEEE_FIRST
           ,NULL
           ,NULL
           ,@BALANCEEE_FIRST_IQ
           ,NULL
           ,NULL
           ,@BALANCEEE_FIRST_CUR
           ,N''رصيد سابق ماقبل الفترة''
           ,0
           ,NULL
           ,0
           ,NULL
           ,0
           ,NULL
           ,@MANDOB_NAME
           ,@CLIENT_REGION
           ,@CLIENT_PHONE_SMS
		   ,@B_COLOR
		   ,0
		   ,0)

     
OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN
SET @BALANCEEE_IQ=0 
 SET @REMAIN_IQ=0
 SET @BALANCEEE=0 
 SET @REMAIN_USA=0

SET @ID_REPORT=@ID_REPORT+1
SELECT @DE_USA=DEBIT,@CR_USA=CREDIT, @DE_IQ=DEBIT_IQ,@CR_IQ=CREDIT_IQ, @BILL_DATE=BILL_DATE,@BILL_BRANCH=BILL_BRANCH,@BILL_NUMBER=BILL_NUMBER,@BILL_TIME=BILL_TIME
 ,@B_CODE=B_CODE,@ACCOUNT_DESCRIPTION=ACCOUNT_DESCRIPTION,@DESCRIPTION=DESCRIPTION,@CURRANCY_CODE=CURRANCY_CODE,@CURRANCY_EQUAL=CURRANCY_EQUAL
 ,@USER_CODE=USER_CODE,@DEAL_CODE=DEAL_CODE,@CHECKED=CHECKED,@MOVE_CODE=MOVE_CODE,@BILL_RELATION=BILL_RELATION,@B_RELATION=B_RELATION,@DATE_RELATION=DATE_RELATION,@FLAG_RELATION=FLAG_RELATION FROM T_BOX WHERE T_ID_BOX=@T_ID_BOX_CURCOR
 SELECT @DEAL_NAME=DEAL_NAME  FROM T_DEAL WHERE DEAL_CODE=@DEAL_CODE
 SELECT @MOVE_NAME=MOVE_NAME  FROM T_MOVE WHERE MOVE_CODE=@MOVE_CODE
  SELECT @B_NAME=B_NAME,@B_COLOR=B_COLOR  FROM T_BILL_TYPE WHERE B_CODE=@B_CODE
   SELECT @CURRANCY_NAME=CURRANCY_NAME FROM T_CURRANNCY WHERE CURRANCY_CODE=@CURRANCY_CODE
 SELECT @USER_NAME=USER_NAME FROM T_USERS WHERE USER_CODE=@USER_CODE
-----++++ BEGIN
IF @FLAG_RELATION=1
BEGIN
SET @DE_USA=@DE_USA+ISNULL((SELECT SUM(DEBIT) FROM T_BOX WHERE ACTIVE=1 AND FLAG_RELATION=2 AND BILL_RELATION=@BILL_NUMBER AND B_CODE=@B_RELATION),0)
SET @CR_USA=@CR_USA+ISNULL((SELECT SUM(CREDIT) FROM T_BOX WHERE ACTIVE=1 AND FLAG_RELATION=2 AND BILL_RELATION=@BILL_NUMBER  AND B_CODE=@B_RELATION),0)
SET @DE_IQ=@DE_IQ+ISNULL((SELECT SUM(DEBIT_IQ) FROM T_BOX WHERE ACTIVE=1 AND FLAG_RELATION=2 AND BILL_RELATION=@BILL_NUMBER AND B_CODE=@B_RELATION),0)
SET @CR_IQ=@CR_IQ+ISNULL((SELECT SUM(CREDIT_IQ) FROM T_BOX WHERE ACTIVE=1 AND FLAG_RELATION=2 AND BILL_RELATION=@BILL_NUMBER AND B_CODE=@B_RELATION),0)
SET @ACCOUNT_DESCRIPTION= N''تاريخ التسديد : '' --+CONVERT(VARCHAR(10),(SELECT DATE_RELATION FROM T_BOX WHERE ACTIVE=1 AND FLAG_RELATION=2 AND BILL_RELATION=@BILL_NUMBER AND B_CODE=@B_RELATION),111) + N''/ رقم الوصل : ''+(SELECT BILL_BRANCH FROM T_BOX WHERE ACTIVE=1 AND FLAG_RELATION=2 AND BILL_RELATION=@BILL_NUMBER AND B_CODE=@B_RELATION)
END
 SELECT @BALANCEEE =ISNULL(SUM(AMO_DEBIT -AMO_CREDIT ),0) FROM T_BOX_REPORT_ACCOUNT WHERE   T_ID_BOX <= @ID_REPORT 
 SELECT @BALANCEEE_IQ =ISNULL(SUM(AMO_DEBIT_IQ -AMO_CREDIT_IQ ),0) FROM T_BOX_REPORT_ACCOUNT WHERE   T_ID_BOX <= @ID_REPORT 
 SELECT @BALANCEEE_CUR =ISNULL(SUM(AMO_DEBIT_CUR -AMO_CREDIT_CUR ),0) FROM T_BOX_REPORT_ACCOUNT WHERE   T_ID_BOX <= @ID_REPORT 
 
 SET @REMAIN_USA=(@DE_USA-@CR_USA)+@BALANCEEE_FIRST
 SET @REMAIN_IQ=(@DE_IQ-@CR_IQ)+@BALANCEEE_FIRST_IQ
 SET @REMAIN_CUR=(@DE_CUR-@CR_CUR)+@BALANCEEE_FIRST_CUR
INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT]
           ([T_ID_BOX]
			,[BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[B_CODE]
           ,[B_NAME]
           ,[MOVE_CODE]
           ,[MOVE_NAME]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_NAME]
           ,[ACCOUNT_DESCRIPTION]
           ,[AMO_DEBIT]
           ,[AMO_CREDIT]
           ,[BALANCE_USA]
           ,[AMO_DEBIT_IQ]
           ,[AMO_CREDIT_IQ]
           ,[BALANCE_IQ]
           ,[AMO_DEBIT_CUR]
           ,[AMO_CREDIT_CUR]
           ,[BALANCE_CUR]
           ,[DESCRIPTION]
           ,[USER_CODE]
           ,[USER_NAME]
           ,[DEAL_CODE]
           ,[DEAL_NAME]
           ,[BRANCH_CODE]
           ,[BRANCH_NAME]
           ,[MANDOB_NAME]
           ,[CLIENT_REGION]
           ,[CLIENT_PHONE_SMS]
		   ,[B_COLOR]
		   ,[CHECKED]
		   ,[ID_BOX])
     VALUES
           (@ID_REPORT
			,@BILL_BRANCH
           ,@BILL_NUMBER
           ,@BILL_DATE
           ,@BILL_TIME
           ,@B_CODE
           ,@B_NAME
           ,@MOVE_CODE
           ,@MOVE_NAME
           ,@ACCOUNT_CODE
           ,@ACCOUNT_NAME
           ,@ACCOUNT_DESCRIPTION
           ,@DE_USA
           ,@CR_USA
           ,@BALANCEEE +@REMAIN_USA
           ,@DE_IQ
           ,@CR_IQ
           ,@BALANCEEE_IQ +@REMAIN_IQ
			,@DE_CUR
           ,@CR_CUR
           ,@BALANCEEE_CUR +@REMAIN_CUR
           ,@DESCRIPTION
           ,@USER_CODE
           ,@USER_NAME
           ,@DEAL_CODE
           ,@DEAL_NAME
           ,0
           ,NULL
           ,@MANDOB_NAME
           ,@CLIENT_REGION
           ,@CLIENT_PHONE_SMS
		   ,@B_COLOR
		   ,@CHECKED
		   ,@T_ID_BOX_CURCOR)

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR

IF @CNY_CODE=1
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE AMO_DEBIT=0 AND AMO_CREDIT=0
END
IF @CNY_CODE=2
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE AMO_DEBIT_IQ=0 AND AMO_CREDIT_IQ=0
END


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_SALES_STATUS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_SALES_STATUS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_SALES_STATUS]


@ACCOUNT_CODE INT, 
@CNY_CODE INT 
 

AS


BEGIN

WITH Invoices AS (
    SELECT
        BILL_NUMBER,
        BILL_DATE,
        TB.B_NAME,
        B_CUR AS NET_TOTAL
    FROM T_BOX
    LEFT JOIN T_BILL_TYPE TB ON T_BOX.B_CODE = TB.B_CODE
    WHERE 
        ACTIVE = 1
        AND T_BOX.B_CODE IN (2,13,16,17,18,19,29,52)   -- أكواد الفواتير
        AND ACCOUNT_CODE = @ACCOUNT_CODE
        AND B_CUR > 0   -- فقط الفواتير ذات المبلغ الموجب
    
),

Payments AS (
    SELECT
        BILL_NUMBER AS PAYMENT_ID,
        TB.B_NAME,
        B_CUR * -1 AS AMO_CASH   -- سنحوّلها لإشارة سالبة في الدفعات، 
                                 -- أو يمكنك إبقاؤها كما هي إذا كنت تريد 
                                 -- إظهارها بقيمة موجبة في الدفعات
    FROM T_BOX
    LEFT JOIN T_BILL_TYPE TB ON T_BOX.B_CODE = TB.B_CODE
    WHERE 
        ACTIVE = 1
        -- أولاً: الشروط الأساسية للسندات النقدية
        AND (
           T_BOX.B_CODE IN (5,7,8,15,28,70,71,21)
           -- ثانياً: أو تكون فاتورة عادية لكن قيمتها سالبة (مرتجع)
           OR (T_BOX.B_CODE IN (2,13,16,17,18,19,29,52) AND B_CUR < 0)
        )
        AND ACCOUNT_CODE = @ACCOUNT_CODE
        AND B_CUR <> 0
    
),

CumulativePayments AS (
    SELECT 
        SUM(AMO_CASH) OVER (ORDER BY PAYMENT_ID) AS TotalPaid,
        PAYMENT_ID,
		B_NAME,
        AMO_CASH
    FROM Payments
),
CumulativeInvoices AS (
    SELECT 
        BILL_NUMBER, 
		BILL_DATE,
		B_NAME,
        NET_TOTAL,
        SUM(NET_TOTAL) OVER (ORDER BY BILL_NUMBER) AS CumulativeInvoiceTotal
    FROM Invoices
),
DistributedPayments AS (
    SELECT 
        CI.BILL_NUMBER,
		 CI.BILL_DATE,
		 CI.B_NAME,
        CI.NET_TOTAL,
        CP.TotalPaid,
        CI.CumulativeInvoiceTotal,
        CP.AMO_CASH,
        CASE
            WHEN CP.TotalPaid >= CI.CumulativeInvoiceTotal THEN N''مدفوعة''
            WHEN CP.TotalPaid > (CI.CumulativeInvoiceTotal - CI.NET_TOTAL) THEN N''مدفوعة جزئياً''
            ELSE N''غير مدفوعة''
        END AS PAYMENT_STATUS,
        CASE
            WHEN CP.TotalPaid >= CI.CumulativeInvoiceTotal THEN 0
            WHEN CP.TotalPaid > (CI.CumulativeInvoiceTotal - CI.NET_TOTAL) THEN 
                CI.NET_TOTAL - (CP.TotalPaid - (CI.CumulativeInvoiceTotal - CI.NET_TOTAL))
            ELSE CI.NET_TOTAL
        END AS REMAINING_AMOUNT,
        CASE
            WHEN CP.TotalPaid >= CI.CumulativeInvoiceTotal THEN CI.NET_TOTAL
            WHEN CP.TotalPaid > (CI.CumulativeInvoiceTotal - CI.NET_TOTAL) THEN 
                CP.TotalPaid - (CI.CumulativeInvoiceTotal - CI.NET_TOTAL)
            ELSE 0
        END AS RECEIVED_AMOUNT,
        ROW_NUMBER() OVER (PARTITION BY CI.BILL_NUMBER ORDER BY CP.TotalPaid DESC) AS rn
    FROM 
        CumulativeInvoices CI
    LEFT JOIN CumulativePayments CP ON CP.TotalPaid >= (CI.CumulativeInvoiceTotal - CI.NET_TOTAL)
),
FinalResult AS (
    SELECT 
        BILL_NUMBER,
		BILL_DATE,
		B_NAME,
        NET_TOTAL,
        PAYMENT_STATUS,
        REMAINING_AMOUNT,
        RECEIVED_AMOUNT
    FROM 
        DistributedPayments
    WHERE rn = 1
),
Summary AS (
    SELECT 
        N''الإجمالي'' AS BILL_NUMBER,
        SUM(NET_TOTAL) AS Total_NET_TOTAL,
        SUM(RECEIVED_AMOUNT) AS Total_RECEIVED_AMOUNT,
		  SUM(NET_TOTAL)-SUM(RECEIVED_AMOUNT) AS Total_REMAIN_AMOUNT
    FROM FinalResult
)
-- دمج البيانات مع الإجماليات
SELECT 
    FR.BILL_NUMBER,
	FR.BILL_DATE,
	FR.B_NAME,
    FR.NET_TOTAL,
    FR.PAYMENT_STATUS,
    FR.REMAINING_AMOUNT,
    FR.RECEIVED_AMOUNT,
    CASE WHEN ROW_NUMBER() OVER (ORDER BY FR.BILL_NUMBER) = 1 THEN S.Total_NET_TOTAL ELSE NULL END AS Total_NET_TOTAL,
    CASE WHEN ROW_NUMBER() OVER (ORDER BY FR.BILL_NUMBER) = 1 THEN S.Total_RECEIVED_AMOUNT ELSE NULL END AS Total_RECEIVED_AMOUNT,
	CASE WHEN ROW_NUMBER() OVER (ORDER BY FR.BILL_NUMBER) = 1 THEN S.Total_REMAIN_AMOUNT ELSE NULL END AS Total_REMAIN_AMOUNT
FROM 
    FinalResult FR
    CROSS JOIN Summary S
ORDER BY FR.BILL_NUMBER;

END	--END OF PROGRAM

 ' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_SPEED]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_SPEED]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_SPEED]
    @IDD INT,
    @ACCOUNT_CODE INT,
    @D1 DATE,
    @D2 DATE,
    @CNY_CODE INT,
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN -- CREATE TABLE AND FILTER DATA TO TABLE TEMP
    CREATE TABLE #TEMP_T_BOX ([T_ID_BOX] DECIMAL(18, 0),
                              [BILL_BRANCH] NVARCHAR(50),
                              [BILL_NUMBER] DECIMAL(18, 0),
                              [BILL_STR] NVARCHAR(MAX),
                              [FULL_BILL] NVARCHAR(MAX),
                              [BILL_DATE] DATE,
                              [BILL_TIME] DATETIME,
                              [MOVE_CODE] INT,
                              [B_CODE] INT,
                              [BRANCH_CODE] INT,
                              [ACCOUNT_CODE] INT,
                              [ACCOUNT_DESCRIPTION] NVARCHAR(MAX),
                              [DEBIT] DECIMAL(18, 3),
                              [CREDIT] DECIMAL(18, 3),
                              [B_USA] DECIMAL(19, 3),
                              [DEBIT_IQ] DECIMAL(18, 0),
                              [CREDIT_IQ] DECIMAL(18, 0),
                              [B_IQ] DECIMAL(19, 0),
                              [CURRANCY_CODE] INT,
                              [CURRANCY_EQUAL] DECIMAL(18, 3),
                              [DEBIT_CUR] DECIMAL(38, 6),
                              [CREDIT_CUR] DECIMAL(38, 6),
                              [B_CUR] DECIMAL(38, 6),
                              [DESCRIPTION] NVARCHAR(MAX),
                              [DEAL_CODE] INT,
                              [USER_CODE] INT,
                              [CHECKED] BIT,
                              [C_DATE] DATETIME,
                              [ACTIVE] BIT,
                              [GUIDS] UNIQUEIDENTIFIER,
                              [BILL_RELATION] INT,
                              [B_RELATION] INT,
                              [DATE_RELATION] DATE,
                              [FLAG_RELATION] INT);
    -- create new struct table like Table T_BOX
    IF @IDD = 0
    BEGIN



        INSERT INTO #TEMP_T_BOX (T_ID_BOX,
                                 BILL_BRANCH,
                                 BILL_NUMBER,
                                 BILL_STR,
                                 FULL_BILL,
                                 BILL_DATE,
                                 BILL_TIME,
                                 MOVE_CODE,
                                 B_CODE,
                                 BRANCH_CODE,
                                 ACCOUNT_CODE,
                                 ACCOUNT_DESCRIPTION,
                                 DEBIT,
                                 CREDIT,
                                 B_USA,
                                 DEBIT_IQ,
                                 CREDIT_IQ,
                                 B_IQ,
                                 CURRANCY_CODE,
                                 CURRANCY_EQUAL,
                                 DEBIT_CUR,
                                 CREDIT_CUR,
                                 B_CUR,
                                 DESCRIPTION,
                                 DEAL_CODE,
                                 USER_CODE,
                                 CHECKED,
                                 C_DATE,
                                 ACTIVE,
                                 GUIDS,
                                 BILL_RELATION,
                                 B_RELATION,
                                 DATE_RELATION,
                                 FLAG_RELATION)
        SELECT T_ID_BOX,
               BILL_BRANCH,
               BILL_NUMBER,
               BILL_STR,
               FULL_BILL,
               BILL_DATE,
               BILL_TIME,
               MOVE_CODE,
               B_CODE,
               BRANCH_CODE,
               ACCOUNT_CODE,
               ACCOUNT_DESCRIPTION,
               DEBIT,
               CREDIT,
               B_USA,
               DEBIT_IQ,
               CREDIT_IQ,
               B_IQ,
               CURRANCY_CODE,
               CURRANCY_EQUAL,
               DEBIT_CUR,
               CREDIT_CUR,
               B_CUR,
               DESCRIPTION,
               DEAL_CODE,
               USER_CODE,
               CHECKED,
               C_DATE,
               ACTIVE,
               GUIDS,
               BILL_RELATION,
               B_RELATION,
               DATE_RELATION,
               FLAG_RELATION
          FROM dbo.T_BOX
         WHERE ACTIVE       = 1
           AND ACCOUNT_CODE = @ACCOUNT_CODE
           AND BILL_DATE BETWEEN @D1 AND @D2
		   ORDER BY  BILL_DATE,B_CODE,BILL_NUMBER ASC;

    END;
    ELSE
    BEGIN

        INSERT INTO #TEMP_T_BOX (T_ID_BOX,
                                 BILL_BRANCH,
                                 BILL_NUMBER,
                                 BILL_STR,
                                 FULL_BILL,
                                 BILL_DATE,
                                 BILL_TIME,
                                 MOVE_CODE,
                                 B_CODE,
                                 BRANCH_CODE,
                                 ACCOUNT_CODE,
                                 ACCOUNT_DESCRIPTION,
                                 DEBIT,
                                 CREDIT,
                                 B_USA,
                                 DEBIT_IQ,
                                 CREDIT_IQ,
                                 B_IQ,
                                 CURRANCY_CODE,
                                 CURRANCY_EQUAL,
                                 DEBIT_CUR,
                                 CREDIT_CUR,
                                 B_CUR,
                                 DESCRIPTION,
                                 DEAL_CODE,
                                 USER_CODE,
                                 CHECKED,
                                 C_DATE,
                                 ACTIVE,
                                 GUIDS,
                                 BILL_RELATION,
                                 B_RELATION,
                                 DATE_RELATION,
                                 FLAG_RELATION)
        SELECT T_ID_BOX,
               BILL_BRANCH,
               BILL_NUMBER,
               BILL_STR,
               FULL_BILL,
               BILL_DATE,
               BILL_TIME,
               MOVE_CODE,
               B_CODE,
               BRANCH_CODE,
               ACCOUNT_CODE,
               ACCOUNT_DESCRIPTION,
               DEBIT,
               CREDIT,
               B_USA,
               DEBIT_IQ,
               CREDIT_IQ,
               B_IQ,
               CURRANCY_CODE,
               CURRANCY_EQUAL,
               DEBIT_CUR,
               CREDIT_CUR,
               B_CUR,
               DESCRIPTION,
               DEAL_CODE,
               USER_CODE,
               CHECKED,
               C_DATE,
               ACTIVE,
               GUIDS,
               BILL_RELATION,
               B_RELATION,
               DATE_RELATION,
               FLAG_RELATION
          FROM dbo.T_BOX
         WHERE ACTIVE       = 1
           AND ACCOUNT_CODE = @ACCOUNT_CODE
           AND T_ID_BOX     > @IDD 
		   ORDER BY  BILL_DATE,B_CODE,BILL_NUMBER ASC;
    END;
END;
-- BEGIN CALC
DECLARE @T_ID_BOX_CURCOR     INT,
        @ID_REPORT           NUMERIC(18, 0),
        @BILL_DATE_ID        DATE,
        @BILL_TIME           DATETIME,
        @CR_USA              FLOAT,
        @DE_USA              FLOAT,
        @CR_IQ               FLOAT,
        @DE_IQ               FLOAT,
        @CR_CUR              FLOAT,
        @DE_CUR              FLOAT,
        @REMAIN_USA          FLOAT,
        @REMAIN_IQ           FLOAT,
        @REMAIN_CUR          FLOAT,
        @BILL_BRANCH         NVARCHAR(50),
        @BILL_NUMBER         INT,
        @BILL_DATE           DATE,
        @B_CODE              INT,
        @B_NAME              NVARCHAR(MAX),
        @MOVE_CODE           INT,
        @MOVE_NAME           NVARCHAR(MAX),
        @ACCOUNT_NAME        NVARCHAR(MAX),
        @ACCOUNT_DESCRIPTION NVARCHAR(MAX),
        @DESCRIPTION         NVARCHAR(MAX),
        @CURRANCY_CODE       INT,
        @CURRANCY_NAME       NVARCHAR(MAX),
        @CURRANCY_EQUAL      FLOAT,
        @BALANCE_USA_ID      FLOAT,
        @USER_CODE           INT,
        @USER_NAME           NVARCHAR(MAX),
        @BALANCEEE           FLOAT,
        @BALANCEEE_IQ        FLOAT,
        @BALANCEEE_FIRST     FLOAT,
        @BALANCEEE_FIRST_IQ  FLOAT,
        @BALANCEEE_CUR       FLOAT,
        @BALANCEEE_FIRST_CUR FLOAT,
        @MANDOB_CODE         INT,
        @MANDOB_NAME         NVARCHAR(MAX),
        @CLIENT_REGION       NVARCHAR(MAX),
        @CLIENT_PHONE_SMS    NVARCHAR(MAX),
        @DEAL_CODE           INT,
        @DEAL_NAME           NVARCHAR(MAX),
        @B_COLOR             NVARCHAR(MAX),
        @CHECKED             INT;

BEGIN
    SET @SUBMIT_FLAG = 0;

    SELECT @ACCOUNT_NAME = ACCOUNT_NAME
      FROM T_ACCOUNTS
     WHERE ACCOUNT_CODE = @ACCOUNT_CODE;
    SELECT @CLIENT_PHONE_SMS = CLIENT_FULL_PHONE,
           @CLIENT_REGION = CLIENT_REGION,
           @MANDOB_CODE = MANDOOB_CODE
      FROM T_CLIENT
     WHERE CLIENT_CODE = @ACCOUNT_CODE;
    SELECT @MANDOB_NAME = MANDOOB_NAME
      FROM T_MANDOOB
     WHERE MANDOOB_CODE = @MANDOB_CODE;

    SELECT @B_NAME = B_NAME,
           @B_COLOR = B_COLOR
      FROM T_BILL_TYPE
     WHERE B_CODE = 0;


    IF @IDD = 0
    BEGIN

        SELECT @BALANCEEE_FIRST = ISNULL(SUM(DEBIT - CREDIT), 0),
               @BALANCEEE_FIRST_IQ = ISNULL(SUM(DEBIT_IQ - CREDIT_IQ), 0),
               @BALANCEEE_FIRST_CUR = ISNULL(SUM(DEBIT_CUR - CREDIT_CUR), 0)
          FROM T_BOX
         WHERE ACCOUNT_CODE = @ACCOUNT_CODE
           AND BILL_DATE    < @D1
           AND ACTIVE       = 1;
    END;
    ELSE
    BEGIN
        SELECT @BALANCEEE_FIRST = ISNULL(SUM(DEBIT - CREDIT), 0),
               @BALANCEEE_FIRST_IQ = ISNULL(SUM(DEBIT_IQ - CREDIT_IQ), 0),
               @BALANCEEE_FIRST_CUR = ISNULL(SUM(DEBIT_CUR - CREDIT_CUR), 0)
          FROM T_BOX
         WHERE ACCOUNT_CODE = @ACCOUNT_CODE
           AND T_ID_BOX     <= @IDD
           AND ACTIVE       = 1
		   

    END;

    CREATE TABLE #TEMP_T_BOX_REPORT_ACCOUNT ([T_ID_BOX] [NUMERIC](18, 0) NOT NULL primary key ,
                                             [BILL_BRANCH] [NVARCHAR](50) COLLATE Arabic_CI_AS NULL,
                                             [BILL_NUMBER] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [BILL_DATE] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [BILL_TIME] [DATETIME] NULL,
                                             [B_CODE] [INT] NULL,
                                             [B_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [MOVE_CODE] [INT] NULL,
                                             [MOVE_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [ACCOUNT_CODE] [INT] NULL,
                                             [ACCOUNT_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [ACCOUNT_FULL_NAME] AS
                                                 ((CONVERT([VARCHAR](MAX), [ACCOUNT_CODE]) + '' - '') + [ACCOUNT_NAME]),
                                             [ACCOUNT_DESCRIPTION] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [AMO_DEBIT] [DECIMAL](18, 3) NULL,
                                             [AMO_CREDIT] [DECIMAL](18, 3) NULL,
                                             [BALANCE_USA] [DECIMAL](18, 3) NULL,
                                             [AMO_DEBIT_IQ] [DECIMAL](18, 0) NULL,
                                             [AMO_CREDIT_IQ] [DECIMAL](18, 0) NULL,
                                             [BALANCE_IQ] [DECIMAL](18, 0) NULL,
                                             [AMO_DEBIT_CUR] [DECIMAL](18, 3) NULL,
                                             [AMO_CREDIT_CUR] [DECIMAL](18, 3) NULL,
                                             [BALANCE_CUR] [DECIMAL](18, 3) NULL,
                                             [DESCRIPTION] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [USER_CODE] [INT] NULL,
                                             [USER_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [DEAL_CODE] [INT] NULL,
                                             [DEAL_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [BRANCH_CODE] [INT] NULL
                                                 DEFAULT ((0)),
                                             [BRANCH_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [MANDOB_NAME] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [CLIENT_REGION] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [CLIENT_PHONE_SMS] [NVARCHAR](MAX) COLLATE Arabic_CI_AS NULL,
                                             [B_COLOR] [NVARCHAR](100) COLLATE Arabic_CI_AS NULL,
                                             [CHECKED] [BIT] NULL
                                                 DEFAULT ((0)),
                                             [ID_BOX] [NUMERIC](18, 0) NULL
                                                 DEFAULT ((0)),
                                             [REMAIN_USA] [NUMERIC](18, 0) NULL
                                                 DEFAULT ((0)),
                                             [REMAIN_IQ] [NUMERIC](18, 0) NULL
                                                 DEFAULT ((0)),
                                             [REMAIN_CUR] [NUMERIC](18, 0) NULL
                                                 DEFAULT ((0)));


    INSERT INTO #TEMP_T_BOX_REPORT_ACCOUNT ([T_ID_BOX],
                                            [BILL_BRANCH],
                                            [BILL_NUMBER],
                                            [BILL_DATE],
                                            [BILL_TIME],
                                            [B_CODE],
                                            [B_NAME],
                                            [MOVE_CODE],
                                            [MOVE_NAME],
                                            [ACCOUNT_CODE],
                                            [ACCOUNT_NAME],
                                            [ACCOUNT_DESCRIPTION],
                                            [AMO_DEBIT],
                                            [AMO_CREDIT],
                                            [BALANCE_USA],
                                            [AMO_DEBIT_IQ],
                                            [AMO_CREDIT_IQ],
                                            [BALANCE_IQ],
                                            [AMO_DEBIT_CUR],
                                            [AMO_CREDIT_CUR],
                                            [BALANCE_CUR],
                                            [DESCRIPTION],
                                            [USER_CODE],
                                            [USER_NAME],
                                            [DEAL_CODE],
                                            [DEAL_NAME],
                                            [BRANCH_CODE],
                                            [BRANCH_NAME],
                                            [MANDOB_NAME],
                                            [CLIENT_REGION],
                                            [CLIENT_PHONE_SMS],
                                            [B_COLOR],
                                            [CHECKED],
                                            [ID_BOX])
    VALUES (0, 0, 0, @D1, N'' '', 0, @B_NAME, 0, N'' '', @ACCOUNT_CODE, @ACCOUNT_NAME, @ACCOUNT_DESCRIPTION, NULL, NULL,
            @BALANCEEE_FIRST, NULL, NULL, @BALANCEEE_FIRST_IQ, NULL, NULL, @BALANCEEE_FIRST_CUR,
            N''رصيد سابق ماقبل الفترة'', 0, NULL, 0, NULL, 0, NULL, @MANDOB_NAME, @CLIENT_REGION, @CLIENT_PHONE_SMS,
            @B_COLOR, 0, 0);

    BEGIN

        INSERT INTO #TEMP_T_BOX_REPORT_ACCOUNT ([T_ID_BOX],
                                                [BILL_BRANCH],
                                                [BILL_NUMBER],
                                                [BILL_DATE],
                                                [BILL_TIME],
                                                [B_CODE],
                                                [B_NAME],
                                                [MOVE_CODE],
                                                [MOVE_NAME],
                                                [ACCOUNT_CODE],
                                                [ACCOUNT_NAME],
                                                [ACCOUNT_DESCRIPTION],
                                                [AMO_DEBIT],
                                                [AMO_CREDIT],
                                                [BALANCE_USA],
                                                [AMO_DEBIT_IQ],
                                                [AMO_CREDIT_IQ],
                                                [BALANCE_IQ],
                                                [AMO_DEBIT_CUR],
                                                [AMO_CREDIT_CUR],
                                                [BALANCE_CUR],
                                                [DESCRIPTION],
                                                [USER_CODE],
                                                [USER_NAME],
                                                [DEAL_CODE],
                                                [DEAL_NAME],
                                                [BRANCH_CODE],
                                                [BRANCH_NAME],
                                                [MANDOB_NAME],
                                                [CLIENT_REGION],
                                                [CLIENT_PHONE_SMS],
                                                [B_COLOR],
                                                [CHECKED],
                                                [ID_BOX])

        SELECT      ROW_NUMBER() OVER (ORDER BY a.BILL_DATE, a.B_CODE, a.BILL_NUMBER ASC),
                    a.BILL_BRANCH,
                    a.BILL_NUMBER,
                    a.BILL_DATE,
                    a.BILL_TIME,
                    a.B_CODE,
                    d.B_NAME,
                    a.MOVE_CODE,
                    c.MOVE_NAME,
                    a.ACCOUNT_CODE,
                    @ACCOUNT_NAME,
                    a.ACCOUNT_DESCRIPTION,
                    a.DEBIT,
                    a.CREDIT,
                    SUM(a.DEBIT - a.CREDIT) OVER (ORDER BY a.BILL_DATE, a.B_CODE, a.BILL_NUMBER ASC), -- NULL, -- @BALANCEEE + @REMAIN_USA (Last update)
                    a.DEBIT_IQ,
                    a.CREDIT_IQ,
                    SUM(a.DEBIT_IQ - a.CREDIT_IQ) OVER (ORDER BY a.BILL_DATE, a.B_CODE, a.BILL_NUMBER ASC), -- NULL, -- @BALANCEEE + @REMAIN_IQ (Last update)
                    a.DEBIT_CUR,
                    a.CREDIT_CUR,
                    SUM(CAST(a.DEBIT_CUR AS DECIMAL(18,3)) - CAST(a.CREDIT_CUR AS DECIMAL(18,3))) OVER (ORDER BY a.BILL_DATE, a.B_CODE, a.BILL_NUMBER ASC), -- @BALANCEEE_CUR + @REMAIN_CUR (last update)
					-- IT''S IN TABLE DESIGN IS SET DECIMAL (38,6) ::) NOT SAME IN YOUR OLD PROCEDURE 
                    a.DESCRIPTION,
                    a.USER_CODE,
                    f.USER_NAME,
                    a.DEAL_CODE,
                    b.DEAL_NAME,
                    0,
                    NULL,
                    @MANDOB_NAME,
                    @CLIENT_REGION,
                    @CLIENT_PHONE_SMS,
                    d.B_COLOR,
                    a.CHECKED,
                    a.T_ID_BOX
          FROM      #TEMP_T_BOX a
          LEFT JOIN dbo.T_DEAL b
            ON a.DEAL_CODE     = b.DEAL_CODE
          LEFT JOIN dbo.T_MOVE c
            ON a.MOVE_CODE     = c.MOVE_CODE
          LEFT JOIN dbo.T_BILL_TYPE d
            ON a.B_CODE        = d.B_CODE
          LEFT JOIN dbo.T_CURRANNCY e
            ON a.CURRANCY_CODE = e.CURRANCY_CODE
          LEFT JOIN dbo.T_USERS f
            ON a.USER_CODE     = f.USER_CODE;


    END;
    IF @CNY_CODE = 1
    BEGIN
        DELETE FROM #TEMP_T_BOX_REPORT_ACCOUNT
         WHERE AMO_DEBIT  = 0
           AND AMO_CREDIT = 0;
    END;
    IF @CNY_CODE = 2
    BEGIN
        DELETE FROM #TEMP_T_BOX_REPORT_ACCOUNT
         WHERE AMO_DEBIT_IQ  = 0
           AND AMO_CREDIT_IQ = 0;
    END;

	DROP TABLE T_BOX_REPORT_ACCOUNT
	SELECT * INTO T_BOX_REPORT_ACCOUNT FROM #TEMP_T_BOX_REPORT_ACCOUNT
   ALTER TABLE T_BOX_REPORT_ACCOUNT
ADD PRIMARY KEY (T_ID_BOX);
    SELECT *
      --FROM #TEMP_T_BOX_REPORT_ACCOUNT order by T_ID_BOX;
   FROM #TEMP_T_BOX_REPORT_ACCOUNT ORDER BY  T_ID_BOX ASC;
    SET @SUBMIT_FLAG = 1;

END;

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_TABLE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_TABLE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_TABLE]

@IDD INT,
@ACCOUNT_CODE INT, 
@D1 DATE,
@D2 DATE,
@CNY_CODE INT

AS

IF @IDD=0
BEGIN
DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID_BOX FROM T_BOX  WHERE ACTIVE=1and ACCOUNT_CODE=@ACCOUNT_CODE AND  BILL_DATE BETWEEN @D1 AND @D2  order by BILL_DATE asc;
END
ELSE
BEGIN
DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID_BOX FROM T_BOX  WHERE ACTIVE=1and ACCOUNT_CODE=@ACCOUNT_CODE AND  T_ID_BOX>@IDD	  order by BILL_DATE asc;
END


DECLARE
@T_ID_BOX_CURCOR INT,
@ID_REPORT numeric(18, 0),
@BILL_DATE_ID DATE,
@BILL_TIME DATETIME,
@CR_USA float,
@DE_USA  float,
@CR_IQ float,
@DE_IQ  float,
@CR_CUR float,
@DE_CUR  float,
@REMAIN_USA float,
@REMAIN_IQ float,
@REMAIN_CUR float,
@BILL_BRANCH	nvarchar(50)	,
@BILL_NUMBER	INT	,
@BILL_DATE DATE,
@B_CODE	int,
@B_NAME	nvarchar(MAX)	,
@MOVE_CODE	int,
@MOVE_NAME	nvarchar(MAX)	,
@ACCOUNT_NAME	nvarchar(MAX)	,
@ACCOUNT_DESCRIPTION	nvarchar(MAX)	,
@DESCRIPTION	nvarchar(MAX)	,
@CURRANCY_CODE	int	,
@CURRANCY_NAME	nvarchar(MAX),
@CURRANCY_EQUAL	float	,
@BALANCE_USA_ID	float	,
@USER_CODE	int	,
@USER_NAME	nvarchar(MAX)	,
@BALANCEEE		float	,
@BALANCEEE_IQ		float	,
@BALANCEEE_FIRST		float	,
@BALANCEEE_FIRST_IQ		float	,
@BALANCEEE_CUR		float	,
@BALANCEEE_FIRST_CUR		float	,
@MANDOB_CODE	int	,
@MANDOB_NAME  nvarchar(max), 
@CLIENT_REGION  nvarchar(max), 
@CLIENT_PHONE_SMS nvarchar(max), 
@DEAL_CODE	int	,
@DEAL_NAME	nvarchar(MAX)	,
@B_COLOR	nvarchar(MAX),
@CHECKED	int	

BEGIN


SELECT @ACCOUNT_NAME=ACCOUNT_NAME  FROM T_ACCOUNTS WHERE ACCOUNT_CODE=@ACCOUNT_CODE
SELECT @CLIENT_PHONE_SMS=CLIENT_FULL_PHONE ,@CLIENT_REGION=CLIENT_REGION,@MANDOB_CODE=MANDOOB_CODE FROM T_CLIENT WHERE CLIENT_CODE=@ACCOUNT_CODE
SELECT @MANDOB_NAME=MANDOOB_NAME FROM T_MANDOOB WHERE MANDOOB_CODE=@MANDOB_CODE

 SELECT @B_NAME=B_NAME,@B_COLOR=B_COLOR  FROM T_BILL_TYPE WHERE B_CODE=0


IF @IDD=0
BEGIN

SELECT @BALANCEEE_FIRST =ISNULL(SUM(DEBIT -CREDIT ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1
SELECT @BALANCEEE_FIRST_IQ =ISNULL(SUM(DEBIT_IQ -CREDIT_IQ ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1
SELECT @BALANCEEE_FIRST_CUR=ISNULL(SUM(DEBIT_CUR -CREDIT_CUR ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1

END
ELSE
BEGIN
SELECT @BALANCEEE_FIRST =ISNULL(SUM(DEBIT -CREDIT ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD  and ACTIVE=1
SELECT @BALANCEEE_FIRST_IQ =ISNULL(SUM(DEBIT_IQ -CREDIT_IQ ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD and ACTIVE=1
SELECT @BALANCEEE_FIRST_CUR=ISNULL(SUM(DEBIT_CUR -CREDIT_CUR ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD  and ACTIVE=1
END


DELETE FROM T_BOX_REPORT_ACCOUNT
SET @ID_REPORT=0

INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT]
           ([T_ID_BOX]
		,[BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[B_CODE]
           ,[B_NAME]
           ,[MOVE_CODE]
           ,[MOVE_NAME]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_NAME]
           ,[ACCOUNT_DESCRIPTION]
           ,[AMO_DEBIT]
           ,[AMO_CREDIT]
           ,[BALANCE_USA]
           ,[AMO_DEBIT_IQ]
           ,[AMO_CREDIT_IQ]
           ,[BALANCE_IQ]
           ,[AMO_DEBIT_CUR]
           ,[AMO_CREDIT_CUR]
           ,[BALANCE_CUR]
           ,[DESCRIPTION]
           ,[USER_CODE]
           ,[USER_NAME]
            ,[DEAL_CODE]
           ,[DEAL_NAME]
           ,[BRANCH_CODE]
           ,[BRANCH_NAME]
           ,[MANDOB_NAME]
           ,[CLIENT_REGION]
           ,[CLIENT_PHONE_SMS]
		   ,[B_COLOR]
		  ,[CHECKED]
		   ,[ID_BOX])
     VALUES
           (@ID_REPORT
			,0
           ,0
           ,@D1
           ,N'' ''
           ,0
           ,@B_NAME
           ,0
           ,N'' ''
           ,@ACCOUNT_CODE
           ,@ACCOUNT_NAME
           ,@ACCOUNT_DESCRIPTION
           ,NULL
           ,NULL
           ,@BALANCEEE_FIRST
           ,NULL
           ,NULL
           ,@BALANCEEE_FIRST_IQ
           ,NULL
           ,NULL
           ,@BALANCEEE_FIRST_CUR
           ,N''رصيد سابق ماقبل الفترة''
           ,0
           ,NULL
           ,0
           ,NULL
           ,0
           ,NULL
           ,@MANDOB_NAME
           ,@CLIENT_REGION
           ,@CLIENT_PHONE_SMS
		   ,@B_COLOR
		   ,0
		   ,0)

     
OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN
SET @BALANCEEE_IQ=0 
 SET @REMAIN_IQ=0
 SET @BALANCEEE=0 
 SET @REMAIN_USA=0

SET @ID_REPORT=@ID_REPORT+1
SELECT @DE_USA=DEBIT,@CR_USA=CREDIT, @DE_IQ=DEBIT_IQ,@CR_IQ=CREDIT_IQ, @BILL_DATE=BILL_DATE,@BILL_BRANCH=BILL_BRANCH,@BILL_NUMBER=BILL_NUMBER,@BILL_TIME=BILL_TIME
 ,@B_CODE=B_CODE,@ACCOUNT_DESCRIPTION=ACCOUNT_DESCRIPTION,@DESCRIPTION=DESCRIPTION,@CURRANCY_CODE=CURRANCY_CODE,@CURRANCY_EQUAL=CURRANCY_EQUAL
 ,@USER_CODE=USER_CODE,@DEAL_CODE=DEAL_CODE,@CHECKED=CHECKED,@MOVE_CODE=MOVE_CODE FROM T_BOX WHERE T_ID_BOX=@T_ID_BOX_CURCOR
 SELECT @DEAL_NAME=DEAL_NAME  FROM T_DEAL WHERE DEAL_CODE=@DEAL_CODE
 SELECT @MOVE_NAME=MOVE_NAME  FROM T_MOVE WHERE MOVE_CODE=@MOVE_CODE
  SELECT @B_NAME=B_NAME,@B_COLOR=B_COLOR  FROM T_BILL_TYPE WHERE B_CODE=@B_CODE
   SELECT @CURRANCY_NAME=CURRANCY_NAME FROM T_CURRANNCY WHERE CURRANCY_CODE=@CURRANCY_CODE
 SELECT @USER_NAME=USER_NAME FROM T_USERS WHERE USER_CODE=@USER_CODE
-----++++ BEGIN

 SELECT @BALANCEEE =ISNULL(SUM(AMO_DEBIT -AMO_CREDIT ),0) FROM T_BOX_REPORT_ACCOUNT WHERE   T_ID_BOX <= @ID_REPORT 
 SELECT @BALANCEEE_IQ =ISNULL(SUM(AMO_DEBIT_IQ -AMO_CREDIT_IQ ),0) FROM T_BOX_REPORT_ACCOUNT WHERE   T_ID_BOX <= @ID_REPORT 
 SELECT @BALANCEEE_CUR =ISNULL(SUM(AMO_DEBIT_CUR -AMO_CREDIT_CUR ),0) FROM T_BOX_REPORT_ACCOUNT WHERE   T_ID_BOX <= @ID_REPORT 
 
 SET @REMAIN_USA=(@DE_USA-@CR_USA)+@BALANCEEE_FIRST
 SET @REMAIN_IQ=(@DE_IQ-@CR_IQ)+@BALANCEEE_FIRST_IQ
 SET @REMAIN_CUR=(@DE_CUR-@CR_CUR)+@BALANCEEE_FIRST_CUR
INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT]
           ([T_ID_BOX]
			,[BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[B_CODE]
           ,[B_NAME]
           ,[MOVE_CODE]
           ,[MOVE_NAME]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_NAME]
           ,[ACCOUNT_DESCRIPTION]
           ,[AMO_DEBIT]
           ,[AMO_CREDIT]
           ,[BALANCE_USA]
           ,[AMO_DEBIT_IQ]
           ,[AMO_CREDIT_IQ]
           ,[BALANCE_IQ]
           ,[AMO_DEBIT_CUR]
           ,[AMO_CREDIT_CUR]
           ,[BALANCE_CUR]
           ,[DESCRIPTION]
           ,[USER_CODE]
           ,[USER_NAME]
           ,[DEAL_CODE]
           ,[DEAL_NAME]
           ,[BRANCH_CODE]
           ,[BRANCH_NAME]
           ,[MANDOB_NAME]
           ,[CLIENT_REGION]
           ,[CLIENT_PHONE_SMS]
		   ,[B_COLOR]
		   ,[CHECKED]
		   ,[ID_BOX])
     VALUES
           (@ID_REPORT
			,@BILL_BRANCH
           ,@BILL_NUMBER
           ,@BILL_DATE
           ,@BILL_TIME
           ,@B_CODE
           ,@B_NAME
           ,@MOVE_CODE
           ,@MOVE_NAME
           ,@ACCOUNT_CODE
           ,@ACCOUNT_NAME
           ,@ACCOUNT_DESCRIPTION
           ,@DE_USA
           ,@CR_USA
           ,@BALANCEEE +@REMAIN_USA
           ,@DE_IQ
           ,@CR_IQ
           ,@BALANCEEE_IQ +@REMAIN_IQ
			,@DE_CUR
           ,@CR_CUR
           ,@BALANCEEE_CUR +@REMAIN_CUR
           ,@DESCRIPTION
           ,@USER_CODE
           ,@USER_NAME
           ,@DEAL_CODE
           ,@DEAL_NAME
           ,0
           ,NULL
           ,@MANDOB_NAME
           ,@CLIENT_REGION
           ,@CLIENT_PHONE_SMS
		   ,@B_COLOR
		   ,@CHECKED
		   ,@T_ID_BOX_CURCOR)

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR

IF @CNY_CODE=1
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE AMO_DEBIT=0 AND AMO_CREDIT=0
END
IF @CNY_CODE=2
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE AMO_DEBIT_IQ=0 AND AMO_CREDIT_IQ=0
END

SELECT * FROM T_BOX_REPORT_ACCOUNT WHERE ACCOUNT_CODE=@ACCOUNT_CODE


END	--END OF PROGRAM





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_TYPE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_TYPE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'












CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_TYPE]


@CLIENT_TYPE INT, 
@CNY_CODE INT,
@SUBMIT_FLAG INT OUTPUT

AS


BEGIN
SET @SUBMIT_FLAG=0

IF OBJECT_ID(''tempdb..#TEMP_CLIENT_TYPE'') IS NOT NULL DROP Table #TEMP_CLIENT_TYPE
SELECT ACCOUNT_CODE AS T_ID_BOX
      ,N''0'' AS  BILL_BRANCH 
      ,0 AS BILL_NUMBER 
      , GETDATE() AS BILL_DATE 
      ,GETDATE() AS BILL_TIME 
      ,0 AS B_CODE 
      ,N'''' AS B_NAME 
      ,0 AS MOVE_CODE 
      , N'''' AS  MOVE_NAME 
      , ACCOUNT_CODE 
      , ACCOUNT_NAME 
      , N'''' AS  ACCOUNT_DESCRIPTION   
      , 0 AS DEBIT 
      , 0 AS CREDIT 
			, BALANCE AS BALANCE_USA
      ,0 AS DEBIT_IQ 
      ,0 AS CREDIT_IQ 
       ,     BALANCE_IQ AS BALANCE_IQ
      , 0 AS DEBIT_CUR 
      ,0 AS  CREDIT_CUR 
       ,	 BALANCE_CUR AS BALANCE_CUR
      ,N'''' AS DESCRIPTION
      ,0 AS USER_CODE
      ,N'''' ASUSER_NAME
      ,ISNULL(DATEDIFF(DAY, (SELECT        ISNULL(MAX(BILL_DATE), NULL) AS Expr1
                               FROM            dbo.T_BOX
                               WHERE        (ACCOUNT_CODE = dbo.V_ACCOUNT3.ACCOUNT_CODE) AND ACTIVE = 1 AND( B_CODE = 5 OR B_CODE = 7 OR B_CODE=15  OR B_CODE=28 OR B_CODE=70 OR B_CODE=71)), 
                         GETDATE()), 0) AS DEAL_CODE
      ,CLIENT_BUSINESS AS DEAL_NAME
           , 0 AS BRANCH_CODE 
           , N'''' AS BRANCH_NAME 
           , MANDOOB_NAME  AS MANDOB_NAME
           , CLIENT_REGION 
           , CLIENT_PHONE_SMS 
           ,N'''' AS B_COLOR
      ,0 AS CHECKED
     ,0 AS  ID_BOX
	 INTO #TEMP_CLIENT_TYPE  FROM  [dbo].[V_ACCOUNT3] WHERE ACCOUNT_PARENT=21 AND CLIENT_TYPE=@CLIENT_TYPE  


IF @CNY_CODE=1
BEGIN
DELETE FROM #TEMP_CLIENT_TYPE WHERE BALANCE_USA=0 
END
IF @CNY_CODE=2
BEGIN
DELETE FROM #TEMP_CLIENT_TYPE WHERE BALANCE_IQ=0 
END
SELECT * FROM #TEMP_CLIENT_TYPE order by ACCOUNT_NAME asc
DROP TABLE #TEMP_CLIENT_TYPE

SET @SUBMIT_FLAG=1

END	--END OF PROGRAM






























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_TYPE_ALL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_TYPE_ALL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_TYPE_ALL]



@CNY_CODE INT,
@SUBMIT_FLAG INT OUTPUT

AS


BEGIN
SET @SUBMIT_FLAG=0

DELETE FROM T_BOX_REPORT_ACCOUNT


INSERT INTO [dbo].[T_BOX_REPORT_ACCOUNT]
           ([T_ID_BOX]
            ,[ACCOUNT_CODE]
           ,[ACCOUNT_NAME]
           ,[BALANCE_USA]
           ,[BALANCE_IQ]
           ,[BALANCE_CUR]
           ,[CLIENT_REGION]
           ,[CLIENT_PHONE_SMS]
		   ,[MANDOB_NAME]
		   ,[DEAL_NAME]
		   ,DEAL_CODE)
		   
     SELECT [ACCOUNT_CODE]
	 ,[ACCOUNT_CODE]
      ,[ACCOUNT_NAME]
      ,[BALANCE]
      ,[BALANCE_IQ]
      ,[BALANCE_CUR]
       ,[CLIENT_REGION]
      ,[CLIENT_FULL_PHONE]
	  ,[MANDOOB_NAME]
		,[CLIENT_BUSINESS]
		,ISNULL(DATEDIFF(DAY, (SELECT        ISNULL(MAX(BILL_DATE), NULL) AS Expr1
                               FROM            dbo.T_BOX
                               WHERE        (ACCOUNT_CODE = dbo.V_ACCOUNT3.ACCOUNT_CODE) AND ACTIVE = 1 AND( B_CODE = 5 OR B_CODE = 7 OR B_CODE=15  OR B_CODE=28 OR B_CODE=70 OR B_CODE=71)), 
                         GETDATE()), 0)
						
  
  FROM [dbo].[V_ACCOUNT3] WHERE ACCOUNT_PARENT=21  


IF @CNY_CODE=1
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE BALANCE_USA=0 
END
IF @CNY_CODE=2
BEGIN
DELETE FROM T_BOX_REPORT_ACCOUNT WHERE BALANCE_IQ=0 
END


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_WITHOUT_BALANCE_DATE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_WITHOUT_BALANCE_DATE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_WITHOUT_BALANCE_DATE]

@IDD INT,
@ACCOUNT_CODE INT, 
@D1 DATE,
@D2 DATE,
@CNY_CODE INT,
@SUBMIT_FLAG INT OUTPUT

AS


IF OBJECT_ID(''tempdb..#TEMP_BOX'') IS NOT NULL DROP Table #TEMP_BOX
SELECT ROW_NUMBER() OVER(ORDER BY  BILL_DATE,B_CODE,BILL_NUMBER ASC) AS T_ID_BOX
      ,[BILL_BRANCH]
      ,[BILL_NUMBER]
      ,[BILL_DATE]
      ,[BILL_TIME]
      ,[B_CODE]
      ,[B_NAME]
      ,[MOVE_CODE]
      ,[MOVE_NAME]
      ,[ACCOUNT_CODE]
      ,[ACCOUNT_NAME]
      ,[ACCOUNT_DESCRIPTION]  
      ,[DEBIT] AS AMO_DEBIT
      ,[CREDIT] AS AMO_CREDIT
			, 0 AS BALANCE_USA
      ,[DEBIT_IQ] AS AMO_DEBIT_IQ
      ,[CREDIT_IQ] AS AMO_CREDIT_IQ
       ,     0 AS BALANCE_IQ
      ,[DEBIT_CUR] AS AMO_DEBIT_CUR
      ,[CREDIT_CUR] AS AMO_CREDIT_CUR
       ,	 0 AS BALANCE_CUR
      ,[DESCRIPTION]
      ,[USER_CODE]
      ,[USER_NAME]
      ,[DEAL_CODE]
      ,[DEAL_NAME]
           ,[BRANCH_CODE]
           ,[BRANCH_NAME]
           ,[MANDOOB_NAME] AS MANDOB_NAME
           ,[CLIENT_REGION]
           ,[CLIENT_PHONE_SMS]
           ,[B_COLOR]
      ,[CHECKED]
     ,[T_ID_BOX] AS  ID_BOX
	 INTO #TEMP_BOX FROM V_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE BETWEEN @D1 AND @D2 order by BILL_DATE,B_CODE,BILL_NUMBER asc




DECLARE

@ID_REPORT numeric(18, 0),
@BALANCEEE_FIRST		float	,
@BALANCEEE_FIRST_IQ		float	,
@BALANCEEE_FIRST_CUR		float	

BEGIN


IF @IDD=0
BEGIN

SELECT @BALANCEEE_FIRST =ISNULL(SUM(DEBIT -CREDIT ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1
SELECT @BALANCEEE_FIRST_IQ =ISNULL(SUM(DEBIT_IQ -CREDIT_IQ ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1
SELECT @BALANCEEE_FIRST_CUR=ISNULL(SUM(DEBIT_CUR -CREDIT_CUR ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1

END
ELSE
BEGIN
SELECT @BALANCEEE_FIRST =ISNULL(SUM(DEBIT -CREDIT ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD  and ACTIVE=1
SELECT @BALANCEEE_FIRST_IQ =ISNULL(SUM(DEBIT_IQ -CREDIT_IQ ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD and ACTIVE=1
SELECT @BALANCEEE_FIRST_CUR=ISNULL(SUM(DEBIT_CUR -CREDIT_CUR ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD  and ACTIVE=1
END
SET @ID_REPORT=0

INSERT INTO #TEMP_BOX
           ([T_ID_BOX]
		,[BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[B_CODE]
           ,[B_NAME]
           ,[MOVE_CODE]
           ,[MOVE_NAME]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_NAME]
           ,[ACCOUNT_DESCRIPTION]
           ,[AMO_DEBIT]
           ,[AMO_CREDIT]
           ,[BALANCE_USA]
           ,[AMO_DEBIT_IQ]
           ,[AMO_CREDIT_IQ]
           ,[BALANCE_IQ]
           ,[AMO_DEBIT_CUR]
           ,[AMO_CREDIT_CUR]
           ,[BALANCE_CUR]
           ,[DESCRIPTION]
           ,[USER_CODE]
           ,[USER_NAME]
            ,[DEAL_CODE]
           ,[DEAL_NAME]
           ,[BRANCH_CODE]
           ,[BRANCH_NAME]
           ,[MANDOB_NAME]
           ,[CLIENT_REGION]
           ,[CLIENT_PHONE_SMS]
		   ,[B_COLOR]
		  ,[CHECKED]
		   ,[ID_BOX])
     VALUES
           (@ID_REPORT
			,0
           ,0
           ,@D1
           ,N'' ''
           ,0
          ,N''رصيد اولي''
           ,0
           ,N'' ''
           ,@ACCOUNT_CODE
           ,N'' ''
          ,N'' ''
           ,IIF(@BALANCEEE_FIRST>=0,@BALANCEEE_FIRST,0) 
           ,IIF(@BALANCEEE_FIRST<0,@BALANCEEE_FIRST*-1,0) 
           ,0
           ,IIF(@BALANCEEE_FIRST_IQ>=0,@BALANCEEE_FIRST_IQ,0) 
           ,IIF(@BALANCEEE_FIRST_IQ<0,@BALANCEEE_FIRST_IQ*-1,0) 
           ,0
           ,IIF(@BALANCEEE_FIRST_CUR>=0,@BALANCEEE_FIRST_CUR,0) 
           ,IIF(@BALANCEEE_FIRST_CUR<0,@BALANCEEE_FIRST_CUR*-1,0) 
           ,0
           ,N''رصيد سابق ماقبل الفترة''
           ,0
           ,NULL
           ,0
           ,NULL
           ,0
           ,NULL
           ,N'' ''
           ,N'' ''
          ,N'' ''
		   ,N''RED''
		   ,0
		   ,0)

     

IF @CNY_CODE=1
BEGIN
DELETE FROM #TEMP_BOX WHERE AMO_DEBIT=0 AND AMO_CREDIT=0
END
IF @CNY_CODE=2
BEGIN
DELETE FROM #TEMP_BOX WHERE AMO_DEBIT_IQ=0 AND AMO_CREDIT_IQ=0
END

SELECT * FROM #TEMP_BOX ORDER BY T_ID_BOX
DROP TABLE #TEMP_BOX
SET @SUBMIT_FLAG=1

END	--END OF PROGRAM





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_ACCOUNT_WITHOUT_BALANCE_IDD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_ACCOUNT_WITHOUT_BALANCE_IDD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_ACCOUNT_WITHOUT_BALANCE_IDD]

@IDD INT,
@ACCOUNT_CODE INT, 
@D1 DATE,
@D2 DATE,
@CNY_CODE INT,
@SUBMIT_FLAG INT OUTPUT

AS


IF OBJECT_ID(''tempdb..#TEMP_BOX'') IS NOT NULL DROP Table #TEMP_BOX
SELECT ROW_NUMBER() OVER(ORDER BY  BILL_DATE,B_CODE,BILL_NUMBER ASC) AS T_ID_BOX
      ,[BILL_BRANCH]
      ,[BILL_NUMBER]
      ,[BILL_DATE]
      ,[BILL_TIME]
      ,[B_CODE]
      ,[B_NAME]
      ,[MOVE_CODE]
      ,[MOVE_NAME]
      ,[ACCOUNT_CODE]
      ,[ACCOUNT_NAME]
      ,[ACCOUNT_DESCRIPTION]  
      ,[DEBIT] AS AMO_DEBIT
      ,[CREDIT] AS AMO_CREDIT
			, 0 AS BALANCE_USA
      ,[DEBIT_IQ] AS AMO_DEBIT_IQ
      ,[CREDIT_IQ] AS AMO_CREDIT_IQ
       ,     0 AS BALANCE_IQ
      ,[DEBIT_CUR] AS AMO_DEBIT_CUR
      ,[CREDIT_CUR] AS AMO_CREDIT_CUR
       ,	 0 AS BALANCE_CUR
      ,[DESCRIPTION]
      ,[USER_CODE]
      ,[USER_NAME]
      ,[DEAL_CODE]
      ,[DEAL_NAME]
           ,[BRANCH_CODE]
           ,[BRANCH_NAME]
           ,[MANDOOB_NAME] AS MANDOB_NAME
           ,[CLIENT_REGION]
           ,[CLIENT_PHONE_SMS]
           ,[B_COLOR]
      ,[CHECKED]
     ,[T_ID_BOX] AS  ID_BOX
	 INTO #TEMP_BOX FROM V_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX<@IDD order by BILL_DATE,B_CODE,BILL_NUMBER asc




DECLARE

@ID_REPORT numeric(18, 0),
@BALANCEEE_FIRST		float	,
@BALANCEEE_FIRST_IQ		float	,
@BALANCEEE_FIRST_CUR		float	

BEGIN


IF @IDD=0
BEGIN

SELECT @BALANCEEE_FIRST =ISNULL(SUM(DEBIT -CREDIT ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1
SELECT @BALANCEEE_FIRST_IQ =ISNULL(SUM(DEBIT_IQ -CREDIT_IQ ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1
SELECT @BALANCEEE_FIRST_CUR=ISNULL(SUM(DEBIT_CUR -CREDIT_CUR ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND BILL_DATE < @D1 and ACTIVE=1

END
ELSE
BEGIN
SELECT @BALANCEEE_FIRST =ISNULL(SUM(DEBIT -CREDIT ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD  and ACTIVE=1
SELECT @BALANCEEE_FIRST_IQ =ISNULL(SUM(DEBIT_IQ -CREDIT_IQ ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD and ACTIVE=1
SELECT @BALANCEEE_FIRST_CUR=ISNULL(SUM(DEBIT_CUR -CREDIT_CUR ),0) FROM T_BOX WHERE ACCOUNT_CODE=@ACCOUNT_CODE AND T_ID_BOX <= @IDD  and ACTIVE=1
END
SET @ID_REPORT=0


INSERT INTO #TEMP_BOX
           ([T_ID_BOX]
		,[BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[BILL_TIME]
           ,[B_CODE]
           ,[B_NAME]
           ,[MOVE_CODE]
           ,[MOVE_NAME]
           ,[ACCOUNT_CODE]
           ,[ACCOUNT_NAME]
           ,[ACCOUNT_DESCRIPTION]
           ,[AMO_DEBIT]
           ,[AMO_CREDIT]
           ,[BALANCE_USA]
           ,[AMO_DEBIT_IQ]
           ,[AMO_CREDIT_IQ]
           ,[BALANCE_IQ]
           ,[AMO_DEBIT_CUR]
           ,[AMO_CREDIT_CUR]
           ,[BALANCE_CUR]
           ,[DESCRIPTION]
           ,[USER_CODE]
           ,[USER_NAME]
            ,[DEAL_CODE]
           ,[DEAL_NAME]
           ,[BRANCH_CODE]
           ,[BRANCH_NAME]
           ,[MANDOB_NAME]
           ,[CLIENT_REGION]
           ,[CLIENT_PHONE_SMS]
		   ,[B_COLOR]
		  ,[CHECKED]
		   ,[ID_BOX])
          VALUES
           (@ID_REPORT
			,0
           ,0
           ,@D1
           ,N'' ''
           ,0
          ,N''رصيد اولي''
           ,0
           ,N'' ''
           ,@ACCOUNT_CODE
           ,N'' ''
          ,N'' ''
           ,IIF(@BALANCEEE_FIRST>=0,@BALANCEEE_FIRST,0) 
           ,IIF(@BALANCEEE_FIRST<0,@BALANCEEE_FIRST*-1,0) 
           ,0
           ,IIF(@BALANCEEE_FIRST_IQ>=0,@BALANCEEE_FIRST_IQ,0) 
           ,IIF(@BALANCEEE_FIRST_IQ<0,@BALANCEEE_FIRST_IQ*-1,0) 
           ,0
           ,IIF(@BALANCEEE_FIRST_CUR>=0,@BALANCEEE_FIRST_CUR,0) 
           ,IIF(@BALANCEEE_FIRST_CUR<0,@BALANCEEE_FIRST_CUR*-1,0) 
           ,0
           ,N''رصيد سابق ماقبل الفترة''
           ,0
           ,NULL
           ,0
           ,NULL
           ,0
           ,NULL
           ,N'' ''
           ,N'' ''
          ,N'' ''
		   ,N''RED''
		   ,0
		   ,0)

     

IF @CNY_CODE=1
BEGIN
DELETE FROM #TEMP_BOX WHERE AMO_DEBIT=0 AND AMO_CREDIT=0
END
IF @CNY_CODE=2
BEGIN
DELETE FROM #TEMP_BOX WHERE AMO_DEBIT_IQ=0 AND AMO_CREDIT_IQ=0
END

SELECT * FROM #TEMP_BOX
DROP TABLE #TEMP_BOX
SET @SUBMIT_FLAG=1

END	--END OF PROGRAM





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_DAYLY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_DAYLY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_DAYLY]

@D1 DATE,
@SUBMIT_FLAG INT OUTPUT

AS


DECLARE UU_BOX_CURSOR CURSOR FOR SELECT  distinct(ACCOUNT_CODE) FROM T_BOX  WHERE ACTIVE=1and ACCOUNT_CODE BETWEEN 5000 AND 5999 AND  BILL_DATE = @D1  ;

--DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID_BOX FROM T_BOX  WHERE ACTIVE=1and ACCOUNT_CODE=@ACCOUNT_CODE AND  BILL_DATE = @D1  order by BILL_DATE asc;

DECLARE
@USER_BOX_CURCOR INT,
@T_ID_BOX_CURCOR INT,
@ID_REPORT numeric(18, 0),
@BILL_DATE_ID DATE,
@BILL_TIME DATETIME,
@OUT_USA float,
@IN_USA  float,
@OUT_IQ float,
@IN_IQ  float,
@BILL_BRANCH	nvarchar(50)	,
@BILL_NUMBER	INT	,
@BILL_DATE DATE,
@B_CODE	int,
@B_NAME	nvarchar(MAX)	,
@MOVE_CODE	int,
@MOVE_NAME	nvarchar(MAX)	,
@ACCOUNT_CODE int	,
@ACCOUNT_NAME	nvarchar(MAX)	,
@ACC_NAME	nvarchar(MAX)	,
@ACCOUNT_DESCRIPTION	nvarchar(MAX)	,
@DESCRIPTION	nvarchar(MAX)	,
@CURRANCY_CODE	int	,
@CURRANCY_NAME	nvarchar(MAX),
@CURRANCY_EQUAL	float	,
@BALANCE_USA_ID	float	,
@USER_CODE	int	,
@USER_NAME	nvarchar(MAX)	,
@BALANCEEE		float	,
@BALANCEEE_IQ		float	,
@BALANCEEE_FIRST		float	,
@BALANCEEE_FIRST_IQ		float	,
@BALANCEEE_CUR		float	,
@BALANCEEE_FIRST_CUR		float	,
@MANDOB_CODE	int	,
@MANDOB_NAME  nvarchar(max), 
@CLIENT_REGION  nvarchar(max), 
@CLIENT_PHONE_SMS nvarchar(max), 
@DEAL_CODE	int	,
@DEAL_NAME	nvarchar(MAX)	,
@B_COLOR	nvarchar(MAX),
@CHECKED	int	

BEGIN
SET @SUBMIT_FLAG=0
DELETE FROM T_DAYLY_REPORT



     
OPEN UU_BOX_CURSOR

FETCH NEXT FROM UU_BOX_CURSOR INTO @USER_BOX_CURCOR
WHILE @@FETCH_STATUS = 00
BEGIN

SELECT @ACCOUNT_NAME=ACCOUNT_NAME  FROM T_ACCOUNTS WHERE ACCOUNT_CODE=@USER_BOX_CURCOR

SELECT @BALANCEEE_FIRST =ISNULL(SUM(DEBIT -CREDIT ),0) FROM T_BOX WHERE ACCOUNT_CODE=@USER_BOX_CURCOR AND BILL_DATE < @D1 and ACTIVE=1
SELECT @BALANCEEE_FIRST_IQ =ISNULL(SUM(DEBIT_IQ -CREDIT_IQ ),0) FROM T_BOX WHERE ACCOUNT_CODE=@USER_BOX_CURCOR AND BILL_DATE < @D1 and ACTIVE=1

INSERT INTO [dbo].[T_DAYLY_REPORT]
           ([D_DATE]
           ,[BOX_USER]
           ,[BOX_NAME]
           ,[B_CODE]
           ,[B_NAME]
			,[BILL_BRANCH]
		   ,[BILL_NUMBER]
           ,[IN_USA]
           ,[IN_IQ]
           ,[OUT_USA]
           ,[OUT_IQ]
           ,[NOTE]
		   ,[USER_NAME])
     VALUES
              (@D1   --DATEADD(DAY,-1,@D1)
           ,@USER_BOX_CURCOR
           ,@ACCOUNT_NAME
           ,0
           ,N''الرصيد الختامي لليوم السابق''
		   ,0
		   ,0
           ,@BALANCEEE_FIRST
           ,@BALANCEEE_FIRST_IQ
           ,0
           ,0
           ,N''رصيد سابق ماقبل الفترة''
		   ,N'' '')



DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID_BOX FROM T_BOX  WHERE ACTIVE=1and ACCOUNT_CODE=@USER_BOX_CURCOR AND  BILL_DATE = @D1  order by C_DATE asc;



OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR
WHILE @@FETCH_STATUS = 00
BEGIN







SET @BILL_NUMBER=-1
SET @IN_USA=0 
 SET @IN_IQ=0
 SET @OUT_USA=0 
 SET @OUT_IQ=0
 SET @B_CODE=0
 SET @USER_CODE=0
 SET @DESCRIPTION=NULL
SELECT @IN_USA=ISNULL(DEBIT,0),@OUT_USA=ISNULL(CREDIT,0), @IN_IQ=ISNULL(DEBIT_IQ,0),@OUT_IQ=ISNULL(CREDIT_IQ,0), @BILL_BRANCH=BILL_BRANCH, @BILL_NUMBER=BILL_NUMBER
 ,@B_CODE=B_CODE,@USER_CODE=USER_CODE,@DESCRIPTION=[DESCRIPTION],@MOVE_CODE=MOVE_CODE FROM T_BOX WHERE T_ID_BOX=@T_ID_BOX_CURCOR
 
  SELECT @B_NAME=B_NAME  FROM T_BILL_TYPE WHERE B_CODE=@B_CODE
  SELECT @USER_NAME=USER_NAME FROM T_USERS WHERE USER_CODE=@USER_CODE
  IF @B_CODE=5
  BEGIN
  -------------------------------------------------------------------------------
SELECT @ACCOUNT_CODE=FROM_ACCOUNT FROM T_SANAD WHERE BILL_NUMBER=@BILL_NUMBER
IF @ACCOUNT_CODE BETWEEN 5000 AND 5999
BEGIN 
SELECT @ACC_NAME=TO_ACC FROM T_SANAD WHERE BILL_NUMBER=@BILL_NUMBER
END
ELSE

BEGIN
SELECT @ACC_NAME=FROM_ACC FROM T_SANAD WHERE BILL_NUMBER=@BILL_NUMBER
END
  -------------------------------------------------------------------------------
 SELECT @MOVE_NAME=MOVE_NAME FROM T_MOVE WHERE MOVE_CODE=@MOVE_CODE
 SET @B_NAME=@B_NAME+N'' : ''+@MOVE_NAME+iif(@DESCRIPTION <>N'''', N'' ( ''+@DESCRIPTION +N'' ) '',N'''')+ N'' ( ''+@ACC_NAME +N'' ) ''
   END

   ELSE IF @B_CODE=15
  BEGIN
    -------------------------------------------------------------------------------
SELECT @ACCOUNT_CODE=FROM_ACCOUNT FROM T_SANAD_CNY WHERE BILL_NUMBER=@BILL_NUMBER
IF @ACCOUNT_CODE BETWEEN 5000 AND 5999
BEGIN 
SELECT @ACC_NAME=TO_ACC FROM T_SANAD_CNY WHERE BILL_NUMBER=@BILL_NUMBER
END
ELSE

BEGIN
SELECT @ACC_NAME=FROM_ACC FROM T_SANAD_CNY WHERE BILL_NUMBER=@BILL_NUMBER
END
  -------------------------------------------------------------------------------
 SELECT @MOVE_NAME=MOVE_NAME FROM T_MOVE WHERE MOVE_CODE=@MOVE_CODE
 SET @B_NAME=@B_NAME+N'' : ''+@MOVE_NAME+iif(@DESCRIPTION <>N'''', N'' ( ''+@DESCRIPTION +N'' ) '',N'''')+ N'' ( ''+@ACC_NAME +N'' ) ''
   END
 

ELSE IF @B_CODE=2
  BEGIN
 SET @DESCRIPTION=(SELECT CLIENT_NAME FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER)
 DECLARE
 @NET_INFO FLOAT
 SET @NET_INFO=(SELECT NET_SALES FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER)
 IF @NET_INFO<0 SET @B_NAME=(SELECT B_NAME FROM T_BILL_TYPE WHERE B_CODE=1)
 SET @B_NAME=@B_NAME+N'' : ''+@DESCRIPTION
   END
ELSE IF @B_CODE=21
  BEGIN
 SET @DESCRIPTION=(SELECT CLIENT_NAME FROM T_BUY WHERE BILL_NUMBER=@BILL_NUMBER)
 SET @B_NAME=@B_NAME+N'' : ''+@DESCRIPTION
   END
ELSE IF @B_CODE=22
  BEGIN
 SET @DESCRIPTION=(SELECT CLIENT_NAME FROM T_BUY_RETURN WHERE BILL_NUMBER=@BILL_NUMBER)
 SET @B_NAME=@B_NAME+N'' : ''+@DESCRIPTION
   END


-----++++ BEGIN


INSERT INTO [dbo].[T_DAYLY_REPORT]
           ([D_DATE]
           ,[BOX_USER]
           ,[BOX_NAME]
           ,[B_CODE]
           ,[B_NAME]
		   ,[BILL_BRANCH]
		   ,[BILL_NUMBER]
           ,[IN_USA]
           ,[IN_IQ]
           ,[OUT_USA]
           ,[OUT_IQ]
           ,[NOTE]
		   ,[USER_NAME])
     VALUES
           ( @D1
           ,@USER_BOX_CURCOR
           ,@ACCOUNT_NAME
           ,@B_CODE
           ,@B_NAME
		   ,@BILL_BRANCH
		   ,@BILL_NUMBER
           ,@IN_USA
           ,@IN_IQ
           ,@OUT_USA
           ,@OUT_IQ
           ,@DESCRIPTION
		   ,@USER_NAME)


FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR







FETCH NEXT FROM UU_BOX_CURSOR INTO @USER_BOX_CURCOR

END

CLOSE UU_BOX_CURSOR
DEALLOCATE UU_BOX_CURSOR






SET @SUBMIT_FLAG=1

END	--END OF PROGRAM





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_FILL_REPORT_DAYLY_USER]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_FILL_REPORT_DAYLY_USER]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'












CREATE PROCEDURE [dbo].[P_GET_FILL_REPORT_DAYLY_USER]

@D1 DATE,
@ACCOUNT_CODE INT ,
@SUBMIT_FLAG INT OUTPUT

AS


DECLARE UU_BOX_CURSOR CURSOR FOR SELECT  distinct(ACCOUNT_CODE) FROM T_BOX  WHERE ACTIVE=1 and ACCOUNT_CODE =@ACCOUNT_CODE AND  BILL_DATE = @D1  ;

--DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID_BOX FROM T_BOX  WHERE ACTIVE=1and ACCOUNT_CODE=@ACCOUNT_CODE AND  BILL_DATE = @D1  order by BILL_DATE asc;

DECLARE
@USER_BOX_CURCOR INT,
@T_ID_BOX_CURCOR INT,
@ID_REPORT numeric(18, 0),
@BILL_DATE_ID DATE,
@BILL_TIME DATETIME,
@OUT_USA float,
@IN_USA  float,
@OUT_IQ float,
@IN_IQ  float,
@BILL_BRANCH	nvarchar(50)	,
@BILL_NUMBER	INT	,
@BILL_DATE DATE,
@B_CODE	int,
@B_NAME	nvarchar(MAX)	,
@MOVE_CODE	int,
@MOVE_NAME	nvarchar(MAX)	,
@ACCOUNT_NAME	nvarchar(MAX)	,
@ACCOUNT_DESCRIPTION	nvarchar(MAX)	,
@DESCRIPTION	nvarchar(MAX)	,
@CURRANCY_CODE	int	,
@CURRANCY_NAME	nvarchar(MAX),
@CURRANCY_EQUAL	float	,
@BALANCE_USA_ID	float	,
@USER_CODE	int	,
@USER_NAME	nvarchar(MAX)	,
@BALANCEEE		float	,
@BALANCEEE_IQ		float	,
@BALANCEEE_FIRST		float	,
@BALANCEEE_FIRST_IQ		float	,
@BALANCEEE_CUR		float	,
@BALANCEEE_FIRST_CUR		float	,
@MANDOB_CODE	int	,
@MANDOB_NAME  nvarchar(max), 
@CLIENT_REGION  nvarchar(max), 
@CLIENT_PHONE_SMS nvarchar(max), 
@DEAL_CODE	int	,
@DEAL_NAME	nvarchar(MAX)	,
@B_COLOR	nvarchar(MAX),
@CHECKED	int	

BEGIN
SET @SUBMIT_FLAG=0
DELETE FROM T_DAYLY_REPORT



     
OPEN UU_BOX_CURSOR

FETCH NEXT FROM UU_BOX_CURSOR INTO @USER_BOX_CURCOR
WHILE @@FETCH_STATUS = 00
BEGIN

SELECT @ACCOUNT_NAME=ACCOUNT_NAME  FROM T_ACCOUNTS WHERE ACCOUNT_CODE=@USER_BOX_CURCOR

SELECT @BALANCEEE_FIRST =ISNULL(SUM(DEBIT -CREDIT ),0) FROM T_BOX WHERE ACCOUNT_CODE=@USER_BOX_CURCOR AND BILL_DATE < @D1 and ACTIVE=1
SELECT @BALANCEEE_FIRST_IQ =ISNULL(SUM(DEBIT_IQ -CREDIT_IQ ),0) FROM T_BOX WHERE ACCOUNT_CODE=@USER_BOX_CURCOR AND BILL_DATE < @D1 and ACTIVE=1

INSERT INTO [dbo].[T_DAYLY_REPORT]
           ([D_DATE]
           ,[BOX_USER]
           ,[BOX_NAME]
           ,[B_CODE]
           ,[B_NAME]
			,[BILL_BRANCH]
		   ,[BILL_NUMBER]
           ,[IN_USA]
           ,[IN_IQ]
           ,[OUT_USA]
           ,[OUT_IQ]
           ,[NOTE]
		   ,[USER_NAME])
     VALUES
           (@D1   --DATEADD(DAY,-1,@D1)
           ,@USER_BOX_CURCOR
           ,@ACCOUNT_NAME
           ,0
           ,N''الرصيد الختامي لليوم السابق''
		   ,0
		   ,0
           ,@BALANCEEE_FIRST
           ,@BALANCEEE_FIRST_IQ
           ,0
           ,0
           ,N''رصيد سابق ماقبل الفترة''
		   ,N'' '')


DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID_BOX FROM T_BOX  WHERE ACTIVE=1and ACCOUNT_CODE=@USER_BOX_CURCOR AND  BILL_DATE = @D1  order by C_DATE asc;



OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR
WHILE @@FETCH_STATUS = 00
BEGIN







SET @BILL_NUMBER=-1
SET @IN_USA=0 
 SET @IN_IQ=0
 SET @OUT_USA=0 
 SET @OUT_IQ=0
 SET @B_CODE=0
 SET @USER_CODE=0
 SET @DESCRIPTION=NULL
SELECT @IN_USA=ISNULL(DEBIT,0),@OUT_USA=ISNULL(CREDIT,0), @IN_IQ=ISNULL(DEBIT_IQ,0),@OUT_IQ=ISNULL(CREDIT_IQ,0), @BILL_BRANCH=BILL_BRANCH, @BILL_NUMBER=BILL_NUMBER
 ,@B_CODE=B_CODE,@USER_CODE=USER_CODE,@DESCRIPTION=[DESCRIPTION],@MOVE_CODE=MOVE_CODE FROM T_BOX WHERE T_ID_BOX=@T_ID_BOX_CURCOR
 
  SELECT @B_NAME=B_NAME  FROM T_BILL_TYPE WHERE B_CODE=@B_CODE
  SELECT @USER_NAME=USER_NAME FROM T_USERS WHERE USER_CODE=@USER_CODE
  IF @B_CODE=5
  BEGIN
 SELECT @MOVE_NAME=MOVE_NAME FROM T_MOVE WHERE MOVE_CODE=@MOVE_CODE
 SET @B_NAME=@B_NAME+N'' : ''+@MOVE_NAME+iif(@DESCRIPTION <>N'''', N'' ( ''+@DESCRIPTION +N'' ) '',N'''')
   END
 --  ELSE IF @B_CODE=1
 -- BEGIN
 --SET @DESCRIPTION=(SELECT CLIENT_NAME FROM T_SALES_RETURN WHERE BILL_NUMBER=@BILL_NUMBER)
 --SET @B_NAME=@B_NAME+N'' : ''+@DESCRIPTION
 --  END
ELSE IF @B_CODE=2
  BEGIN
 SET @DESCRIPTION=(SELECT CLIENT_NAME FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER)
 DECLARE
 @NET_INFO FLOAT
 SET @NET_INFO=(SELECT NET_SALES FROM T_SALES WHERE BILL_NUMBER=@BILL_NUMBER)
 IF @NET_INFO<0 SET @B_NAME=(SELECT B_NAME FROM T_BILL_TYPE WHERE B_CODE=1)
 SET @B_NAME=@B_NAME+N'' : ''+@DESCRIPTION
   END
ELSE IF @B_CODE=21
  BEGIN
 SET @DESCRIPTION=(SELECT CLIENT_NAME FROM T_BUY WHERE BILL_NUMBER=@BILL_NUMBER)
 SET @B_NAME=@B_NAME+N'' : ''+@DESCRIPTION
   END
ELSE IF @B_CODE=22
  BEGIN
 SET @DESCRIPTION=(SELECT CLIENT_NAME FROM T_BUY_RETURN WHERE BILL_NUMBER=@BILL_NUMBER)
 SET @B_NAME=@B_NAME+N'' : ''+@DESCRIPTION
   END


-----++++ BEGIN


INSERT INTO [dbo].[T_DAYLY_REPORT]
           ([D_DATE]
           ,[BOX_USER]
           ,[BOX_NAME]
           ,[B_CODE]
           ,[B_NAME]
			,[BILL_BRANCH]
		   ,[BILL_NUMBER]
           ,[IN_USA]
           ,[IN_IQ]
           ,[OUT_USA]
           ,[OUT_IQ]
           ,[NOTE]
		   ,[USER_NAME])
     VALUES
           ( @D1
           ,@USER_BOX_CURCOR
           ,@ACCOUNT_NAME
           ,@B_CODE
           ,@B_NAME
		   ,@BILL_BRANCH
		   ,@BILL_NUMBER
           ,@IN_USA
           ,@IN_IQ
           ,@OUT_USA
           ,@OUT_IQ
           ,@DESCRIPTION
		   ,@USER_NAME)


FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR







FETCH NEXT FROM UU_BOX_CURSOR INTO @USER_BOX_CURCOR

END

CLOSE UU_BOX_CURSOR
DEALLOCATE UU_BOX_CURSOR






SET @SUBMIT_FLAG=1

END	--END OF PROGRAM






























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_ITEM_UNIT_INFO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_ITEM_UNIT_INFO]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_GET_ITEM_UNIT_INFO]
    @ITEM_CODE INT,
    @ITEM_NAME NVARCHAR(MAX) OUTPUT,
    @UNIT_CODE_DF INT OUTPUT,
    @UNIT_NAME1 NVARCHAR(MAX) OUTPUT,
    @UNIT_NAME2 NVARCHAR(MAX) OUTPUT,
    @SELL1 FLOAT OUTPUT,
    @SELL2 FLOAT OUTPUT,
    @UNIT_2_QTY FLOAT OUTPUT,
    @IMG_PATH NVARCHAR(MAX) OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    
    BEGIN TRY
        -- تهيئة المتغيرات الافتراضية
        SET @SELL2 = 0;
        SET @SELL1 = 0;
        SET @UNIT_2_QTY = 0;
        SET @UNIT_NAME1 = N'''';
        SET @UNIT_NAME2 = N'''';
        SET @ITEM_NAME = N'''';
        SET @IMG_PATH = N'''';

        -- الحصول على اسم الصنف ومسار الصورة
        SELECT TOP(1)
            @ITEM_NAME = ITEM_NAME,
            @IMG_PATH = IMG_URL
        FROM T_ITEMS WITH (NOLOCK)
        WHERE ITEM_CODE = @ITEM_CODE;

        -- الحصول على الوحدة الافتراضية للبيع
        SELECT TOP(1)
            @UNIT_CODE_DF = UNIT_CODE  
        FROM T_ITEM_UNIT WITH (NOLOCK)
        WHERE ITEM_CODE = @ITEM_CODE AND DF_SALE = 1;

        -- الحصول على بيانات الوحدة رقم 1
        SELECT TOP(1)
            @UNIT_NAME1 = ISNULL(UNIT_NAME, N''''),
            @SELL1 = CONVERT(FLOAT, ISNULL(PRICE_SALE_1, 0))
        FROM T_ITEM_UNIT WITH (NOLOCK)
        WHERE ITEM_CODE = @ITEM_CODE AND UNIT_CODE = 1;

        -- الحصول على بيانات الوحدة رقم 2
        SELECT TOP(1)
            @UNIT_NAME2 = ISNULL(UNIT_NAME, N''''),
            @SELL2 = ISNULL(CONVERT(FLOAT, PRICE_SALE_1), 0),
            @UNIT_2_QTY = ISNULL(UNIT_QTY, 0)
        FROM T_ITEM_UNIT WITH (NOLOCK)
        WHERE ITEM_CODE = @ITEM_CODE AND UNIT_CODE = 2;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_GET_RULES_KIND_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_GET_RULES_KIND_CLIENT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N' 




CREATE PROCEDURE [dbo].[P_GET_RULES_KIND_CLIENT]

AS
 
BEGIN
 	
;WITH Splitted AS
(
    -- تفكيك المواد في حقل KIND_NAME_SELECT
    SELECT
        r.RULES_KIND_CODE,
        r.RULES_KIND_NAME,
        r.TARGET_AMOUNT,
        LTRIM(RTRIM(value)) AS KIND_NAME_ITEM, 
        r.GIFT_NAME,
        r.FROM_DATE,
        r.TO_DATE,
        r.ACTIVE
    FROM T_RULES_KIND AS r
    CROSS APPLY STRING_SPLIT(r.KIND_NAME_SELECT, '','')
    WHERE r.ACTIVE = 1
),
LastPayDate AS
(
    -- الحصول على آخر تاريخ سداد لكل عميل ولكل قاعدة
    SELECT 
        CLIENT_CODE,
        RULES_KIND_CODE,
        MAX(LAST_BILL_DATE) AS LAST_PAY_DATE
    FROM T_RULES_KIND_PAY
    GROUP BY CLIENT_CODE, RULES_KIND_CODE
),
SalesData AS
(
    SELECT
        s.CLIENT_CODE,
        s.CLIENT_NAME,
        sp.RULES_KIND_CODE,
        sp.RULES_KIND_NAME,
        sp.TARGET_AMOUNT,
        sp.GIFT_NAME,
        lp.LAST_PAY_DATE,               -- آخر تاريخ سداد لهذه القاعدة
        SUM(s.NET_TOTAL) AS TOTAL_SALES
    FROM V_SALES_DETAILS AS s
    JOIN Splitted AS sp
        ON s.KIND_NAME = sp.KIND_NAME_ITEM
    LEFT JOIN LastPayDate AS lp
        ON s.CLIENT_CODE      = lp.CLIENT_CODE
       AND sp.RULES_KIND_CODE = lp.RULES_KIND_CODE
    WHERE
        s.BILL_DATE >= CASE
                         WHEN lp.LAST_PAY_DATE IS NOT NULL 
                              AND lp.LAST_PAY_DATE > sp.FROM_DATE
                           THEN lp.LAST_PAY_DATE
                           ELSE sp.FROM_DATE
                       END
      AND (sp.TO_DATE IS NULL OR s.BILL_DATE <= sp.TO_DATE)
    GROUP BY
        s.CLIENT_CODE,
        s.CLIENT_NAME,
        sp.RULES_KIND_CODE,
        sp.RULES_KIND_NAME,
        sp.TARGET_AMOUNT,
        sp.GIFT_NAME,
        lp.LAST_PAY_DATE
)
SELECT
    CLIENT_CODE,
    CLIENT_NAME,
    RULES_KIND_CODE,
    RULES_KIND_NAME,
    LAST_PAY_DATE,
    TOTAL_SALES,
    TARGET_AMOUNT,
    GIFT_NAME,
    CASE 
        WHEN TOTAL_SALES >= TARGET_AMOUNT THEN N''حقق الشرط''
        ELSE N''لم يحقق الشرط''
    END AS CONDITION_RESULT,
    -- حقل محسوب للنسبة المئوية من الهدف
    CASE
        WHEN TARGET_AMOUNT = 0 THEN ''0 %''
        ELSE CONCAT( 
               CAST(ROUND((TOTAL_SALES * 100.0 / TARGET_AMOUNT), 0) AS INT), 
               '' %''
             )
    END AS PERCENT_ACHIEVED
FROM SalesData
WHERE CLIENT_CODE > 2100000
ORDER BY CLIENT_CODE, RULES_KIND_CODE;


END	--END OF PROGRAM

 
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_IMPORT_ACCOUNTS_CLIENTS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_IMPORT_ACCOUNTS_CLIENTS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_IMPORT_ACCOUNTS_CLIENTS]

@SUBMIT_FLAG INT OUTPUT

AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  ACCOUNT_CODE FROM T_AA_ACCOUNT_NEW_YEAR   ;

DECLARE
@CLIENT_CODE_CR INT,
@CLIENT_CODE INT,
@CLIENT_NAME	nvarchar(4000)
--@CLIENT_PHONE	nvarchar(4000)	,
--@CLIENT_ADDRESS	nvarchar(4000)	
BEGIN

OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @CLIENT_CODE_CR
WHILE @@FETCH_STATUS = 0
BEGIN
SELECT @CLIENT_NAME=ACCOUNT_NAME FROM T_AA_ACCOUNT_NEW_YEAR WHERE ACCOUNT_CODE=@CLIENT_CODE_CR

SELECT @CLIENT_CODE= ISNULL(MAX(CLIENT_CODE),2100000) + 1 FROM T_CLIENT
if not exists (select * from T_ACCOUNTS where ACCOUNT_NAME LIKE @CLIENT_NAME )  INSERT INTO [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [C_DATE], [ACCOUNT_ACTIVE]) 
VALUES (@CLIENT_CODE, @CLIENT_NAME, 21, 1, 1, 2, 2, 3, N'''', 1, 1, GETDATE(), 1)  
if not exists (select * from T_CLIENT where CLIENT_NAME LIKE @CLIENT_NAME)  INSERT INTO [dbo].[T_CLIENT] ([CLIENT_CODE], [CLIENT_NAME], [CLIENT_TYPE], [ACCOUNT_CODE], [CURRANCY_CODE], [MANDOOB_CODE], [CLIENT_PHONE], [CLIENT_PHONE_SMS], [CLIENT_EMAILE], [CLIENT_REGION], [CLIENT_ADDRESS], [CLIENT_BARCODE], [CLIENT_CARD], [CLIENT_NOTE], [CLIENT_PIN_CODE], [DISCOUNT_PERCENT], [SECURETY_CODE], [MAX_DEBIT],  [CLIENT_BUSINESS],[CLIENT_ACTIVE], [C_DATE], [C_USER])
 VALUES (@CLIENT_CODE, @CLIENT_NAME, 1, @CLIENT_CODE, 2, 1, N'''', N'''', N'''', N'''', N'''', N'''', N'''', N'''', N'''', 0, 1, 0, N'''', 1, GETDATE(), N''ADMIN'')  


FETCH NEXT FROM BOX_CURSOR INTO @CLIENT_CODE_CR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_IMPORT_BARCODE_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_IMPORT_BARCODE_ITEMS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE PROCEDURE [dbo].[P_IMPORT_BARCODE_ITEMS]

@SUBMIT_FLAG INT OUTPUT

AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  ITEM_CODE FROM T_ITEMS   ;

DECLARE
@ITEM_CODE_CR INT,
@ITEM_NAME	nvarchar(4000),
@CODE_POINT INT,
@ITEM_NAME_POINT	nvarchar(4000)

BEGIN

OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @ITEM_CODE_CR
WHILE @@FETCH_STATUS = 0
BEGIN
SELECT @ITEM_NAME=ITEM_NAME FROM T_ITEMS WHERE ITEM_CODE=@ITEM_CODE_CR

SELECT TOP(1) @CODE_POINT=ITEM_CODE FROM POS_DB1.dbo.T_ITEMS  WHERE ITEM_NAME LIKE @ITEM_NAME ;
INSERT INTO [dbo].[T_ITEM_BARCODE]
           ([ITEM_CODE]
           ,[TYPE_VAL]
           ,[ITEM_BARCODE]
           ,[UNIT_CODE]
           ,[UNIT_NAME]
           ,[C_DATE])
     SELECT 
	 @ITEM_CODE_CR
	 ,1
      ,[PART_BARCODE]
      ,1
      ,N''قطعة''
      ,GETDATE()
      
  FROM POS_DB1.[dbo].[T_ITEM_PART] WHERE ITEM_CODE=@CODE_POINT AND PART_CODE=1

FETCH NEXT FROM BOX_CURSOR INTO @ITEM_CODE_CR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM



































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_IMPORT_CLIENT_PHONE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_IMPORT_CLIENT_PHONE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[P_IMPORT_CLIENT_PHONE]

@SUBMIT_FLAG INT OUTPUT

AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  CLIENT_CODE FROM T_CLIENT   ;

DECLARE
@CLIENT_CODE_CR INT,
@CLIENT_NAME	nvarchar(4000),
@CLIENT_PHONE	nvarchar(4000)	,
@CLIENT_ADDRESS	nvarchar(4000)	
BEGIN

OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @CLIENT_CODE_CR
WHILE @@FETCH_STATUS = 0
BEGIN
SELECT @CLIENT_NAME=CLIENT_NAME FROM T_CLIENT WHERE CLIENT_CODE=@CLIENT_CODE_CR

SELECT @CLIENT_PHONE= CLIENT_PHONE1,@CLIENT_ADDRESS=CLIENT_EMAILE FROM RACK_SALES_DB.dbo.T_CLIENT  WHERE CLIENT_NAME_AR LIKE @CLIENT_NAME ;

UPDATE  T_CLIENT SET CLIENT_PHONE=@CLIENT_PHONE,CLIENT_ADDRESS=@CLIENT_ADDRESS WHERE CLIENT_CODE=@CLIENT_CODE_CR

FETCH NEXT FROM BOX_CURSOR INTO @CLIENT_CODE_CR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_IMPORT_ITEM_FROM_PHARMA_DB]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_IMPORT_ITEM_FROM_PHARMA_DB]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N' 



CREATE PROCEDURE  [dbo].[P_IMPORT_ITEM_FROM_PHARMA_DB]

@SUBMIT_FLAG INT OUTPUT

AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  ITEM_CODE FROM T_EXCEL_ITEM_PHARMA   ;

DECLARE
@ITEM_CODE_CR INT,
@COUNT_CAT INT,
  	@ITEM_NAME   nvarchar (max)  ,
	 @CATEGORY_NAME   nvarchar (max)  ,
	 @ITEM_BARCODE_1   nvarchar (max)  ,
	 @UNIT_NAME_1   nvarchar (max)  ,
	 @COST_1   decimal (18, 2)    ,
	 @SELL_1   decimal (18, 2)    ,
	 @ST_BALANCE_1   decimal (18, 2)    ,
	 @ON_OFF_UNIT_2   int     ,
	 @UNIT_NAME_2   nvarchar (max)    ,
	 @UNIT_QTY_2   decimal (18, 2)    ,
	 @SELL_2   decimal (18, 2)    ,
	 @ITEM_BARCODE_2   nvarchar (max) ,   
	 @ITEM_NOTE nvarchar (max),
	@EXP_DATE DATE,
	 @COMPANY_TITAL nvarchar (100)

BEGIN
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @ITEM_CODE_CR
WHILE @@FETCH_STATUS = 0
BEGIN
SELECT @ITEM_NAME=ITEM_NAME,@CATEGORY_NAME=CATEGORY_NAME,@ITEM_BARCODE_1=ITEM_BARCODE_1,@UNIT_NAME_1=UNIT_NAME_1,@COST_1=COST_1,@SELL_1=SELL_1 ,@ST_BALANCE_1=ST_BALANCE_1,@ON_OFF_UNIT_2=ON_OFF_UNIT_2,@UNIT_NAME_2=UNIT_NAME_2,@UNIT_QTY_2=UNIT_QTY_2,@SELL_2=SELL_2,@ITEM_BARCODE_2=ITEM_BARCODE_2,@ITEM_NOTE=ITEM_NOTE,@EXP_DATE=EXP_DATE FROM T_EXCEL_ITEM_PHARMA WHERE ITEM_CODE=@ITEM_CODE_CR
IF LEN(@UNIT_NAME_2)<2 SET @UNIT_NAME_2=N''PKT''
SELECT @COUNT_CAT=COUNT(CATEGORY_CODE)   FROM T_ITEM_CATEGORY WHERE CATEGORY_NAME LIKE @CATEGORY_NAME
IF @COUNT_CAT=0
BEGIN
DECLARE
@MAX_CAT INT
SELECT @MAX_CAT=ISNULL(MAX(CATEGORY_CODE),0)+1  FROM T_ITEM_CATEGORY
INSERT INTO [dbo].[T_ITEM_CATEGORY]
           ([CATEGORY_CODE]
           ,[CATEGORY_NAME]
           ,[CATEGORY_NAME_EN]
           ,[ACTIVE]
           ,[SHOW_MENU]
           ,[CATEGORY_IMAGE_PATH]
           ,[PRINTER_ID])
     VALUES
           (@MAX_CAT
           ,@CATEGORY_NAME
           ,@CATEGORY_NAME
           ,1
           ,1
           ,N''''
           ,0)
END

IF @ON_OFF_UNIT_2=0
BEGIN
SET @UNIT_NAME_2=N''''
SET @UNIT_QTY_2=1
SET @SELL_2=@SELL_1
SET @ITEM_BARCODE_2=@ITEM_BARCODE_1
END
DECLARE
@MAX_ITM INT,
@MAX_UNIT INT,
@CAT_CODE INT,
@DF_SALE INT

SELECT TOP(1) @CAT_CODE=CATEGORY_CODE  FROM T_ITEM_CATEGORY WHERE CATEGORY_NAME LIKE @CATEGORY_NAME AND ACTIVE=1

SELECT @MAX_ITM=ISNULL(MAX(ITEM_CODE),0) + 1 FROM T_ITEMS

INSERT INTO [dbo].[T_ITEMS] ([ITEM_CODE],[ITEM_NAME], [CATEGORY_CODE], [TYPE_CODE], [COST], [SELL], [SORT], [ACTIVE], [PRINTER_ID], [ITEM_BARCODE] ,[QTY_MIN],[ON2_OFF2],[UNIT2_NAME],[UNIT2_QTY],[DF_SALE],[SELL2],[SELL_CNY],[SELL2_CNY],[SHOW_MENU],[SELL_G],[SELL_W],[SELL2_G],[SELL2_W],[ITEM_NOTE],[IS_TRANS],[IS_DISCOUNT],[RAF_NAME],[ITEM_PARENT]   ,[ITEM_SUB_PARENT]  ,[LEVEL_SUB] ,[AREA_M2]  ,[WIDTH_CM] ,[LENGTH_CM] ,[COMPANY_CREATE],[EFFECTIVE_MATERIAL],[IS_HIDE],[IS_SERIAL],[UNIT_NAME],[QTY_AKSAT],[IS_TAX],[TAX_PERCENT],[TAX_AMO],[IS_MANDOOB],[MANDOOB_PERCENT],[MANDOOB_AMO],[IS_MANDOOB_SELECTION],[IS_ITEM_AREA],[UNIT_QTY_X1],[UNIT_QTY_XY],[UNIT_QTY_XZ])
                    VALUES (@MAX_ITM,@ITEM_NAME, @CAT_CODE, 2, @COST_1, @SELL_1, @MAX_ITM, 1,0,@ITEM_BARCODE_1,0,@ON_OFF_UNIT_2,@UNIT_NAME_2,@UNIT_QTY_2,1,@SELL_2,0,0,1,@SELL_1,@SELL_1,@SELL_2,@SELL_2,@ITEM_NOTE,0,0,N'''',@MAX_ITM   ,@MAX_ITM  ,0 ,0  ,0,0 ,N'''',N'''',0,0,@UNIT_NAME_1,0,0,0,0,0,0,0,0,0,1,1,1) 
 IF @ON_OFF_UNIT_2=1 SET @DF_SALE=0 ELSE SET @DF_SALE=1
 

 if not exists (select * from T_ITEM_UNIT where ITEM_CODE = @MAX_ITM AND UNIT_CODE=1 ) 
 BEGIN
Select @MAX_UNIT=ISNULL(MAX(UNIT_GUID),0) + 1 FROM T_ITEM_UNIT
INSERT INTO [dbo].[T_ITEM_UNIT] ([UNIT_GUID], [ITEM_CODE], [UNIT_CODE], [UNIT_NAME],[UNIT_QTY], [ON_OFF], [DF_SALE], [DF_BUY], [DF_STORE], [PRICE_BUY], [PRICE_COST], [PRICE_SALE_1], [PRICE_SALE_2], [PRICE_SALE_3], [PRICE_AVG_COST], [PRICE_SALE_CUR], [C_DATE]) 
						VALUES (@MAX_UNIT, @MAX_ITM, 1, @UNIT_NAME_1,1, 1, @DF_SALE, @DF_SALE, @DF_SALE, @COST_1, @COST_1, @SELL_1, @SELL_1, @SELL_1, @COST_1, 0, GETDATE())
END


 if not exists (select * from T_STORE_BOX where ITEM_CODE = @MAX_ITM and BILL_NUMBER=0 )
BEGIN
INSERT INTO [dbo].[T_STORE_BOX] ([BILL_BRANCH], [BILL_NUMBER],[B_CODE], [WAJBA_CODE], [STORE_CODE],  [ITEM_CODE], [UNIT_CODE], [ST_IN], [ST_OUT], [QTY_UNIT], [ACTIVE],[IS_AVG_COST],[AVG_COST]) 
						VALUES (@COMPANY_TITAL+N''0'',0, 0, 2, 0, @MAX_ITM, 1, @ST_BALANCE_1, 0, 1,1,1,@COST_1)

END


 If Not exists (Select * from T_BUY_DETAILS where ITEM_CODE = @MAX_ITM and BILL_NUMBER=0  )
BEGIN
INSERT INTO [dbo].[T_BUY_DETAILS] ([BILL_BRANCH],[BILL_NUMBER], [ITEM_CODE], [QTY], [UNIT_NAME], [UNIT_QTY], [STORE_CODE], [EXP_DATE], [PRICE_BUY], [CURRANCY_EQUAL], [PRICE], [TOTAL], [EXPENSES], [TOTAL_EXPENSES], [COST], [TOTAL_COST], [SELL1], [SELL2], [C_DATE], [ACTIVE]) 
							VALUES (@COMPANY_TITAL+N''0'', 0,@MAX_ITM, @ST_BALANCE_1, @UNIT_NAME_1, 1, 0, @EXP_DATE, @COST_1, 1, @COST_1, @COST_1*@ST_BALANCE_1, 0, 0, @COST_1,@COST_1*@ST_BALANCE_1  , @SELL_1, @SELL_2, GETDATE(), 1)
END

IF @ON_OFF_UNIT_2=1
BEGIN
SET @DF_SALE=1
Select @MAX_UNIT=ISNULL(MAX(UNIT_GUID),0) + 1 FROM T_ITEM_UNIT
INSERT INTO [dbo].[T_ITEM_UNIT] ([UNIT_GUID], [ITEM_CODE], [UNIT_CODE], [UNIT_NAME],[UNIT_QTY], [ON_OFF], [DF_SALE], [DF_BUY], [DF_STORE], [PRICE_BUY], [PRICE_COST], [PRICE_SALE_1], [PRICE_SALE_2], [PRICE_SALE_3], [PRICE_AVG_COST], [PRICE_SALE_CUR], [C_DATE]) 
						VALUES (@MAX_UNIT, @MAX_ITM, 2, @UNIT_NAME_2,@UNIT_QTY_2, 1, @DF_SALE, @DF_SALE, @DF_SALE, @COST_1*@UNIT_QTY_2, @COST_1*@UNIT_QTY_2, @SELL_2, @SELL_2, @SELL_2, @COST_1*@UNIT_QTY_2, 0, GETDATE())

END

IF LEN(@ITEM_BARCODE_1)>2
BEGIN
if not exists (select * from T_ITEM_BARCODE where ITEM_CODE = @MAX_ITM AND TYPE_VAL=0 ) 
BEGIN
INSERT INTO [dbo].[T_ITEM_BARCODE] ([ITEM_CODE], [TYPE_VAL], [ITEM_BARCODE], [UNIT_CODE], [UNIT_NAME])
 VALUES (@MAX_ITM, 0, @ITEM_BARCODE_1, 1, @UNIT_NAME_1)
END
END




IF @ON_OFF_UNIT_2=1
BEGIN
IF LEN(@ITEM_BARCODE_2)>2
BEGIN
if not exists (select * from T_ITEM_BARCODE where ITEM_CODE = @MAX_ITM AND TYPE_VAL=1 ) 
BEGIN
INSERT INTO [dbo].[T_ITEM_BARCODE] ([ITEM_CODE], [TYPE_VAL], [ITEM_BARCODE], [UNIT_CODE], [UNIT_NAME])
 VALUES (@MAX_ITM, 1, @ITEM_BARCODE_2, 2, @UNIT_NAME_2)
END
END
END




FETCH NEXT FROM BOX_CURSOR INTO @ITEM_CODE_CR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_IMPORT_ITEM_FROM_RESTAURANT_DB]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_IMPORT_ITEM_FROM_RESTAURANT_DB]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
 



CREATE PROCEDURE  [dbo].[P_IMPORT_ITEM_FROM_RESTAURANT_DB]

@SUBMIT_FLAG INT OUTPUT

AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  ITEM_CODE FROM [RESTAURANT_DB].dbo.V_ITEMS_ON   ;

DECLARE
@ITEM_CODE_CR INT,
@COUNT_CAT INT,
  	@ITEM_NAME   nvarchar (max)  ,
	 @CATEGORY_NAME   nvarchar (max)  ,
	 @ITEM_BARCODE_1   nvarchar (max)  ,
	 @UNIT_NAME_1   nvarchar (max)  ,
	 @COST_1   decimal (18, 2)    ,
	 @SELL_1   decimal (18, 2)    ,
	 @ST_BALANCE_1   decimal (18, 2)    ,
	 @ON_OFF_UNIT_2   int     ,
	 @UNIT_NAME_2   nvarchar (max)    ,
	 @UNIT_QTY_2   decimal (18, 2)    ,
	 @SELL_2   decimal (18, 2)    ,
	 @ITEM_BARCODE_2   nvarchar (max) ,   
	 @ITEM_NOTE nvarchar (max),
	@EXP_DATE DATE,
	 @COMPANY_TITAL nvarchar (100)

BEGIN
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @ITEM_CODE_CR
WHILE @@FETCH_STATUS = 0
BEGIN
SELECT @ITEM_NAME=ITEM_NAME,@CATEGORY_NAME=CATEGORY_NAME,@ITEM_BARCODE_1=ITEM_BARCODE,@UNIT_NAME_1=N''قطعة'',@COST_1=COST,@SELL_1=SELL ,@ST_BALANCE_1=0,@ON_OFF_UNIT_2=0,@UNIT_NAME_2=N''كارتون'',@UNIT_QTY_2=1,@SELL_2=SELL,@ITEM_BARCODE_2=ITEM_BARCODE,@ITEM_NOTE=ITEM_NOTE,@EXP_DATE=GETDATE() FROM [RESTAURANT_DB].dbo.V_ITEMS_ON WHERE ITEM_CODE=@ITEM_CODE_CR
IF LEN(@UNIT_NAME_2)<2 SET @UNIT_NAME_2=N''PKT''
SELECT @COUNT_CAT=COUNT(CATEGORY_CODE)   FROM T_ITEM_CATEGORY WHERE CATEGORY_NAME LIKE @CATEGORY_NAME
IF @COUNT_CAT=0
BEGIN
DECLARE
@MAX_CAT INT
SELECT @MAX_CAT=ISNULL(MAX(CATEGORY_CODE),0)+1  FROM T_ITEM_CATEGORY
INSERT INTO [dbo].[T_ITEM_CATEGORY]
           ([CATEGORY_CODE]
           ,[CATEGORY_NAME]
           ,[CATEGORY_NAME_EN]
           ,[ACTIVE]
           ,[SHOW_MENU]
           ,[CATEGORY_IMAGE_PATH]
           ,[PRINTER_ID])
     VALUES
           (@MAX_CAT
           ,@CATEGORY_NAME
           ,@CATEGORY_NAME
           ,1
           ,1
           ,N''''
           ,0)
END

IF @ON_OFF_UNIT_2=0
BEGIN
SET @UNIT_NAME_2=N''''
SET @UNIT_QTY_2=1
SET @SELL_2=@SELL_1
SET @ITEM_BARCODE_2=@ITEM_BARCODE_1
END
DECLARE
@MAX_ITM INT,
@MAX_UNIT INT,
@CAT_CODE INT,
@DF_SALE INT

SELECT TOP(1) @CAT_CODE=CATEGORY_CODE  FROM T_ITEM_CATEGORY WHERE CATEGORY_NAME LIKE @CATEGORY_NAME AND ACTIVE=1

SELECT @MAX_ITM=ISNULL(MAX(ITEM_CODE),0) + 1 FROM T_ITEMS

INSERT INTO [dbo].[T_ITEMS] ([ITEM_CODE],[ITEM_NAME], [CATEGORY_CODE], [TYPE_CODE], [COST], [SELL], [SORT], [ACTIVE], [PRINTER_ID], [ITEM_BARCODE] ,[QTY_MIN],[ON2_OFF2],[UNIT2_NAME],[UNIT2_QTY],[DF_SALE],[SELL2],[SELL_CNY],[SELL2_CNY],[SHOW_MENU],[SELL_G],[SELL_W],[SELL2_G],[SELL2_W],[ITEM_NOTE],[IS_TRANS],[IS_DISCOUNT],[RAF_NAME],[ITEM_PARENT]   ,[ITEM_SUB_PARENT]  ,[LEVEL_SUB] ,[AREA_M2]  ,[WIDTH_CM] ,[LENGTH_CM] ,[COMPANY_CREATE],[EFFECTIVE_MATERIAL],[IS_HIDE],[IS_SERIAL],[UNIT_NAME],[QTY_AKSAT],[IS_TAX],[TAX_PERCENT],[TAX_AMO],[IS_MANDOOB],[MANDOOB_PERCENT],[MANDOOB_AMO],[IS_MANDOOB_SELECTION],[IS_ITEM_AREA],[UNIT_QTY_X1],[UNIT_QTY_XY],[UNIT_QTY_XZ])
                    VALUES (@MAX_ITM,@ITEM_NAME, @CAT_CODE, 2, @COST_1, @SELL_1, @MAX_ITM, 1,0,@ITEM_BARCODE_1,0,@ON_OFF_UNIT_2,@UNIT_NAME_2,@UNIT_QTY_2,1,@SELL_2,0,0,1,@SELL_1,@SELL_1,@SELL_2,@SELL_2,@ITEM_NOTE,0,0,N'''',@MAX_ITM   ,@MAX_ITM  ,0 ,0  ,0,0 ,N'''',N'''',0,0,@UNIT_NAME_1,0,0,0,0,0,0,0,0,0,1,1,1) 
 IF @ON_OFF_UNIT_2=1 SET @DF_SALE=0 ELSE SET @DF_SALE=1
 

 if not exists (select * from T_ITEM_UNIT where ITEM_CODE = @MAX_ITM AND UNIT_CODE=1 ) 
 BEGIN
Select @MAX_UNIT=ISNULL(MAX(UNIT_GUID),0) + 1 FROM T_ITEM_UNIT
INSERT INTO [dbo].[T_ITEM_UNIT] ([UNIT_GUID], [ITEM_CODE], [UNIT_CODE], [UNIT_NAME],[UNIT_QTY], [ON_OFF], [DF_SALE], [DF_BUY], [DF_STORE], [PRICE_BUY], [PRICE_COST], [PRICE_SALE_1], [PRICE_SALE_2], [PRICE_SALE_3], [PRICE_AVG_COST], [PRICE_SALE_CUR], [C_DATE]) 
						VALUES (@MAX_UNIT, @MAX_ITM, 1, @UNIT_NAME_1,1, 1, @DF_SALE, @DF_SALE, @DF_SALE, @COST_1, @COST_1, @SELL_1, @SELL_1, @SELL_1, @COST_1, 0, GETDATE())
END


 if not exists (select * from T_STORE_BOX where ITEM_CODE = @MAX_ITM and BILL_NUMBER=0 )
BEGIN
INSERT INTO [dbo].[T_STORE_BOX] ([BILL_BRANCH], [BILL_NUMBER],[B_CODE], [WAJBA_CODE], [STORE_CODE],  [ITEM_CODE], [UNIT_CODE], [ST_IN], [ST_OUT], [QTY_UNIT], [ACTIVE],[IS_AVG_COST],[AVG_COST]) 
						VALUES (@COMPANY_TITAL+N''0'',0, 0, 2, 0, @MAX_ITM, 1, @ST_BALANCE_1, 0, 1,1,1,@COST_1)

END


 If Not exists (Select * from T_BUY_DETAILS where ITEM_CODE = @MAX_ITM and BILL_NUMBER=0  )
BEGIN
INSERT INTO [dbo].[T_BUY_DETAILS] ([BILL_BRANCH],[BILL_NUMBER], [ITEM_CODE], [QTY], [UNIT_NAME], [UNIT_QTY], [STORE_CODE], [EXP_DATE], [PRICE_BUY], [CURRANCY_EQUAL], [PRICE], [TOTAL], [EXPENSES], [TOTAL_EXPENSES], [COST], [TOTAL_COST], [SELL1], [SELL2], [C_DATE], [ACTIVE]) 
							VALUES (@COMPANY_TITAL+N''0'', 0,@MAX_ITM, @ST_BALANCE_1, @UNIT_NAME_1, 1, 0, @EXP_DATE, @COST_1, 1, @COST_1, @COST_1*@ST_BALANCE_1, 0, 0, @COST_1,@COST_1*@ST_BALANCE_1  , @SELL_1, @SELL_2, GETDATE(), 1)
END

IF @ON_OFF_UNIT_2=1
BEGIN
SET @DF_SALE=1
Select @MAX_UNIT=ISNULL(MAX(UNIT_GUID),0) + 1 FROM T_ITEM_UNIT
INSERT INTO [dbo].[T_ITEM_UNIT] ([UNIT_GUID], [ITEM_CODE], [UNIT_CODE], [UNIT_NAME],[UNIT_QTY], [ON_OFF], [DF_SALE], [DF_BUY], [DF_STORE], [PRICE_BUY], [PRICE_COST], [PRICE_SALE_1], [PRICE_SALE_2], [PRICE_SALE_3], [PRICE_AVG_COST], [PRICE_SALE_CUR], [C_DATE]) 
						VALUES (@MAX_UNIT, @MAX_ITM, 2, @UNIT_NAME_2,@UNIT_QTY_2, 1, @DF_SALE, @DF_SALE, @DF_SALE, @COST_1*@UNIT_QTY_2, @COST_1*@UNIT_QTY_2, @SELL_2, @SELL_2, @SELL_2, @COST_1*@UNIT_QTY_2, 0, GETDATE())

END

IF LEN(@ITEM_BARCODE_1)>2
BEGIN
if not exists (select * from T_ITEM_BARCODE where ITEM_CODE = @MAX_ITM AND TYPE_VAL=0 ) 
BEGIN
INSERT INTO [dbo].[T_ITEM_BARCODE] ([ITEM_CODE], [TYPE_VAL], [ITEM_BARCODE], [UNIT_CODE], [UNIT_NAME])
 VALUES (@MAX_ITM, 0, @ITEM_BARCODE_1, 1, @UNIT_NAME_1)
END
END




IF @ON_OFF_UNIT_2=1
BEGIN
IF LEN(@ITEM_BARCODE_2)>2
BEGIN
if not exists (select * from T_ITEM_BARCODE where ITEM_CODE = @MAX_ITM AND TYPE_VAL=1 ) 
BEGIN
INSERT INTO [dbo].[T_ITEM_BARCODE] ([ITEM_CODE], [TYPE_VAL], [ITEM_BARCODE], [UNIT_CODE], [UNIT_NAME])
 VALUES (@MAX_ITM, 1, @ITEM_BARCODE_2, 2, @UNIT_NAME_2)
END
END
END




FETCH NEXT FROM BOX_CURSOR INTO @ITEM_CODE_CR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM



































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_IMPORT_PRICE2_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_IMPORT_PRICE2_ITEMS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_IMPORT_PRICE2_ITEMS]

@SUBMIT_FLAG INT OUTPUT

AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  ITEM_CODE FROM T_ITEMS   ;

DECLARE
@ITEM_CODE_CR INT,
@ITEM_NAME	nvarchar(4000),
@SELL_G float	,
@SELL_W float	
BEGIN

OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @ITEM_CODE_CR
WHILE @@FETCH_STATUS = 0
BEGIN
SELECT @ITEM_NAME=ITEM_NAME FROM T_ITEMS WHERE ITEM_CODE=@ITEM_CODE_CR

SELECT TOP(1) @SELL_G= PRICE_SELL_1,@SELL_W=PRICE_SELL_2 FROM RACK_SALES_DB.dbo.V_ITEMS_ON  WHERE ITEM_NAME LIKE @ITEM_NAME ;

UPDATE  T_ITEMS SET SELL_G=@SELL_G,SELL_W=@SELL_W WHERE ITEM_CODE=@ITEM_CODE_CR
UPDATE T_ITEM_UNIT SET PRICE_SALE_2=@SELL_G,PRICE_SALE_3=@SELL_W WHERE ITEM_CODE=@ITEM_CODE_CR AND UNIT_CODE=1

FETCH NEXT FROM BOX_CURSOR INTO @ITEM_CODE_CR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_INSERT_MANDOOB_PERCENT_EMOLA_ITEM]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_INSERT_MANDOOB_PERCENT_EMOLA_ITEM]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_INSERT_MANDOOB_PERCENT_EMOLA_ITEM]
    @BILL_NUMBER INT
    
AS
DECLARE
	@BILL_DATE DATE,
    @B_CODE INT,
    @USER_CREATE NVARCHAR(MAX),
	  @ACCOUNT_CODE_EXP INT,
	 @CURRANCY_CODE_PRIMARY INT,
	 @USER_CODE INT,
       @NOTES NVARCHAR(MAX),
	@COMPANY_TITAL NVARCHAR(MAX) 
BEGIN
    SET NOCOUNT ON;
BEGIN TRY
    BEGIN TRANSACTION;
	DELETE FROM T_BOX WHERE BILL_NUMBER=@BILL_NUMBER AND B_CODE=2 AND ACCOUNT_DESCRIPTION=N''عمولات''
   SET @B_CODE=2
   SELECT TOP(1)  @USER_CODE=USER_CODE  FROM T_USERS WHERE USER_NAME LIKE @USER_CREATE AND ACTIVE=1
 

	SET @USER_CODE=ISNULL(@USER_CODE,1)
SELECT @BILL_DATE = BILL_DATE FROM T_SALES   WHERE BILL_NUMBER = @BILL_NUMBER;
   SELECT @CURRANCY_CODE_PRIMARY=CURRANCY_CODE  FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
   SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
 
SELECT @ACCOUNT_CODE_EXP=ACCOUNT_CODE  FROM T_ACCOUNTS WHERE ACCOUNT_NAME=N''مصاريف حساب عمولات المندوبين'' AND ACCOUNT_ACTIVE=1 
 

 

   -- جدول مؤقت لحفظ عمولة كل مندوب مع حسابه
DECLARE @MANDOOB_COMMISSIONS TABLE (
    BILL_NUMBER INT,
    MANDOOB_CODE INT,
    TOTAL_COMMISSION FLOAT,
    ACCOUNT_CODE INT,
	MANDOOB_NAME NVARCHAR(100),
	CLIENT_NAME NVARCHAR(100)
);

INSERT INTO @MANDOOB_COMMISSIONS (BILL_NUMBER, MANDOOB_CODE, TOTAL_COMMISSION, ACCOUNT_CODE,MANDOOB_NAME,CLIENT_NAME)
SELECT 
    S.BILL_NUMBER,
    S.MANDOOB_CODE,
    SUM((S.NET_TOTAL * (M.MANDOOB_PERCENT * 0.01)) + (M.MANDOOB_AMO * S.QTY * S.UNIT_QTY)) AS TOTAL_COMMISSION,
    Md.ACCOUNT_CODE,
	Md.MANDOOB_NAME,
	S.CLIENT_NAME
FROM [dbo].[V_SALES_INVOICE_DETAILS] AS S
INNER JOIN [dbo].[T_ITEMS_MANDOOB] AS M
    ON S.ITEM_CODE = M.ITEM_CODE 
    AND S.MANDOOB_CODE = M.MANDOOB_CODE
INNER JOIN [dbo].[T_MANDOOB] AS Md
    ON M.MANDOOB_CODE = Md.MANDOOB_CODE
WHERE S.BILL_NUMBER = @BILL_NUMBER
GROUP BY S.BILL_NUMBER, S.MANDOOB_CODE, Md.ACCOUNT_CODE, Md.MANDOOB_NAME,S.CLIENT_NAME ;
IF (SELECT COUNT(*) FROM @MANDOOB_COMMISSIONS) = 0
BEGIN
    PRINT ''No commissions found for the given bill number.'';
    -- يمكنك إما تنفيذ COMMIT و RETURN أو أي إجراء آخر مناسب
    COMMIT TRANSACTION;
    RETURN;
END
-- الآن ننشئ CURSOR للتنقل على نتائج العمولة
DECLARE @BILL_NUM INT, @MANDOOB INT, @COMMISSION FLOAT, @M_ACC INT, @MB_NAME NVARCHAR(100),@CT_NAME NVARCHAR(100);
DECLARE @D_USA FLOAT=0, @C_USA FLOAT=0, @D_IQ FLOAT=0, @C_IQ FLOAT=0;

DECLARE cur CURSOR LOCAL FAST_FORWARD FOR
SELECT BILL_NUMBER, MANDOOB_CODE, TOTAL_COMMISSION, ACCOUNT_CODE ,MANDOOB_NAME,CLIENT_NAME
FROM @MANDOOB_COMMISSIONS;
 
OPEN cur;
FETCH NEXT FROM cur INTO @BILL_NUM, @MANDOOB, @COMMISSION, @M_ACC,@MB_NAME,@CT_NAME;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- تهيئة قيم العملة
    SET @D_USA=0; SET @C_USA=0; SET @D_IQ=0; SET @C_IQ=0;

    IF @CURRANCY_CODE_PRIMARY = 1 
    BEGIN
        -- العملة الأساسية 1 (مثلاً USD)
        -- القيد الدائن سيكون في CREDIT_USA لحساب المندوب
        SET @C_USA = @COMMISSION; 
        SET @C_IQ = 0;

        -- القيد المدين سيكون في DEBIT_USA لحساب 305
        SET @D_USA = @COMMISSION; 
        SET @D_IQ = 0;
    END
    ELSE IF @CURRANCY_CODE_PRIMARY = 2 
    BEGIN
        -- العملة الأساسية 2 (مثلاً IQD)
        SET @C_USA = 0;
        SET @C_IQ = @COMMISSION;

        SET @D_USA = 0;
        SET @D_IQ = @COMMISSION;
    END 
	 SET @NOTES=N''عمولات المندوب ('' + @MB_NAME + N'') لفاتورة العميل : '' + @CT_NAME

    -- إدخال القيد الدائن لحساب المندوب (ACCOUNT_CODE من T_MANDOOB)
    INSERT INTO [dbo].[T_BOX]
           ([BILL_BRANCH],[BILL_NUMBER],[BILL_STR],[BILL_DATE],[BILL_TIME],[MOVE_CODE],[B_CODE],[BRANCH_CODE],
            [ACCOUNT_CODE],[ACCOUNT_DESCRIPTION],[DEBIT],[CREDIT],[DEBIT_IQ],[CREDIT_IQ],[CURRANCY_CODE],
            [CURRANCY_EQUAL],[DESCRIPTION],[DEAL_CODE],[USER_CODE],[CHECKED],[C_DATE],[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@BILL_NUM AS nvarchar(20)),
            @BILL_NUM,
            CAST(@BILL_NUM AS nvarchar(20)),
            @BILL_DATE,
            GETDATE(),
            0,
            2,
            0,
            @M_ACC, -- حساب المندوب من الجدول T_MANDOOB
            N''عمولات'',
            0,
            @C_USA,
            0,
            @C_IQ,
            @CURRANCY_CODE_PRIMARY,
            1,
            @NOTES,
            0,
            @USER_CODE,
            0,
            GETDATE(),
            1);

    -- إدخال القيد المدين (حساب 305 ثابت)
    INSERT INTO [dbo].[T_BOX]
           ([BILL_BRANCH],[BILL_NUMBER],[BILL_STR],[BILL_DATE],[BILL_TIME],[MOVE_CODE],[B_CODE],[BRANCH_CODE],
            [ACCOUNT_CODE],[ACCOUNT_DESCRIPTION],[DEBIT],[CREDIT],[DEBIT_IQ],[CREDIT_IQ],[CURRANCY_CODE],
            [CURRANCY_EQUAL],[DESCRIPTION],[DEAL_CODE],[USER_CODE],[CHECKED],[C_DATE],[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@BILL_NUM AS nvarchar(20)),
            @BILL_NUM,
            CAST(@BILL_NUM AS nvarchar(20)),
            @BILL_DATE,
            GETDATE(),
            0,
            2,
            0,
            @ACCOUNT_CODE_EXP,
            N''عمولات'',
            @D_USA,
            0,
            @D_IQ,
            0,
            @CURRANCY_CODE_PRIMARY,
            1,
            @NOTES,
            0,
            @USER_CODE,
            0,
            GETDATE(),
            1);

    FETCH NEXT FROM cur INTO @BILL_NUM, @MANDOOB, @COMMISSION, @M_ACC, @MB_NAME, @CT_NAME;
END

CLOSE cur;
DEALLOCATE cur;


-- Commit transaction if no errors occur
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    -- Rollback transaction in case of an error
    ROLLBACK TRANSACTION;

    -- Log or display the error
    PRINT ''An error occurred: '' + ERROR_MESSAGE();
END CATCH;

END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_INSERT_MANDOOB_PERCENT_EMOLA_ITEM_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_INSERT_MANDOOB_PERCENT_EMOLA_ITEM_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_INSERT_MANDOOB_PERCENT_EMOLA_ITEM_DETAILS]
    @BILL_NUMBER INT
    
AS
DECLARE
	@BILL_DATE DATE,
    @B_CODE INT,
    @USER_CREATE NVARCHAR(MAX),
	  @ACCOUNT_CODE_EXP INT,
	 @CURRANCY_CODE_PRIMARY INT,
	 @USER_CODE INT,
       @NOTES NVARCHAR(MAX),
	@COMPANY_TITAL NVARCHAR(MAX) 
BEGIN
    SET NOCOUNT ON;
BEGIN TRY
    BEGIN TRANSACTION;
	DELETE FROM T_BOX WHERE BILL_NUMBER=@BILL_NUMBER AND B_CODE=2 AND ACCOUNT_DESCRIPTION=N''عمولات نهائية''
   SET @B_CODE=2
   SELECT TOP(1)  @USER_CODE=USER_CODE  FROM T_USERS WHERE USER_NAME LIKE @USER_CREATE AND ACTIVE=1
 

	SET @USER_CODE=ISNULL(@USER_CODE,1)
SELECT @BILL_DATE = BILL_DATE FROM T_SALES   WHERE BILL_NUMBER = @BILL_NUMBER;
   SELECT @CURRANCY_CODE_PRIMARY=CURRANCY_CODE  FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
   SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
 
SELECT @ACCOUNT_CODE_EXP=ACCOUNT_CODE  FROM T_ACCOUNTS WHERE ACCOUNT_NAME=N''مصاريف حساب عمولات المندوبين'' AND ACCOUNT_ACTIVE=1 
 

 

   -- جدول مؤقت لحفظ عمولة كل مندوب مع حسابه
DECLARE @MANDOOB_COMMISSIONS TABLE (
    BILL_NUMBER INT,
    MANDOOB_CODE INT,
    TOTAL_COMMISSION FLOAT,
    ACCOUNT_CODE INT,
	MANDOOB_NAME NVARCHAR(100),
	CLIENT_NAME NVARCHAR(100)
);

INSERT INTO @MANDOOB_COMMISSIONS (BILL_NUMBER, MANDOOB_CODE, TOTAL_COMMISSION, ACCOUNT_CODE,MANDOOB_NAME,CLIENT_NAME)
SELECT 
    S.BILL_NUMBER,
    S.MANDOOB_CODE,
    SUM((S.NET_TOTAL * (M.MANDOOB_PERCENT * 0.01)) + (M.MANDOOB_AMO * S.QTY * S.UNIT_QTY)) AS TOTAL_COMMISSION,
    Md.ACCOUNT_CODE,
	Md.MANDOOB_NAME,
	S.CLIENT_NAME
FROM [dbo].[V_SALES_INVOICE_DETAILS] AS S
INNER JOIN [dbo].[T_ITEMS_MANDOOB] AS M
    ON S.ITEM_CODE = M.ITEM_CODE 
    AND S.MANDOOB_CODE_FINISH = M.MANDOOB_CODE
INNER JOIN [dbo].[T_MANDOOB] AS Md
    ON M.MANDOOB_CODE = Md.MANDOOB_CODE
WHERE S.BILL_NUMBER = @BILL_NUMBER
GROUP BY S.BILL_NUMBER, S.MANDOOB_CODE, Md.ACCOUNT_CODE, Md.MANDOOB_NAME,S.CLIENT_NAME ;
IF (SELECT COUNT(*) FROM @MANDOOB_COMMISSIONS) = 0
BEGIN
    PRINT ''No commissions found for the given bill number.'';
    -- يمكنك إما تنفيذ COMMIT و RETURN أو أي إجراء آخر مناسب
    COMMIT TRANSACTION;
    RETURN;
END
-- الآن ننشئ CURSOR للتنقل على نتائج العمولة
DECLARE @BILL_NUM INT, @MANDOOB INT, @COMMISSION FLOAT, @M_ACC INT, @MB_NAME NVARCHAR(100),@CT_NAME NVARCHAR(100);
DECLARE @D_USA FLOAT=0, @C_USA FLOAT=0, @D_IQ FLOAT=0, @C_IQ FLOAT=0;

DECLARE cur CURSOR LOCAL FAST_FORWARD FOR
SELECT BILL_NUMBER, MANDOOB_CODE, TOTAL_COMMISSION, ACCOUNT_CODE ,MANDOOB_NAME,CLIENT_NAME
FROM @MANDOOB_COMMISSIONS;
 
OPEN cur;
FETCH NEXT FROM cur INTO @BILL_NUM, @MANDOOB, @COMMISSION, @M_ACC,@MB_NAME,@CT_NAME;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- تهيئة قيم العملة
    SET @D_USA=0; SET @C_USA=0; SET @D_IQ=0; SET @C_IQ=0;

    IF @CURRANCY_CODE_PRIMARY = 1 
    BEGIN
        -- العملة الأساسية 1 (مثلاً USD)
        -- القيد الدائن سيكون في CREDIT_USA لحساب المندوب
        SET @C_USA = @COMMISSION; 
        SET @C_IQ = 0;

        -- القيد المدين سيكون في DEBIT_USA لحساب 305
        SET @D_USA = @COMMISSION; 
        SET @D_IQ = 0;
    END
    ELSE IF @CURRANCY_CODE_PRIMARY = 2 
    BEGIN
        -- العملة الأساسية 2 (مثلاً IQD)
        SET @C_USA = 0;
        SET @C_IQ = @COMMISSION;

        SET @D_USA = 0;
        SET @D_IQ = @COMMISSION;
    END 
	 SET @NOTES=N''عمولات المندوب ('' + @MB_NAME + N'') لفاتورة العميل : '' + @CT_NAME

    -- إدخال القيد الدائن لحساب المندوب (ACCOUNT_CODE من T_MANDOOB)
    INSERT INTO [dbo].[T_BOX]
           ([BILL_BRANCH],[BILL_NUMBER],[BILL_STR],[BILL_DATE],[BILL_TIME],[MOVE_CODE],[B_CODE],[BRANCH_CODE],
            [ACCOUNT_CODE],[ACCOUNT_DESCRIPTION],[DEBIT],[CREDIT],[DEBIT_IQ],[CREDIT_IQ],[CURRANCY_CODE],
            [CURRANCY_EQUAL],[DESCRIPTION],[DEAL_CODE],[USER_CODE],[CHECKED],[C_DATE],[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@BILL_NUM AS nvarchar(20)),
            @BILL_NUM,
            CAST(@BILL_NUM AS nvarchar(20)),
            @BILL_DATE,
            GETDATE(),
            0,
            2,
            0,
            @M_ACC, -- حساب المندوب من الجدول T_MANDOOB
            N''عمولات نهائية'',
            0,
            @C_USA,
            0,
            @C_IQ,
            @CURRANCY_CODE_PRIMARY,
            1,
            @NOTES,
            0,
            @USER_CODE,
            0,
            GETDATE(),
            1);

    -- إدخال القيد المدين (حساب 305 ثابت)
    INSERT INTO [dbo].[T_BOX]
           ([BILL_BRANCH],[BILL_NUMBER],[BILL_STR],[BILL_DATE],[BILL_TIME],[MOVE_CODE],[B_CODE],[BRANCH_CODE],
            [ACCOUNT_CODE],[ACCOUNT_DESCRIPTION],[DEBIT],[CREDIT],[DEBIT_IQ],[CREDIT_IQ],[CURRANCY_CODE],
            [CURRANCY_EQUAL],[DESCRIPTION],[DEAL_CODE],[USER_CODE],[CHECKED],[C_DATE],[ACTIVE])
     VALUES
           (@COMPANY_TITAL + CAST(@BILL_NUM AS nvarchar(20)),
            @BILL_NUM,
            CAST(@BILL_NUM AS nvarchar(20)),
            @BILL_DATE,
            GETDATE(),
            0,
            2,
            0,
            @ACCOUNT_CODE_EXP,
           N''عمولات نهائية'',
            @D_USA,
            0,
            @D_IQ,
            0,
            @CURRANCY_CODE_PRIMARY,
            1,
            @NOTES,
            0,
            @USER_CODE,
            0,
            GETDATE(),
            1);

    FETCH NEXT FROM cur INTO @BILL_NUM, @MANDOOB, @COMMISSION, @M_ACC, @MB_NAME, @CT_NAME;
END

CLOSE cur;
DEALLOCATE cur;


-- Commit transaction if no errors occur
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    -- Rollback transaction in case of an error
    ROLLBACK TRANSACTION;

    -- Log or display the error
    PRINT ''An error occurred: '' + ERROR_MESSAGE();
END CATCH;

END;

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_INSERT_MANDOOB_PERCENT_EMOLA_ITEM_FOR_ALL_BILLS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_INSERT_MANDOOB_PERCENT_EMOLA_ITEM_FOR_ALL_BILLS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_INSERT_MANDOOB_PERCENT_EMOLA_ITEM_FOR_ALL_BILLS]
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
	DELETE FROM T_BOX WHERE   B_CODE=2 AND ACCOUNT_DESCRIPTION=N''عمولات''
        -- سنقوم أولاً بإنشاء CURSOR لجميع أرقام الفواتير المتوفرة
        DECLARE @BILL_NUMBER INT;

        DECLARE cur_bills CURSOR LOCAL FAST_FORWARD FOR
        SELECT DISTINCT BILL_NUMBER FROM T_SALES WHERE ACTIVE=1; -- يمكنك إضافة شروط لتحديد الفواتير المراد معالجتها

        OPEN cur_bills;
        FETCH NEXT FROM cur_bills INTO @BILL_NUMBER;

        WHILE @@FETCH_STATUS = 0
        BEGIN
            BEGIN TRANSACTION;

            DECLARE 
                @BILL_DATE DATE,
                @B_CODE INT,
                @USER_CREATE NVARCHAR(MAX),
                @ACCOUNT_CODE_EXP INT,
                @CURRANCY_CODE_PRIMARY INT,
                @USER_CODE INT,
                @NOTES NVARCHAR(MAX),
                @COMPANY_TITAL NVARCHAR(MAX),
                @D_USA FLOAT=0, 
                @C_USA FLOAT=0, 
                @D_IQ FLOAT=0, 
                @C_IQ FLOAT=0;

            SET @B_CODE=2;

            -- إذا كانت قيمة @USER_CREATE تستخدم لتحديد المستخدم، قم بتعيينها أو احذف هذا الجزء إن لم يكن ضرورياً
            SELECT TOP(1) @USER_CODE=USER_CODE  
            FROM T_USERS 
            WHERE USER_NAME LIKE @USER_CREATE 
              AND ACTIVE=1;

            SET @USER_CODE=ISNULL(@USER_CODE,1);

            SELECT @BILL_DATE = BILL_DATE FROM T_SALES WHERE BILL_NUMBER = @BILL_NUMBER;
            SELECT @CURRANCY_CODE_PRIMARY=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1;
            SELECT @COMPANY_TITAL=COMPANY_TITAL FROM T_COMPANY WHERE T_ID=1;

            SELECT @ACCOUNT_CODE_EXP=ACCOUNT_CODE  
            FROM T_ACCOUNTS 
            WHERE ACCOUNT_NAME=N''مصاريف حساب عمولات المندوبين'' 
              AND ACCOUNT_ACTIVE=1;

            -- جدول مؤقت لحفظ عمولة كل مندوب
            DECLARE @MANDOOB_COMMISSIONS TABLE (
                BILL_NUMBER INT,
                MANDOOB_CODE INT,
                TOTAL_COMMISSION FLOAT,
                ACCOUNT_CODE INT,
                MANDOOB_NAME NVARCHAR(100),
                CLIENT_NAME NVARCHAR(100)
            );

            INSERT INTO @MANDOOB_COMMISSIONS (BILL_NUMBER, MANDOOB_CODE, TOTAL_COMMISSION, ACCOUNT_CODE,MANDOOB_NAME,CLIENT_NAME)
            SELECT 
                S.BILL_NUMBER,
                S.MANDOOB_CODE,
                SUM((S.NET_TOTAL * (M.MANDOOB_PERCENT * 0.01)) + (M.MANDOOB_AMO * S.QTY * S.UNIT_QTY)) AS TOTAL_COMMISSION,
                Md.ACCOUNT_CODE,
                Md.MANDOOB_NAME,
                S.CLIENT_NAME
            FROM [dbo].[V_SALES_INVOICE_DETAILS] AS S
            INNER JOIN [dbo].[T_ITEMS_MANDOOB] AS M
                ON S.ITEM_CODE = M.ITEM_CODE 
                AND S.MANDOOB_CODE = M.MANDOOB_CODE
            INNER JOIN [dbo].[T_MANDOOB] AS Md
                ON M.MANDOOB_CODE = Md.MANDOOB_CODE
            WHERE S.BILL_NUMBER = @BILL_NUMBER
            GROUP BY S.BILL_NUMBER, S.MANDOOB_CODE, Md.ACCOUNT_CODE, Md.MANDOOB_NAME,S.CLIENT_NAME;

            IF (SELECT COUNT(*) FROM @MANDOOB_COMMISSIONS) = 0
            BEGIN
                PRINT ''No commissions found for bill number: '' + CAST(@BILL_NUMBER AS NVARCHAR(50));
                COMMIT TRANSACTION;
                FETCH NEXT FROM cur_bills INTO @BILL_NUMBER;
                CONTINUE;
            END

            DECLARE @BILL_NUM INT, @MANDOOB INT, @COMMISSION FLOAT, @M_ACC INT, @MB_NAME NVARCHAR(100), @CT_NAME NVARCHAR(100);

            DECLARE cur CURSOR LOCAL FAST_FORWARD FOR
            SELECT BILL_NUMBER, MANDOOB_CODE, TOTAL_COMMISSION, ACCOUNT_CODE, MANDOOB_NAME, CLIENT_NAME
            FROM @MANDOOB_COMMISSIONS;

            OPEN cur;
            FETCH NEXT FROM cur INTO @BILL_NUM, @MANDOOB, @COMMISSION, @M_ACC, @MB_NAME, @CT_NAME;

            WHILE @@FETCH_STATUS = 0
            BEGIN
                -- تهيئة قيم العملة
                SET @D_USA=0; SET @C_USA=0; SET @D_IQ=0; SET @C_IQ=0;

                IF @CURRANCY_CODE_PRIMARY = 1 
                BEGIN
                    SET @C_USA = @COMMISSION; 
                    SET @C_IQ = 0;
                    SET @D_USA = @COMMISSION; 
                    SET @D_IQ = 0;
                END
                ELSE IF @CURRANCY_CODE_PRIMARY = 2 
                BEGIN
                    SET @C_USA = 0;
                    SET @C_IQ = @COMMISSION;
                    SET @D_USA = 0;
                    SET @D_IQ = @COMMISSION;
                END

                SET @NOTES = N''عمولات المندوب ('' + @MB_NAME + N'') لفاتورة العميل : '' + @CT_NAME;

                -- القيد الدائن لحساب المندوب
                INSERT INTO [dbo].[T_BOX]
                       ([BILL_BRANCH],[BILL_NUMBER],[BILL_STR],[BILL_DATE],[BILL_TIME],[MOVE_CODE],[B_CODE],[BRANCH_CODE],
                        [ACCOUNT_CODE],[ACCOUNT_DESCRIPTION],[DEBIT],[CREDIT],[DEBIT_IQ],[CREDIT_IQ],[CURRANCY_CODE],
                        [CURRANCY_EQUAL],[DESCRIPTION],[DEAL_CODE],[USER_CODE],[CHECKED],[C_DATE],[ACTIVE])
                 VALUES
                       (@COMPANY_TITAL + CAST(@BILL_NUM AS nvarchar(20)),
                        @BILL_NUM,
                        CAST(@BILL_NUM AS nvarchar(20)),
                        @BILL_DATE,
                        GETDATE(),
                        0,
                        2,
                        0,
                        @M_ACC,
                        N''عمولات'',
                        0,
                        @C_USA,
                        0,
                        @C_IQ,
                        @CURRANCY_CODE_PRIMARY,
                        1,
                        @NOTES,
                        0,
                        @USER_CODE,
                        0,
                        GETDATE(),
                        1);

                -- القيد المدين (حساب المصاريف)
                INSERT INTO [dbo].[T_BOX]
                       ([BILL_BRANCH],[BILL_NUMBER],[BILL_STR],[BILL_DATE],[BILL_TIME],[MOVE_CODE],[B_CODE],[BRANCH_CODE],
                        [ACCOUNT_CODE],[ACCOUNT_DESCRIPTION],[DEBIT],[CREDIT],[DEBIT_IQ],[CREDIT_IQ],[CURRANCY_CODE],
                        [CURRANCY_EQUAL],[DESCRIPTION],[DEAL_CODE],[USER_CODE],[CHECKED],[C_DATE],[ACTIVE])
                 VALUES
                       (@COMPANY_TITAL + CAST(@BILL_NUM AS nvarchar(20)),
                        @BILL_NUM,
                        CAST(@BILL_NUM AS nvarchar(20)),
                        @BILL_DATE,
                        GETDATE(),
                        0,
                        2,
                        0,
                        @ACCOUNT_CODE_EXP,
                        N''عمولات'',
                        @D_USA,
                        0,
                        @D_IQ,
                        0,
                        @CURRANCY_CODE_PRIMARY,
                        1,
                        @NOTES,
                        0,
                        @USER_CODE,
                        0,
                        GETDATE(),
                        1);

                FETCH NEXT FROM cur INTO @BILL_NUM, @MANDOOB, @COMMISSION, @M_ACC, @MB_NAME, @CT_NAME;
            END

            CLOSE cur;
            DEALLOCATE cur;

            COMMIT TRANSACTION;

            FETCH NEXT FROM cur_bills INTO @BILL_NUMBER;
        END

        CLOSE cur_bills;
        DEALLOCATE cur_bills;

    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        PRINT ''An error occurred: '' + ERROR_MESSAGE();
    END CATCH;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_INSERT_PRINTER_SELECT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_INSERT_PRINTER_SELECT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'














CREATE PROCEDURE [dbo].[P_INSERT_PRINTER_SELECT]

@PRINTER_ID	INT
AS
BEGIN




DELETE FROM T_SORT 
INSERT INTO [dbo].[T_SORT]
           ([CODE]
           ,[NAME])
SELECT ITEM_CODE
		,ITEM_NAME
  FROM [dbo].T_ITEMS WHERE PRINTER_ID=@PRINTER_ID 
  

 
	
END


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_INSERT_T_POINTS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_INSERT_T_POINTS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_INSERT_T_POINTS]
    @BILL_NUMBER INT,
    @BILL_DATE DATE,
    @BILL_TIME DATETIME,
    @B_CODE INT,
    @USER_CREATE NVARCHAR(MAX),
    @ACCOUNT_CODE INT,
    @POINT_IN FLOAT,
    @POINT_OUT FLOAT,
    @NOTES NVARCHAR(MAX),
    @C_DATE DATETIME
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO [dbo].[T_POINTS] (
        BILL_NUMBER,
        BILL_DATE,
        BILL_TIME,
        B_CODE,
        USER_CREATE,
        ACCOUNT_CODE,
        POINT_IN,
        POINT_OUT,
        NOTES,
        C_DATE
    )
    VALUES (
        @BILL_NUMBER,
        @BILL_DATE,
        @BILL_TIME,
        @B_CODE,
        @USER_CREATE,
        @ACCOUNT_CODE,
        @POINT_IN,
        @POINT_OUT,
        @NOTES,
        @C_DATE
    );
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_INSERT_T_SALES_DETAILS_FROM_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_INSERT_T_SALES_DETAILS_FROM_TEMP]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_INSERT_T_SALES_DETAILS_FROM_TEMP]
    @BILL_BRANCH nvarchar(100),
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRAN;

        SET @SUBMIT_FLAG = 0;

        
        UPDATE T_SALES_TEMP SET WAJBA_CODE = BILL_BUY WHERE BILL_BRANCH = @BILL_BRANCH;

        
        DELETE FROM T_SALES_DETAILS WHERE BILL_BRANCH = @BILL_BRANCH;

      
        INSERT INTO [dbo].[T_SALES_DETAILS] (
            [BILL_BRANCH], [BILL_NUMBER], [ITEM_CODE], [ITEM_NAME], [QTY], [UNIT_NAME], [UNIT_QTY],
            [STORE_CODE], [WAJBA_CODE], [WAJBA_NAME], [WAJBA_BALANCE], [CURRANCY_CODE], [CURRANCY_EQUAL],
            [COST], [PRICE], [TOTAL], [DISCOUNT_PERCENT_ITEM], [DISCOUNT_AMOUNT_ITEM], [C_DATE], [ACTIVE],
            [BILL_BUY], [ITEM_NOTE_SALES], [DISCOUNT_TYPE], [USER_CUT], [USER_PREPARE], [IS_PRINT], [NOTE_PRINT],
            [IS_SERIAL], [IS_TAX], [TAX_PERCENT_ITEM], [TAX_AMO_ITEM], [IS_MANDOOB], [MANDOOB_PERCENT_ITEM],
            [MANDOOB_AMO_ITEM], [QTY_FREE], [TOTAL_QTY]
        )
        SELECT [BILL_BRANCH], [BILL_NUMBER], [ITEM_CODE], [ITEM_NAME], [QTY], [UNIT_NAME], [UNIT_QTY],
            [STORE_CODE], [WAJBA_CODE], [WAJBA_NAME], [WAJBA_BALANCE], [CURRANCY_CODE], [CURRANCY_EQUAL],
            [COST], [PRICE], [TOTAL], [DISCOUNT_PERCENT_ITEM], [DISCOUNT_AMOUNT_ITEM], [C_DATE], [ACTIVE],
            [BILL_BUY], [ITEM_NOTE_SALES], [DISCOUNT_TYPE], [USER_CUT], [USER_PREPARE], [IS_PRINT], [NOTE_PRINT],
            [IS_SERIAL], [IS_TAX], [TAX_PERCENT_ITEM], [TAX_AMO_ITEM], [IS_MANDOOB], [MANDOOB_PERCENT_ITEM],
            [MANDOOB_AMO_ITEM], [QTY_FREE], [QTY] + ISNULL([QTY_FREE], 0)
        FROM [dbo].[T_SALES_TEMP]
        WHERE BILL_BRANCH = @BILL_BRANCH ORDER BY T_ID ASC;

        
        DELETE FROM T_STORE_BOX WHERE BILL_BRANCH = @BILL_BRANCH AND B_CODE = 2;

      
        DECLARE @BILL_DATE DATE = (SELECT TOP(1) BILL_DATE FROM T_SALES WHERE BILL_BRANCH = @BILL_BRANCH ORDER BY BILL_NUMBER DESC);

       
        ;WITH UnitCodes AS (
            SELECT d.ITEM_CODE, d.UNIT_NAME, ISNULL(iu.UNIT_CODE, 1) AS UNIT_CODE
            FROM (
                SELECT DISTINCT ITEM_CODE, UNIT_NAME
                FROM T_SALES_DETAILS
                WHERE BILL_BRANCH = @BILL_BRANCH
            ) d
            LEFT JOIN T_ITEM_UNIT iu ON d.ITEM_CODE = iu.ITEM_CODE AND d.UNIT_NAME = iu.UNIT_NAME
        )
        INSERT INTO [dbo].[T_STORE_BOX] (
            [BILL_BRANCH], [BILL_NUMBER], [BILL_DATE], [B_CODE], [WAJBA_CODE], [STORE_CODE],
            [EXP_DATE], [ITEM_CODE], [UNIT_CODE], [ST_IN], [ST_OUT], [QTY_UNIT], [ACTIVE]
        )
        SELECT
            d.[BILL_BRANCH],
            d.[BILL_NUMBER],
            @BILL_DATE,
            2,
            0,
            d.[STORE_CODE],
            NULL,
            d.[ITEM_CODE],
            uc.UNIT_CODE,
            0,
            d.[TOTAL_QTY],
            d.[UNIT_QTY],
            1
        FROM [dbo].[T_SALES_DETAILS] d
        LEFT JOIN UnitCodes uc ON d.ITEM_CODE = uc.ITEM_CODE AND d.UNIT_NAME = uc.UNIT_NAME
        WHERE d.BILL_BRANCH = @BILL_BRANCH;

        
        DELETE FROM T_SALES_TEMP WHERE BILL_BRANCH = @BILL_BRANCH;

        SET @SUBMIT_FLAG = 1;
        COMMIT TRAN;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0 ROLLBACK TRAN;
        SET @SUBMIT_FLAG = 0;
        
    END CATCH
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_INSERT_T_SALES_DETAILS_FROM_TEMP_ORDER]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_INSERT_T_SALES_DETAILS_FROM_TEMP_ORDER]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_INSERT_T_SALES_DETAILS_FROM_TEMP_ORDER]
    @BILL_BRANCH nvarchar(100),       
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRAN;

        SET @SUBMIT_FLAG = 0;

       
        UPDATE T_SALES_TEMP SET WAJBA_CODE = BILL_BUY WHERE BILL_BRANCH = @BILL_BRANCH;
        UPDATE T_SALES SET DISCOUNT_PERCENT = 0, ACTIVE = 1 WHERE BILL_BRANCH = @BILL_BRANCH;
        UPDATE T_SALES SET IVC_CODE = 1, BILL_DATE = GETDATE() WHERE BILL_BRANCH = @BILL_BRANCH AND CLIENT_CODE = 2100000;
        UPDATE T_SALES_TEMP SET ACTIVE = 1 WHERE BILL_BRANCH = @BILL_BRANCH;
        DELETE FROM T_SALES_TEMP WHERE BILL_BRANCH = @BILL_BRANCH AND QTY = 0;

        
        DELETE FROM T_SALES_DETAILS WHERE BILL_BRANCH = @BILL_BRANCH;

       
        INSERT INTO [dbo].[T_SALES_DETAILS] (
            [BILL_BRANCH], [BILL_NUMBER], [ITEM_CODE], [ITEM_NAME], [QTY], [UNIT_NAME], [UNIT_QTY],
            [STORE_CODE], [WAJBA_CODE], [WAJBA_NAME], [WAJBA_BALANCE], [CURRANCY_CODE], [CURRANCY_EQUAL],
            [COST], [PRICE], [TOTAL], [DISCOUNT_PERCENT_ITEM], [DISCOUNT_AMOUNT_ITEM], [C_DATE], [ACTIVE],
            [BILL_BUY], [ITEM_NOTE_SALES], [DISCOUNT_TYPE], [USER_CUT], [USER_PREPARE], [IS_PRINT], [NOTE_PRINT],
            [IS_SERIAL], [IS_TAX], [TAX_PERCENT_ITEM], [TAX_AMO_ITEM], [IS_MANDOOB], [MANDOOB_PERCENT_ITEM],
            [MANDOOB_AMO_ITEM], [QTY_FREE], [TOTAL_QTY]
        )
        SELECT [BILL_BRANCH], [BILL_NUMBER], [ITEM_CODE], [ITEM_NAME], [QTY], [UNIT_NAME], [UNIT_QTY],
            [STORE_CODE], [WAJBA_CODE], [WAJBA_NAME], [WAJBA_BALANCE], [CURRANCY_CODE], [CURRANCY_EQUAL],
            [COST], [PRICE], [TOTAL], [DISCOUNT_PERCENT_ITEM], [DISCOUNT_AMOUNT_ITEM], [C_DATE], [ACTIVE],
            [BILL_BUY], [ITEM_NOTE_SALES], [DISCOUNT_TYPE], [USER_CUT], [USER_PREPARE], [IS_PRINT], [NOTE_PRINT],
            [IS_SERIAL], [IS_TAX], [TAX_PERCENT_ITEM], [TAX_AMO_ITEM], [IS_MANDOOB], [MANDOOB_PERCENT_ITEM],
            [MANDOOB_AMO_ITEM], [QTY_FREE], [QTY] + ISNULL([QTY_FREE], 0)
        FROM [dbo].[T_SALES_TEMP]
        WHERE BILL_BRANCH = @BILL_BRANCH ORDER BY T_ID ASC;

        SET @SUBMIT_FLAG = 1;
        COMMIT TRAN;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0 ROLLBACK TRAN;
        SET @SUBMIT_FLAG = 0;
    END CATCH
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_INSERT_TEMP_FROM_T_SALES_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_INSERT_TEMP_FROM_T_SALES_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[P_INSERT_TEMP_FROM_T_SALES_DETAILS]

@BILL_BRANCH	nvarchar(100)	,		
@SUBMIT_FLAG INT OUTPUT
AS
BEGIN TRAN
BEGIN
SET @SUBMIT_FLAG=0



DELETE FROM T_SALES_TEMP WHERE  BILL_BRANCH LIKE @BILL_BRANCH 

INSERT INTO [dbo].[T_SALES_TEMP]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           
           ,[C_DATE]
            ,[ACTIVE]
		    ,[BILL_BUY]
			,[ITEM_NOTE_SALES]
			  ,[DISCOUNT_TYPE]
          
           ,[USER_CUT]
           ,[USER_PREPARE]
           ,[IS_PRINT]
		   ,[NOTE_PRINT]
		   ,[IS_SERIAL]
		   ,[IS_TAX]
      ,[TAX_PERCENT_ITEM]
      ,[TAX_AMO_ITEM]
      ,[IS_MANDOOB]
      ,[MANDOOB_PERCENT_ITEM]
      ,[MANDOOB_AMO_ITEM]
	  ,[QTY_FREE]
      ,[TOTAL_QTY])
SELECT [BILL_BRANCH]
      ,[BILL_NUMBER]
      ,[ITEM_CODE]
      ,[ITEM_NAME]
      ,[QTY]
      ,[UNIT_NAME]
      ,[UNIT_QTY]
      ,[STORE_CODE]
      ,[WAJBA_CODE]
      ,[WAJBA_NAME]
      ,[WAJBA_BALANCE]
      ,[CURRANCY_CODE]
      ,[CURRANCY_EQUAL]
      ,[COST]
      ,[PRICE]
   
      ,[DISCOUNT_PERCENT_ITEM]
      ,[DISCOUNT_AMOUNT_ITEM]
      
      ,[C_DATE]
       ,[ACTIVE]
	  ,[BILL_BUY]
	  ,[ITEM_NOTE_SALES]
	    ,[DISCOUNT_TYPE]
         
           ,[USER_CUT]
           ,[USER_PREPARE]
           ,[IS_PRINT]
		   ,[NOTE_PRINT]
		   ,[IS_SERIAL]
		   ,[IS_TAX]
      ,[TAX_PERCENT_ITEM]
      ,[TAX_AMO_ITEM]
      ,[IS_MANDOOB]
      ,[MANDOOB_PERCENT_ITEM]
      ,[MANDOOB_AMO_ITEM]
	  ,[QTY_FREE]
      ,[TOTAL_QTY]
  FROM [dbo].[T_SALES_DETAILS] WHERE BILL_BRANCH LIKE @BILL_BRANCH ORDER BY T_ID ASC
   
  









	SET @SUBMIT_FLAG=1
	
END


commit

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_INSERT_TEMP_UNIT_CHANGE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_INSERT_TEMP_UNIT_CHANGE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE [dbo].[P_INSERT_TEMP_UNIT_CHANGE]
@T_ID_TEMP INT,
@IS_SELL_BUY INT,
@TYPE_PRICE INT,
@COL_COST_DF NVARCHAR(MAX),

@BALANCE FLOAT OUTPUT,
@IS_STORE INT OUTPUT,
@SUBMIT_FLAG INT OUTPUT
AS
DECLARE
@ITEM_CODE INT,
@UNIT_NAME NVARCHAR(MAX),
@UNIT_NAME_SALES NVARCHAR(MAX),
@BILL_BRANCH NVARCHAR(MAX),
@UNIT_QTY FLOAT,
@UNIT_QTY_SALES FLOAT,
@UNIT_QTY_BUY FLOAT,
@QTY_SALES FLOAT,
@SELL_SS FLOAT,
@SELL1_SS FLOAT,
@SELL2_SS FLOAT,
@SELL3_SS FLOAT,
@COST_SS FLOAT,
@COST_BUY FLOAT,
@COST_PRICE_COST FLOAT,
@COST_AVG FLOAT,
@COST_WAJBA FLOAT,
@STORE_CODE INT,
@BILL_BUY INT,
@CC_COUNT INT,
@UNIT_CODE INT,
@ITEM_TYPE  AS INT

BEGIN TRAN
BEGIN
SET @SUBMIT_FLAG=0
SET @IS_STORE=0
SET @BALANCE=0
SET @COST_SS=0

SELECT @STORE_CODE=STORE_CODE,@ITEM_CODE=ITEM_CODE,@UNIT_NAME=UNIT_NAME , @UNIT_QTY=UNIT_QTY ,@QTY_SALES=QTY,@BILL_BUY=BILL_BUY ,@BILL_BRANCH=BILL_BRANCH FROM T_SALES_TEMP WHERE T_ID=@T_ID_TEMP


SELECT @CC_COUNT=COUNT(UNIT_CODE)  FROM T_ITEM_UNIT  WHERE ITEM_CODE =@ITEM_CODE

IF @CC_COUNT=1 
BEGIN 
SET @SUBMIT_FLAG=99
SET @BALANCE=0
SET @IS_STORE=0
GOTO FINISHED
END

 If @UNIT_QTY = 1 
 BEGIN
 
 SELECT TOP (1) @UNIT_NAME=ISNULL(UNIT_NAME,N''''),@UNIT_QTY_SALES=UNIT_QTY  FROM T_ITEM_UNIT  WHERE ITEM_CODE =@ITEM_CODE AND UNIT_CODE <>1
               
END
Else
BEGIN
SELECT @UNIT_NAME=ISNULL(UNIT_NAME,N''''),@UNIT_QTY_SALES=UNIT_QTY  FROM T_ITEM_UNIT  WHERE ITEM_CODE =@ITEM_CODE AND UNIT_CODE =1
End

SET @UNIT_NAME_SALES=@UNIT_NAME 

IF @BILL_BUY=-999999
BEGIN
SELECT TOP(1) @UNIT_NAME_SALES=UNIT_NAME ,@UNIT_QTY_SALES=UNIT_QTY,@UNIT_CODE=UNIT_CODE,@SELL1_SS=PRICE_SALE_1,@SELL2_SS=PRICE_SALE_2,@SELL3_SS=PRICE_SALE_3 FROM T_ITEM_UNIT   WHERE ITEM_CODE =@ITEM_CODE AND UNIT_NAME LIKE @UNIT_NAME
SELECT TOP(1) @COST_BUY=PRICE_BUY,@COST_PRICE_COST=PRICE_COST,@COST_AVG=PRICE_AVG_COST   FROM T_ITEM_UNIT   WHERE ITEM_CODE =@ITEM_CODE AND UNIT_CODE =1

IF @TYPE_PRICE=1 SET @SELL_SS=@SELL1_SS
ELSE IF @TYPE_PRICE=2 SET @SELL_SS=@SELL2_SS
ELSE IF @TYPE_PRICE=3 SET @SELL_SS=@SELL3_SS

IF @COL_COST_DF=N''PRICE_COST'' SET @COST_SS=@COST_PRICE_COST * @UNIT_QTY_SALES
ELSE IF @COL_COST_DF=N''PRICE_BUY'' SET @COST_SS=@COST_BUY * @UNIT_QTY_SALES
ELSE IF @COL_COST_DF=N''AVG_BUY'' SET @COST_SS=@COST_AVG * @UNIT_QTY_SALES
ELSE IF @COL_COST_DF=N''WAJBA'' SET @COST_SS=@COST_PRICE_COST * @UNIT_QTY_SALES
END
-------------------------------END -999999---------------------------------------------
ELSE
BEGIN
IF @IS_SELL_BUY=1
BEGIN

SELECT TOP(1) @UNIT_QTY_BUY=UNIT_QTY,@SELL1_SS=SELL1,@SELL2_SS=SELL2,@COST_SS=COST/UNIT_QTY  FROM T_BUY_DETAILS  WHERE BILL_NUMBER=@BILL_BUY AND ITEM_CODE =@ITEM_CODE
 IF @UNIT_QTY_SALES=1 SET @SELL_SS=@SELL1_SS
ELSE IF @UNIT_QTY_SALES<>1 SET @SELL_SS=@SELL2_SS
SET @COST_SS=@COST_SS*@UNIT_QTY_SALES

END
ELSE
BEGIN
SELECT TOP(1) @UNIT_NAME_SALES=UNIT_NAME ,@UNIT_QTY_SALES=UNIT_QTY,@UNIT_CODE=UNIT_CODE,@SELL1_SS=PRICE_SALE_1,@SELL2_SS=PRICE_SALE_2,@SELL3_SS=PRICE_SALE_3,@COST_BUY=PRICE_BUY,@COST_PRICE_COST=PRICE_COST,@COST_AVG=PRICE_AVG_COST   FROM T_ITEM_UNIT   WHERE ITEM_CODE =@ITEM_CODE AND UNIT_NAME LIKE @UNIT_NAME
SELECT TOP(1) @COST_BUY=PRICE_BUY,@COST_PRICE_COST=PRICE_COST,@COST_AVG=PRICE_AVG_COST   FROM T_ITEM_UNIT   WHERE ITEM_CODE =@ITEM_CODE AND UNIT_CODE =1
IF @TYPE_PRICE=1 SET @SELL_SS=@SELL1_SS
ELSE IF @TYPE_PRICE=2 SET @SELL_SS=@SELL2_SS
ELSE IF @TYPE_PRICE=3 SET @SELL_SS=@SELL3_SS

IF @COL_COST_DF=N''PRICE_COST'' SET @COST_SS=@COST_PRICE_COST * @UNIT_QTY_SALES
ELSE IF @COL_COST_DF=N''PRICE_BUY'' SET @COST_SS=@COST_BUY * @UNIT_QTY_SALES
ELSE IF @COL_COST_DF=N''AVG_BUY'' SET @COST_SS=@COST_AVG * @UNIT_QTY_SALES
ELSE IF @COL_COST_DF=N''WAJBA'' SET @COST_SS=(SELECT TOP(1) [COST]/[UNIT_QTY]  FROM V_BUY_DETAILS_EXPIRED_REMAIN_WAJBA WHERE ITEM_CODE=@ITEM_CODE AND BILL_NUMBER =@BILL_BUY order by COST DESC)*@UNIT_QTY_SALES
END



END




SET @ITEM_TYPE= (SELECT TOP(1) TYPE_CODE FROM T_ITEMS WHERE ITEM_CODE=@ITEM_CODE)

IF @ITEM_TYPE=5
BEGIN
SET @BALANCE=100000
END
ELSE
BEGIN
SET @BALANCE=(SELECT TOP(1) ISNULL(BALANCE,0) FROM V_STORE_BOX_STORE where  ITEM_CODE=@ITEM_CODE AND UNIT_NAME LIKE @UNIT_NAME_SALES AND  STORE_CODE=@STORE_CODE) + (SELECT ISNULL(SUM(BALANCE_M),0)*-1 FROM T_STORE_BOX where  ITEM_CODE=@ITEM_CODE  AND  STORE_CODE=@STORE_CODE AND BILL_BRANCH LIKE @BILL_BRANCH AND B_CODE=2 and ACTIVE=1)+ (SELECT ISNULL(SUM(QTY*UNIT_QTY),0)*-1 FROM T_SALES_TEMP where  ITEM_CODE=@ITEM_CODE  AND  STORE_CODE=@STORE_CODE AND BILL_NUMBER>0  AND BILL_BRANCH  LIKE @BILL_BRANCH)
END
If @QTY_SALES > @BALANCE 
	BEGIN
	SET @IS_STORE=-1
	SET @SUBMIT_FLAG=1
	GOTO FINISHED
	END			


UPDATE  T_SALES_TEMP SET UNIT_NAME=@UNIT_NAME_SALES,UNIT_QTY=@UNIT_QTY_SALES,COST=@COST_SS,PRICE=@SELL_SS WHERE T_ID=@T_ID_TEMP

SET @SUBMIT_FLAG=1
FINISHED:




commit
END



































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_ITEM_RE_INSERT_FIRST_BALANCE_ZERO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_ITEM_RE_INSERT_FIRST_BALANCE_ZERO]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_ITEM_RE_INSERT_FIRST_BALANCE_ZERO]

	
@SUBMIT_FLAG INT OUTPUT
AS
BEGIN
SET @SUBMIT_FLAG=0


INSERT INTO [dbo].[T_BUY_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[PRICE_BUY]
           ,[CURRANCY_EQUAL]
           ,[PRICE]
           ,[TOTAL]
           ,[EXPENSES]
           ,[TOTAL_EXPENSES]
           ,[COST]
           ,[TOTAL_COST]
           ,[SELL1]
           ,[SELL2]
           ,[C_DATE]
           ,[ACTIVE]
           ,[OFFER_CODE]
           ,[IS_USED]
           ,[QTY_IN]
           ,[QTY_OUT]
           ,[TOTAL_OUT]
           ,[EXPENSES_OUT]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM])
     SELECT 
           N''SP0''
           ,0
           ,ITEM_CODE
           ,0
           ,UNIT_NAME 
           ,1
           ,0
           ,GETDATE()
           ,COST
           ,1
           ,COST
           ,0
           ,0
           ,0
           ,COST
           ,0
           ,0
           ,0
           ,GETDATE()
           ,0
           ,1
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0
           ,0 FROM T_ITEMS 




	SET @SUBMIT_FLAG=1
	
END





































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_ITEMS_RE_ORDERS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_ITEMS_RE_ORDERS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE [dbo].[P_ITEMS_RE_ORDERS]
 @D1 DATE,
@D2 DATE,
@DAY_FACT INT ,
@DAY_TRANS INT 



AS


DECLARE
@QTY_DAYS INT


BEGIN

SET @QTY_DAYS=DATEDIFF(DAY,@D1,@D2)
--SET @D1=DATEADD(DAY,@QTY_DAYS*-1,GETDATE())
--SET @D2=GETDATE()

IF OBJECT_ID(''tempdb..#TEMP_RE_ORDER'') IS NOT NULL DROP Table #TEMP_RE_ORDER
SELECT  
  @QTY_DAYS AS DAY_DATE,
  @DAY_FACT AS DAY_FACT,
  @DAY_TRANS AS DAY_TRANS,
  @D1 AS FROM_DATE,
   @D2 AS TO_DATE,

  P.ITEM_CODE  , 
  P.ITEM_BARCODE  ,
   P.ITEM_NAME   ,
  CA.CATEGORY_NAME    ,
   P.KIND_NAME  ,
   P.BALANCE_PHARMA AS BALANCE,
   (SELECT ISNULL(SUM(TOTAL_QTY*UNIT_QTY),0)  FROM V_SALES_DETAILS WHERE ITEM_CODE=P.ITEM_CODE AND ACTIVE=1 AND BILL_DATE BETWEEN @D1 AND @D2 ) AS QTY_SALES,
	(SELECT TOP(1) IIF(LEN(BILL_INVOICE)=0,N''B-''+CAST(BILL_NUMBER AS NVARCHAR(10)),BILL_INVOICE)  FROM V_BUY_DETAILS WHERE ITEM_CODE=P.ITEM_CODE ORDER BY BILL_NUMBER DESC ) AS LAST_BILL_INVOICE_BUY,
	(SELECT TOP(1) ISNULL(BILL_DATE,N'''') FROM T_BUY WHERE BILL_NUMBER=((SELECT TOP(1) BILL_NUMBER  FROM V_BUY_DETAILS WHERE ITEM_CODE=P.ITEM_CODE ORDER BY BILL_NUMBER DESC )) AND ACTIVE=1 ) AS LAST_BILL_DATE

INTO #TEMP_RE_ORDER
FROM 
   dbo.V_ITEMS_BALANCE_MIN_PHARMA P 
LEFT OUTER JOIN 
   dbo.T_ITEM_CATEGORY CA ON P.CATEGORY_CODE = CA.CATEGORY_CODE
WHERE 
    P.ITEM_CODE > 0   AND QTY_MIN>=0


	SELECT 
	LAST_BILL_INVOICE_BUY
	,LAST_BILL_DATE	
	,ITEM_CODE   
   ,ITEM_BARCODE  
   , ITEM_NAME  
   ,CATEGORY_NAME     
    ,KIND_NAME   
    , BALANCE  
	, QTY_SALES 
	,  QTY_SALES - BALANCE AS QTY_PRE_ORDER  
	 ,QTY_SALES/DAY_DATE AS  QTY_SALES_PER_DAY 
	 ,FLOOR( IIF((QTY_SALES/DAY_DATE)=0,0,BALANCE/(QTY_SALES/DAY_DATE)))  AS DAY_TO_FINISH
	 ,FLOOR( IIF((QTY_SALES/DAY_DATE)=0,0,BALANCE/(QTY_SALES/DAY_DATE)))-DAY_FACT-DAY_TRANS AS ORDER_BEFORE	 
	,IIF((FLOOR( IIF((QTY_SALES/DAY_DATE)=0,0,BALANCE/(QTY_SALES/DAY_DATE)))-DAY_FACT-DAY_TRANS	)<=0,N''عاجل'' ,CAST(CAST( DATEADD(DAY,(FLOOR( IIF((QTY_SALES/DAY_DATE)=0,0,BALANCE/(QTY_SALES/DAY_DATE)))-DAY_FACT-DAY_TRANS),GETDATE())  AS DATE ) AS NVARCHAR(12))) AS ORDER_DATE
	
		 FROM #TEMP_RE_ORDER WHERE QTY_SALES - BALANCE >=0      ORDER BY ORDER_BEFORE
--SELECT 
	 
--	LAST_BILL_INVOICE_BUY AS N''رقم اخر فاتورة شراء''
--	,LAST_BILL_DATE	AS N''تاريخ اخر فاتورة شراء''
--	 ,ITEM_BARCODE   AS N''الباركود'' 
--   , ITEM_NAME  AS N''اسم المادة''
--   ,CATEGORY_NAME     AS N''المجموعة''
--    ,KIND_NAME   AS N''التصنيف''
--    , BALANCE  AS N''الرصيد الحالي''
--	, QTY_SALES AS N''الكمية المباعة للفترة''
--	,  QTY_SALES - BALANCE  AS N''الكمية المطلوبة''  
--	 --,QTY_SALES/DAY_DATE AS  QTY_SALES_PER_DAY 
--	 --,FLOOR( IIF((QTY_SALES/DAY_DATE)=0,0,BALANCE/(QTY_SALES/DAY_DATE)))  AS DAY_TO_FINISH
--	 --,FLOOR( IIF((QTY_SALES/DAY_DATE)=0,0,BALANCE/(QTY_SALES/DAY_DATE)))-DAY_FACT-DAY_TRANS AS ORDER_BEFORE	 
--	,IIF((FLOOR( IIF((QTY_SALES/DAY_DATE)=0,0,BALANCE/(QTY_SALES/DAY_DATE)))-DAY_FACT-DAY_TRANS	)<=0,N''عاجل'' ,CAST(CAST( DATEADD(DAY,(FLOOR( IIF((QTY_SALES/DAY_DATE)=0,0,BALANCE/(QTY_SALES/DAY_DATE)))-DAY_FACT-DAY_TRANS),GETDATE())  AS DATE ) AS NVARCHAR(12))) AS N''تاريخ الطلب''
	
--		 FROM #TEMP_RE_ORDER WHERE QTY_SALES - BALANCE >=0      ORDER BY ORDER_BEFORE

 
 DROP Table #TEMP_RE_ORDER

END	--END OF PROGRAM





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_RE_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_RE_ITEMS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[P_RE_ITEMS]


@SUBMIT_FLAG INT OUTPUT

AS


DECLARE BOX_CURSOR CURSOR FOR SELECT  ITEM_CODE FROM T_ITEMS  WHERE ACTIVE=1;


DECLARE
@ITEM_CODE_CURSOR INT,
@COMPANY_TITAL NVARCHAR(MAX),
@COST	float	,
@QTY float

BEGIN
SET @SUBMIT_FLAG=0

SELECT @COMPANY_TITAL=COMPANY_TITAL FROM T_COMPANY WHERE T_ID=1
     
OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @ITEM_CODE_CURSOR
WHILE @@FETCH_STATUS = 0
BEGIN
DELETE FROM T_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE_CURSOR AND BILL_NUMBER=0
SELECT @COST=COST FROM T_ITEMS WHERE ITEM_CODE=@ITEM_CODE_CURSOR
SELECT @QTY=ST_IN FROM T_STORE_BOX WHERE ITEM_CODE=@ITEM_CODE_CURSOR AND BILL_NUMBER=0

INSERT INTO [dbo].[T_BUY_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[PRICE_BUY]
           ,[CURRANCY_EQUAL]
           ,[PRICE]
           ,[TOTAL]
           ,[EXPENSES]
           ,[TOTAL_EXPENSES]
           ,[COST]
           ,[TOTAL_COST]
           ,[SELL1]
           ,[SELL2]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL+N''0''
           ,0
           ,@ITEM_CODE_CURSOR
           ,@QTY
           ,N''قطعة''
           ,1
           ,0
           ,NULL
           ,@COST
           ,1
           ,@COST
           ,@COST*@QTY
           ,0
           ,0
           ,@COST
           ,@COST*@QTY
           ,0
           ,0
           ,GETDATE()
           ,0)


FETCH NEXT FROM BOX_CURSOR INTO @ITEM_CODE_CURSOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR



SET @SUBMIT_FLAG=1

END	--END OF PROGRAM




























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_RE_ITEMS_FACTORY_BILL_ZERO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_RE_ITEMS_FACTORY_BILL_ZERO]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[P_RE_ITEMS_FACTORY_BILL_ZERO]


@SUBMIT_FLAG INT OUTPUT

AS


DECLARE BOX_CURSOR CURSOR FOR SELECT  BILL_NUMBER FROM T_FACTORY  WHERE BILL_BRANCH_BUY=0;


DECLARE
@BILL_CURSOR INT,
@BILL_BUY_MIN INT,
@COMPANY_TITAL NVARCHAR(MAX)


BEGIN
SET @SUBMIT_FLAG=0

SELECT @COMPANY_TITAL=COMPANY_TITAL FROM T_COMPANY WHERE T_ID=1
   
     
OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @BILL_CURSOR
WHILE @@FETCH_STATUS = 0
BEGIN

SELECT  @BILL_BUY_MIN=ISNULL(MIN(BILL_NUMBER),0)-1 FROM T_BUY_DETAILS
INSERT INTO [dbo].[T_BUY_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[PRICE_BUY]
           ,[CURRANCY_EQUAL]
           ,[PRICE]
           ,[TOTAL]
           ,[EXPENSES]
           ,[TOTAL_EXPENSES]
           ,[COST]
           ,[TOTAL_COST]
           ,[SELL1]
           ,[SELL2]
           ,[C_DATE]
           ,[ACTIVE]
           ,[OFFER_CODE]
           ,[IS_USED]
           ,[QTY_IN]
           ,[QTY_OUT]
           ,[TOTAL_OUT]
           ,[EXPENSES_OUT]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM])
     SELECT
           @COMPANY_TITAL+ CAST(@BILL_BUY_MIN AS varchar) 
           ,@BILL_BUY_MIN
           ,ITEM_CODE
           ,QTY 
           ,UNIT_NAME 
           , UNIT_QTY 
           , STORE_CODE 
           , EXP_DATE 
           , PRICE_BUY 
           , CURRANCY_EQUAL 
           , PRICE 
           , TOTAL 
           , EXPENSES 
           , TOTAL_EXPENSES 
           , COST 
           , TOTAL_COST 
           , 0 
           , 0 
           , C_DATE 
           , ACTIVE 
           , 11 
           , 0 
           , QTY
           , 0
           , 0
           , 0
           , 0 
           , 0 FROM T_FACTORY WHERE BILL_NUMBER=@BILL_CURSOR
UPDATE T_FACTORY SET BILL_BRANCH_BUY=@BILL_BUY_MIN WHERE BILL_NUMBER=@BILL_CURSOR
FETCH NEXT FROM BOX_CURSOR INTO @BILL_CURSOR


END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR



SET @SUBMIT_FLAG=1

END	--END OF PROGRAM





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_RE_ITEMS_SELL_BUY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_RE_ITEMS_SELL_BUY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[P_RE_ITEMS_SELL_BUY]


@SUBMIT_FLAG INT OUTPUT

AS


DECLARE BOX_CURSOR CURSOR FOR SELECT  ITEM_CODE FROM T_ITEMS  WHERE ACTIVE=1;


DECLARE
@ITEM_CODE_CURSOR INT,
@BILL_BUY_MAX INT,
@SELL1_BUY	float	,
@SELL2_BUY	float


BEGIN
SET @SUBMIT_FLAG=0


     
OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @ITEM_CODE_CURSOR
WHILE @@FETCH_STATUS = 0
BEGIN

SET @SELL1_BUY=0
SET @SELL2_BUY=0
SELECT @BILL_BUY_MAX=ISNULL(MAX(BILL_NUMBER),0) FROM  T_BUY_DETAILS WHERE ACTIVE=1 AND ITEM_CODE=@ITEM_CODE_CURSOR
IF @BILL_BUY_MAX=0 GOTO ASDDSA

SELECT TOP(1) @SELL1_BUY=ISNULL(SELL1,0),@SELL2_BUY=ISNULL(SELL2,0) FROM  T_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE_CURSOR AND BILL_NUMBER=@BILL_BUY_MAX   ORDER BY BILL_NUMBER DESC




IF @SELL1_BUY<>0 AND @BILL_BUY_MAX>0
BEGIN
UPDATE T_ITEM_UNIT SET PRICE_SALE_1=@SELL1_BUY   WHERE ITEM_CODE=@ITEM_CODE_CURSOR AND UNIT_CODE=1
UPDATE T_ITEMS SET SELL= @SELL1_BUY WHERE ITEM_CODE=@ITEM_CODE_CURSOR
END
IF @SELL2_BUY<>0 AND @BILL_BUY_MAX>0
BEGIN
UPDATE T_ITEM_UNIT SET PRICE_SALE_1=@SELL2_BUY   WHERE ITEM_CODE=@ITEM_CODE_CURSOR AND UNIT_CODE=2
UPDATE T_ITEMS SET SELL2= @SELL2_BUY WHERE ITEM_CODE=@ITEM_CODE_CURSOR
END
 ASDDSA:

FETCH NEXT FROM BOX_CURSOR INTO @ITEM_CODE_CURSOR


END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR



SET @SUBMIT_FLAG=1

END	--END OF PROGRAM




























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_RE_ITEMS_TRANS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_RE_ITEMS_TRANS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[P_RE_ITEMS_TRANS]

@ITEM_CODE  INT 
 

AS

	
 

DECLARE
 
@MAX_ID_SALES AS INT
BEGIN
 
     
 SELECT @MAX_ID_SALES=ISNULL(MAX(T_ID),0) FROM T_SALES_DETAILS WHERE ITEM_CODE=@ITEM_CODE
 UPDATE T_SALES_DETAILS SET IS_TRANS=0  WHERE T_ID=@MAX_ID_SALES

 

END	--END OF PROGRAM





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM__SALES_PRICE_COST_DATE_LAST_COST]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM__SALES_PRICE_COST_DATE_LAST_COST]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

















CREATE PROCEDURE [dbo].[P_UPDATE_ITEM__SALES_PRICE_COST_DATE_LAST_COST]
@D1 DATE,
@D2 DATE,
@SUBMIT_FLAG INT OUTPUT

AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  BILL_BRANCH FROM T_SALES WHERE BILL_DATE BETWEEN @D1 AND @D2 AND ACTIVE=1   ;

DECLARE
@BILL_BRANCH NVARCHAR(MAX),
@D_SALES_DATE DATE,
@ITEM_CODE INT,
@T_ID_ITEMS_CERSUR INT,
@UNIT_CODE INT,
@UNIT_NAME	nvarchar(50)	,
@UNIT_QTY	float	,
@COST	float	,
@TOTAL_COST	float	,
@PRICE FLOAT

BEGIN TRAN
BEGIN

OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @BILL_BRANCH
WHILE @@FETCH_STATUS = 0
BEGIN

SET @TOTAL_COST=0

DECLARE ITEMS_CURSOR CURSOR FOR SELECT  T_ID FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH  ;
OPEN ITEMS_CURSOR

FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_ITEMS_CERSUR
WHILE @@FETCH_STATUS = 0
BEGIN
SET @COST=0

SELECT @D_SALES_DATE=BILL_DATE FROM T_SALES WHERE BILL_BRANCH LIKE @BILL_BRANCH

SELECT @ITEM_CODE=ITEM_CODE,@UNIT_NAME=UNIT_NAME,@UNIT_QTY=UNIT_QTY FROM T_SALES_DETAILS WHERE T_ID=@T_ID_ITEMS_CERSUR


SET @COST=(SELECT TOP(1) ISNULL((PRICE/UNIT_QTY),0) FROM V_BUY_DETAILS_DATE  WHERE ITEM_CODE=@ITEM_CODE   AND BILL_DATE <=@D_SALES_DATE ORDER BY BILL_NUMBER DESC )


 UPDATE T_SALES_DETAILS SET [COST]=@COST*[CURRANCY_EQUAL] WHERE T_ID=@T_ID_ITEMS_CERSUR

FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_ITEMS_CERSUR
END
CLOSE ITEMS_CURSOR
DEALLOCATE ITEMS_CURSOR


SET @TOTAL_COST=(SELECT  SUM(TOTAL_COST) FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH)
UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST WHERE BILL_BRANCH LIKE @BILL_BRANCH



FETCH NEXT FROM BOX_CURSOR INTO @BILL_BRANCH

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

commit
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_BARCODE_PRINT_FROM_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_BARCODE_PRINT_FROM_TEMP]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_BARCODE_PRINT_FROM_TEMP]
@BILL_NUMBER	INT	,
@SUBMIT_FLAG INT OUTPUT

AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID FROM T_SALES_TEMP WHERE BILL_NUMBER = @BILL_NUMBER AND ITEM_CODE<>0   ;

DECLARE
@RowCount INT,
@QTY	float	,
@COMPANY_TITAL	nvarchar(50)	,
@T_ID_CURSOR INT,
@ITEM_CODE INT,
@TYPE_VAL INT,
@UNIT_CODE INT,
@UNIT_NAME	nvarchar(50)	,
@UNIT_QTY	float	,
@ITEM_NAME	nvarchar(100)	,
@ITEM_BARCODE	nvarchar(50)	,
@PRICE FLOAT
BEGIN TRAN
BEGIN
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
DELETE FROM T_BARCODE_PRINT
OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CURSOR
WHILE @@FETCH_STATUS = 0
BEGIN
set @ITEM_BARCODE=N''''
SELECT @ITEM_CODE=ITEM_CODE,@ITEM_NAME=ITEM_NAME ,@UNIT_NAME=UNIT_NAME,@PRICE=PRICE,@QTY=QTY   FROM T_SALES_TEMP WHERE T_ID=@T_ID_CURSOR 
select TOP(1) @UNIT_QTY=UNIT_QTY from T_ITEM_UNIT WHERE ITEM_CODE=@ITEM_CODE AND UNIT_NAME=@UNIT_NAME
IF @UNIT_QTY=1
BEGIN
SET @UNIT_CODE=1
SET @TYPE_VAL=0
END
ELSE    --  EEEEEELLLLLSSSSSEEEE
BEGIN
SET @UNIT_CODE=2
SET @TYPE_VAL=1
END
print @UNIT_CODE
IF EXISTS (select  ISNULL(ITEM_BARCODE,N'''') from T_ITEM_BARCODE where  ITEM_CODE=@ITEM_CODE and UNIT_CODE=@UNIT_CODE AND LEN(ITEM_BARCODE)<>0)
BEGIN
    select top(1) @ITEM_BARCODE=ISNULL(ITEM_BARCODE,N'''') from T_ITEM_BARCODE where  ITEM_CODE=@ITEM_CODE and UNIT_CODE=@UNIT_CODE AND LEN(ITEM_BARCODE)<>0 ORDER BY TYPE_VAL ASC
END
ELSE
 -- set @ITEM_BARCODE= '''' 
if len(RTRIM(@ITEM_BARCODE))=0
begin

set @ITEM_BARCODE=(SELECT ISNULL(
    MAX(
        CONVERT(
            numeric, 
            SUBSTRING(ITEM_BARCODE, PATINDEX(''%[0-9]%'', ITEM_BARCODE), LEN(ITEM_BARCODE))
        )
    ), 10000
) + 1
FROM T_ITEM_BARCODE
WHERE 
    LEN(ITEM_BARCODE) BETWEEN 1 AND 6
    AND TRY_CONVERT(
        numeric, 
        SUBSTRING(ITEM_BARCODE, PATINDEX(''%[0-9]%'', ITEM_BARCODE), LEN(ITEM_BARCODE))
    ) IS NOT NULL
    AND CONVERT(
        numeric, 
        SUBSTRING(ITEM_BARCODE, PATINDEX(''%[0-9]%'', ITEM_BARCODE), LEN(ITEM_BARCODE))
    ) BETWEEN 10000 AND 99999)



INSERT INTO [dbo].[T_ITEM_BARCODE]
           ([ITEM_CODE]
           ,[TYPE_VAL]
           ,[ITEM_BARCODE]
           ,[UNIT_CODE]
           ,[UNIT_NAME]
           ,[C_DATE])
     VALUES
           (@ITEM_CODE
           , @TYPE_VAL
           ,@ITEM_BARCODE
           ,@UNIT_CODE
           ,@UNIT_NAME
           ,getdate())
if @UNIT_CODE=1 update T_ITEMS set ITEM_BARCODE=@ITEM_BARCODE where ITEM_CODE=@ITEM_CODE
end


SET @RowCount=0
WHILE @RowCount < @QTY
BEGIN
	INSERT INTO [dbo].[T_BARCODE_PRINT]
           ([ITEM_NAME]
           ,[ITEM_BARCODE]
           ,[PRICE]
           ,[COMPANY]
           ,[BILL_NUMBER])
     VALUES
           (@ITEM_NAME
           ,@ITEM_BARCODE
           ,@PRICE
           ,@COMPANY_TITAL
           ,@BILL_NUMBER)
	SET @RowCount = @RowCount + 1
END





FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CURSOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

commit
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_BARCODE_RND]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_BARCODE_RND]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_BARCODE_RND]
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET @SUBMIT_FLAG = 0;

    BEGIN TRY
        DECLARE 
            @ITEMS_CERSUR   INT,
            @CC_BAR         INT,
            @UNIT_NAME      NVARCHAR(100),
            @UNIT_CODE      INT,
            @CATEGORY_CODE  INT,
            @return_value   INT,
            @ITEM_BARCODE   VARCHAR(20),   -- إخراج المولّد نصّي
            @RND_CODE       VARCHAR(20);   -- القيمة التي سنحفظها

        -- مكرّس محلي وسريع
        DECLARE BOX_CURSOR CURSOR LOCAL FAST_FORWARD FOR 
            SELECT ITEM_CODE
            FROM dbo.T_ITEMS
            WHERE ACTIVE = 1
              AND (ITEM_BARCODE IS NULL OR LEN(LTRIM(RTRIM(ITEM_BARCODE))) = 0);

        OPEN BOX_CURSOR;
        FETCH NEXT FROM BOX_CURSOR INTO @ITEMS_CERSUR;

        WHILE @@FETCH_STATUS = 0
        BEGIN
            -- اجلب بيانات أساسية للعنصر
            SELECT 
                @CATEGORY_CODE = CATEGORY_CODE,
                @UNIT_NAME     = UNIT_NAME
            FROM dbo.T_ITEMS WITH (UPDLOCK, HOLDLOCK)
            WHERE ITEM_CODE = @ITEMS_CERSUR;

            IF @CATEGORY_CODE IS NULL
            BEGIN
                -- عنصر غير صالح؛ تخطَّاه
                FETCH NEXT FROM BOX_CURSOR INTO @ITEMS_CERSUR;
                CONTINUE;
            END

            -- توليد الباركود الصحيح (يمر عبر بروسيجر مضبوط)
            EXEC @return_value = dbo.P_GENERATE_BARCODE
                 @CATEGORY_CODE = @CATEGORY_CODE,
                 @ITEM_BARCODE  = @ITEM_BARCODE OUTPUT;

            SET @RND_CODE = @ITEM_BARCODE;

            -- حماية إضافية من التكرار النادر (سباق)
            IF EXISTS (SELECT 1 FROM dbo.T_ITEM_BARCODE WHERE ITEM_BARCODE = @RND_CODE)
            BEGIN
                -- أعد المحاولة مرة واحدة إضافية
                EXEC @return_value = dbo.P_GENERATE_BARCODE
                     @CATEGORY_CODE = @CATEGORY_CODE,
                     @ITEM_BARCODE  = @ITEM_BARCODE OUTPUT;

                SET @RND_CODE = @ITEM_BARCODE;

                IF EXISTS (SELECT 1 FROM dbo.T_ITEM_BARCODE WHERE ITEM_BARCODE = @RND_CODE)
                BEGIN
                    -- لو تكرر مرة ثانية، تخطَّ العنصر
                    FETCH NEXT FROM BOX_CURSOR INTO @ITEMS_CERSUR;
                    CONTINUE;
                END
            END

            BEGIN TRAN;

                -- حدّث T_ITEMS
                UPDATE dbo.T_ITEMS
                SET ITEM_BARCODE = @RND_CODE
                WHERE ITEM_CODE = @ITEMS_CERSUR;

                -- هل يوجد سجل TYPE_VAL=0؟
                SELECT @CC_BAR = COUNT(*)
                FROM dbo.T_ITEM_BARCODE WITH (UPDLOCK, HOLDLOCK)
                WHERE ITEM_CODE = @ITEMS_CERSUR
                  AND TYPE_VAL = 0;

                -- UNIT_CODE ثابت 1 كما في كودك؛ غيّره إذا أردت جلبه من T_ITEM_UNIT
                SET @UNIT_CODE = 1;

                IF @CC_BAR > 0
                BEGIN
                    UPDATE dbo.T_ITEM_BARCODE
                    SET ITEM_BARCODE = @RND_CODE
                    WHERE ITEM_CODE = @ITEMS_CERSUR
                      AND TYPE_VAL = 0;
                END
                ELSE
                BEGIN
                    INSERT INTO dbo.T_ITEM_BARCODE
                        (C_DATE, ITEM_CODE, ITEM_BARCODE, TYPE_VAL, UNIT_CODE, UNIT_NAME)
                    VALUES
                        (GETDATE(), @ITEMS_CERSUR, @RND_CODE, 0, @UNIT_CODE, @UNIT_NAME);
                END

            COMMIT;

            FETCH NEXT FROM BOX_CURSOR INTO @ITEMS_CERSUR;
        END

        CLOSE BOX_CURSOR;
        DEALLOCATE BOX_CURSOR;

        SET @SUBMIT_FLAG = 1;
    END TRY
    BEGIN CATCH
        IF XACT_STATE() <> 0 ROLLBACK;
        SET @SUBMIT_FLAG = 0;

        DECLARE 
            @msg   NVARCHAR(4000) = ERROR_MESSAGE(),
            @num   INT            = ERROR_NUMBER(),
            @state INT            = ERROR_STATE(),
            @sev   INT            = ERROR_SEVERITY(),
            @line  INT            = ERROR_LINE();

        RAISERROR(N''P_UPDATE_ITEM_BARCODE_RND failed: %s (Err %d, State %d, Line %d)'',
                  @sev, 1, @msg, @num, @state, @line);
    END CATCH
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_BARCODE_RND_REGENERATE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_BARCODE_RND_REGENERATE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_BARCODE_RND_REGENERATE]
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET @SUBMIT_FLAG = 0;

    BEGIN TRY
        BEGIN TRAN;

        -- 1) إعادة التهيئة بشكل آمن:
        --    أ) تصفير باركود العناصر
        UPDATE dbo.T_ITEMS
        SET ITEM_BARCODE = NULL
        WHERE ITEM_CODE > 0;

        --    ب) حذف سجلات الباركود الافتراضي (TYPE_VAL=0) بدلاً من وضعها فارغة
        DELETE FROM dbo.T_ITEM_BARCODE
        WHERE TYPE_VAL = 0;

        COMMIT;

        DECLARE 
            @ITEMS_CERSUR   INT,
            @CC_BAR         INT,
            @UNIT_NAME      NVARCHAR(100),
            @UNIT_CODE      INT,
            @CATEGORY_CODE  INT,
            @return_value   INT,
            @ITEM_BARCODE   VARCHAR(20),  -- إخراج نصّي من المولّد
            @RND_CODE       VARCHAR(20);

        -- 2) كيرسور محلي وسريع لكل العناصر النشطة بلا باركود بعد التصفير
        DECLARE BOX_CURSOR CURSOR LOCAL FAST_FORWARD FOR
            SELECT ITEM_CODE
            FROM dbo.T_ITEMS
            WHERE ACTIVE = 1
              AND (ITEM_BARCODE IS NULL OR LEN(LTRIM(RTRIM(ITEM_BARCODE))) = 0);

        OPEN BOX_CURSOR;
        FETCH NEXT FROM BOX_CURSOR INTO @ITEMS_CERSUR;

        WHILE @@FETCH_STATUS = 0
        BEGIN
            -- جلب بيانات أساسية للعنصر (مع قفل خفيف لمنع سباقات التحديث)
            SELECT 
                @CATEGORY_CODE = CATEGORY_CODE,
                @UNIT_NAME     = UNIT_NAME
            FROM dbo.T_ITEMS WITH (UPDLOCK, HOLDLOCK)
            WHERE ITEM_CODE = @ITEMS_CERSUR;

            IF @CATEGORY_CODE IS NULL
            BEGIN
                -- عنصر غير موجود/غير صالح → تخطاه
                FETCH NEXT FROM BOX_CURSOR INTO @ITEMS_CERSUR;
                CONTINUE;
            END

            -- توليد باركود جديد حسب الفئة
            EXEC @return_value = dbo.P_GENERATE_BARCODE
                 @CATEGORY_CODE = @CATEGORY_CODE,
                 @ITEM_BARCODE  = @ITEM_BARCODE OUTPUT;

            SET @RND_CODE = @ITEM_BARCODE;

            -- حماية إضافية: لو صادف تكرار (احتمال سباق)، أعد محاولة واحدة
            IF EXISTS (SELECT 1 FROM dbo.T_ITEM_BARCODE WHERE ITEM_BARCODE = @RND_CODE)
            BEGIN
                EXEC @return_value = dbo.P_GENERATE_BARCODE
                     @CATEGORY_CODE = @CATEGORY_CODE,
                     @ITEM_BARCODE  = @ITEM_BARCODE OUTPUT;

                SET @RND_CODE = @ITEM_BARCODE;

                IF EXISTS (SELECT 1 FROM dbo.T_ITEM_BARCODE WHERE ITEM_BARCODE = @RND_CODE)
                BEGIN
                    -- ما زال مكررًا → تخطَّ هذا العنصر
                    FETCH NEXT FROM BOX_CURSOR INTO @ITEMS_CERSUR;
                    CONTINUE;
                END
            END

            -- وحدة افتراضية كما في كودك
            SET @UNIT_CODE = 1;

            BEGIN TRAN;

                -- تحديث العنصر
                UPDATE dbo.T_ITEMS
                SET ITEM_BARCODE = @RND_CODE
                WHERE ITEM_CODE = @ITEMS_CERSUR;

                -- إدراج سجل TYPE_VAL=0 من جديد
                -- (بعد أن حذفناه بالأعلى لنضمن نظافة البيانات)
                INSERT INTO dbo.T_ITEM_BARCODE
                    (C_DATE, ITEM_CODE, ITEM_BARCODE, TYPE_VAL, UNIT_CODE, UNIT_NAME)
                VALUES
                    (GETDATE(), @ITEMS_CERSUR, @RND_CODE, 0, @UNIT_CODE, @UNIT_NAME);

            COMMIT;

            FETCH NEXT FROM BOX_CURSOR INTO @ITEMS_CERSUR;
        END

        CLOSE BOX_CURSOR;
        DEALLOCATE BOX_CURSOR;

        SET @SUBMIT_FLAG = 1;
    END TRY
    BEGIN CATCH
        IF XACT_STATE() <> 0 ROLLBACK;

        SET @SUBMIT_FLAG = 0;

        DECLARE 
            @msg   NVARCHAR(4000) = ERROR_MESSAGE(),
            @num   INT            = ERROR_NUMBER(),
            @state INT            = ERROR_STATE(),
            @sev   INT            = ERROR_SEVERITY(),
            @line  INT            = ERROR_LINE();

        RAISERROR(N''P_UPDATE_ITEM_BARCODE_RND_REGENERATE failed: %s (Err %d, State %d, Line %d)'',
                  @sev, 1, @msg, @num, @state, @line);
    END CATCH
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_BARCODE_UNIT_1]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_BARCODE_UNIT_1]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


create PROCEDURE [dbo].[P_UPDATE_ITEM_BARCODE_UNIT_1]

@SUBMIT_FLAG INT OUTPUT

AS
DECLARE


@ITEMS_CERSUR INT,

@UNIT_QTY	float	,
@UNIT_NAME	NVARCHAR(MAX)	

BEGIN


DECLARE BOX_CURSOR CURSOR FOR SELECT  ITEM_CODE FROM T_ITEM_UNIT WHERE UNIT_CODE=1  ;

OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @ITEMS_CERSUR
WHILE @@FETCH_STATUS = 0
BEGIN

SELECT @UNIT_NAME=UNIT_NAME FROM T_ITEM_UNIT WHERE  ITEM_CODE=@ITEMS_CERSUR and UNIT_CODE=1
update T_ITEM_BARCODE set UNIT_NAME=@UNIT_NAME WHERE  ITEM_CODE=@ITEMS_CERSUR AND UNIT_CODE=1



FETCH NEXT FROM BOX_CURSOR INTO @ITEMS_CERSUR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_BARCODE_UNIT_2]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_BARCODE_UNIT_2]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_BARCODE_UNIT_2]

@SUBMIT_FLAG INT OUTPUT

AS
DECLARE


@ITEMS_CERSUR INT,

@UNIT_QTY	float	,
@UNIT_NAME	NVARCHAR(MAX)	

BEGIN


DECLARE BOX_CURSOR CURSOR FOR SELECT  ITEM_CODE FROM T_ITEMS WHERE ACTIVE=1  ;

OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @ITEMS_CERSUR
WHILE @@FETCH_STATUS = 0
BEGIN

SELECT @UNIT_NAME=UNIT2_NAME FROM T_ITEMS WHERE  ITEM_CODE=@ITEMS_CERSUR
update T_ITEM_BARCODE set UNIT_NAME=@UNIT_NAME WHERE  ITEM_CODE=@ITEMS_CERSUR AND UNIT_CODE=2



FETCH NEXT FROM BOX_CURSOR INTO @ITEMS_CERSUR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_CLIENT_NAME]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_CLIENT_NAME]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_CLIENT_NAME]
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET @SUBMIT_FLAG = 0;

    BEGIN TRY
        -- تحديث CLIENT_NAME_BEST لكل عنصر بناءً على أول سعر في V_BUY_DETAILS، وفي حال عدم وجود سجل يتم تعيين القيمة الافتراضية
        UPDATE T
        SET T.CLIENT_NAME_BEST = ISNULL(B.CLIENT_NAME, N''رصيد اولي'')
        FROM T_ITEMS T
        OUTER APPLY
        (
            SELECT TOP(1) CLIENT_NAME
            FROM V_BUY_DETAILS
            WHERE ITEM_CODE = T.ITEM_CODE
            ORDER BY PRICE ASC
        ) B
        WHERE T.ACTIVE = 1;

        -- في حال بقيت بعض السجلات فارغة (NULL)، تعيين القيمة الافتراضية لها
        UPDATE T_ITEMS
        SET CLIENT_NAME_BEST = N''رصيد اولي''
        WHERE CLIENT_NAME_BEST IS NULL;

        SET @SUBMIT_FLAG = 1;
    END TRY
    BEGIN CATCH
        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_CODE_ERROR]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_CODE_ERROR]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_CODE_ERROR]
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE 
            @ITEMS_CODE_CERSUR INT,
            @ITEM_NAME_CERSUR NVARCHAR(MAX),
            @CC_COUNT INT,
            @ITEMS_CODE INT,
            @BILL_CERSUR NVARCHAR(MAX),
            @UNIT_NAME_SALES NVARCHAR(MAX),
            @UNIT_CODE INT,
            @ITEM_NAME NVARCHAR(MAX);

        -- استخدام cursor للحصول على الفروق بين T_SALES_DETAILS وT_ITEMS بناءً على (ITEM_CODE, ITEM_NAME)
        DECLARE BOX_CURSOR CURSOR LOCAL FAST_FORWARD FOR
            SELECT ITEM_CODE, ITEM_NAME
            FROM (
                    SELECT ITEM_CODE, ITEM_NAME FROM T_SALES_DETAILS
                    EXCEPT
                    SELECT ITEM_CODE, ITEM_NAME FROM T_ITEMS
                 ) AS Diff;

        OPEN BOX_CURSOR;
        FETCH NEXT FROM BOX_CURSOR INTO @ITEMS_CODE_CERSUR, @ITEM_NAME_CERSUR;

        WHILE @@FETCH_STATUS = 0
        BEGIN
            -- التحقق من وجود تطابق بناءً على ITEM_NAME (باستخدام LIKE)
            SELECT @CC_COUNT = COUNT(ITEM_CODE)
            FROM T_ITEMS
            WHERE ITEM_NAME LIKE @ITEM_NAME_CERSUR;

            IF @CC_COUNT <> 0
            BEGIN
                -- استرجاع ITEM_CODE الصحيح من T_ITEMS
                SELECT TOP(1) @ITEMS_CODE = ITEM_CODE
                FROM T_ITEMS
                WHERE ITEM_NAME LIKE @ITEM_NAME_CERSUR;

                -- استخدام cursor داخلي لاستعراض BILL_BRANCH في T_SALES_DETAILS لهذا العنصر
                DECLARE SALES_CURSOR CURSOR LOCAL FAST_FORWARD FOR
                    SELECT BILL_BRANCH
                    FROM T_SALES_DETAILS
                    WHERE ACTIVE = 1
                      AND ITEM_CODE = @ITEMS_CODE_CERSUR
                      AND ITEM_NAME LIKE @ITEM_NAME_CERSUR;

                OPEN SALES_CURSOR;
                FETCH NEXT FROM SALES_CURSOR INTO @BILL_CERSUR;

                WHILE @@FETCH_STATUS = 0
                BEGIN
                    -- تحديث ITEM_CODE في T_SALES_DETAILS باستخدام القيمة الصحيحة
                    UPDATE T_SALES_DETAILS
                    SET ITEM_CODE = @ITEMS_CODE
                    WHERE BILL_BRANCH LIKE @BILL_CERSUR
                      AND ITEM_CODE = @ITEMS_CODE_CERSUR
                      AND ITEM_NAME LIKE @ITEM_NAME_CERSUR;

                    -- حذف السجلات القديمة من T_STORE_BOX
                    DELETE FROM T_STORE_BOX
                    WHERE BILL_BRANCH LIKE @BILL_CERSUR
                      AND B_CODE = 2;

                    -- إعادة إدراج السجلات في T_STORE_BOX مع تحديث UNIT_CODE
                    INSERT INTO T_STORE_BOX
                    (
                        BILL_BRANCH,
                        BILL_NUMBER,
                        BILL_DATE,
                        B_CODE,
                        WAJBA_CODE,
                        STORE_CODE,
                        EXP_DATE,
                        ITEM_CODE,
                        UNIT_CODE,
                        ST_IN,
                        ST_OUT,
                        QTY_UNIT,
                        ACTIVE
                    )
                    SELECT 
                        BILL_BRANCH,
                        BILL_NUMBER,
                        (SELECT BILL_DATE FROM T_SALES WHERE BILL_BRANCH LIKE @BILL_CERSUR),
                        2,
                        0,
                        STORE_CODE,
                        NULL,
                        ITEM_CODE,
                        (SELECT TOP(1) UNIT_CODE 
                         FROM T_ITEM_UNIT 
                         WHERE ITEM_CODE = 
                              (SELECT TOP(1) ITEM_CODE 
                               FROM T_SALES_DETAILS
                               WHERE BILL_BRANCH LIKE @BILL_CERSUR 
                                 AND ITEM_CODE = T_SALES_DETAILS.ITEM_CODE
                                 AND UNIT_NAME LIKE T_SALES_DETAILS.UNIT_NAME)
                        ),
                        0,
                        QTY,
                        UNIT_QTY,
                        1
                    FROM T_SALES_DETAILS 
                    WHERE BILL_BRANCH LIKE @BILL_CERSUR;

                    FETCH NEXT FROM SALES_CURSOR INTO @BILL_CERSUR;
                END

                CLOSE SALES_CURSOR;
                DEALLOCATE SALES_CURSOR;
            END

            FETCH NEXT FROM BOX_CURSOR INTO @ITEMS_CODE_CERSUR, @ITEM_NAME_CERSUR;
        END

        CLOSE BOX_CURSOR;
        DEALLOCATE BOX_CURSOR;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_NAME_SALES_CHANGE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_NAME_SALES_CHANGE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_NAME_SALES_CHANGE]
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET @SUBMIT_FLAG = 0;

    BEGIN TRY
        -- تحديث أسماء الأصناف في T_SALES_DETAILS بناءً على أسماء الأصناف في T_ITEMS
        UPDATE S
        SET S.ITEM_NAME = I.ITEM_NAME
        FROM T_SALES_DETAILS S
        INNER JOIN T_ITEMS I ON S.ITEM_CODE = I.ITEM_CODE
        WHERE I.ACTIVE = 1
          AND I.ITEM_CODE > 0;

        SET @SUBMIT_FLAG = 1;
    END TRY
    BEGIN CATCH
        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH
END;

' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_NAME_SALES_CHANGE_CODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_NAME_SALES_CHANGE_CODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_NAME_SALES_CHANGE_CODE]
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET @SUBMIT_FLAG = 0;

    BEGIN TRY
        -- تحديث ITEM_CODE في T_SALES_DETAILS باستخدام انضمام مع T_ITEMS بناءً على مطابقة ITEM_NAME باستخدام LIKE
        UPDATE S
        SET S.ITEM_CODE = I.ITEM_CODE
        FROM T_SALES_DETAILS S
        INNER JOIN T_ITEMS I ON S.ITEM_NAME LIKE I.ITEM_NAME
        WHERE I.ACTIVE = 1
          AND I.ITEM_CODE > 0;

        SET @SUBMIT_FLAG = 1;
    END TRY
    BEGIN CATCH
        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_BUY_SELL2]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_BUY_SELL2]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


















CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_BUY_SELL2]

@SUBMIT_FLAG INT OUTPUT

AS
DECLARE


@ITEMS_CERSUR INT,
@ITEMS_CERSUR_UNIT INT,
@UNIT_QTY	float	,
@SELL2	float	,
@SELL1	float	

BEGIN


DECLARE BOX_CURSOR CURSOR FOR SELECT  ITEM_CODE FROM T_ITEMS WHERE ACTIVE=1  ;

OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @ITEMS_CERSUR
WHILE @@FETCH_STATUS = 0
BEGIN

SELECT TOP(1) @UNIT_QTY=UNIT_QTY,@SELL2=PRICE_SALE_1  FROM T_ITEM_UNIT WHERE ITEM_CODE=@ITEMS_CERSUR ORDER BY UNIT_QTY DESC
SELECT @SELL1=PRICE_SALE_1  FROM T_ITEM_UNIT WHERE ITEM_CODE=@ITEMS_CERSUR AND UNIT_QTY=1

--SELECT @COST=ISNULL(COST,0) FROM T_ITEMS WHERE  ITEM_CODE=@ITEMS_CERSUR

update T_BUY_DETAILS set SELL2=@SELL2,SELL1=@SELL1 WHERE  ITEM_CODE=@ITEMS_CERSUR 

FETCH NEXT FROM BOX_CURSOR INTO @ITEMS_CERSUR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR












SET @SUBMIT_FLAG=1

END	--END OF PROGRAM




































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_AVG_CURSER]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_AVG_CURSER]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_AVG_CURSER]
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET @SUBMIT_FLAG = 0;

    BEGIN TRY
        BEGIN TRANSACTION;

        DECLARE 
            @ITEM_CODE_CURSER INT,
            @BILL_BRANCH NVARCHAR(MAX),
            @T_ID_ITEMS_CERSUR INT,
            @ITEM_CODE INT,
            @UNIT_NAME NVARCHAR(50),
            @UNIT_QTY FLOAT,
            @COST FLOAT,
            @TOTAL_COST FLOAT,
            @PRICE FLOAT;  -- غير مستخدم في الكود الأصلي

        -- المؤشر الخارجي: استرجاع رموز الأصناف المميزة من T_ITEM_AVG_CURSER
        DECLARE BOX_CURSOR CURSOR LOCAL FAST_FORWARD FOR
            SELECT DISTINCT ITEM_CODE 
            FROM T_ITEM_AVG_CURSER;

        OPEN BOX_CURSOR;
        FETCH NEXT FROM BOX_CURSOR INTO @ITEM_CODE_CURSER;
        WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @TOTAL_COST = 0;

            -- المؤشر الداخلي: استرجاع أرقام T_ID من T_SALES_DETAILS للعنصر الحالي
            DECLARE ITEMS_CURSOR CURSOR LOCAL FAST_FORWARD FOR
                SELECT T_ID 
                FROM T_SALES_DETAILS 
                WHERE ITEM_CODE = @ITEM_CODE_CURSER;
            OPEN ITEMS_CURSOR;
            FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_ITEMS_CERSUR;
            WHILE @@FETCH_STATUS = 0
            BEGIN
                SET @COST = 0;

                -- استرجاع تفاصيل الصف من T_SALES_DETAILS
                SELECT 
                    @ITEM_CODE = ITEM_CODE,
                    @UNIT_NAME = UNIT_NAME,
                    @UNIT_QTY = UNIT_QTY,
                    @BILL_BRANCH = BILL_BRANCH
                FROM T_SALES_DETAILS
                WHERE T_ID = @T_ID_ITEMS_CERSUR;

                -- حساب متوسط الشراء للصنف من العرض المناسب
                SET @COST = (SELECT ISNULL(AVG_BUY, 0)
                             FROM V_ITEM_AVG_COST_BUY_MIN_UNIT
                             WHERE ITEM_CODE = @ITEM_CODE);

                -- تحديث السعر المتوسط للتكلفة في T_ITEM_UNIT للعنصر
                UPDATE T_ITEM_UNIT
                SET PRICE_AVG_COST = @COST * UNIT_QTY
                WHERE ITEM_CODE = @ITEM_CODE_CURSER;

                -- تحديث سجل الصنف في T_ITEMS (نفترض هنا أن العمود المراد تحديثه هو COST)
                UPDATE T_ITEMS
                SET COST = @COST
                WHERE ITEM_CODE = @ITEM_CODE_CURSER;

                -- تحديث تكلفة البيع في T_SALES_DETAILS باستخدام سعر التكلفة والحقل CURRANCY_EQUAL
                UPDATE T_SALES_DETAILS
                SET COST = @COST * UNIT_QTY * CURRANCY_EQUAL
                WHERE T_ID = @T_ID_ITEMS_CERSUR;

                -- حساب إجمالي التكلفة للفواتير التي يحملها نفس BILL_BRANCH
                SET @TOTAL_COST = (SELECT SUM(TOTAL_COST)
                                   FROM T_SALES_DETAILS
                                   WHERE BILL_BRANCH LIKE @BILL_BRANCH);

                -- تحديث إجمالي التكلفة في T_SALES للفاتورة ذات BILL_BRANCH المطابقة
                UPDATE T_SALES
                SET TOTAL_COST = @TOTAL_COST
                WHERE BILL_BRANCH LIKE @BILL_BRANCH;

                FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_ITEMS_CERSUR;
            END

            CLOSE ITEMS_CURSOR;
            DEALLOCATE ITEMS_CURSOR;

            -- حذف سجلات هذا الصنف من T_ITEM_AVG_CURSER بعد معالجته
            DELETE FROM T_ITEM_AVG_CURSER
            WHERE ITEM_CODE = @ITEM_CODE_CURSER;

            FETCH NEXT FROM BOX_CURSOR INTO @ITEM_CODE_CURSER;
        END

        CLOSE BOX_CURSOR;
        DEALLOCATE BOX_CURSOR;

        SET @SUBMIT_FLAG = 1;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;
        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH
END;

 ' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_AVG_CURSER_WEIGHT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_AVG_CURSER_WEIGHT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_AVG_CURSER_WEIGHT]
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET @SUBMIT_FLAG = 0;

    BEGIN TRY
        BEGIN TRANSACTION;

        DECLARE @ITEM_CODE_CURSER INT;

        DECLARE AVG_ITEM_CURSOR CURSOR LOCAL FAST_FORWARD FOR
            SELECT DISTINCT ITEM_CODE FROM T_ITEM_AVG_CURSER;

        OPEN AVG_ITEM_CURSOR;
        FETCH NEXT FROM AVG_ITEM_CURSOR INTO @ITEM_CODE_CURSER;
        WHILE @@FETCH_STATUS = 0
        BEGIN
            -- استدعاء الإجراء [PV_GET_FILL_AVG_ITEM_NOT_SELECT] باستخدام sp_executesql وتمرير المعامل بطريقة آمنة
            DECLARE @sql NVARCHAR(MAX);
            SET @sql = N''EXEC [PV_GET_FILL_AVG_ITEM_NOT_SELECT] @ITEM_CODE = @pItemCode'';
            EXEC sp_executesql @sql, N''@pItemCode INT'', @pItemCode = @ITEM_CODE_CURSER;

            -- حذف السجلات للعنصر المعالج من T_ITEM_AVG_CURSER
            DELETE FROM T_ITEM_AVG_CURSER WHERE ITEM_CODE = @ITEM_CODE_CURSER;

            FETCH NEXT FROM AVG_ITEM_CURSOR INTO @ITEM_CODE_CURSER;
        END

        CLOSE AVG_ITEM_CURSOR;
        DEALLOCATE AVG_ITEM_CURSOR;

        SET @SUBMIT_FLAG = 1;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;
        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_DATE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE]
    @D1 DATE,
    @D2 DATE,
    @PRICE_TYPE INT,
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    SET @SUBMIT_FLAG = 0;

    BEGIN TRY
        BEGIN TRANSACTION;

        DECLARE 
            @BILL_BRANCH NVARCHAR(MAX),
            @ITEM_CODE INT,
            @T_ID_ITEMS_CERSUR INT,
            @UNIT_CODE INT,          -- غير مستخدم في الكود الأصلي
            @UNIT_NAME NVARCHAR(50), -- غير مستخدم في العملية
            @UNIT_QTY FLOAT,
            @COST FLOAT,
            @TOTAL_COST FLOAT,
            @BILL_BUY INT,
            @PRICE FLOAT;            -- غير مستخدم

        -- المؤشر الخارجي: استرجاع فروع الفواتير من T_SALES للفترة المحددة
        DECLARE BOX_CURSOR CURSOR LOCAL FAST_FORWARD FOR 
            SELECT BILL_BRANCH 
            FROM T_SALES 
            WHERE BILL_DATE BETWEEN @D1 AND @D2
              AND ACTIVE = 1;

        OPEN BOX_CURSOR;
        FETCH NEXT FROM BOX_CURSOR INTO @BILL_BRANCH;
        WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @TOTAL_COST = 0;

            -- المؤشر الداخلي: استرجاع أرقام T_ID من T_SALES_DETAILS للفواتير ذات الفروع المطابقة
            DECLARE ITEMS_CURSOR CURSOR LOCAL FAST_FORWARD FOR 
                SELECT T_ID 
                FROM T_SALES_DETAILS 
                WHERE BILL_BRANCH LIKE @BILL_BRANCH;
            OPEN ITEMS_CURSOR;
            FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_ITEMS_CERSUR;
            WHILE @@FETCH_STATUS = 0
            BEGIN
                SET @COST = 0;
                -- استرجاع تفاصيل الصف الحالي من T_SALES_DETAILS
                SELECT 
                    @ITEM_CODE = ITEM_CODE,
                    @UNIT_NAME = UNIT_NAME,
                    @UNIT_QTY = UNIT_QTY,
                    @BILL_BUY = BILL_BUY
                FROM T_SALES_DETAILS
                WHERE T_ID = @T_ID_ITEMS_CERSUR;

                -- حساب تكلفة الشراء بناءً على قيمة @PRICE_TYPE
                IF @PRICE_TYPE = 4  
                    SET @COST = ISNULL((SELECT ISNULL(PRICE_BUY,0) 
                                        FROM V_ITEM_AVG_COST_BUY_MIN_UNIT 
                                        WHERE ITEM_CODE = @ITEM_CODE),0);
                ELSE IF @PRICE_TYPE = 5  
                    SET @COST = ISNULL((SELECT ISNULL(PRICE_COST,0) 
                                        FROM V_ITEM_AVG_COST_BUY_MIN_UNIT 
                                        WHERE ITEM_CODE = @ITEM_CODE),0);
                ELSE IF @PRICE_TYPE = 6  
                    SET @COST = ISNULL((SELECT ISNULL(AVG_BUY,0) 
                                        FROM V_ITEM_AVG_COST_BUY_MIN_UNIT 
                                        WHERE ITEM_CODE = @ITEM_CODE),0);
                ELSE IF @PRICE_TYPE = 8  
                    SET @COST = ISNULL((SELECT TOP(1) ISNULL(COST/UNIT_QTY,0) 
                                        FROM T_BUY_DETAILS 
                                        WHERE ITEM_CODE = @ITEM_CODE 
                                          AND BILL_NUMBER = @BILL_BUY),0);

                -- تحديث تكلفة البيع في T_SALES_DETAILS باستخدام التكلفة المحسوبة، والكمية وسعر الصرف (CURRANCY_EQUAL)
                UPDATE T_SALES_DETAILS
                SET COST = @COST * UNIT_QTY * CURRANCY_EQUAL
                WHERE T_ID = @T_ID_ITEMS_CERSUR;

                FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_ITEMS_CERSUR;
            END
            CLOSE ITEMS_CURSOR;
            DEALLOCATE ITEMS_CURSOR;

            -- حساب إجمالي التكلفة للفواتير ذات نفس BILL_BRANCH
            SET @TOTAL_COST = ISNULL((SELECT SUM(TOTAL_COST) 
                                      FROM T_SALES_DETAILS 
                                      WHERE BILL_BRANCH LIKE @BILL_BRANCH), 0);

            -- تحديث إجمالي التكلفة في T_SALES للفواتير ذات BILL_BRANCH المطابقة
            UPDATE T_SALES
            SET TOTAL_COST = @TOTAL_COST
            WHERE BILL_BRANCH LIKE @BILL_BRANCH;

            FETCH NEXT FROM BOX_CURSOR INTO @BILL_BRANCH;
        END
        CLOSE BOX_CURSOR;
        DEALLOCATE BOX_CURSOR;

        SET @SUBMIT_FLAG = 1;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;
        SET @SUBMIT_FLAG = 0;
        THROW;
    END CATCH
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_BUY_FIFO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_BUY_FIFO]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_BUY_FIFO]
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- إعادة تهيئة بيانات المبيعات
        UPDATE T_SALES_DETAILS 
        SET BILL_BUY = -999999,
            WAJBA_CODE = -999999;

        DECLARE @CurrentItemCode INT;
        DECLARE @SalesTID INT;
        DECLARE @BuyBillNumber NUMERIC(18,0);
        DECLARE @NewBuyBillNumber NUMERIC(18,0);
        DECLARE @Cost FLOAT;
        DECLARE @SalesUnitQty FLOAT;
        DECLARE @TotalSalesQty FLOAT;
        DECLARE @AfterSalesQty FLOAT;
        DECLARE @TotalCost FLOAT;
        DECLARE @QtyMinSumBuy FLOAT;
        DECLARE @RemainQtyMinBuy FLOAT;
        DECLARE @QtyMinSumSales FLOAT;
        DECLARE @BillBranchSales NVARCHAR(MAX);

        -- مؤشر للتكرار على رموز الأصناف النشطة
        DECLARE BoxCursor CURSOR LOCAL FAST_FORWARD FOR
            SELECT DISTINCT ITEM_CODE 
            FROM T_ITEMS 
            WHERE ACTIVE = 1 AND ITEM_CODE > 0;

        OPEN BoxCursor;
        FETCH NEXT FROM BoxCursor INTO @CurrentItemCode;

        WHILE @@FETCH_STATUS = 0
        BEGIN
            -- إعادة تهيئة المتغيرات لكل صنف
            SET @QtyMinSumBuy = 0;
            SET @QtyMinSumSales = 0;
            SET @Cost = 0;
            SET @TotalCost = 0;

            -- مؤشر للتكرار على سجلات المبيعات ذات الفاتورة المؤقتة (-999999)
            DECLARE SalesCursor CURSOR LOCAL FAST_FORWARD FOR
                SELECT T_ID 
                FROM V_SALES_DETAILS 
                WHERE ITEM_CODE = @CurrentItemCode 
                  AND BILL_BUY = -999999
                ORDER BY BILL_NUMBER ASC;
            OPEN SalesCursor;
            FETCH NEXT FROM SalesCursor INTO @SalesTID;

            WHILE @@FETCH_STATUS = 0
            BEGIN
                -- إعادة تهيئة متغيرات لكل سجل مبيعات
                SET @RemainQtyMinBuy = 0;

                -- الحصول على بيانات الشراء الأولى المتاحة للصنف
                SELECT TOP(1)
                    @RemainQtyMinBuy = ISNULL(REMAIN_BUY_MIN, 0),
                    @BuyBillNumber = BILL_NUMBER,
                    @Cost = ISNULL(COST, 0) / UNIT_QTY
                FROM V_BUY_DETAILS_EXPIRED_REMAIN
                WHERE ITEM_CODE = @CurrentItemCode
                  AND REMAIN_BUY_MIN > 0
                GROUP BY BILL_NUMBER, BILL_DATE, COST, REMAIN_BUY_MIN, UNIT_QTY
                ORDER BY BILL_DATE ASC, BILL_NUMBER ASC;

                -- الحصول على كمية المبيعات (مع التحويل للوحدة) وفرع الفاتورة
                SELECT TOP(1)
                    @QtyMinSumSales = ISNULL(QTY * UNIT_QTY, 0),
                    @BillBranchSales = BILL_BRANCH
                FROM V_SALES_DETAILS 
                WHERE T_ID = @SalesTID
                GROUP BY BILL_BRANCH, QTY, UNIT_QTY;

                IF @QtyMinSumSales <= @RemainQtyMinBuy
                BEGIN
                    -- حالة كفاية كمية الشراء لتغطية المبيعات كاملة
                    UPDATE T_SALES_DETAILS
                    SET COST = @Cost * [UNIT_QTY] * [CURRANCY_EQUAL],
                        BILL_BUY = @BuyBillNumber,
                        WAJBA_CODE = @BuyBillNumber
                    WHERE T_ID = @SalesTID;

                    SELECT @TotalCost = SUM(TOTAL_COST)
                    FROM T_SALES_DETAILS
                    WHERE BILL_BRANCH LIKE @BillBranchSales;

                    UPDATE T_SALES
                    SET TOTAL_COST = @TotalCost
                    WHERE BILL_BRANCH LIKE @BillBranchSales;
                END
                ELSE
                BEGIN
                    -- حالة عدم كفاية كمية الشراء: تقسيم السجل إلى جزأين
                    SELECT TOP(1)
                        @SalesUnitQty = UNIT_QTY,
                        @TotalSalesQty = ISNULL(TOTAL_QTY * UNIT_QTY, 0)
                    FROM V_SALES_DETAILS 
                    WHERE T_ID = @SalesTID;

                    SET @AfterSalesQty = @TotalSalesQty - @RemainQtyMinBuy;

                    -- تعديل سجل المبيعات الحالي بالكمية المغطاة من الشراء الحالي
                    UPDATE T_SALES_DETAILS
                    SET QTY = (@RemainQtyMinBuy / @SalesUnitQty)
                    WHERE T_ID = @SalesTID;

                    UPDATE T_SALES_DETAILS
                    SET COST = @Cost * [UNIT_QTY] * [CURRANCY_EQUAL],
                        BILL_BUY = @BuyBillNumber,
                        WAJBA_CODE = @BuyBillNumber,
                        TOTAL = PRICE * QTY
                    WHERE T_ID = @SalesTID;

                    SELECT @TotalCost = ISNULL((SELECT SUM(TOTAL_COST) FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BillBranchSales), 0);
                    UPDATE T_SALES
                    SET TOTAL_COST = @TotalCost
                    WHERE BILL_BRANCH LIKE @BillBranchSales;

                    -- إذا بقي كمية مبيعات غير مغطاة، نقوم بإنشاء سجل مبيعات جديد للكمية المتبقية
                    IF @AfterSalesQty <> 0
                    BEGIN
                        INSERT INTO [dbo].[T_SALES_DETAILS]
                        (
                            BILL_BRANCH,
                            BILL_NUMBER,
                            ITEM_CODE,
                            ITEM_NAME,
                            QTY,
                            UNIT_NAME,
                            UNIT_QTY,
                            STORE_CODE,
                            WAJBA_CODE,
                            WAJBA_NAME,
                            WAJBA_BALANCE,
                            CURRANCY_CODE,
                            CURRANCY_EQUAL,
                            COST,
                            PRICE,
                            TOTAL,
                            DISCOUNT_PERCENT_ITEM,
                            DISCOUNT_AMOUNT_ITEM,
                            C_DATE,
                            ACTIVE,
                            BILL_BUY,
                            ITEM_NOTE_SALES
                        )
                        SELECT 
                            BILL_BRANCH,
                            BILL_NUMBER,
                            ITEM_CODE,
                            ITEM_NAME,
                            (@AfterSalesQty / @SalesUnitQty),
                            UNIT_NAME,
                            UNIT_QTY,
                            STORE_CODE,
                            WAJBA_CODE,
                            WAJBA_NAME,
                            WAJBA_BALANCE,
                            CURRANCY_CODE,
                            CURRANCY_EQUAL,
                            COST,
                            PRICE,
                            PRICE * (@AfterSalesQty / @SalesUnitQty),
                            DISCOUNT_PERCENT_ITEM,
                            DISCOUNT_AMOUNT_ITEM,
                            C_DATE,
                            ACTIVE,
                            -999999, -- علامة أن عملية الربط لم تتم بعد
                            ITEM_NOTE_SALES
                        FROM T_SALES_DETAILS
                        WHERE T_ID = @SalesTID;
                    END
                END

                -- الحصول على السجل التالي في مؤشر المبيعات
                FETCH NEXT FROM SalesCursor INTO @SalesTID;
            END

            CLOSE SalesCursor;
            DEALLOCATE SalesCursor;

            FETCH NEXT FROM BoxCursor INTO @CurrentItemCode;
        END

        CLOSE BoxCursor;
        DEALLOCATE BoxCursor;

        SET @SUBMIT_FLAG = 1;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        -- يمكنك تسجيل الخطأ أو إرجاع رسالة تفصيلية هنا
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
        DECLARE @ErrorState INT = ERROR_STATE();
        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
        RETURN;
    END CATCH
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_BUY_FIFO_ITEM]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_BUY_FIFO_ITEM]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_BUY_FIFO_ITEM]
    @ITEM_CODE INT,
    @SUBMIT_FLAG INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- إعادة تهيئة سجلات المبيعات للصنف المحدد
        UPDATE T_SALES_DETAILS
        SET BILL_BUY = -999999,
            WAJBA_CODE = -999999
        WHERE ITEM_CODE = @ITEM_CODE;

        -- تعريف المتغيرات المستخدمة لمعالجة سجلات المبيعات
        DECLARE @T_ID_SALES INT,
                @BILL_BUY NUMERIC(18,0),
                @COST FLOAT,
                @RemainQtyMinBuy FLOAT,
                @QtyMinSumSales FLOAT,
                @BillBranchSales NVARCHAR(MAX),
                @SalesUnitQty FLOAT,
                @TotalSalesQty FLOAT,
                @AfterSalesQty FLOAT,
                @TotalCost FLOAT;

        /*
         * يتم تنفيذ حلقة WHILE لمعالجة كافة سجلات المبيعات للصنف التي لم يتم ربطها بعد 
         * (أي التي تكون قيمة BILL_BUY = -999999)
         */
        WHILE EXISTS (
            SELECT TOP 1 T_ID 
            FROM V_SALES_DETAILS 
            WHERE ITEM_CODE = @ITEM_CODE AND BILL_BUY = -999999
        )
        BEGIN
            -- جلب السجل الأول الذي يحتاج للمعالجة
            SELECT TOP 1 @T_ID_SALES = T_ID
            FROM V_SALES_DETAILS
            WHERE ITEM_CODE = @ITEM_CODE AND BILL_BUY = -999999
            ORDER BY BILL_NUMBER ASC;

            PRINT @T_ID_SALES; -- لأغراض التصحيح

            -- الحصول على بيانات أول سجل شراء متاح للصنف (بناءً على FIFO)
            SELECT TOP(1)
                @RemainQtyMinBuy = ISNULL(REMAIN_BUY_MIN, 0),
                @BILL_BUY = BILL_NUMBER,
                @COST = ISNULL(COST, 0) / UNIT_QTY
            FROM V_BUY_DETAILS_EXPIRED_REMAIN
            WHERE ITEM_CODE = @ITEM_CODE AND REMAIN_BUY_MIN > 0
            GROUP BY BILL_NUMBER, BILL_DATE, COST, REMAIN_BUY_MIN, UNIT_QTY
            ORDER BY BILL_DATE ASC, BILL_NUMBER ASC;

            -- الحصول على كمية المبيعات وتحويلها للوحدة المناسبة بالإضافة إلى فرع الفاتورة
            SELECT TOP(1)
                @QtyMinSumSales = ISNULL(QTY * UNIT_QTY, 0),
                @BillBranchSales = BILL_BRANCH
            FROM V_SALES_DETAILS
            WHERE T_ID = @T_ID_SALES
            GROUP BY BILL_BRANCH, QTY, UNIT_QTY;

            IF @QtyMinSumSales <= @RemainQtyMinBuy
            BEGIN
                -- حالة كفاية كمية الشراء لتغطية المبيعات بالكامل
                UPDATE T_SALES_DETAILS
                SET COST = @COST * [UNIT_QTY] * [CURRANCY_EQUAL],
                    BILL_BUY = @BILL_BUY,
                    WAJBA_CODE = @BILL_BUY
                WHERE T_ID = @T_ID_SALES;

                SELECT @TotalCost = SUM(TOTAL_COST)
                FROM T_SALES_DETAILS
                WHERE BILL_BRANCH LIKE @BillBranchSales;

                UPDATE T_SALES
                SET TOTAL_COST = @TotalCost
                WHERE BILL_BRANCH LIKE @BillBranchSales;
            END
            ELSE
            BEGIN
                -- حالة عدم كفاية كمية الشراء: سيتم تقسيم سجل المبيعات إلى جزأين
                SELECT TOP(1)
                    @SalesUnitQty = UNIT_QTY,
                    @TotalSalesQty = ISNULL(TOTAL_QTY * UNIT_QTY, 0)
                FROM V_SALES_DETAILS
                WHERE T_ID = @T_ID_SALES;

                SET @AfterSalesQty = @TotalSalesQty - @RemainQtyMinBuy;

                -- تعديل سجل المبيعات الحالي ليغطي الجزء الذي يمكن تغطيته من الشراء الحالي
                UPDATE T_SALES_DETAILS
                SET QTY = (@RemainQtyMinBuy / @SalesUnitQty)
                WHERE T_ID = @T_ID_SALES;

                UPDATE T_SALES_DETAILS
                SET COST = @COST * [UNIT_QTY] * [CURRANCY_EQUAL],
                    BILL_BUY = @BILL_BUY,
                    WAJBA_CODE = @BILL_BUY,
                    TOTAL = PRICE * QTY
                WHERE T_ID = @T_ID_SALES;

                SELECT @TotalCost = ISNULL((SELECT SUM(TOTAL_COST)
                                             FROM T_SALES_DETAILS
                                             WHERE BILL_BRANCH LIKE @BillBranchSales), 0);
                UPDATE T_SALES
                SET TOTAL_COST = @TotalCost
                WHERE BILL_BRANCH LIKE @BillBranchSales;

                -- إذا بقيت كمية مبيعات غير مغطاة، يتم إنشاء سجل مبيعات جديد بالكمية المتبقية
                IF @AfterSalesQty <> 0
                BEGIN
                    INSERT INTO [dbo].[T_SALES_DETAILS]
                    (
                        BILL_BRANCH,
                        BILL_NUMBER,
                        ITEM_CODE,
                        ITEM_NAME,
                        QTY,
                        UNIT_NAME,
                        UNIT_QTY,
                        STORE_CODE,
                        WAJBA_CODE,
                        WAJBA_NAME,
                        WAJBA_BALANCE,
                        CURRANCY_CODE,
                        CURRANCY_EQUAL,
                        COST,
                        PRICE,
                        TOTAL,
                        DISCOUNT_PERCENT_ITEM,
                        DISCOUNT_AMOUNT_ITEM,
                        C_DATE,
                        ACTIVE,
                        BILL_BUY,
                        ITEM_NOTE_SALES
                    )
                    SELECT 
                        BILL_BRANCH,
                        BILL_NUMBER,
                        ITEM_CODE,
                        ITEM_NAME,
                        (@AfterSalesQty / @SalesUnitQty),
                        UNIT_NAME,
                        UNIT_QTY,
                        STORE_CODE,
                        WAJBA_CODE,
                        WAJBA_NAME,
                        WAJBA_BALANCE,
                        CURRANCY_CODE,
                        CURRANCY_EQUAL,
                        COST,
                        PRICE,
                        PRICE * (@AfterSalesQty / @SalesUnitQty),
                        DISCOUNT_PERCENT_ITEM,
                        DISCOUNT_AMOUNT_ITEM,
                        C_DATE,
                        ACTIVE,
                        -999999, -- إشارة إلى أن عملية الربط لم تتم بعد
                        ITEM_NOTE_SALES
                    FROM T_SALES_DETAILS
                    WHERE T_ID = @T_ID_SALES;
                END
            END
        END -- نهاية حلقة WHILE لمعالجة كافة سجلات المبيعات

        SET @SUBMIT_FLAG = 1;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
        DECLARE @ErrorState INT = ERROR_STATE();
        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
        RETURN;
    END CATCH
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_BUY_FIFO_NOT_WAJBA]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_BUY_FIFO_NOT_WAJBA]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



















CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_BUY_FIFO_NOT_WAJBA]

@SUBMIT_FLAG INT OUTPUT

AS



DECLARE BOX_CURSOR CURSOR FOR SELECT DISTINCT ITEM_CODE FROM T_SALES_DETAILS WHERE ACTIVE=1 AND ITEM_CODE>0 AND BILL_BUY=-999999 ;

DECLARE
@BILL_BRANCH_SALES NVARCHAR(MAX),
@BILL_BUY numeric(18, 0),
@NEW_BILL_BUY numeric(18, 0),
@ITEM_CODE_CURSER INT,
@T_ID_SALES_CURSER INT,
@BILL_BUY_CERSUR INT,
@COST	float	,
@UNIT_QTY_SALES	float	,
@TOT_QTY_SALES	float	,
@AFTER_QTY_SALES	float	,
@TOTAL_COST	float	,
@QTY_MIN_SUM_BUY	float	,
@REMAIN_QTY_MIN_SUM_BUY	float	,
@QTY_MIN_SUM_SALES	float	

BEGIN TRAN
BEGIN



OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @ITEM_CODE_CURSER
WHILE @@FETCH_STATUS = 0
BEGIN




--------DECLARE BILL_CURSOR CURSOR FOR SELECT  BILL_NUMBER FROM V_BUY_DETAILS_DATE WHERE ITEM_CODE=@ITEM_CODE_CURSER   ORDER BY BILL_DATE ASC ,BILL_NUMBER ASC  ;
--------OPEN BILL_CURSOR


--------FETCH NEXT FROM BILL_CURSOR INTO @BILL_BUY_CERSUR
--------WHILE @@FETCH_STATUS = 0
--------BEGIN
REFRESHING:
SET @QTY_MIN_SUM_BUY=0
SET @QTY_MIN_SUM_SALES=0


SET @COST=0
SET @TOTAL_COST=0







DECLARE SALES_CURSOR CURSOR FOR SELECT  T_ID FROM V_SALES_DETAILS WHERE ITEM_CODE=@ITEM_CODE_CURSER AND BILL_BUY = -999999   ORDER BY BILL_NUMBER ASC ;
OPEN SALES_CURSOR

FETCH NEXT FROM SALES_CURSOR INTO @T_ID_SALES_CURSER
WHILE @@FETCH_STATUS = 0
BEGIN


--SELECT TOP(1) @T_ID_SALES_CURSER=T_ID  FROM V_SALES_DETAILS WHERE ITEM_CODE=@ITEM_CODE_CURSER  AND BILL_BUY = -999999   ORDER BY BILL_NUMBER ASC


 PRINT @T_ID_SALES_CURSER

SELECT TOP(1) @REMAIN_QTY_MIN_SUM_BUY=ISNULL(REMAIN_BUY_MIN,0),@BILL_BUY= BILL_NUMBER,@COST=ISNULL(COST,0) FROM V_BUY_DETAILS_EXPIRED_REMAIN WHERE  ITEM_CODE=@ITEM_CODE_CURSER AND REMAIN_BUY_MIN>0  GROUP BY BILL_NUMBER,BILL_DATE,COST,REMAIN_BUY_MIN  ORDER  BY BILL_DATE ASC ,BILL_NUMBER ASC 



SELECT TOP(1) @QTY_MIN_SUM_SALES=ISNULL(TOTAL_QTY*UNIT_QTY,0),@BILL_BRANCH_SALES=BILL_BRANCH FROM V_SALES_DETAILS WHERE T_ID=@T_ID_SALES_CURSER GROUP BY BILL_BRANCH, TOTAL_QTY,UNIT_QTY

IF @QTY_MIN_SUM_SALES <=@REMAIN_QTY_MIN_SUM_BUY
BEGIN
 UPDATE T_SALES_DETAILS SET [COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],BILL_BUY=@BILL_BUY,WAJBA_CODE=@BILL_BUY WHERE T_ID=@T_ID_SALES_CURSER
SET @TOTAL_COST=(SELECT  SUM(TOTAL_COST) FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH_SALES)
UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST WHERE BILL_BRANCH LIKE @BILL_BRANCH_SALES
END
ELSE
BEGIN
 
SELECT TOP(1) @UNIT_QTY_SALES=UNIT_QTY,@TOT_QTY_SALES=ISNULL(TOTAL_QTY*UNIT_QTY,0) FROM V_SALES_DETAILS WHERE T_ID=@T_ID_SALES_CURSER

--SELECT TOP(1) @REMAIN_QTY_MIN_SUM_BUY=ISNULL(REMAIN_BUY_MIN,0),@COST=ISNULL(COST,0) FROM V_BUY_DETAILS_EXPIRED_REMAIN WHERE  ITEM_CODE=@ITEM_CODE_CURSER AND REMAIN_BUY_MIN>0AND BILL_NUMBER<>@BILL_BUY GROUP BY BILL_NUMBER,COST,REMAIN_BUY_MIN,BILL_DATE ORDER  BY BILL_DATE ASC ,BILL_NUMBER ASC

SET @AFTER_QTY_SALES=@TOT_QTY_SALES - @REMAIN_QTY_MIN_SUM_BUY

 UPDATE T_SALES_DETAILS SET QTY=(@REMAIN_QTY_MIN_SUM_BUY/@UNIT_QTY_SALES) WHERE T_ID=@T_ID_SALES_CURSER

 UPDATE T_SALES_DETAILS SET [COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],BILL_BUY=@BILL_BUY,WAJBA_CODE=@BILL_BUY,TOTAL=PRICE*QTY WHERE T_ID=@T_ID_SALES_CURSER
SET @TOTAL_COST=ISNULL((SELECT  SUM(TOTAL_COST) FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH_SALES),0)
UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST WHERE BILL_BRANCH LIKE @BILL_BRANCH_SALES
IF @AFTER_QTY_SALES<>0
BEGIN
INSERT INTO [dbo].[T_SALES_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[TOTAL]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
          ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY]
           ,[ITEM_NOTE_SALES])
     SELECT 
	 [BILL_BRANCH]
      ,[BILL_NUMBER]
      ,[ITEM_CODE]
      ,[ITEM_NAME]
      ,@AFTER_QTY_SALES/@UNIT_QTY_SALES
      ,[UNIT_NAME]
      ,[UNIT_QTY]
      ,[STORE_CODE]
      ,[WAJBA_CODE]
      ,[WAJBA_NAME]
      ,[WAJBA_BALANCE]
      ,[CURRANCY_CODE]
      ,[CURRANCY_EQUAL]
      ,[COST]
      ,[PRICE]
      ,[PRICE]*(@AFTER_QTY_SALES/@UNIT_QTY_SALES)
      ,[DISCOUNT_PERCENT_ITEM]
      ,[DISCOUNT_AMOUNT_ITEM]
      ,[C_DATE]
      ,[ACTIVE]
      ,-999999
      ,[ITEM_NOTE_SALES]
  FROM [dbo].[T_SALES_DETAILS] WHERE T_ID=@T_ID_SALES_CURSER
END


CLOSE SALES_CURSOR
DEALLOCATE SALES_CURSOR
GOTO REFRESHING
END






FETCH NEXT FROM SALES_CURSOR INTO @T_ID_SALES_CURSER
END
CLOSE SALES_CURSOR
DEALLOCATE SALES_CURSOR









--------FETCH NEXT FROM BILL_CURSOR INTO @BILL_BUY_CERSUR
--------END
--------CLOSE BILL_CURSOR
--------DEALLOCATE BILL_CURSOR









FETCH NEXT FROM BOX_CURSOR INTO @ITEM_CODE_CURSER

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

commit



































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_ITEMS_CERSUR]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_ITEMS_CERSUR]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_DATE_ITEMS_CERSUR]
@D1 DATE,
@D2 DATE,
@ITEM_CODE_CR INT,
@PRICE_TYPE INT,
@SUBMIT_FLAG INT OUTPUT

AS



DECLARE
@BILL_BRANCH NVARCHAR(MAX),

@ITEM_CODE INT,
@T_ID_ITEMS_CERSUR INT,
@UNIT_CODE INT,
@UNIT_NAME	nvarchar(50)	,
@UNIT_QTY	float	,
@COST	float	,
@TOTAL_COST	float	,
@BILL_BUY INT,
@PRICE FLOAT

BEGIN TRAN
BEGIN



SET @TOTAL_COST=0

DECLARE ITEMS_CURSOR CURSOR FOR SELECT  T_ID FROM V_SALES_DETAILS WHERE ITEM_CODE = @ITEM_CODE_CR AND BILL_DATE BETWEEN @D1 AND @D2 AND ACTIVE=1 ;
OPEN ITEMS_CURSOR

FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_ITEMS_CERSUR
WHILE @@FETCH_STATUS = 0
BEGIN
SET @COST=0
SELECT @ITEM_CODE=ITEM_CODE,@UNIT_NAME=UNIT_NAME,@UNIT_QTY=UNIT_QTY,@BILL_BUY=BILL_BUY,@BILL_BRANCH=BILL_BRANCH  FROM T_SALES_DETAILS WHERE T_ID=@T_ID_ITEMS_CERSUR

IF @PRICE_TYPE = 4  SET @COST=ISNULL((SELECT ISNULL(PRICE_BUY,0) FROM V_ITEM_AVG_COST_BUY_MIN_UNIT WHERE ITEM_CODE=@ITEM_CODE),0)
IF @PRICE_TYPE = 5  SET @COST=ISNULL((SELECT ISNULL(PRICE_COST,0) FROM V_ITEM_AVG_COST_BUY_MIN_UNIT WHERE ITEM_CODE=@ITEM_CODE),0)
IF @PRICE_TYPE = 6  SET @COST=ISNULL((SELECT ISNULL(AVG_BUY,0) FROM V_ITEM_AVG_COST_BUY_MIN_UNIT WHERE ITEM_CODE=@ITEM_CODE),0)
IF @PRICE_TYPE = 8  SET @COST=ISNULL((SELECT TOP(1) ISNULL(COST/UNIT_QTY,0) FROM T_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE AND BILL_NUMBER=@BILL_BUY),0)

UPDATE T_SALES_DETAILS SET [COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL] WHERE T_ID=@T_ID_ITEMS_CERSUR

SET @TOTAL_COST=ISNULL((SELECT  SUM(TOTAL_COST) FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH),0)
UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST WHERE BILL_BRANCH LIKE @BILL_BRANCH

 
--update T_BUY_DETAILS set COST=@COST, PRICE_BUY=@COST,PRICE=@COST,TOTAL=(QTY*UNIT_QTY*@COST),TOTAL_COST=(QTY*UNIT_QTY*@COST) where ITEM_CODE=@ITEM_CODE and BILL_NUMBER<0
FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_ITEMS_CERSUR
END
CLOSE ITEMS_CURSOR
DEALLOCATE ITEMS_CURSOR





SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

commit

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_FIFO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_FIFO]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_FIFO]
@SUBMIT_FLAG INT OUTPUT

AS

UPDATE T_SALES_DETAILS SET BILL_BUY=-999999
DECLARE
@BILL_BUY_CR INT,

@ITEM_CODE INT,
@T_ID_ITEMS_BUY_CERSUR INT,
@T_ID_ITEMS_SALES_CERSUR INT,
@UNIT_CODE INT,
@UNIT_NAME	nvarchar(50)	,
@UNIT_QTY	float	,
@QTY_MIN_BUY	float	,
@QTY_MIN_SALES	float	,
@COST_MIN	float	,
@TOTAL_COST	float	,
@BILL_BUY INT,
@QTY_REMAIN_BUY FLOAT,
@PRICE FLOAT






BEGIN TRAN
BEGIN

DECLARE ITEMS_BUY_CURSOR CURSOR FOR SELECT  T_ID FROM V_BUY_DETAILS_EXPIRED_REMAIN WHERE REMAIN_BUY_MIN >0 ORDER BY BILL_DATE ASC ,BILL_NUMBER ASC  ;
OPEN ITEMS_BUY_CURSOR

FETCH NEXT FROM ITEMS_BUY_CURSOR INTO @T_ID_ITEMS_BUY_CERSUR
WHILE @@FETCH_STATUS = 0
BEGIN
SET @TOTAL_COST=0
SET @COST_MIN=0

SELECT @ITEM_CODE=ITEM_CODE,@COST_MIN=TOTAL_COST/(QTY*UNIT_QTY),@QTY_MIN_BUY=(QTY*UNIT_QTY),@BILL_BUY=BILL_NUMBER  FROM V_BUY_DETAILS_EXPIRED_REMAIN WHERE T_ID=@T_ID_ITEMS_BUY_CERSUR 



DECLARE ITEM_SALES_CURSOR CURSOR LOCAL  FOR SELECT  T_ID FROM V_SALES_DETAILS  WHERE ITEM_CODE=@ITEM_CODE AND BILL_BUY<0 ORDER BY BILL_DATE ASC,BILL_NUMBER ASC  ;

OPEN ITEM_SALES_CURSOR

FETCH NEXT FROM ITEM_SALES_CURSOR INTO @T_ID_ITEMS_SALES_CERSUR
WHILE @@FETCH_STATUS = 0
BEGIN


PRINT @ITEM_CODE
SELECT @QTY_REMAIN_BUY=ISNULL(REMAIN_BUY_MIN,0) FROM V_BUY_DETAILS_EXPIRED_REMAIN WHERE T_ID=@T_ID_ITEMS_BUY_CERSUR 
SELECT @QTY_MIN_SALES=ISNULL(QTY*UNIT_QTY,0),@UNIT_QTY=ISNULL(UNIT_QTY,0) FROM V_SALES_DETAILS WHERE T_ID=@T_ID_ITEMS_SALES_CERSUR 
IF @QTY_REMAIN_BUY>=@QTY_MIN_SALES
BEGIN
UPDATE T_SALES_DETAILS SET [COST]=@COST_MIN*[UNIT_QTY]*[CURRANCY_EQUAL],BILL_BUY=@BILL_BUY WHERE T_ID=@T_ID_ITEMS_SALES_CERSUR
END
ELSE
BEGIN
IF @QTY_REMAIN_BUY>0
BEGIN
INSERT INTO [dbo].[T_SALES_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[WAJBA_CODE]
           ,[WAJBA_NAME]
           ,[WAJBA_BALANCE]
           ,[CURRANCY_CODE]
           ,[CURRANCY_EQUAL]
           ,[COST]
           ,[PRICE]
           ,[TOTAL]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM]
           ,[C_DATE]
           ,[ACTIVE]
           ,[BILL_BUY])
     SELECT [BILL_BRANCH]
      ,[BILL_NUMBER]
      ,[ITEM_CODE]
      ,[ITEM_NAME]
      ,@QTY_REMAIN_BUY/[UNIT_QTY]
      ,[UNIT_NAME]
      ,[UNIT_QTY]
      ,[STORE_CODE]
      ,[WAJBA_CODE]
      ,[WAJBA_NAME]
      ,[WAJBA_BALANCE]
      ,[CURRANCY_CODE]
      ,[CURRANCY_EQUAL]
      ,@COST_MIN*[UNIT_QTY]
      ,[PRICE]
      ,[TOTAL]
      ,[DISCOUNT_PERCENT_ITEM]
      ,[DISCOUNT_AMOUNT_ITEM]
      ,[C_DATE]
      ,[ACTIVE]
      ,@BILL_BUY
  FROM [dbo].[T_SALES_DETAILS] WHERE T_ID=@T_ID_ITEMS_SALES_CERSUR 

  UPDATE T_SALES_DETAILS SET QTY=QTY-(@QTY_REMAIN_BUY/@UNIT_QTY) WHERE T_ID=@T_ID_ITEMS_SALES_CERSUR
  END
  CLOSE ITEM_SALES_CURSOR
DEALLOCATE ITEM_SALES_CURSOR


  GOTO ENDOFSHRINK
 

END









FETCH NEXT FROM ITEM_SALES_CURSOR INTO @T_ID_ITEMS_SALES_CERSUR
END
CLOSE ITEM_SALES_CURSOR
DEALLOCATE ITEM_SALES_CURSOR



ENDOFSHRINK:

FETCH NEXT FROM ITEMS_BUY_CURSOR INTO @T_ID_ITEMS_BUY_CERSUR
END
CLOSE ITEMS_BUY_CURSOR
DEALLOCATE ITEMS_BUY_CURSOR






DECLARE BOX_CURSOR CURSOR FOR SELECT  BILL_NUMBER FROM T_SALES WHERE ACTIVE=1  ;
DECLARE
@T_ID_BOX_CURCOR NUMERIC(18,0)
OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN
UPDATE T_SALES SET TOTAL_COST=(SELECT ISNULL(SUM(TOTAL_COST),0) FROM T_SALES_DETAILS WHERE BILL_NUMBER=@T_ID_BOX_CURCOR) WHERE BILL_NUMBER=@T_ID_BOX_CURCOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


--SELECT @ITEM_CODE=ITEM_CODE,@UNIT_NAME=UNIT_NAME,@UNIT_QTY=UNIT_QTY,@BILL_BUY=BILL_BUY,@QTY_MIN_SALES=QTY*UNIT_QTY  FROM T_SALES_DETAILS WHERE T_ID=@T_ID_ITEMS_CERSUR


--IF @PRICE_TYPE = 4  SET @COST=ISNULL((SELECT ISNULL(PRICE_BUY,0) FROM V_ITEM_AVG_COST_BUY_MIN_UNIT WHERE ITEM_CODE=@ITEM_CODE),0)
--IF @PRICE_TYPE = 5  SET @COST=ISNULL((SELECT ISNULL(PRICE_COST,0) FROM V_ITEM_AVG_COST_BUY_MIN_UNIT WHERE ITEM_CODE=@ITEM_CODE),0)
--IF @PRICE_TYPE = 6  SET @COST=ISNULL((SELECT ISNULL(AVG_BUY,0) FROM V_ITEM_AVG_COST_BUY_MIN_UNIT WHERE ITEM_CODE=@ITEM_CODE),0)
--IF @PRICE_TYPE = 8  SET @COST=ISNULL((SELECT TOP(1) ISNULL(COST/UNIT_QTY,0) FROM T_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE AND BILL_NUMBER=@BILL_BUY),0)

--UPDATE T_SALES_DETAILS SET [COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],TOTAL_COST=(@COST*[UNIT_QTY]*[CURRANCY_EQUAL])*[QTY] WHERE T_ID=@T_ID_ITEMS_BUY_CERSUR

 



--SET @TOTAL_COST=ISNULL((SELECT  SUM(TOTAL_COST) FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH),0)
--UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST WHERE BILL_BRANCH LIKE @BILL_BRANCH




SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

commit

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_UNIT_2]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_UNIT_2]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

















CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_UNIT_2]

@SUBMIT_FLAG INT OUTPUT

AS
DECLARE


@ITEMS_CERSUR INT,
@ITEMS_CERSUR_UNIT INT,
@UNIT_QTY	float	,
@COST	float	,
@BUY	float	

BEGIN


DECLARE BOX_CURSOR CURSOR FOR SELECT  ITEM_CODE FROM T_ITEMS WHERE ACTIVE=1  ;

OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @ITEMS_CERSUR
WHILE @@FETCH_STATUS = 0
BEGIN

SELECT @COST=ISNULL(COST,0) FROM T_ITEMS WHERE  ITEM_CODE=@ITEMS_CERSUR

update T_ITEM_UNIT set PRICE_COST=@COST WHERE  ITEM_CODE=@ITEMS_CERSUR AND UNIT_CODE=1

FETCH NEXT FROM BOX_CURSOR INTO @ITEMS_CERSUR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR









DECLARE BOX_CURSOR_UNIT CURSOR FOR SELECT  ITEM_CODE FROM T_ITEM_UNIT WHERE UNIT_CODE=2   ;

OPEN BOX_CURSOR_UNIT

FETCH NEXT FROM BOX_CURSOR_UNIT INTO @ITEMS_CERSUR_UNIT
WHILE @@FETCH_STATUS = 0
BEGIN

SELECT @COST=ISNULL(PRICE_COST,0),@BUY=ISNULL(PRICE_BUY,0) FROM T_ITEM_UNIT WHERE UNIT_CODE=1 AND ITEM_CODE=@ITEMS_CERSUR_UNIT
update T_ITEM_UNIT set PRICE_BUY=@BUY*UNIT_QTY,PRICE_COST=@COST*UNIT_QTY WHERE  ITEM_CODE=@ITEMS_CERSUR_UNIT AND UNIT_CODE=2



FETCH NEXT FROM BOX_CURSOR_UNIT INTO @ITEMS_CERSUR_UNIT

END

CLOSE BOX_CURSOR_UNIT
DEALLOCATE BOX_CURSOR_UNIT


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM



































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_COST_WAJBA_SELECT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_COST_WAJBA_SELECT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_COST_WAJBA_SELECT]
@T_ID INT,
@BILL_BUY INT,
@COST	float	,
@SUBMIT_FLAG INT OUTPUT

AS





DECLARE
@BILL_BRANCH NVARCHAR(MAX),
@ITEM_CODE INT,
@UNIT_CODE INT,
@UNIT_NAME	nvarchar(50)	,
@UNIT_QTY	float	,

@TOTAL_COST	float	

BEGIN TRAN
BEGIN



SELECT @ITEM_CODE=ITEM_CODE,@UNIT_NAME=UNIT_NAME,@UNIT_QTY=UNIT_QTY,@BILL_BRANCH=BILL_BRANCH  FROM T_SALES_DETAILS WHERE T_ID=@T_ID


UPDATE T_SALES_DETAILS SET [COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[BILL_BUY]=@BILL_BUY WHERE T_ID=@T_ID

SET @TOTAL_COST=ISNULL((SELECT  SUM(TOTAL_COST) FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH),0)
UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST WHERE BILL_BRANCH LIKE @BILL_BRANCH





SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

commit

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_DOLLAR]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_DOLLAR]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

















CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_DOLLAR]

@SUBMIT_FLAG INT OUTPUT

AS



DECLARE
@PERCENT FLOAT,
@VVAA FLOAT,
@AV INT

BEGIN TRAN
BEGIN

SET @AV=1
SET @PERCENT=17
SET @VVAA=250
SET @SUBMIT_FLAG=0

IF @AV=0
BEGIN
UPDATE T_ITEMS SET COST= (Round(Floor((COST+(COST*@PERCENT*0.01))) / @VVAA,0) * @VVAA ) 
END

IF @AV=1
BEGIN
UPDATE T_ITEMS SET COST= (Round((COST+(COST*@PERCENT*0.01)) / @VVAA,0) * @VVAA ) 
END

IF @AV=2
BEGIN
UPDATE T_ITEMS SET COST= (Round(Ceiling((COST+(COST*@PERCENT*0.01))) / @VVAA,0) * @VVAA ) 
END


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

commit

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_PRICE_FROM_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_PRICE_FROM_TEMP]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_PRICE_FROM_TEMP]
@BILL_NUMBER	numeric(18, 0)	,
@SUBMIT_FLAG INT OUTPUT

AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID FROM T_SALES_TEMP WHERE BILL_NUMBER = @BILL_NUMBER AND ITEM_CODE<>0   ;

DECLARE
@T_ID_CURSOR INT,
@ITEM_CODE INT,
@UNIT_CODE INT,
@UNIT_NAME	nvarchar(50)	,
@UNIT_QTY	float	,
@PRICE FLOAT
BEGIN TRAN
BEGIN

OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CURSOR
WHILE @@FETCH_STATUS = 0
BEGIN
SELECT @ITEM_CODE=ITEM_CODE,@UNIT_NAME=UNIT_NAME,@UNIT_QTY=UNIT_QTY,@PRICE=PRICE   FROM T_SALES_TEMP WHERE T_ID=@T_ID_CURSOR 
IF @UNIT_QTY=1
BEGIN
SET @UNIT_CODE=1
UPDATE T_ITEMS SET SELL=@PRICE,IS_TRANS=0 WHERE ITEM_CODE=@ITEM_CODE
--UPDATE T_ITEM_UNIT SET PRICE_SALE_1=@PRICE,PRICE_SALE_2=@PRICE,PRICE_SALE_3=@PRICE WHERE ITEM_CODE=@ITEM_CODE AND UNIT_CODE=1
UPDATE T_ITEM_UNIT SET PRICE_SALE_1=@PRICE WHERE ITEM_CODE=@ITEM_CODE AND UNIT_CODE=1



END


ELSE    --  EEEEEELLLLLSSSSSEEEE


BEGIN
SET @UNIT_CODE=2
UPDATE T_ITEMS SET SELL2=@PRICE,IS_TRANS=0 WHERE ITEM_CODE=@ITEM_CODE
UPDATE T_ITEM_UNIT SET PRICE_SALE_1=@PRICE,PRICE_SALE_2=@PRICE,PRICE_SALE_3=@PRICE WHERE ITEM_CODE=@ITEM_CODE AND UNIT_CODE=2



END






FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CURSOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

commit































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_SERIAL_PRINT_FROM_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_SERIAL_PRINT_FROM_TEMP]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_SERIAL_PRINT_FROM_TEMP]
@BILL_NUMBER	numeric(18, 0)	,
@SUBMIT_FLAG INT OUTPUT

AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID FROM T_SALES_TEMP WHERE BILL_NUMBER = @BILL_NUMBER   ;

DECLARE

@T_ID_CURSOR INT,
@ITEM_CODE INT,
@ITEM_NAME	nvarchar(MAX)	,

@PRICE FLOAT

BEGIN

DELETE FROM T_BARCODE_PRINT
OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CURSOR
WHILE @@FETCH_STATUS = 0
BEGIN


SELECT @ITEM_CODE=ITEM_CODE,@ITEM_NAME=ITEM_NAME  FROM T_SALES_TEMP WHERE T_ID=@T_ID_CURSOR 


		   	INSERT INTO [dbo].[T_BARCODE_PRINT]
           ([ITEM_NAME]
           ,[ITEM_BARCODE]
           ,[PRICE]
           ,[COMPANY]
           ,[BILL_NUMBER])
     VALUES
           (@ITEM_NAME
           ,@ITEM_NAME
           ,@PRICE
           ,N''''
           ,@BILL_NUMBER)


FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CURSOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_STORE_FROM_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_STORE_FROM_TEMP]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_STORE_FROM_TEMP]
@BILL_NUMBER	numeric(18, 0)	,
@USER_NAME	nvarchar(MAX)	,
@SUBMIT_FLAG INT OUTPUT

AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID FROM T_SALES_TEMP WHERE BILL_NUMBER = @BILL_NUMBER AND ITEM_CODE<>0   ;

DECLARE
@T_ID_CURSOR INT,
@QTY	float	,
@STORE_CODE INT,
@ITEM_CODE INT,
@UNIT_CODE INT,
@B_CODE INT,
@UNIT_NAME	nvarchar(50)	,

@UNIT_QTY	float	,
@QTY_STORE_NOW_MIN	float	,
@QTY_NEW_MIN	float	,
@COMPANY_TITAL	nvarchar(50)	,
@BILL_B  nvarchar(50),
@COST FLOAT,
@PRICE FLOAT
BEGIN TRAN
BEGIN

SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CURSOR
WHILE @@FETCH_STATUS = 0
BEGIN
SELECT @BILL_B= ISNULL(MIN(BILL_NUMBER),0)-1 FROM T_BUY_DETAILS
SELECT @ITEM_CODE=ITEM_CODE,@UNIT_NAME=UNIT_NAME,@UNIT_QTY=UNIT_QTY,@PRICE=PRICE,@STORE_CODE=STORE_CODE,@QTY=QTY,@COST=COST  FROM T_SALES_TEMP WHERE T_ID=@T_ID_CURSOR 
IF @UNIT_QTY=1
BEGIN
SET @UNIT_CODE=1

END


ELSE    --  EEEEEELLLLLSSSSSEEEE

BEGIN
SET @UNIT_CODE=2


END
SELECT @QTY_STORE_NOW_MIN =ISNULL(SUM(BALANCE),0) FROM V_STORE_BOX_STORE WHERE ITEM_CODE=@ITEM_CODE AND IS_USED=1 AND STORE_CODE=@STORE_CODE AND UNIT_CODE=1
SET @QTY_NEW_MIN=(@QTY*@UNIT_QTY)-@QTY_STORE_NOW_MIN
--IF @QTY_NEW_MIN=0 GOTO ASDFSF
IF @QTY_NEW_MIN<0 SET @B_CODE=24 ELSE SET @B_CODE=25;

INSERT INTO [dbo].[T_BUY_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[PRICE_BUY]
           ,[CURRANCY_EQUAL]
           ,[PRICE]
           ,[TOTAL]
           ,[EXPENSES]
           ,[TOTAL_EXPENSES]
           ,[COST]
           ,[TOTAL_COST]
           ,[SELL1]
           ,[SELL2]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL+@BILL_B
           ,@BILL_B
           ,@ITEM_CODE
           ,@QTY_NEW_MIN/@UNIT_QTY
           ,@UNIT_NAME
           ,@UNIT_QTY
           ,@STORE_CODE
           ,NULL
           ,@COST
           ,1
           ,@COST
           ,@COST*(@QTY_NEW_MIN/@UNIT_QTY)
           ,0
           ,0
           ,@COST
           ,@COST*(@QTY_NEW_MIN/@UNIT_QTY)
           ,@PRICE
           ,0
           ,GETDATE()
           ,0)

INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[C_DATE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL+@BILL_B
           ,@BILL_B
           ,GETDATE()
           ,@B_CODE
           ,0
           ,@STORE_CODE
           ,NULL
           ,@ITEM_CODE
           ,1
           ,@QTY_NEW_MIN  
           ,0
           ,1
           ,GETDATE()
           ,0
           ,@COST
           ,1)

		   INSERT INTO [dbo].[T_ITEM_CORRECT]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[BALANCE]
           ,[BALANCE_NEW]
           ,[EQUAL_BALANCE]
           ,[RAF_NAME]
		   ,[USER_NAME]
           ,[C_DATE])
     VALUES
           (@COMPANY_TITAL+@BILL_B
           ,@BILL_B
           ,@ITEM_CODE
           ,@QTY_NEW_MIN/@UNIT_QTY
            ,@UNIT_NAME
           ,@UNIT_QTY
           ,@STORE_CODE
           ,@QTY_STORE_NOW_MIN
           ,@QTY_NEW_MIN/@UNIT_QTY
           ,@QTY_STORE_NOW_MIN-(@QTY_NEW_MIN/@UNIT_QTY)
           ,N''''
		   ,@USER_NAME
           ,GETDATE())
ASDFSF:


FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CURSOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

commit































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_STORE_FROM_TEMP_ADD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_STORE_FROM_TEMP_ADD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

















CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_STORE_FROM_TEMP_ADD]
@BILL_NUMBER	numeric(18, 0)	,
@SUBMIT_FLAG INT OUTPUT

AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID FROM T_SALES_TEMP WHERE BILL_NUMBER = @BILL_NUMBER AND ITEM_CODE<>0   ;

DECLARE
@T_ID_CURSOR INT,
@QTY	float	,
@STORE_CODE INT,
@ITEM_CODE INT,
@UNIT_CODE INT,
@B_CODE INT,
@UNIT_NAME	nvarchar(50)	,
@UNIT_QTY	float	,
@QTY_STORE_NOW_MIN	float	,
@QTY_NEW_MIN	float	,
@COMPANY_TITAL	nvarchar(50)	,
@BILL_B  nvarchar(50),
@COST FLOAT,
@PRICE FLOAT
BEGIN TRAN
BEGIN
SELECT @BILL_B= ISNULL(MIN(BILL_NUMBER),0)-1 FROM T_BUY_DETAILS
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CURSOR
WHILE @@FETCH_STATUS = 0
BEGIN
SELECT @ITEM_CODE=ITEM_CODE,@UNIT_NAME=UNIT_NAME,@UNIT_QTY=UNIT_QTY,@PRICE=PRICE,@STORE_CODE=STORE_CODE,@QTY=QTY,@COST=COST   FROM T_SALES_TEMP WHERE T_ID=@T_ID_CURSOR 
IF @UNIT_QTY=1
BEGIN
SET @UNIT_CODE=1

END


ELSE    --  EEEEEELLLLLSSSSSEEEE

BEGIN
SET @UNIT_CODE=2


END

SET @QTY_NEW_MIN=(@QTY*@UNIT_QTY)
IF @QTY_NEW_MIN=0 GOTO ASDFSF
 SET @B_CODE=26;

INSERT INTO [dbo].[T_BUY_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[PRICE_BUY]
           ,[CURRANCY_EQUAL]
           ,[PRICE]
           ,[TOTAL]
           ,[EXPENSES]
           ,[TOTAL_EXPENSES]
           ,[COST]
           ,[TOTAL_COST]
           ,[SELL1]
           ,[SELL2]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL+@BILL_B
           ,@BILL_B
           ,@ITEM_CODE
           ,@QTY_NEW_MIN/@UNIT_QTY
           ,@UNIT_NAME
           ,@UNIT_QTY
           ,@STORE_CODE
           ,NULL
           ,@COST
           ,1
           ,@COST
           ,@COST*(@QTY_NEW_MIN/@UNIT_QTY)
           ,0
           ,0
           ,@COST
           ,@COST*(@QTY_NEW_MIN/@UNIT_QTY)
           ,@PRICE
           ,0
           ,GETDATE()
           ,0)

INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[C_DATE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL+@BILL_B
           ,@BILL_B
           ,GETDATE()
           ,@B_CODE
           ,0
           ,@STORE_CODE
           ,NULL
           ,@ITEM_CODE
           ,1
           ,@QTY_NEW_MIN
           ,0
           ,1
           ,GETDATE()
           ,0
           ,@COST
           ,1)

ASDFSF:


FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CURSOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

commit

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEM_STORE_FROM_TEMP_TALAF]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEM_STORE_FROM_TEMP_TALAF]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_UPDATE_ITEM_STORE_FROM_TEMP_TALAF]
@BILL_NUMBER	numeric(18, 0)	,
@SUBMIT_FLAG INT OUTPUT

AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID FROM T_SALES_TEMP WHERE BILL_NUMBER = @BILL_NUMBER AND ITEM_CODE<>0   ;

DECLARE
@T_ID_CURSOR INT,
@QTY	float	,
@STORE_CODE INT,
@ITEM_CODE INT,
@UNIT_CODE INT,
@B_CODE INT,
@UNIT_NAME	nvarchar(50)	,
@UNIT_QTY	float	,
@QTY_STORE_NOW_MIN	float	,
@QTY_NEW_MIN	float	,
@COMPANY_TITAL	nvarchar(50)	,
@BILL_B  nvarchar(50),
@COST FLOAT,
@PRICE FLOAT
BEGIN TRAN
BEGIN
SELECT @BILL_B= ISNULL(MIN(BILL_NUMBER),0)-1 FROM T_BUY_DETAILS
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CURSOR
WHILE @@FETCH_STATUS = 0
BEGIN
SELECT @ITEM_CODE=ITEM_CODE,@UNIT_NAME=UNIT_NAME,@UNIT_QTY=UNIT_QTY,@PRICE=PRICE,@STORE_CODE=STORE_CODE,@QTY=QTY,@COST=COST   FROM T_SALES_TEMP WHERE T_ID=@T_ID_CURSOR 
IF @UNIT_QTY=1
BEGIN
SET @UNIT_CODE=1

END


ELSE    --  EEEEEELLLLLSSSSSEEEE

BEGIN
SET @UNIT_CODE=2


END

SET @QTY_NEW_MIN=(@QTY*@UNIT_QTY)*-1
IF @QTY_NEW_MIN=0 GOTO ASDFSF
 SET @B_CODE=25;

INSERT INTO [dbo].[T_BUY_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[PRICE_BUY]
           ,[CURRANCY_EQUAL]
           ,[PRICE]
           ,[TOTAL]
           ,[EXPENSES]
           ,[TOTAL_EXPENSES]
           ,[COST]
           ,[TOTAL_COST]
           ,[SELL1]
           ,[SELL2]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL+@BILL_B
           ,@BILL_B
           ,@ITEM_CODE
           ,@QTY_NEW_MIN/@UNIT_QTY
           ,@UNIT_NAME
           ,@UNIT_QTY
           ,@STORE_CODE
           ,NULL
           ,@COST
           ,1
           ,@COST
           ,@COST*(@QTY_NEW_MIN/@UNIT_QTY)
           ,0
           ,0
           ,@COST
           ,@COST*(@QTY_NEW_MIN/@UNIT_QTY)
           ,@PRICE
           ,0
           ,GETDATE()
           ,0)

INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[C_DATE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL+@BILL_B
           ,@BILL_B
           ,GETDATE()
           ,@B_CODE
           ,0
           ,@STORE_CODE
           ,NULL
           ,@ITEM_CODE
           ,1
           ,@QTY_NEW_MIN
           ,0
           ,1
           ,GETDATE()
           ,0
           ,@COST
           ,1)

ASDFSF:


FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CURSOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

commit
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEMS_NEW_BUY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEMS_NEW_BUY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'









CREATE PROCEDURE [dbo].[P_UPDATE_ITEMS_NEW_BUY]
@BILL_BRANCH	nvarchar(50)	,
@SUBMIT_FLAG INT OUTPUT

AS
BEGIN





DECLARE BUY_CURSOR CURSOR FOR SELECT  T_ID FROM T_BUY_DETAILS  WHERE BILL_BRANCH=@BILL_BRANCH   ;

DECLARE
@ITEM_CODE	int	,
 @T_ID_ITEM_CURCOR	int	,
@BILL_SELECT nvarchar(50)	,
 @IS_NEW_BUY INT,
@BILL_BUY INT,
@FLAG_UPDATE INT,
@BILL_BUY_MAX INT	

SELECT @BILL_BUY=BILL_NUMBER,@IS_NEW_BUY=IS_UPDATE_NEW_BUY FROM  T_BUY WHERE BILL_BRANCH LIKE @BILL_BRANCH


SELECT @FLAG_UPDATE=ISNULL(P_VALUE,0) FROM  T_PARAMETERS WHERE P_CODE=2


 
SET @SUBMIT_FLAG=0


OPEN BUY_CURSOR

FETCH NEXT FROM BUY_CURSOR INTO @T_ID_ITEM_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN

IF @FLAG_UPDATE=1
BEGIN
SELECT @ITEM_CODE=ITEM_CODE FROM  T_BUY_DETAILS WHERE T_ID=@T_ID_ITEM_CURCOR 
 
SELECT @BILL_BUY_MAX=ISNULL(MAX(BILL_NUMBER),0) FROM  T_BUY_DETAILS WHERE ACTIVE=1 AND ITEM_CODE=@ITEM_CODE
SELECT  @IS_NEW_BUY=IS_UPDATE_NEW_BUY FROM  T_BUY WHERE BILL_NUMBER =@BILL_BUY_MAX

 
 
UPDATE T_ITEMS SET IS_NEW_BUY=@IS_NEW_BUY   WHERE ITEM_CODE=@ITEM_CODE  
 
 
 END
 
  EXEC [dbo].[P_RE_ITEMS_TRANS] @ITEM_CODE
 
--ASAS:

FETCH NEXT FROM BUY_CURSOR INTO @T_ID_ITEM_CURCOR

END

CLOSE BUY_CURSOR
DEALLOCATE BUY_CURSOR

SET @SUBMIT_FLAG=1

END	--END OF PROGRAM




























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEMS_SELL_BUY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEMS_SELL_BUY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'









CREATE PROCEDURE [dbo].[P_UPDATE_ITEMS_SELL_BUY]
@BILL_BRANCH	nvarchar(50)	,
@SUBMIT_FLAG INT OUTPUT

AS
BEGIN





DECLARE BUY_CURSOR CURSOR FOR SELECT  T_ID FROM T_BUY_DETAILS  WHERE BILL_BRANCH=@BILL_BRANCH   ;

DECLARE
@ITEM_CODE	int	,
@PRICE_BUY	float	,
@COST	float	,
@UNIT_NAME	nvarchar(50)	,
@SELL1	float	,
@SELL2	float	,
@AVG_COST	float	,
@T_ID_ITEM_CURCOR INT,
@T_ID_GUID_CURCOR INT,
@QTY_UNIT_SELL	float	,
@QTY_UNIT_BUY	float	,
@QTY_UU	float	,
@SELL1_MIN	float	,
@SELL2_MIN	float	,
@BUY_MIN	float	,
@AA_ALL	float	,
@QQ_ALL	float	,
@FLAG_UPDATE INT ,
@BILL_SELECT nvarchar(50)	,
@COST_MIN	float,
@BILL_BUY INT,
@BILL_BUY_MAX INT	

SELECT @BILL_BUY=BILL_NUMBER FROM  T_BUY WHERE BILL_BRANCH LIKE @BILL_BRANCH




SELECT @FLAG_UPDATE=ISNULL(P_VALUE,0) FROM  T_PARAMETERS WHERE P_CODE=2

SET @SUBMIT_FLAG=0


OPEN BUY_CURSOR

FETCH NEXT FROM BUY_CURSOR INTO @T_ID_ITEM_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN

SELECT @ITEM_CODE=ITEM_CODE,@PRICE_BUY=PRICE,@COST=COST,@UNIT_NAME=UNIT_NAME,@SELL1=SELL1,@SELL2=SELL2,@COST_MIN=ISNULL( ISNULL(TOTAL_COST,0)/NULLIF(IIF(QTY*UNIT_QTY=0,NULL,QTY*UNIT_QTY),0),0),@BUY_MIN=ISNULL(ISNULL(TOTAL,0)/NULLIF(IIF(QTY*UNIT_QTY=0,NULL,QTY*UNIT_QTY),0),0) FROM  T_BUY_DETAILS WHERE T_ID=@T_ID_ITEM_CURCOR 
--IF @SELL1=0 AND @SELL2=0 GOTO ASAS
SELECT @QTY_UNIT_SELL=UNIT_QTY FROM  T_ITEM_UNIT WHERE ITEM_CODE=@ITEM_CODE AND UNIT_NAME LIKE @UNIT_NAME  --AND DF_SALE=1
SELECT @QTY_UNIT_BUY=UNIT_QTY FROM  T_ITEM_UNIT WHERE ITEM_CODE=@ITEM_CODE AND UNIT_NAME LIKE @UNIT_NAME

SELECT @AVG_COST=ISNULL( ISNULL(SUM(TOTAL_COST),0)/NULLIF(SUM(IIF(QTY*UNIT_QTY=0,NULL,QTY*UNIT_QTY)),0),0) FROM  T_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE  AND ACTIVE=1 AND T_ID=@T_ID_ITEM_CURCOR

SELECT @BILL_BUY_MAX=ISNULL(MAX(BILL_NUMBER),0) FROM  T_BUY_DETAILS WHERE ACTIVE=1 AND ITEM_CODE=@ITEM_CODE
UPDATE T_ITEMS SET IS_HIDE=0 WHERE ITEM_CODE=@ITEM_CODE
IF @BILL_BUY=@BILL_BUY_MAX
BEGIN

IF @SELL1<>0
BEGIN
UPDATE T_ITEM_UNIT SET PRICE_SALE_1=@SELL1   WHERE ITEM_CODE=@ITEM_CODE AND UNIT_CODE=1
UPDATE T_ITEMS SET SELL= @SELL1 WHERE ITEM_CODE=@ITEM_CODE
END
IF @SELL2<>0
BEGIN
UPDATE T_ITEM_UNIT SET PRICE_SALE_1=@SELL2   WHERE ITEM_CODE=@ITEM_CODE AND UNIT_CODE=2
UPDATE T_ITEMS SET SELL2= @SELL2 WHERE ITEM_CODE=@ITEM_CODE
END
 
END

  EXEC [dbo].[P_RE_ITEMS_TRANS] @ITEM_CODE

DECLARE ITEMS_CURSOR CURSOR FOR SELECT  UNIT_GUID FROM T_ITEM_UNIT  WHERE ITEM_CODE=@ITEM_CODE   ;



OPEN ITEMS_CURSOR

FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN



SELECT @QTY_UU=UNIT_QTY FROM  T_ITEM_UNIT WHERE UNIT_GUID=@T_ID_GUID_CURCOR
SELECT TOP (1) @BILL_SELECT=ISNULL(BILL_BRANCH,N''0'') FROM  T_BUY_DETAILS WHERE ACTIVE=1 AND ITEM_CODE=@ITEM_CODE ORDER BY BILL_NUMBER DESC
--UPDATE T_ITEM_UNIT SET PRICE_SALE_1=@SELL1_MIN*@QTY_UU,PRICE_BUY=@BUY_MIN*@QTY_UU,PRICE_COST=@COST_MIN*@QTY_UU,PRICE_SALE_CUR=@SELL2_MIN*@QTY_UU ,PRICE_AVG_COST=@AVG_COST*@QTY_UU  WHERE UNIT_GUID=@T_ID_GUID_CURCOR
IF @BILL_SELECT=@BILL_BRANCH
BEGIN
UPDATE T_ITEM_UNIT SET PRICE_BUY=@COST_MIN*@QTY_UU ,PRICE_AVG_COST=@AVG_COST*@QTY_UU  WHERE UNIT_GUID=@T_ID_GUID_CURCOR
IF @FLAG_UPDATE=1
BEGIN
UPDATE T_ITEMS SET COST= @COST_MIN WHERE ITEM_CODE=@ITEM_CODE
UPDATE T_ITEM_UNIT SET PRICE_COST=@COST_MIN*@QTY_UU  WHERE UNIT_GUID=@T_ID_GUID_CURCOR
END

END




FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR

END

CLOSE ITEMS_CURSOR
DEALLOCATE ITEMS_CURSOR

--ASAS:

FETCH NEXT FROM BUY_CURSOR INTO @T_ID_ITEM_CURCOR

END

CLOSE BUY_CURSOR
DEALLOCATE BUY_CURSOR

SET @SUBMIT_FLAG=1

END	--END OF PROGRAM




























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_ITEMS_SELL_FACTORY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_ITEMS_SELL_FACTORY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[P_UPDATE_ITEMS_SELL_FACTORY]
@BILL_BRANCH	nvarchar(50)	,
@SUBMIT_FLAG INT OUTPUT

AS
BEGIN





DECLARE BUY_CURSOR CURSOR FOR SELECT  T_ID FROM T_BUY_DETAILS  WHERE BILL_BRANCH=@BILL_BRANCH   ;

DECLARE
@ITEM_CODE	int	,
@PRICE_BUY	float	,
@COST	float	,
@UNIT_NAME	nvarchar(50)	,
@SELL1	float	,
@SELL2	float	,
@AVG_COST	float	,
@T_ID_ITEM_CURCOR INT,
@T_ID_GUID_CURCOR INT,
@QTY_UNIT_SELL	float	,
@QTY_UNIT_BUY	float	,
@QTY_UU	float	,
@SELL1_MIN	float	,
@SELL2_MIN	float	,
@BUY_MIN	float	,
@AA_ALL	float	,
@QQ_ALL	float	,
@FLAG_UPDATE INT ,
@BILL_SELECT nvarchar(50)	,
@COST_MIN	float	


SELECT @FLAG_UPDATE=ISNULL(P_VALUE,0) FROM  T_PARAMETERS WHERE P_CODE=2

SET @SUBMIT_FLAG=0


OPEN BUY_CURSOR

FETCH NEXT FROM BUY_CURSOR INTO @T_ID_ITEM_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN

SELECT @ITEM_CODE=ITEM_CODE,@PRICE_BUY=PRICE,@COST=COST,@UNIT_NAME=UNIT_NAME,@SELL1=SELL1,@SELL2=SELL2,@COST_MIN=ISNULL(TOTAL_COST,0)/(QTY*UNIT_QTY),@BUY_MIN=ISNULL(TOTAL,0)/(QTY*UNIT_QTY) FROM  T_BUY_DETAILS WHERE T_ID=@T_ID_ITEM_CURCOR 
--IF @SELL1=0 AND @SELL2=0 GOTO ASAS
SELECT @QTY_UNIT_SELL=UNIT_QTY FROM  T_ITEM_UNIT WHERE ITEM_CODE=@ITEM_CODE AND UNIT_NAME LIKE @UNIT_NAME  --AND DF_SALE=1
SELECT @QTY_UNIT_BUY=UNIT_QTY FROM  T_ITEM_UNIT WHERE ITEM_CODE=@ITEM_CODE AND UNIT_NAME LIKE @UNIT_NAME

SELECT @AVG_COST= ISNULL(SUM(TOTAL_COST),0)/SUM(QTY*UNIT_QTY) FROM  T_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE   AND T_ID=@T_ID_ITEM_CURCOR


--SET @SELL1_MIN=@SELL1/@QTY_UNIT_SELL
--SET @SELL2_MIN=@SELL2/@QTY_UNIT_SELL

--SET @BUY_MIN=@PRICE_BUY/@QTY_UNIT_BUY
--SET @COST_MIN=@COST/@QTY_UNIT_BUY

DECLARE ITEMS_CURSOR CURSOR FOR SELECT  UNIT_GUID FROM T_ITEM_UNIT  WHERE ITEM_CODE=@ITEM_CODE   ;



OPEN ITEMS_CURSOR

FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN



SELECT @QTY_UU=UNIT_QTY FROM  T_ITEM_UNIT WHERE UNIT_GUID=@T_ID_GUID_CURCOR
SELECT TOP (1) @BILL_SELECT=ISNULL(BILL_BRANCH,N''0'') FROM  T_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE ORDER BY BILL_NUMBER ASC
--UPDATE T_ITEM_UNIT SET PRICE_SALE_1=@SELL1_MIN*@QTY_UU,PRICE_BUY=@BUY_MIN*@QTY_UU,PRICE_COST=@COST_MIN*@QTY_UU,PRICE_SALE_CUR=@SELL2_MIN*@QTY_UU ,PRICE_AVG_COST=@AVG_COST*@QTY_UU  WHERE UNIT_GUID=@T_ID_GUID_CURCOR
IF @BILL_SELECT=@BILL_BRANCH
BEGIN
UPDATE T_ITEM_UNIT SET PRICE_BUY=@COST_MIN*@QTY_UU ,PRICE_AVG_COST=@AVG_COST*@QTY_UU  WHERE UNIT_GUID=@T_ID_GUID_CURCOR
IF @FLAG_UPDATE=1
BEGIN
 UPDATE T_ITEMS SET COST= @COST_MIN WHERE ITEM_CODE=@ITEM_CODE

END

END


--IF @SELL1<>0
--BEGIN
--UPDATE T_ITEM_UNIT SET PRICE_SALE_1=@SELL1_MIN*@QTY_UU   WHERE UNIT_GUID=@T_ID_GUID_CURCOR
--IF @QTY_UU=1 UPDATE T_ITEMS SET SELL= @SELL1_MIN*@QTY_UU WHERE ITEM_CODE=@ITEM_CODE
--IF @QTY_UU<>1 UPDATE T_ITEMS SET SELL2= @SELL1_MIN*@QTY_UU WHERE ITEM_CODE=@ITEM_CODE

--END
--IF @SELL2<>0
--BEGIN
--UPDATE T_ITEM_UNIT SET PRICE_SALE_CUR=@SELL2_MIN*@QTY_UU   WHERE UNIT_GUID=@T_ID_GUID_CURCOR
--IF @QTY_UU=1 UPDATE T_ITEMS SET SELL_CNY= @SELL2_MIN*@QTY_UU WHERE ITEM_CODE=@ITEM_CODE
--IF @QTY_UU<>1 UPDATE T_ITEMS SET SELL2_CNY= @SELL2_MIN*@QTY_UU WHERE ITEM_CODE=@ITEM_CODE

--END
 




FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR

END

CLOSE ITEMS_CURSOR
DEALLOCATE ITEMS_CURSOR

--ASAS:

FETCH NEXT FROM BUY_CURSOR INTO @T_ID_ITEM_CURCOR

END

CLOSE BUY_CURSOR
DEALLOCATE BUY_CURSOR

SET @SUBMIT_FLAG=1

END	--END OF PROGRAM





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_NOTIFICATION]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_NOTIFICATION]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE [dbo].[P_UPDATE_NOTIFICATION]

@SUBMIT_FLAG INT OUTPUT

AS
DECLARE


@NOTI_CODE_CERSUR INT,
@COUNT_SETTING	INT	,
@CC_COUNT	INT	

BEGIN

SELECT @CC_COUNT=COUNT(NOTI_CODE)  FROM T_NOTIFICATION WHERE NOTI_CODE=1
IF @CC_COUNT=0 INSERT T_NOTIFICATION VALUES(1,N''منتجات دون حد الطلب'',0,0,N''ومضى على اخر تاريخ بيعها :'',0,N''يوم'',0)
SELECT @CC_COUNT=COUNT(NOTI_CODE)  FROM T_NOTIFICATION WHERE NOTI_CODE=2
IF @CC_COUNT=0 INSERT T_NOTIFICATION VALUES(2,N''منتجات ستصبح اكسباير'',0,0,N''تنبيه قبل الاكسباير بــ :'',0,N''يوم'',0)
SELECT @CC_COUNT=COUNT(NOTI_CODE)  FROM T_NOTIFICATION WHERE NOTI_CODE=3
IF @CC_COUNT=0 INSERT T_NOTIFICATION VALUES(3,N''منتجات اكسباير'',0,0,N'''',0,N'''',0)
SELECT @CC_COUNT=COUNT(NOTI_CODE)  FROM T_NOTIFICATION WHERE NOTI_CODE=4
IF @CC_COUNT=0 INSERT T_NOTIFICATION VALUES(4,N''منتجات راكدة'',0,0,N''ومضى على اخر تاريخ بيعها :'',0,N''يوم'',0)
SELECT @CC_COUNT=COUNT(NOTI_CODE)  FROM T_NOTIFICATION WHERE NOTI_CODE=5
IF @CC_COUNT=0 INSERT T_NOTIFICATION VALUES(5,N''منتجات رصيدها سالب'',0,0,N'''',0,N'''',0)
SELECT @CC_COUNT=COUNT(NOTI_CODE)  FROM T_NOTIFICATION WHERE NOTI_CODE=6
IF @CC_COUNT=0 INSERT T_NOTIFICATION VALUES(6,N''ملاحظات التذكير'',0,0,N'''',0,N'''',0)
SELECT @CC_COUNT=COUNT(NOTI_CODE)  FROM T_NOTIFICATION WHERE NOTI_CODE=7
IF @CC_COUNT=0 INSERT T_NOTIFICATION VALUES(7,N''مستحقات الاقساط'',0,0,N''تنبيه قبل الاستحقاق  بــ :'',0,N''يوم'',1)
SELECT @CC_COUNT=COUNT(NOTI_CODE)  FROM T_NOTIFICATION WHERE NOTI_CODE=8
IF @CC_COUNT=0 INSERT T_NOTIFICATION VALUES(8,N''تنبيه اخر تسديد للعميل'',0,0, N''ومضى على اخر تسديد  بــ :'',0,N''يوم'',1)

SET @SUBMIT_FLAG=0

UPDATE T_NOTIFICATION SET NOTI_COUNT=0 
DECLARE BOX_CURSOR CURSOR FOR SELECT  NOTI_CODE FROM T_NOTIFICATION WHERE ACTIVE=1  ;

OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @NOTI_CODE_CERSUR
WHILE @@FETCH_STATUS = 0
BEGIN
SELECT @COUNT_SETTING=COUNT_SETTING FROM T_NOTIFICATION WHERE NOTI_CODE=@NOTI_CODE_CERSUR
IF @NOTI_CODE_CERSUR=1
BEGIN


SELECT @CC_COUNT=COUNT (DISTINCT ITEM_CODE)   FROM V_ITEM_LAST_DATE_DIFF WHERE (LAST_DIFF BETWEEN 0 AND @COUNT_SETTING) AND BALANCE<=QTY_MIN  AND ITEM_CODE>0
UPDATE T_NOTIFICATION SET NOTI_COUNT=@CC_COUNT WHERE NOTI_CODE=@NOTI_CODE_CERSUR
END
ELSE IF @NOTI_CODE_CERSUR=2
BEGIN
SELECT @CC_COUNT=COUNT(DISTINCT ITEM_CODE)   FROM V_BUY_DETAILS_EXPIRED_REMAIN WHERE REMAIN_BUY_MIN>0 AND DATEDIFF(DAY,GETDATE(),EXP_DATE)<=@COUNT_SETTING AND EXP_DATE>GETDATE()  AND ITEM_CODE>0
UPDATE T_NOTIFICATION SET NOTI_COUNT=@CC_COUNT WHERE NOTI_CODE=@NOTI_CODE_CERSUR
END
ELSE IF @NOTI_CODE_CERSUR=3
BEGIN
SELECT @CC_COUNT=COUNT(DISTINCT ITEM_CODE)   FROM V_BUY_DETAILS_EXPIRED_REMAIN WHERE REMAIN_BUY_MIN>0 AND EXP_DATE<=GETDATE()  AND ITEM_CODE>0
UPDATE T_NOTIFICATION SET NOTI_COUNT=@CC_COUNT WHERE NOTI_CODE=@NOTI_CODE_CERSUR
END
ELSE IF @NOTI_CODE_CERSUR=4
BEGIN
SELECT @CC_COUNT=COUNT(DISTINCT ITEM_CODE)   FROM V_ITEM_LAST_DATE_DIFF WHERE  LAST_DIFF>=@COUNT_SETTING and BALANCE>0  AND ITEM_CODE>0
UPDATE T_NOTIFICATION SET NOTI_COUNT=@CC_COUNT WHERE NOTI_CODE=@NOTI_CODE_CERSUR
END
ELSE IF @NOTI_CODE_CERSUR=5
BEGIN
SELECT @CC_COUNT=COUNT(DISTINCT ITEM_CODE)   FROM V_STORE_BOX_ON_ON WHERE BALANCE<0 AND ITEM_CODE>0
UPDATE T_NOTIFICATION SET NOTI_COUNT=@CC_COUNT WHERE NOTI_CODE=@NOTI_CODE_CERSUR
END
ELSE IF @NOTI_CODE_CERSUR=6
BEGIN
SELECT @CC_COUNT=COUNT(T_ID)   FROM T_NOTES WHERE  IS_DONE=1 AND REMAINDER_DATE<= getdate() 
UPDATE T_NOTIFICATION SET NOTI_COUNT=@CC_COUNT WHERE NOTI_CODE=@NOTI_CODE_CERSUR
END
ELSE IF @NOTI_CODE_CERSUR=7
BEGIN
SELECT @CC_COUNT=COUNT(DISTINCT T_ID)   FROM T_AKSAT    WHERE   (DATEDIFF(DAY, getdate(), T_AKSAT.DATE_DUE)<= @COUNT_SETTING)  AND CASH_CODE < 2  
UPDATE T_NOTIFICATION SET NOTI_COUNT=@CC_COUNT WHERE NOTI_CODE=@NOTI_CODE_CERSUR
END
ELSE IF @NOTI_CODE_CERSUR=8
BEGIN
SELECT @CC_COUNT=COUNT(DISTINCT ACCOUNT_CODE)   FROM V_ACC_BALANCE_CLIENT    WHERE (DATEDIFF(DAY, (SELECT        ISNULL(MAX(BILL_DATE), NULL) AS Expr1
                               FROM            dbo.T_BOX
                               WHERE        (ACCOUNT_CODE = dbo.V_ACC_BALANCE_CLIENT.ACCOUNT_CODE) AND ACTIVE = 1 AND( B_CODE = 5 OR B_CODE = 7 OR B_CODE=15  OR B_CODE=28 OR B_CODE=70 OR B_CODE=71)), 
                         GETDATE())>= (SELECT TOP(1)COUNT_SETTING FROM T_NOTIFICATION WHERE NOTI_CODE=8)) and( BALANCE>0 or BALANCE_IQ>0) and  V_ACC_BALANCE_CLIENT.ACCOUNT_PARENT=21 
UPDATE T_NOTIFICATION SET NOTI_COUNT=@CC_COUNT WHERE NOTI_CODE=@NOTI_CODE_CERSUR
END
ELSE IF @NOTI_CODE_CERSUR=9
BEGIN
SELECT @CC_COUNT=COUNT(*)   FROM V_A_ERROR_T_STORE_BOX_SALES_DETAILS    
UPDATE T_NOTIFICATION SET NOTI_COUNT=@CC_COUNT WHERE NOTI_CODE=@NOTI_CODE_CERSUR
END

FETCH NEXT FROM BOX_CURSOR INTO @NOTI_CODE_CERSUR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR

SELECT @SUBMIT_FLAG=ISNULL(SUM(NOTI_COUNT),0) FROM T_NOTIFICATION WHERE ACTIVE=1 AND NOTI_COUNT<>0


END	--END OF PROGRAM
' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_OFFER_CODE_SALES_ORDER]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_OFFER_CODE_SALES_ORDER]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'





CREATE PROCEDURE [dbo].[P_UPDATE_OFFER_CODE_SALES_ORDER]

@SUBMIT_FLAG INT OUTPUT

AS
DECLARE


@BILL_CERSUR INT,
@CC_COUNT INT,
@ITEM_NAME	NVARCHAR(MAX)	

BEGIN
SET @SUBMIT_FLAG=0

DECLARE BOX_CURSOR CURSOR FOR SELECT  BILL_NUMBER FROM T_SALES WHERE OFFER_CODE=66 ;

OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @BILL_CERSUR
WHILE @@FETCH_STATUS = 0
BEGIN

SELECT @CC_COUNT=COUNT(BILL_NUMBER)    FROM T_SALES_TEMP WHERE BILL_NUMBER=@BILL_CERSUR AND USER_PREPARE IS NULL and QTY<>0

IF @CC_COUNT=0
BEGIN
UPDATE T_SALES SET OFFER_CODE=55 WHERE BILL_NUMBER=@BILL_CERSUR
END


FETCH NEXT FROM BOX_CURSOR INTO @BILL_CERSUR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM


' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_QTY_IN_OUT_BUY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_QTY_IN_OUT_BUY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_UPDATE_QTY_IN_OUT_BUY]
@BILL_BRANCH	NVARCHAR(MAX)	
AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID FROM T_BUY_DETAILS WHERE BILL_BRANCH = @BILL_BRANCH    ;

DECLARE
@T_ID_CURSOR INT,
@ITEM_CODE INT,
@ITEM_NAME NVARCHAR(MAX)	,
@QTY	float	,
@BILL_NUMBER	INT	,
@UNIT_QTY	float	

BEGIN TRAN
BEGIN
DELETE FROM T_SALES_IN_OUT
OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CURSOR
WHILE @@FETCH_STATUS = 0
BEGIN
SELECT @ITEM_CODE=ITEM_CODE,@UNIT_QTY=UNIT_QTY ,@BILL_NUMBER=BILL_NUMBER ,@QTY=QTY  FROM T_BUY_DETAILS WHERE T_ID=@T_ID_CURSOR 
SELECT @ITEM_NAME=ITEM_NAME FROM T_ITEMS WHERE ITEM_CODE=@ITEM_CODE
INSERT INTO [dbo].[T_SALES_IN_OUT]
           ([ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[QTY_OUT]
           ,[BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[UNIT_QTY])
     VALUES
           (@ITEM_CODE
           ,@ITEM_NAME
           ,@QTY
           ,0
           ,@BILL_BRANCH
           ,@BILL_NUMBER
           ,@UNIT_QTY)


FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CURSOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR




END	--END OF PROGRAM

commit
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_QTY_IN_OUT_SALES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_QTY_IN_OUT_SALES]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_UPDATE_QTY_IN_OUT_SALES]
@BILL_BRANCH	NVARCHAR(MAX)	
AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID FROM T_SALES_DETAILS WHERE BILL_BRANCH = @BILL_BRANCH    ;

DECLARE
@T_ID_CURSOR INT,
@ITEM_CODE INT,
@ITEM_NAME NVARCHAR(MAX)	,
@QTY	float	,
@BILL_NUMBER	INT	,
@UNIT_QTY	float	

BEGIN TRAN
BEGIN
DELETE FROM T_SALES_IN_OUT
OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CURSOR
WHILE @@FETCH_STATUS = 0
BEGIN
SELECT @ITEM_CODE=ITEM_CODE,@UNIT_QTY=UNIT_QTY,@ITEM_NAME=ITEM_NAME ,@BILL_NUMBER=BILL_NUMBER ,@QTY=QTY FROM T_SALES_DETAILS WHERE T_ID=@T_ID_CURSOR 

INSERT INTO [dbo].[T_SALES_IN_OUT]
           ([ITEM_CODE]
           ,[ITEM_NAME]
           ,[QTY]
           ,[QTY_OUT]
           ,[BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[UNIT_QTY])
     VALUES
           (@ITEM_CODE
           ,@ITEM_NAME
           ,@QTY
           ,0
           ,@BILL_BRANCH
           ,@BILL_NUMBER
           ,@UNIT_QTY)


FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CURSOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR




END	--END OF PROGRAM

commit
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[P_UPDATE_QTY_MINUS_RETURN_FROM_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[P_UPDATE_QTY_MINUS_RETURN_FROM_TEMP]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[P_UPDATE_QTY_MINUS_RETURN_FROM_TEMP]
@BILL_NUMBER	numeric(18, 0)	,
@SUBMIT_FLAG INT OUTPUT

AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  T_ID FROM T_SALES_TEMP WHERE BILL_NUMBER = @BILL_NUMBER    ;

DECLARE
@T_ID_CURSOR INT,
@ITEM_CODE INT,
@UNIT_CODE INT,
@UNIT_NAME	nvarchar(50)	,
@UNIT_QTY	float	,
@PRICE FLOAT
BEGIN TRAN
BEGIN

OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CURSOR
WHILE @@FETCH_STATUS = 0
BEGIN
update  T_SALES_TEMP set QTY=QTY*-1 WHERE T_ID=@T_ID_CURSOR 


FETCH NEXT FROM BOX_CURSOR INTO @T_ID_CURSOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

commit
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_ADD_CLIENTS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_ADD_CLIENTS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




CREATE PROCEDURE [dbo].[PF_ADD_CLIENTS]
@CLIENT_CODE INT,
@CLIENT_NAME NVARCHAR(MAX),
@CLIENT_TYPE INT,
@MANDOOB_CODE INT,
@CLIENT_PHONE NVARCHAR(MAX),
@CLIENT_EMAILE NVARCHAR(MAX),
@CLIENT_REGION NVARCHAR(MAX),
@CLIENT_ADDRESS NVARCHAR(MAX),
@CLIENT_BARCODE NVARCHAR(MAX),
@CLIENT_NOTE NVARCHAR(MAX),
@CLIENT_BUSINESS NVARCHAR(MAX),
@DISCOUNT_PERCENT  float ,
@USER_CREATE NVARCHAR(MAX),

@BALANCE_FIRST_USA float ,
@BALANCE_FIRST_IQ float ,
@SUBMIT_FLAG INT OUTPUT



AS
declare
@USER_CODE  INT,
@CURRANCY_CODE  INT,
@CURRANCY_USA float	,
@CURRANCY_IQ float	,
@CURRANCY_EQUAL float	,
@COMPANY_TITAL   NVARCHAR(MAX),
@DFF int

BEGIN TRAN
BEGIN
SET @SUBMIT_FLAG=0
SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1

IF @CLIENT_CODE=0
BEGIN
SELECT @CLIENT_CODE= ISNULL(MAX(CLIENT_CODE),2100000) + 1 FROM T_CLIENT
END

if not exists (select * from T_ACCOUNTS where ACCOUNT_CODE = @CLIENT_CODE )  INSERT INTO [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [C_DATE], [ACCOUNT_ACTIVE]) 
VALUES (@CLIENT_CODE, @CLIENT_NAME, 21, 1, 1, @CURRANCY_CODE, 2, 3, N'''', 3, 1, GETDATE(), 1)  
else 
UPDATE [dbo].[T_ACCOUNTS] SET [ACCOUNT_CODE] = @CLIENT_CODE, [ACCOUNT_NAME] = @CLIENT_NAME, [ACCOUNT_PARENT] = 21, [TYPE_ACCOUNT_CODE] = 1, [BRANCH_CODE] = 1, [CURRANCY_CODE] = @CURRANCY_CODE, [FINAL_CODE] = 2, [ACCOUNT_LEVEL] = 3, [ACCOUNT_NOTE] = N'''', [SECURETY_CODE] = 1, [ACCOUNT_ENTITY] = 1,  [ACCOUNT_ACTIVE] = 1  WHERE ACCOUNT_CODE=@CLIENT_CODE  


if not exists (select * from T_CLIENT where CLIENT_CODE = @CLIENT_CODE )  INSERT INTO [dbo].[T_CLIENT] ([CLIENT_CODE], [CLIENT_NAME], [CLIENT_TYPE], [ACCOUNT_CODE], [CURRANCY_CODE], [MANDOOB_CODE], [CLIENT_PHONE], [CLIENT_PHONE_SMS], [CLIENT_EMAILE], [CLIENT_REGION], [CLIENT_ADDRESS], [CLIENT_BARCODE], [CLIENT_CARD], [CLIENT_NOTE], [CLIENT_PIN_CODE], [DISCOUNT_PERCENT], [SECURETY_CODE], [MAX_DEBIT],  [CLIENT_BUSINESS],[CLIENT_ACTIVE], [C_DATE], [C_USER])
 VALUES (@CLIENT_CODE, @CLIENT_NAME, @CLIENT_TYPE, @CLIENT_CODE, @CURRANCY_CODE, @MANDOOB_CODE, @CLIENT_PHONE, N'''', @CLIENT_EMAILE, @CLIENT_REGION, @CLIENT_ADDRESS, @CLIENT_BARCODE, N'''', @CLIENT_NOTE, N'''', @DISCOUNT_PERCENT, 1, 0, @CLIENT_BUSINESS, 1, GETDATE(), @USER_CREATE)  
 else 
 UPDATE [dbo].[T_CLIENT] SET [CLIENT_CODE] = @CLIENT_CODE, [CLIENT_NAME] = @CLIENT_NAME, [CLIENT_TYPE] = @CLIENT_TYPE, [ACCOUNT_CODE] = @CLIENT_CODE, [CURRANCY_CODE] = @CURRANCY_CODE, [MANDOOB_CODE] = @MANDOOB_CODE, [CLIENT_PHONE] = @CLIENT_PHONE, [CLIENT_PHONE_SMS] = N'''', [CLIENT_EMAILE] = @CLIENT_EMAILE, [CLIENT_REGION] = @CLIENT_REGION, [CLIENT_ADDRESS] = @CLIENT_ADDRESS, [CLIENT_BARCODE] = @CLIENT_BARCODE, [CLIENT_CARD] = N'''', [CLIENT_NOTE] = @CLIENT_NOTE, [CLIENT_PIN_CODE] = N'''', [DISCOUNT_PERCENT] = @DISCOUNT_PERCENT, [SECURETY_CODE] = 1, [MAX_DEBIT] = 0, [CLIENT_BUSINESS] = @CLIENT_BUSINESS, [CLIENT_ACTIVE] = 1, [C_DATE] = GETDATE(), [C_USER] = @USER_CREATE  WHERE CLIENT_CODE=@CLIENT_CODE

 IF @BALANCE_FIRST_IQ<>0 OR @BALANCE_FIRST_USA <>0
 BEGIN
 DELETE FROM T_BOX WHERE BILL_NUMBER=0  AND B_CODE=13 AND  ACCOUNT_CODE=@CLIENT_CODE
 IF @CURRANCY_CODE=1
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=1/NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_IQ
END

ELSE
BEGIN
SELECT @CURRANCY_USA=NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_USA
END
SELECT TOP(1) @USER_CODE=ISNULL(USER_CODE,1) FROM T_USERS WHERE [USER_NAME] LIKE @USER_CREATE
INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE]) 
VALUES (@COMPANY_TITAL + N''0'', 0,N'''', (SELECT TOP(1)  ISNULL(MIN(BILL_DATE),GETDATE())  FROM T_BOX ), GETDATE(), 0, 13, 1, @CLIENT_CODE, N'''', @BALANCE_FIRST_USA, 0, @BALANCE_FIRST_IQ, 0, @CURRANCY_CODE, @CURRANCY_EQUAL,  N''الرصيد الافتتاحي'', 0, @USER_CODE, GETDATE(), 1)
 END





SET @SUBMIT_FLAG=@CLIENT_CODE



END	--END OF PROGRAM
commit





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_ADD_CLIENTS_NEW]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_ADD_CLIENTS_NEW]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'





CREATE PROCEDURE [dbo].[PF_ADD_CLIENTS_NEW]

@CLIENT_NAME NVARCHAR(MAX),
@CLIENT_TYPE INT,
@MANDOOB_CODE INT,
@TYPE_PRICE_CODE INT,
@CLIENT_PHONE NVARCHAR(MAX),
@CLIENT_REGION NVARCHAR(MAX),
@CLIENT_ADDRESS NVARCHAR(MAX),
@CLIENT_BUSINESS NVARCHAR(MAX),
@LAT NVARCHAR(MAX),
@LNG NVARCHAR(MAX),
@CLIENT_CODE INT OUTPUT




AS
declare
@USER_CODE  INT,
@CURRANCY_CODE  INT


BEGIN TRAN
BEGIN

SELECT @CURRANCY_CODE=ISNULL(CURRANCY_CODE,1) FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1


SELECT @CLIENT_CODE= ISNULL(MAX(CLIENT_CODE),2100000) + 1 FROM T_CLIENT


if not exists (select * from T_ACCOUNTS where ACCOUNT_CODE = @CLIENT_CODE )  INSERT INTO [dbo].[T_ACCOUNTS] ([ACCOUNT_CODE], [ACCOUNT_NAME], [ACCOUNT_PARENT], [TYPE_ACCOUNT_CODE], [BRANCH_CODE], [CURRANCY_CODE], [FINAL_CODE], [ACCOUNT_LEVEL], [ACCOUNT_NOTE], [SECURETY_CODE], [ACCOUNT_ENTITY], [C_DATE], [ACCOUNT_ACTIVE]) 
VALUES (@CLIENT_CODE, @CLIENT_NAME, 21, 1, 1, @CURRANCY_CODE, 2, 3, N'''', 1, 1, GETDATE(), 1)  
else 
UPDATE [dbo].[T_ACCOUNTS] SET [ACCOUNT_CODE] = @CLIENT_CODE, [ACCOUNT_NAME] = @CLIENT_NAME, [ACCOUNT_PARENT] = 21, [TYPE_ACCOUNT_CODE] = 1, [BRANCH_CODE] = 1, [CURRANCY_CODE] = @CURRANCY_CODE, [FINAL_CODE] = 2, [ACCOUNT_LEVEL] = 3, [ACCOUNT_NOTE] = N'''', [SECURETY_CODE] = 1, [ACCOUNT_ENTITY] = 1,  [ACCOUNT_ACTIVE] = 1  WHERE ACCOUNT_CODE=@CLIENT_CODE  


if not exists (select * from T_CLIENT where CLIENT_CODE = @CLIENT_CODE )  INSERT INTO [dbo].[T_CLIENT] ([CLIENT_CODE], [CLIENT_NAME], [CLIENT_TYPE], [ACCOUNT_CODE], [CURRANCY_CODE], [MANDOOB_CODE], [CLIENT_PHONE], [CLIENT_PHONE_SMS], [CLIENT_EMAILE], [CLIENT_REGION], [CLIENT_ADDRESS], [CLIENT_BARCODE], [CLIENT_CARD], [CLIENT_NOTE], [CLIENT_PIN_CODE], [DISCOUNT_PERCENT], [SECURETY_CODE], [MAX_DEBIT],  [CLIENT_BUSINESS],[CLIENT_ACTIVE], [C_DATE], [C_USER], [LAT], [LNG], [TYPE_PRICE_CODE])
 VALUES (@CLIENT_CODE, @CLIENT_NAME, @CLIENT_TYPE, @CLIENT_CODE, @CURRANCY_CODE, @MANDOOB_CODE, @CLIENT_PHONE, N'''', N'''', @CLIENT_REGION, @CLIENT_ADDRESS, N'''', N'''', N'''', N'''', 0, 1, 0, @CLIENT_BUSINESS, 1, GETDATE(), N''APP'',@LAT,@LNG,@TYPE_PRICE_CODE)  
 else 
 UPDATE [dbo].[T_CLIENT] SET [CLIENT_CODE] = @CLIENT_CODE, [CLIENT_NAME] = @CLIENT_NAME, [CLIENT_TYPE] = @CLIENT_TYPE, [ACCOUNT_CODE] = @CLIENT_CODE, [CURRANCY_CODE] = @CURRANCY_CODE, [MANDOOB_CODE] = @MANDOOB_CODE, [CLIENT_PHONE] =@CLIENT_PHONE, [CLIENT_PHONE_SMS] = N'''', [CLIENT_EMAILE] = N'''', [CLIENT_REGION] =@CLIENT_REGION, [CLIENT_ADDRESS] = @CLIENT_ADDRESS, [CLIENT_BARCODE] = N'''', [CLIENT_CARD] = N'''', [CLIENT_NOTE] = N'''', [CLIENT_PIN_CODE] = N'''', [DISCOUNT_PERCENT] = 0, [SECURETY_CODE] = 1, [MAX_DEBIT] = 0, [CLIENT_BUSINESS] =@CLIENT_BUSINESS, [CLIENT_ACTIVE] = 1, [C_DATE] = GETDATE(), [C_USER] = N''APP'',TYPE_PRICE_CODE=@TYPE_PRICE_CODE  WHERE CLIENT_CODE=@CLIENT_CODE









END	--END OF PROGRAM
commit






























' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_ADD_EDIT_TALAF]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_ADD_EDIT_TALAF]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




CREATE PROCEDURE [dbo].[PF_ADD_EDIT_TALAF]

@ITEM_CODE INT,
@QTY	float	,
@STORE_CODE INT,
@UNIT_CODE INT,
@B_CODE INT,  -- 26: ADD, 24: EDIT , 25: TALAF
@UNIT_NAME	nvarchar(50)	,
@UNIT_QTY	float	,
@COST FLOAT,
@PRICE FLOAT,




@SUBMIT_FLAG INT OUTPUT



AS
declare
@QTY_STORE_NOW_MIN	float	,
@QTY_NEW_MIN	float	,
@BILL_B  nvarchar(50),
@COMPANY_TITAL	nvarchar(MAX)

BEGIN TRAN
BEGIN
SET @SUBMIT_FLAG=0
SELECT @BILL_B= ISNULL(MIN(BILL_NUMBER),0)-1 FROM T_BUY_DETAILS
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1

IF @B_CODE=26 -- ADD
BEGIN

IF @UNIT_QTY=1
BEGIN
SET @UNIT_CODE=1

END


ELSE    --  EEEEEELLLLLSSSSSEEEE

BEGIN
SET @UNIT_CODE=2


END

SET @QTY_NEW_MIN=(@QTY*@UNIT_QTY)
IF @QTY_NEW_MIN=0 GOTO ASDFSF


INSERT INTO [dbo].[T_BUY_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[PRICE_BUY]
           ,[CURRANCY_EQUAL]
           ,[PRICE]
           ,[TOTAL]
           ,[EXPENSES]
           ,[TOTAL_EXPENSES]
           ,[COST]
           ,[TOTAL_COST]
           ,[SELL1]
           ,[SELL2]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL+@BILL_B
           ,@BILL_B
           ,@ITEM_CODE
           ,@QTY_NEW_MIN/@UNIT_QTY
           ,@UNIT_NAME
           ,@UNIT_QTY
           ,@STORE_CODE
           ,NULL
           ,@COST
           ,1
           ,@COST
           ,@COST*(@QTY_NEW_MIN/@UNIT_QTY)
           ,0
           ,0
           ,@COST
           ,@COST*(@QTY_NEW_MIN/@UNIT_QTY)
           ,@PRICE
           ,0
           ,GETDATE()
           ,0)

INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[C_DATE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL+@BILL_B
           ,@BILL_B
           ,GETDATE()
           ,@B_CODE
           ,0
           ,@STORE_CODE
           ,NULL
           ,@ITEM_CODE
           ,1
           ,@QTY_NEW_MIN
           ,0
           ,1
           ,GETDATE()
           ,0
           ,@COST
           ,1)
		   GOTO ASDFSF
END








IF @B_CODE=24  -- EDIT

BEGIN
IF @UNIT_QTY=1
BEGIN
SET @UNIT_CODE=1

END


ELSE    --  EEEEEELLLLLSSSSSEEEE

BEGIN
SET @UNIT_CODE=2


END
SELECT @QTY_STORE_NOW_MIN =ISNULL(SUM(BALANCE_M),0) FROM V_STORE_BOX_ON WHERE ITEM_CODE=@ITEM_CODE AND IS_USED=1
SET @QTY_NEW_MIN=(@QTY*@UNIT_QTY)-@QTY_STORE_NOW_MIN
--IF @QTY_NEW_MIN=0 GOTO ASDFSF
IF @QTY_NEW_MIN<0 SET @B_CODE=24 ELSE SET @B_CODE=25;

INSERT INTO [dbo].[T_BUY_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[PRICE_BUY]
           ,[CURRANCY_EQUAL]
           ,[PRICE]
           ,[TOTAL]
           ,[EXPENSES]
           ,[TOTAL_EXPENSES]
           ,[COST]
           ,[TOTAL_COST]
           ,[SELL1]
           ,[SELL2]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL+@BILL_B
           ,@BILL_B
           ,@ITEM_CODE
           ,@QTY_NEW_MIN/@UNIT_QTY
           ,@UNIT_NAME
           ,@UNIT_QTY
           ,@STORE_CODE
           ,NULL
           ,@COST
           ,1
           ,@COST
           ,@COST*(@QTY_NEW_MIN/@UNIT_QTY)
           ,0
           ,0
           ,@COST
           ,@COST*(@QTY_NEW_MIN/@UNIT_QTY)
           ,@PRICE
           ,0
           ,GETDATE()
           ,0)

INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[C_DATE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL+@BILL_B
           ,@BILL_B
           ,GETDATE()
           ,@B_CODE
           ,0
           ,@STORE_CODE
           ,NULL
           ,@ITEM_CODE
           ,1
           ,@QTY_NEW_MIN  
           ,0
           ,1
           ,GETDATE()
           ,0
           ,@COST
           ,1)

GOTO ASDFSF
END

IF @B_CODE=25  -- TALAF
BEGIN
IF @UNIT_QTY=1
BEGIN
SET @UNIT_CODE=1

END


ELSE    --  EEEEEELLLLLSSSSSEEEE

BEGIN
SET @UNIT_CODE=2


END

SET @QTY_NEW_MIN=(@QTY*@UNIT_QTY)*-1
IF @QTY_NEW_MIN=0 GOTO ASDFSF
 

INSERT INTO [dbo].[T_BUY_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[PRICE_BUY]
           ,[CURRANCY_EQUAL]
           ,[PRICE]
           ,[TOTAL]
           ,[EXPENSES]
           ,[TOTAL_EXPENSES]
           ,[COST]
           ,[TOTAL_COST]
           ,[SELL1]
           ,[SELL2]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL+@BILL_B
           ,@BILL_B
           ,@ITEM_CODE
           ,@QTY_NEW_MIN/@UNIT_QTY
           ,@UNIT_NAME
           ,@UNIT_QTY
           ,@STORE_CODE
           ,NULL
           ,@COST
           ,1
           ,@COST
           ,@COST*(@QTY_NEW_MIN/@UNIT_QTY)
           ,0
           ,0
           ,@COST
           ,@COST*(@QTY_NEW_MIN/@UNIT_QTY)
           ,@PRICE
           ,0
           ,GETDATE()
           ,0)

INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[C_DATE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL+@BILL_B
           ,@BILL_B
           ,GETDATE()
           ,@B_CODE
           ,0
           ,@STORE_CODE
           ,NULL
           ,@ITEM_CODE
           ,1
           ,@QTY_NEW_MIN
           ,0
           ,1
           ,GETDATE()
           ,0
           ,@COST
           ,1)
		   GOTO ASDFSF
END
ASDFSF:


SET @SUBMIT_FLAG=1



END	--END OF PROGRAM
commit





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_ADD_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_ADD_ITEMS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE PROCEDURE [dbo].[PF_ADD_ITEMS]
@ITEM_CODE INT,
@ITEM_NAME NVARCHAR(MAX),
@CATEGORY_CODE INT,
@TYPE_CODE INT,
@COST float ,
@SELL float ,
@SELL_G float ,
@SELL_W float ,
@ITEM_BARCODE NVARCHAR(MAX),
@QTY_MIN INT,
@ON2_OFF2  INT,
@CH_DEFUALT_UNIT2 INT,
@UNIT1_NAME NVARCHAR(MAX),
@UNIT2_NAME NVARCHAR(MAX),
@UNIT2_QTY  float ,
@SELL2  float ,
@SELL2_G  float ,
@SELL2_W   float ,
@ITEM_NOTE   NVARCHAR(MAX),
@START_BALANCE float ,
@SUBMIT_FLAG INT OUTPUT



AS
declare
@UNIT_GUID  INT,
@COMPANY_TITAL   NVARCHAR(MAX),
@DFF int

BEGIN TRAN
BEGIN
SET @SUBMIT_FLAG=0

IF @ITEM_CODE=0
BEGIN
SELECT @ITEM_CODE=ISNULL(MAX(ITEM_CODE),0) + 1 FROM T_ITEMS
END

if not exists (select * from T_ITEMS where ITEM_CODE = @ITEM_CODE ) INSERT INTO [dbo].[T_ITEMS] ([ITEM_CODE],[ITEM_NAME], [CATEGORY_CODE], [TYPE_CODE], [COST], [SELL], [SORT], [ACTIVE], [PRINTER_ID], [ITEM_BARCODE] ,[QTY_MIN],[ON2_OFF2],[UNIT2_NAME],[UNIT2_QTY],[DF_SALE],[SELL2],[SELL_CNY],[SELL2_CNY],[SHOW_MENU],[SELL_G],[SELL_W],[SELL2_G],[SELL2_W],[ITEM_NOTE],[IS_TRANS],[IS_DISCOUNT]) 
VALUES (@ITEM_CODE,LTRIM(RTRIM(@ITEM_NAME)) , @CATEGORY_CODE, @TYPE_CODE, @COST, @SELL, 1, 1,0,LTRIM(RTRIM(@ITEM_BARCODE)),@QTY_MIN,@ON2_OFF2,@UNIT2_NAME,@UNIT2_QTY,1,@SELL2,0,0,1,@SELL_G,@SELL_W,@SELL2_G,@SELL2_W,@ITEM_NOTE,0,1)  
else 
UPDATE [dbo].[T_ITEMS] SET [ITEM_NAME] = LTRIM(RTRIM(@ITEM_NAME)) , [CATEGORY_CODE] = @CATEGORY_CODE, [TYPE_CODE] = @TYPE_CODE, [COST] = @COST, [SELL] = @SELL, [SORT] = 1, [ACTIVE] = 1, [PRINTER_ID] = 0 , [ITEM_BARCODE] = LTRIM(RTRIM(@ITEM_BARCODE))  ,[QTY_MIN] = @QTY_MIN ,[ON2_OFF2] = @ON2_OFF2 ,[UNIT2_NAME] = @UNIT2_NAME,[UNIT2_QTY] = @UNIT2_QTY  ,[DF_SALE] = 1 ,[SELL2] = @SELL2,[SELL_CNY] = 0 ,[SELL2_CNY] = 0 ,[SHOW_MENU]=1,[SELL_G]=@SELL_G,[SELL_W]=@SELL_W,[SELL2_G]=@SELL2_G,[SELL2_W]=@SELL2_W,[ITEM_NOTE]=@ITEM_NOTE,[IS_TRANS]=0,[IS_DISCOUNT]=1 WHERE ITEM_CODE=@ITEM_CODE 
if @CH_DEFUALT_UNIT2=1 set @DFF=0 else set @DFF=1

Select @UNIT_GUID=ISNULL(MAX(UNIT_GUID),0) + 1 FROM T_ITEM_UNIT
if not exists (select * from T_ITEM_UNIT where ITEM_CODE = @ITEM_CODE AND UNIT_CODE=1 )  INSERT INTO [dbo].[T_ITEM_UNIT] ([UNIT_GUID], [ITEM_CODE], [UNIT_CODE], [UNIT_NAME],[UNIT_QTY], [ON_OFF], [DF_SALE], [DF_BUY], [DF_STORE], [PRICE_BUY], [PRICE_COST], [PRICE_SALE_1], [PRICE_SALE_2], [PRICE_SALE_3], [PRICE_AVG_COST], [PRICE_SALE_CUR], [C_DATE]) 
VALUES (@UNIT_GUID, @ITEM_CODE, 1, @UNIT1_NAME,1, 1, @DFF, @DFF, @DFF, @COST, @COST, @SELL, @SELL_G, @SELL_W, 0, 0, getdate()) 
 else UPDATE [dbo].[T_ITEM_UNIT] SET  [ITEM_CODE] = @ITEM_CODE, [UNIT_CODE] = 1, [UNIT_NAME] = @UNIT1_NAME,[UNIT_QTY] = 1, [ON_OFF] = 1, [DF_SALE] = @DFF, [DF_BUY] = @DFF, [DF_STORE] = @DFF,  [PRICE_COST] = @COST, [PRICE_SALE_1] = @SELL, [PRICE_SALE_2] = @SELL_G, [PRICE_SALE_3] = @SELL_W,  [PRICE_SALE_CUR] = 0, [C_DATE] = GETDATE()  WHERE ITEM_CODE=@ITEM_CODE AND UNIT_CODE=1 
 SELECT @COMPANY_TITAL=COMPANY_TITAL FROM T_COMPANY WHERE T_ID=1
  if not exists (select * from T_STORE_BOX where ITEM_CODE = @ITEM_CODE and BILL_NUMBER=0 ) INSERT INTO [dbo].[T_STORE_BOX] ([BILL_BRANCH], [BILL_NUMBER],[B_CODE], [WAJBA_CODE], [STORE_CODE],  [ITEM_CODE], [UNIT_CODE], [ST_IN], [ST_OUT], [QTY_UNIT], [ACTIVE],[IS_AVG_COST],[AVG_COST]) 
  VALUES (@COMPANY_TITAL + N''0'',0, 0, 2, 0, @ITEM_CODE, 1, @START_BALANCE, 0, 1,1,1,@COST)

If Not exists (Select * from T_BUY_DETAILS where ITEM_CODE = @ITEM_CODE and BILL_NUMBER=0  ) INSERT INTO [dbo].[T_BUY_DETAILS] ([BILL_BRANCH],[BILL_NUMBER], [ITEM_CODE], [QTY], [UNIT_NAME], [UNIT_QTY], [STORE_CODE], [EXP_DATE], [PRICE_BUY], [CURRANCY_EQUAL], [PRICE], [TOTAL], [EXPENSES], [TOTAL_EXPENSES], [COST], [TOTAL_COST], [SELL1], [SELL2], [C_DATE], [ACTIVE]) 
VALUES (@COMPANY_TITAL + N''0'', 0,@ITEM_CODE, @START_BALANCE, @UNIT1_NAME, 1, 0, GETDATE(), @COST, 1, @COST, @START_BALANCE*@COST, 0, 0, @COST, @START_BALANCE*@COST, @SELL, @SELL2, GETDATE(), 0)


IF @ON2_OFF2=1
BEGIN
if @CH_DEFUALT_UNIT2=1 set @DFF=1 else set @DFF=0

Select @UNIT_GUID=ISNULL(MAX(UNIT_GUID),0) + 1 FROM T_ITEM_UNIT
If Not exists (Select * from T_ITEM_UNIT where ITEM_CODE = @ITEM_CODE And UNIT_CODE=2 )  INSERT INTO [dbo].[T_ITEM_UNIT] ([UNIT_GUID], [ITEM_CODE], [UNIT_CODE], [UNIT_NAME],[UNIT_QTY], [ON_OFF], [DF_SALE], [DF_BUY], [DF_STORE], [PRICE_BUY], [PRICE_COST], [PRICE_SALE_1], [PRICE_SALE_2], [PRICE_SALE_3], [PRICE_AVG_COST], [PRICE_SALE_CUR], [C_DATE]) 
VALUES (@UNIT_GUID, @ITEM_CODE, 2, @UNIT2_NAME,@UNIT2_QTY, @ON2_OFF2, @DFF, @DFF, @DFF, @COST*@UNIT2_QTY, @COST*@UNIT2_QTY, @SELL2, @SELL2_G, @SELL2_W, 0, 0, GETDATE())  
Else
 UPDATE [dbo].[T_ITEM_UNIT] Set  [ITEM_CODE] = @ITEM_CODE, [UNIT_CODE] = 2, [UNIT_NAME] = @UNIT2_NAME,[UNIT_QTY] = @UNIT2_QTY, [ON_OFF] = @ON2_OFF2, [DF_SALE] = @DFF, [DF_BUY] = @DFF, [DF_STORE] = @DFF, [PRICE_BUY] = @COST*@UNIT2_QTY, [PRICE_COST] = @COST*@UNIT2_QTY, [PRICE_SALE_1] = @SELL2, [PRICE_SALE_2] = @SELL2_G, [PRICE_SALE_3] = @SELL2_W,  [PRICE_SALE_CUR] = 0, [C_DATE] = GETDATE()  WHERE ITEM_CODE=@ITEM_CODE And UNIT_CODE=2 
END
ELSE
BEGIN
UPDATE T_ITEM_UNIT Set ON_OFF=0  WHERE ITEM_CODE=@ITEM_CODE And UNIT_CODE=2
END

IF LEN(@ITEM_BARCODE)>0
BEGIN
 If Not exists (Select * from T_ITEM_BARCODE where ITEM_CODE = @ITEM_CODE And TYPE_VAL=0 ) INSERT INTO [dbo].[T_ITEM_BARCODE] ([ITEM_CODE], [TYPE_VAL], [ITEM_BARCODE], [UNIT_CODE], [UNIT_NAME])
  VALUES (@ITEM_CODE, 0, LTRIM(RTRIM(@ITEM_BARCODE)), 1, @UNIT1_NAME)  
  Else 
  UPDATE [dbo].[T_ITEM_BARCODE] Set  [ITEM_BARCODE] = LTRIM(RTRIM(@ITEM_BARCODE)) ,[UNIT_CODE] = 1,[UNIT_NAME] = @UNIT1_NAME    WHERE ITEM_CODE=@ITEM_CODE And TYPE_VAL=0 
END


SET @SUBMIT_FLAG=1



END	--END OF PROGRAM
commit




























' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_ADD_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_ADD_SANAD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'





CREATE PROCEDURE [dbo].[PF_ADD_SANAD]

@BILL_NUMBER INT,
@USER_CREATE NVARCHAR(MAX),
@MOVE_CODE INT,
@FROM_ACCOUNT INT ,
@TO_ACCCOUNT INT ,
@AMO_USA float ,
@AMO_IQ float ,
@DESCRIPTION NVARCHAR(MAX),



@BALANCE_FIRST_USA float ,
@BALANCE_FIRST_IQ float ,


@SUBMIT_FLAG INT OUTPUT



AS
declare
@BILL_BRANCH   NVARCHAR(MAX),
@BILL_DATE DATE = GETDATE(),
@BILL_TIME DATETIME = GETDATE(),
@FROM_ACC   NVARCHAR(MAX),
@TO_ACC   NVARCHAR(MAX),
@CURRANCY_CODE  INT,
@CURRANCY_USA float	,
@CURRANCY_IQ float	,
@CURRANCY_EQUAL float	,
@USER_CODE INT,
@COMPANY_TITAL   NVARCHAR(MAX)

BEGIN TRAN
BEGIN
SET @SUBMIT_FLAG=0
SELECT @CURRANCY_CODE=CURRANCY_CODE FROM T_CURRANNCY WHERE CURRANCY_PRIMARY=1
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
SELECT @FROM_ACC=ACCOUNT_NAME FROM T_ACCOUNTS WHERE ACCOUNT_CODE=@FROM_ACCOUNT
SELECT @TO_ACC=ACCOUNT_NAME FROM T_ACCOUNTS WHERE ACCOUNT_CODE=@TO_ACCCOUNT
SET @BILL_BRANCH=@COMPANY_TITAL + CAST(@BILL_NUMBER AS nvarchar)
IF @CURRANCY_CODE=1
BEGIN
SELECT @CURRANCY_USA=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=1/NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_IQ
END

ELSE
BEGIN
SELECT @CURRANCY_USA=NULLIF(CURRANCY_EQUAL,1) FROM T_CURRANNCY WHERE CURRANCY_CODE=1
SELECT @CURRANCY_IQ=CURRANCY_EQUAL FROM T_CURRANNCY WHERE CURRANCY_CODE=2
SET @CURRANCY_EQUAL=@CURRANCY_USA
END


 
if not exists (select * from T_SANAD where BILL_BRANCH = @BILL_BRANCH )  INSERT INTO [dbo].[T_SANAD] ([BILL_BRANCH],[BILL_NUMBER], [BILL_DATE], [BILL_TIME], [USER_CREATE], [CURRANCY_EQUAL], [MOVE_CODE], [FROM_ACCOUNT], [TO_ACCCOUNT], [FROM_ACC], [TO_ACC], [AMO_USA], [AMO_IQ], [CONV_USA], [CONV_IQ], [DESCRIPTION], [C_DATE],  [SECURETY_CODE], [SANAD_ACTIVE], [OFFER_CODE], [IS_TRANS]) 
VALUES (@BILL_BRANCH,@BILL_NUMBER, @BILL_DATE, @BILL_TIME, @USER_CREATE, @CURRANCY_EQUAL, @MOVE_CODE, @FROM_ACCOUNT, @TO_ACCCOUNT, @FROM_ACC, @TO_ACC, @AMO_USA, @AMO_IQ, N'''', N'''', @DESCRIPTION, GETDATE(),  1, 1, 1, 0) 
else 
UPDATE [dbo].[T_SANAD] SET [BILL_BRANCH] = @BILL_BRANCH,[BILL_NUMBER] = @BILL_NUMBER, [BILL_DATE] = @BILL_DATE, [BILL_TIME] = @BILL_TIME, [CURRANCY_EQUAL] = @CURRANCY_EQUAL, [MOVE_CODE] = @MOVE_CODE, [FROM_ACCOUNT] = @FROM_ACCOUNT, [TO_ACCCOUNT] = @TO_ACCCOUNT, [FROM_ACC] = @FROM_ACC, [TO_ACC] = @TO_ACC, [AMO_USA] = @AMO_USA, [AMO_IQ] = @AMO_IQ, [CONV_USA] = N'''', [CONV_IQ] = N'''', [DESCRIPTION] = @DESCRIPTION, [C_UPDATE] = GETDATE(), [USER_UPDATE] = @USER_CREATE, [SECURETY_CODE] = 1, [SANAD_ACTIVE] = 1, [OFFER_CODE] = 1, [IS_TRANS] = 0  WHERE BILL_BRANCH=@BILL_BRANCH  

SELECT TOP(1) @USER_CODE=ISNULL(USER_CODE,1) FROM T_USERS WHERE [USER_NAME] LIKE @USER_CREATE
DELETE FROM T_BOX WHERE BILL_BRANCH=@BILL_BRANCH AND B_CODE=5

-- FROM
INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE])
 VALUES (@BILL_BRANCH,@BILL_NUMBER, CAST(@BILL_NUMBER AS nvarchar), @BILL_DATE, @BILL_TIME, @MOVE_CODE, 5, 1, @FROM_ACCOUNT, N'''', 0, @AMO_USA, 0, @AMO_IQ, @CURRANCY_CODE, @CURRANCY_EQUAL,  @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)
-- TO
INSERT INTO [dbo].[T_BOX] ([BILL_BRANCH],[BILL_NUMBER], [BILL_STR], [BILL_DATE], [BILL_TIME], [MOVE_CODE], [B_CODE], [BRANCH_CODE], [ACCOUNT_CODE], [ACCOUNT_DESCRIPTION], [DEBIT], [CREDIT], [DEBIT_IQ], [CREDIT_IQ], [CURRANCY_CODE], [CURRANCY_EQUAL],  [DESCRIPTION], [DEAL_CODE], [USER_CODE], [C_DATE], [ACTIVE]) 
VALUES (@BILL_BRANCH,@BILL_NUMBER, CAST(@BILL_NUMBER AS nvarchar), @BILL_DATE, @BILL_TIME, @MOVE_CODE, 5, 1, @TO_ACCCOUNT, N'''', @AMO_USA, 0, @AMO_IQ, 0, @CURRANCY_CODE, @CURRANCY_EQUAL,  @DESCRIPTION, 0, @USER_CODE, GETDATE(), 1)




SET @SUBMIT_FLAG=1



END	--END OF PROGRAM
commit






























' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_CLIENT_BALANCE_DIFF_APP]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_CLIENT_BALANCE_DIFF_APP]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[PF_CLIENT_BALANCE_DIFF_APP]

AS

BEGIN


IF OBJECT_ID(''tempdb..#TEMP_CLIENT_TYPE'') IS NOT NULL DROP Table #TEMP_CLIENT_TYPE
SELECT ACCOUNT_CODE AS T_ID_BOX
      ,N''0'' AS  BILL_BRANCH 
      ,0 AS BILL_NUMBER 
      , GETDATE() AS BILL_DATE 
      ,GETDATE() AS BILL_TIME 
      ,0 AS B_CODE 
      ,N'''' AS B_NAME 
      ,0 AS MOVE_CODE 
      , N'''' AS  MOVE_NAME 
      , ACCOUNT_CODE 
      , ACCOUNT_NAME 
      , N'''' AS  ACCOUNT_DESCRIPTION   
      , 0 AS DEBIT 
      , 0 AS CREDIT 
      , BALANCE AS BALANCE_USA
      ,0 AS DEBIT_IQ 
      ,0 AS CREDIT_IQ 
       ,     BALANCE_IQ AS BALANCE_IQ
      , 0 AS DEBIT_CUR 
      ,0 AS  CREDIT_CUR 
       ,   BALANCE_CUR AS BALANCE_CUR
      ,N'''' AS DESCRIPTION
      ,0 AS USER_CODE
      ,N'''' AS USER_NAME
      ,ISNULL(DATEDIFF(DAY, (SELECT        ISNULL(MAX(BILL_DATE), NULL) AS Expr1
                               FROM            dbo.T_BOX
                               WHERE        (ACCOUNT_CODE = dbo.V_ACC_BALANCE_CLIENT.ACCOUNT_CODE) AND ACTIVE = 1 AND( B_CODE = 5 OR B_CODE = 7 OR B_CODE=15  OR B_CODE=28 OR B_CODE=70 OR B_CODE=71)), 
                         GETDATE()), 0) AS DEAL_CODE
      ,CLIENT_BUSINESS AS DEAL_NAME
           , 0 AS BRANCH_CODE 
           , N'''' AS BRANCH_NAME 
           , MANDOOB_NAME  AS MANDOB_NAME
		   ,MANDOOB_CODE
           , CLIENT_REGION 
           , CLIENT_PHONE_SMS 
           ,N'''' AS B_COLOR
      ,0 AS CHECKED
     ,0 AS  ID_BOX
  ,SECURETY_CODE
  ,TYPE_PRICE_CODE
  ,LAT
  ,LNG
   INTO #TEMP_CLIENT_TYPE  FROM  [dbo].[V_ACC_BALANCE_CLIENT] WHERE ACCOUNT_PARENT=21 AND TYPE_ACCOUNT_CODE=1
SELECT * FROM #TEMP_CLIENT_TYPE order by ACCOUNT_NAME asc
DROP TABLE #TEMP_CLIENT_TYPE

END  --END OF PROGRAM' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_GET_ITEM_APPLICATION_BY_STORE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_GET_ITEM_APPLICATION_BY_STORE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'






CREATE PROCEDURE [dbo].[PF_GET_ITEM_APPLICATION_BY_STORE]


@STORE_CODE INT

AS

BEGIN TRAN
BEGIN
IF @STORE_CODE=-10 
BEGIN
SELECT * FROM V_ITEM_APPLICATION 
END
ELSE
BEGIN
SELECT * FROM V_ITEM_APPLICATION WHERE STORE_CODE=@STORE_CODE
END

END	--END OF PROGRAM
commit































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_GET_ITEM_CODE_BY_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_GET_ITEM_CODE_BY_BARCODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'






CREATE PROCEDURE [dbo].[PF_GET_ITEM_CODE_BY_BARCODE]
@ITEM_BARCODE NVARCHAR(MAX),
@ITEM_CODE INT OUTPUT
AS


BEGIN

SELECT TOP(1) @ITEM_CODE=ITEM_CODE FROM V_ITEM_BARCODE_2 WHERE ITEM_BARCODE LIKE @ITEM_BARCODE
END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_GET_ITEM_DISCOUNT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_GET_ITEM_DISCOUNT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'





CREATE PROCEDURE [dbo].[PF_GET_ITEM_DISCOUNT]

AS


BEGIN

SELECT TOP(6) * FROM V_ITEM_APPLICATION WHERE DISC_AMO<>0 OR DISC_PERCENT<>0
END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_GET_ITEM_FEATURE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_GET_ITEM_FEATURE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'





CREATE PROCEDURE [dbo].[PF_GET_ITEM_FEATURE]

AS


BEGIN

SELECT TOP(6) * FROM V_ITEM_APPLICATION WHERE IS_FEATURE=1
END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_GET_ITEM_RAITING]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_GET_ITEM_RAITING]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'






CREATE PROCEDURE [dbo].[PF_GET_ITEM_RAITING]
@STRING_RAITE NVARCHAR(MAX),
@CATEGORY_CODE INT
AS



BEGIN

SELECT * FROM V_ITEM_APPLICATION WHERE @CATEGORY_CODE = @CATEGORY_CODE AND TIME_USE LIKE N''%''+ REPLACE(@STRING_RAITE,N''?'',N''%'')+N''%''        
END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_GET_ITEM_REMAIN_EXPIRED]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_GET_ITEM_REMAIN_EXPIRED]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'







CREATE PROCEDURE [dbo].[PF_GET_ITEM_REMAIN_EXPIRED]

@ITEM_CODE INT 
AS


BEGIN

SELECT * FROM V_BUY_DETAILS_EXPIRED_REMAIN_APP WHERE ITEM_CODE = @ITEM_CODE AND REMAIN_BUY_MIN<>0

END	--END OF PROGRAM

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_GET_ITEM_SEARCH]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_GET_ITEM_SEARCH]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'







CREATE PROCEDURE [dbo].[PF_GET_ITEM_SEARCH]
@STRING_SEARCH NVARCHAR(MAX)
AS



BEGIN

SELECT * FROM V_ITEM_APPLICATION WHERE ITEM_NAME LIKE N''%''+ REPLACE(@STRING_SEARCH,N'' '',N''%'')+N''%''        
END	--END OF PROGRAM

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_GET_ITEM_SIMILAR]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_GET_ITEM_SIMILAR]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'






CREATE PROCEDURE [dbo].[PF_GET_ITEM_SIMILAR]
@ITEM_CODE INT
AS

DECLARE 
@MAIN_ITEM_CODE INT
BEGIN
SELECT @MAIN_ITEM_CODE=MAIN_ITEM_CODE FROM T_ITEMS WHERE ITEM_CODE=@ITEM_CODE

SELECT * FROM V_ITEM_APPLICATION WHERE MAIN_ITEM_CODE=@MAIN_ITEM_CODE
END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_ITEM_ADD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_ITEM_ADD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

















CREATE PROCEDURE [dbo].[PF_ITEM_ADD]
@ITEM_CODE INT,
@QTY	float	,
@UNIT_QTY	float	,
@SUBMIT_FLAG INT OUTPUT

AS




DECLARE

@STORE_CODE INT,

@UNIT_CODE INT,
@B_CODE INT,
@UNIT_NAME	nvarchar(50)	,


@COMPANY_TITAL	nvarchar(50)	,
@BILL_B  nvarchar(50),
@COST FLOAT,
@PRICE FLOAT
BEGIN TRAN
BEGIN
SELECT @BILL_B= ISNULL(MIN(BILL_NUMBER),0)-1 FROM T_BUY_DETAILS
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
SELECT TOP(1) @UNIT_NAME=UNIT_NAME,@PRICE=ISNULL(PRICE_SALE_1,0)  FROM T_ITEM_UNIT WHERE ITEM_CODE=@ITEM_CODE AND UNIT_QTY=@UNIT_QTY
SELECT @COST=ISNULL(AVG_BUY,0)*@UNIT_QTY  FROM V_ITEM_AVG_COST_BUY_MIN_UNIT WHERE ITEM_CODE=@ITEM_CODE
SET @STORE_CODE=0
IF @UNIT_QTY=1
BEGIN
SET @UNIT_CODE=1

END


ELSE    --  EEEEEELLLLLSSSSSEEEE

BEGIN
SET @UNIT_CODE=2


END


IF @QTY=0 GOTO ASDFSF
 SET @B_CODE=26;

INSERT INTO [dbo].[T_BUY_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[PRICE_BUY]
           ,[CURRANCY_EQUAL]
           ,[PRICE]
           ,[TOTAL]
           ,[EXPENSES]
           ,[TOTAL_EXPENSES]
           ,[COST]
           ,[TOTAL_COST]
           ,[SELL1]
           ,[SELL2]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL+@BILL_B
           ,@BILL_B
           ,@ITEM_CODE
           ,@QTY
           ,@UNIT_NAME
           ,@UNIT_QTY
           ,@STORE_CODE
           ,NULL
           ,@COST
           ,1
           ,@COST
           ,@COST*(@QTY)
           ,0
           ,0
           ,@COST
           ,@COST*(@QTY)
           ,@PRICE/@UNIT_QTY
           ,@PRICE
           ,GETDATE()
           ,0)

INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[C_DATE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL+@BILL_B
           ,@BILL_B
           ,GETDATE()
           ,@B_CODE
           ,0
           ,@STORE_CODE
           ,NULL
           ,@ITEM_CODE
           ,@UNIT_CODE
           ,@QTY
           ,0
           ,@UNIT_QTY
           ,GETDATE()
           ,0
           ,@COST
           ,1)

ASDFSF:



SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

commit

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_ITEM_TALAF]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_ITEM_TALAF]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

















CREATE PROCEDURE [dbo].[PF_ITEM_TALAF]
@ITEM_CODE INT,
@QTY	float	,
@UNIT_QTY	float	,
@SUBMIT_FLAG INT OUTPUT

AS




DECLARE


@STORE_CODE INT,

@UNIT_CODE INT,
@B_CODE INT,
@UNIT_NAME	nvarchar(50)	,


@COMPANY_TITAL	nvarchar(50)	,
@BILL_B  nvarchar(50),
@COST FLOAT,
@PRICE FLOAT
BEGIN TRAN
BEGIN
SELECT @BILL_B= ISNULL(MIN(BILL_NUMBER),0)-1 FROM T_BUY_DETAILS
SELECT @COMPANY_TITAL=COMPANY_TITAL  FROM T_COMPANY WHERE T_ID=1
SELECT TOP(1) @UNIT_NAME=UNIT_NAME,@PRICE=ISNULL(PRICE_SALE_1,0)  FROM T_ITEM_UNIT WHERE ITEM_CODE=@ITEM_CODE AND UNIT_QTY=@UNIT_QTY
SELECT @COST=ISNULL(AVG_BUY,0)*@UNIT_QTY  FROM V_ITEM_AVG_COST_BUY_MIN_UNIT WHERE ITEM_CODE=@ITEM_CODE
SET @STORE_CODE=0
IF @UNIT_QTY=1
BEGIN
SET @UNIT_CODE=1

END


ELSE    --  EEEEEELLLLLSSSSSEEEE

BEGIN
SET @UNIT_CODE=2


END


IF @QTY=0 GOTO ASDFSF
 SET @B_CODE=25;
 SET @QTY=@QTY*-1
INSERT INTO [dbo].[T_BUY_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[PRICE_BUY]
           ,[CURRANCY_EQUAL]
           ,[PRICE]
           ,[TOTAL]
           ,[EXPENSES]
           ,[TOTAL_EXPENSES]
           ,[COST]
           ,[TOTAL_COST]
           ,[SELL1]
           ,[SELL2]
           ,[C_DATE]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL+@BILL_B
           ,@BILL_B
           ,@ITEM_CODE
           ,@QTY
           ,@UNIT_NAME
           ,@UNIT_QTY
           ,@STORE_CODE
           ,NULL
           ,@COST
           ,1
           ,@COST
           ,@COST*(@QTY)
           ,0
           ,0
           ,@COST
           ,@COST*(@QTY)
           ,@PRICE/@UNIT_QTY
           ,@PRICE
           ,GETDATE()
           ,0)

INSERT INTO [dbo].[T_STORE_BOX]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[BILL_DATE]
           ,[B_CODE]
           ,[WAJBA_CODE]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[ITEM_CODE]
           ,[UNIT_CODE]
           ,[ST_IN]
           ,[ST_OUT]
           ,[QTY_UNIT]
           ,[C_DATE]
           ,[IS_AVG_COST]
           ,[AVG_COST]
           ,[ACTIVE])
     VALUES
           (@COMPANY_TITAL+@BILL_B
           ,@BILL_B
           ,GETDATE()
           ,@B_CODE
           ,0
           ,@STORE_CODE
           ,NULL
           ,@ITEM_CODE
           ,@UNIT_CODE
           ,@QTY
           ,0
           ,@UNIT_QTY
           ,GETDATE()
           ,0
           ,@COST
           ,1)

ASDFSF:



SET @SUBMIT_FLAG=1

END	--END OF PROGRAM

commit

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_SEARCH_ITEM_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_SEARCH_ITEM_CATEGORY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




CREATE PROCEDURE [dbo].[PF_SEARCH_ITEM_CATEGORY]

@CATEGORY_CODE INT

AS


BEGIN

SELECT * FROM V_ITEM_APPLICATION WHERE CATEGORY_CODE =@CATEGORY_CODE
END	--END OF PROGRAM






























' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_SEARCH_ITEM_NAME]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_SEARCH_ITEM_NAME]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




CREATE PROCEDURE [dbo].[PF_SEARCH_ITEM_NAME]

@ITEM_NAME NVARCHAR(MAX)

AS


BEGIN

SELECT * FROM V_ITEM_APPLICATION WHERE ITEM_NAME LIKE ''%''+@ITEM_NAME + ''%''
END	--END OF PROGRAM






























' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_UPDATE_BILL_OFFER_CODE_APP]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_UPDATE_BILL_OFFER_CODE_APP]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'






CREATE PROCEDURE [dbo].[PF_UPDATE_BILL_OFFER_CODE_APP]


@BILL_BUMBER INT

AS

BEGIN TRAN
BEGIN

UPDATE T_SALES SET OFFER_CODE=33 WHERE BILL_NUMBER=@BILL_BUMBER

END	--END OF PROGRAM
commit































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PF_UPDATE_ITEM_BALANCE_EXPIRED]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PF_UPDATE_ITEM_BALANCE_EXPIRED]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'







CREATE PROCEDURE [dbo].[PF_UPDATE_ITEM_BALANCE_EXPIRED]

@T_ID INT ,
@EXPIRED_DATE DATE,
@BALANCE FLOAT,
@BILL_NUMBER INT,
@SUBMIT_FLAG INT OUTPUT
AS
DECLARE
@T_ID_MAX INT,
@ITEM_CODE INT,
@MAX_BILL INT,
@BILL_NUMBER_QTY INT,
@COST_MIN FLOAT,
@QTY_MIN_OLD FLOAT,
@QTY_MIN_NEW FLOAT,
@QTY_MIN_IN FLOAT,
@QTY_MIN_OUT FLOAT,
@CC_COUNT INT,
@BILL_BRANCH NVARCHAR(MAX),
@UNIT_NAME NVARCHAR(MAX)

BEGIN
SET @SUBMIT_FLAG=0
STARTINGGG:
SELECT TOP(1)@ITEM_CODE=ITEM_CODE,@BILL_NUMBER_QTY=BILL_NUMBER FROM T_BUY_DETAILS WHERE T_ID=@T_ID
SELECT @CC_COUNT=COUNT(ITEM_CODE) FROM T_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE AND BILL_NUMBER=@BILL_NUMBER
IF @CC_COUNT<>0
BEGIN
set @BILL_NUMBER=@BILL_NUMBER+1
goto STARTINGGG

END
SELECT @BILL_BRANCH=BILL_BRANCH FROM T_BUY WHERE BILL_NUMBER=@BILL_NUMBER
SELECT @MAX_BILL=BILL_NUMBER FROM T_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE and ACTIVE=1
SELECT TOP(1) @UNIT_NAME=UNIT_NAME FROM T_ITEM_UNIT WHERE ITEM_CODE=@ITEM_CODE AND UNIT_CODE=1
SELECT TOP(1) @COST_MIN=(COST/UNIT_QTY),@T_ID_MAX=T_ID   FROM T_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE AND BILL_NUMBER=@MAX_BILL AND ACTIVE=1
SELECT TOP(1) @QTY_MIN_OLD=REMAIN_BUY_MIN   FROM V_BUY_DETAILS_EXPIRED_REMAIN_APP WHERE ITEM_CODE=@ITEM_CODE  AND BILL_NUMBER=@BILL_NUMBER_QTY

SET @QTY_MIN_NEW=@BALANCE-@QTY_MIN_OLD
SET @QTY_MIN_IN=@QTY_MIN_NEW
SET @QTY_MIN_OUT=0
--IF @QTY_MIN_NEW=0 GOTO ASEESA

IF @QTY_MIN_NEW<0
BEGIN
SET @QTY_MIN_OUT=@QTY_MIN_NEW*-1
SET @QTY_MIN_IN=0
END
INSERT INTO [dbo].[T_BUY_DETAILS]
           ([BILL_BRANCH]
           ,[BILL_NUMBER]
           ,[ITEM_CODE]
           ,[QTY]
           ,[UNIT_NAME]
           ,[UNIT_QTY]
           ,[STORE_CODE]
           ,[EXP_DATE]
           ,[PRICE_BUY]
           ,[CURRANCY_EQUAL]
           ,[PRICE]
           ,[TOTAL]
           ,[EXPENSES]
           ,[TOTAL_EXPENSES]
           ,[COST]
           ,[TOTAL_COST]
           ,[SELL1]
           ,[SELL2]
           ,[C_DATE]
           ,[ACTIVE]
           ,[OFFER_CODE]
           ,[IS_USED]
           ,[QTY_IN]
           ,[QTY_OUT]
           ,[TOTAL_OUT]
           ,[EXPENSES_OUT]
           ,[DISCOUNT_PERCENT_ITEM]
           ,[DISCOUNT_AMOUNT_ITEM])
SELECT @BILL_BRANCH
      ,@BILL_NUMBER
      ,[ITEM_CODE]
      ,@QTY_MIN_NEW
      ,@UNIT_NAME
      ,1
      ,[STORE_CODE]
      ,@EXPIRED_DATE
      ,[PRICE_BUY]
      ,[CURRANCY_EQUAL]
      ,[PRICE]
      ,[PRICE]*@QTY_MIN_NEW
      ,0
      ,0
      ,[COST]
      ,[PRICE]*@QTY_MIN_NEW
      ,[SELL1]
      ,[SELL2]
      ,[C_DATE]
      ,[ACTIVE]
      ,[OFFER_CODE]
      ,[IS_USED]
      ,@QTY_MIN_IN
      ,@QTY_MIN_OUT
      ,[TOTAL_OUT]
      ,[EXPENSES_OUT]
      ,[DISCOUNT_PERCENT_ITEM]
      ,[DISCOUNT_AMOUNT_ITEM]
  FROM [dbo].[T_BUY_DETAILS] WHERE T_ID=@T_ID_MAX

  ASEESA:


SET @SUBMIT_FLAG=1
END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_BOOKING_ROOM]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_BOOKING_ROOM]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

















CREATE PROCEDURE [dbo].[PV_A_BOOKING_ROOM]
@BILL_NUMBER	INT
AS

BEGIN

SELECT    * FROM TH_ROOM_BOOKING
WHERE    BILL_NUMBER = @BILL_NUMBER
 

END	--END OF PROGRAM






































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_PRINT_SALES_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_PRINT_SALES_INVOICE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'









CREATE PROCEDURE [dbo].[PV_A_PRINT_SALES_INVOICE]

@BILL_BRANCH nvarchar(30)
AS

BEGIN
--SELECT   * FROM V_SALES_INVOICE WHERE BILL_BRANCH LIKE @BILL_BRANCH
--ORDER BY BILL_NUMBER
SET NOCOUNT ON;  
    IF 1=0 BEGIN  
        SET FMTONLY OFF  
    END  
--IF OBJECT_ID(''''tempdb..#TEMP_SALES_DETAILS_INVOICE_LIST'''') IS NOT NULL DROP Table #TEMP_SALES_DETAILS_INVOICE_LIST
SELECT       *,(SELECT ACCOUNT_NAME FROM T_ACCOUNTS WHERE ACCOUNT_CODE=V_SALES_INVOICE.CLIENT_CODE) AS CLIENT_CODE_NAME INTO #TEMP_SALES_INVOICE_LIST FROM    dbo.V_SALES_INVOICE WHERE BILL_BRANCH LIKE @BILL_BRANCH ORDER BY BILL_NUMBER ASC
SELECT       * FROM #TEMP_SALES_INVOICE_LIST  ORDER BY BILL_NUMBER ASC
DROP Table #TEMP_SALES_INVOICE_LIST
END	--END OF PROGRAM






























' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_PRINT_SALES_INVOICE_80]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_PRINT_SALES_INVOICE_80]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[PV_A_PRINT_SALES_INVOICE_80]

@BILL_BRANCH nvarchar(30)
AS

BEGIN
SELECT   * FROM V_SALES_INVOICE_80 WHERE BILL_BRANCH LIKE @BILL_BRANCH
 
 
END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_PRINT_SALES_INVOICE_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_PRINT_SALES_INVOICE_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'








CREATE PROCEDURE [dbo].[PV_A_PRINT_SALES_INVOICE_DETAILS]

@BILL_BRANCH nvarchar(30)
AS

BEGIN
--SELECT   * FROM V_SALES_INVOICE_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH ORDER BY T_ID ASC
SET NOCOUNT ON;  
    IF 1=0 BEGIN  
        SET FMTONLY OFF  
    END  
--IF OBJECT_ID(''''tempdb..#TEMP_SALES_DETAILS_INVOICE_LIST'''') IS NOT NULL DROP Table #TEMP_SALES_DETAILS_INVOICE_LIST
SELECT       * INTO #TEMP_SALES_DETAILS_INVOICE_LIST FROM    dbo.V_SALES_INVOICE_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH ORDER BY T_ID ASC
SELECT       * FROM #TEMP_SALES_DETAILS_INVOICE_LIST  ORDER BY T_ID ASC
DROP Table #TEMP_SALES_DETAILS_INVOICE_LIST

END	--END OF PROGRAM





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_PRINT_SALES_INVOICE_DETAILS_80]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_PRINT_SALES_INVOICE_DETAILS_80]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'









CREATE PROCEDURE [dbo].[PV_A_PRINT_SALES_INVOICE_DETAILS_80]

@BILL_BRANCH nvarchar(30)
AS

BEGIN
SELECT      * FROM V_SALES_INVOICE_DETAILS_80

WHERE    BILL_BRANCH LIKE @BILL_BRANCH AND TYPE_CODE<>8
ORDER BY T_ID
END	--END OF PROGRAM






























' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_PRINT_V_JOINT_SUBSCRIPTION]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_PRINT_V_JOINT_SUBSCRIPTION]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[PV_A_PRINT_V_JOINT_SUBSCRIPTION]

@BILL_BRANCH nvarchar(30)
AS

BEGIN
 
SET NOCOUNT ON;  
    IF 1=0 BEGIN  
        SET FMTONLY OFF  
    END  
 
SELECT   * FROM    dbo.V_JOINT_SUBSCRIPTION WHERE T_ID = @BILL_BRANCH  
 
END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_PRINT_VISITOR]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_PRINT_VISITOR]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_A_PRINT_VISITOR]
@T_ID	INT
AS

BEGIN

SELECT      * FROM T_VISITOR

WHERE    T_ID = @T_ID

END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_ROOM_TYPE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_ROOM_TYPE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

















CREATE PROCEDURE [dbo].[PV_A_ROOM_TYPE]
 
AS

BEGIN

SELECT    * FROM VH_ROOM
WHERE    ACTIVE = 1
 ORDER BY CAST(dbo.VH_ROOM.ROOM_NUMBER AS INT) ASC

END	--END OF PROGRAM






































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_AKSAT_CASH]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_AKSAT_CASH]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N' 
CREATE PROCEDURE [dbo].[PV_A_V_AKSAT_CASH]
@BILL_NUMBER	INT
AS

BEGIN

SELECT      *  FROM V_AKSAT_ITEM_DETAILS

WHERE    BILL_AKSAT = @BILL_NUMBER


END	--END OF PROGRAM





















' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_AKSAT_CASH_TOTAL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_AKSAT_CASH_TOTAL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[PV_A_V_AKSAT_CASH_TOTAL]
    @BILL_NUMBER INT
AS
BEGIN
    SET NOCOUNT ON;      -- تجنّب رسائل ‎(n rows affected)
	   SELECT  SUM(vid.TOTAL_INVOICE) AS TOTAL_INVOICE_T,   SUM(vid.AMO_AKSAT_ITEM) AS AMO_AKSAT_ITEM_T,        SUM(vid.TOTAL_CASH) AS TOTAL_CASH_T,        SUM(vid.TOTAL_REMAIN) AS TOTAL_REMAIN_T       
    --SELECT  vid.*                 -- كل أعمدة ‎V_AKSAT_ITEM_DETAILS‎
    FROM    V_AKSAT_ITEM_DETAILS AS vid
    WHERE   vid.BILL_AKSAT = @BILL_NUMBER
        AND vid.BILL_CASH IN (
                SELECT ISNULL(MAX(tad.BILL_CASH), 0)
                FROM   V_AKSAT_ITEM_DETAILS AS tad
                WHERE  tad.BILL_AKSAT  = vid.BILL_AKSAT
				GROUP BY tad.T_ID
            );
END;

' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_AKSAT_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_AKSAT_CLIENT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[PV_A_V_AKSAT_CLIENT]
@ACCOUNT_CODE	INT
AS

BEGIN

SELECT      *  FROM V_AKSAT_ITEM
WHERE    ACCOUNT_CODE = @ACCOUNT_CODE


END	--END OF PROGRAM





































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_AKSAT_TABLE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_AKSAT_TABLE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[PV_A_V_AKSAT_TABLE]
@BILL_NUMBER	INT
AS

BEGIN

SELECT      *  FROM V_AKSAT_ITEM_DETAILS

WHERE    ACCOUNT_CODE = @BILL_NUMBER AND IS_FINISH=0


END	--END OF PROGRAM




































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_BOOKING]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_BOOKING]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[PV_A_V_BOOKING]
@BILL_NUMBER	INT
AS

BEGIN

SELECT      * FROM V_BOOKING

WHERE    BILL_NUMBER = @BILL_NUMBER


END	--END OF PROGRAM




































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_BUY_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_BUY_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_A_V_BUY_DETAILS]
@BILL_BRANCH	nvarchar(200)
AS

BEGIN

SELECT      BD.*,II.IS_ITEM_AREA,II.UNIT_QTY_X1,II.UNIT_QTY_XY,II.UNIT_QTY_XZ  FROM V_BUY_DETAILS BD  LEFT OUTER JOIN 
   dbo.T_ITEMS II ON BD.ITEM_CODE = II.ITEM_CODE

WHERE    BD.BILL_BRANCH LIKE @BILL_BRANCH
ORDER BY T_ID

END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_BUY_DETAILS_QR]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_BUY_DETAILS_QR]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'














CREATE PROCEDURE [dbo].[PV_A_V_BUY_DETAILS_QR]
@BILL_NUMBER	INT
AS

BEGIN

SELECT      * FROM V_BUY_DETAILS_EXPIRED_REMAIN

WHERE    BILL_NUMBER = @BILL_NUMBER
ORDER BY T_ID

END	--END OF PROGRAM



































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_BUY_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_BUY_INVOICE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_A_V_BUY_INVOICE]
@BILL_BRANCH	nvarchar(200)
AS
BEGIN
SELECT      * FROM V_BUY
WHERE    BILL_BRANCH LIKE @BILL_BRANCH
ORDER BY BILL_NUMBER
END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_CARS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_CARS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
 
CREATE PROCEDURE [dbo].[PV_A_V_CARS]
@BILL_NUMBER	INT
AS

BEGIN

SELECT      * FROM TA_CARS

WHERE    BILL_NUMBER = @BILL_NUMBER


END	--END OF PROGRAM





































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_CARS_SPICIAL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_CARS_SPICIAL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

 
CREATE PROCEDURE [dbo].[PV_A_V_CARS_SPICIAL]
@BILL_NUMBER	INT
AS

BEGIN

SELECT      * FROM TA_CARS_SPICIAL

WHERE    BILL_NUMBER = @BILL_NUMBER


END	--END OF PROGRAM






































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_CONTAINER]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_CONTAINER]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'














CREATE PROCEDURE [dbo].[PV_A_V_CONTAINER]
@BILL_NUMBER	INT
AS

BEGIN

SELECT      * FROM V_CONTAINER

WHERE    BILL_NUMBER = @BILL_NUMBER


END	--END OF PROGRAM



































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_CONTAINER_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_CONTAINER_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'














CREATE PROCEDURE [dbo].[PV_A_V_CONTAINER_DETAILS]
@BILL_NUMBER	INT
AS

BEGIN

SELECT      *
,ISNULL((SELECT TOP(1) BALANCE FROM V_ACC_B WHERE ACCOUNT_CODE=V_CONTAINER_DETAILS.CLIENT_CODE),0) AS C_DEBIT_USA
,ISNULL((SELECT TOP(1) BALANCE_IQ FROM V_ACC_B WHERE ACCOUNT_CODE=V_CONTAINER_DETAILS.CLIENT_CODE),0) AS C_DEBIT_IQ

 FROM V_CONTAINER_DETAILS

WHERE    BILL_NUMBER = @BILL_NUMBER


END	--END OF PROGRAM



































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_CONTAINER_DETAILS_ID]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_CONTAINER_DETAILS_ID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[PV_A_V_CONTAINER_DETAILS_ID]
@BILL_NUMBER	INT
AS

BEGIN

SELECT      *
,ISNULL((SELECT TOP(1) BALANCE FROM V_ACC_B WHERE ACCOUNT_CODE=V_CONTAINER_DETAILS.CLIENT_CODE),0) AS C_DEBIT_USA 
,ISNULL((SELECT TOP(1) BALANCE_IQ FROM V_ACC_B WHERE ACCOUNT_CODE=V_CONTAINER_DETAILS.CLIENT_CODE),0) AS C_DEBIT_IQ
 FROM V_CONTAINER_DETAILS

WHERE    T_ID = @BILL_NUMBER


END	--END OF PROGRAM




































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_COUPON]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_COUPON]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[PV_A_V_COUPON]
@BILL_NUMBER	INT
AS

BEGIN

SELECT      * FROM T_COUPON

WHERE    BILL_COUPON = @BILL_NUMBER


END	--END OF PROGRAM





































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_JOINT_COURSES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_JOINT_COURSES]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

 
CREATE PROCEDURE [dbo].[PV_A_V_JOINT_COURSES]
@BILL_NUMBER	INT
AS

BEGIN

SELECT      * FROM V_JOINT_COURSES

WHERE    JOINT_CODE = @BILL_NUMBER


END	--END OF PROGRAM






































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_JOINT_COURSES_FREE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_JOINT_COURSES_FREE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'



 
CREATE PROCEDURE [dbo].[PV_A_V_JOINT_COURSES_FREE]
@BILL_NUMBER	INT
AS

BEGIN

SELECT      * FROM T_JOINT_COURSES_FREE

WHERE    JOINT_CODE = @BILL_NUMBER


END	--END OF PROGRAM








































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_MAINTENANCE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_MAINTENANCE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[PV_A_V_MAINTENANCE]
@BILL_NUMBER	INT
AS

BEGIN

SELECT    * FROM V_MAINTENANCE_DEVICE
WHERE    BILL_NUMBER = @BILL_NUMBER
 

END	--END OF PROGRAM





































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_MAINTENANCE_LABEL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_MAINTENANCE_LABEL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[PV_A_V_MAINTENANCE_LABEL]
@BILL_NUMBER	INT
AS

BEGIN

SELECT     dbo.T_MAINTENANCE_LABEL.T_ID, dbo.T_MAINTENANCE_LABEL.BILL_NUMBER, dbo.T_MAINTENANCE_LABEL.SN_BARCODE, dbo.T_MAINTENANCE_LABEL.DATE_IN, dbo.T_MAINTENANCE_LABEL.USER_IN, dbo.T_MAINTENANCE_LABEL.SEQ_UNIT, dbo.T_MAINTENANCE.BILL_SEQ, 
                  dbo.T_MAINTENANCE.CLIENT_NAME, dbo.T_MAINTENANCE.CLIENT_PHONE, dbo.T_MAINTENANCE.CLIENT_REGION, dbo.T_MAINTENANCE.CLIENT_ZONE, dbo.T_MAINTENANCE.CLIENT_ADDRESS, dbo.T_MAINTENANCE.AGENT_NAME, dbo.T_MAINTENANCE.BUY_DATE, 
                  dbo.T_MAINTENANCE.RECIPIENT_NAME, dbo.T_MAINTENANCE.RECEIVED_DATE, dbo.T_MAINTENANCE.QTY_DEVICE, dbo.T_MAINTENANCE.AMO_TOTAL, dbo.T_MAINTENANCE.AMO_COST_ITEMS, dbo.T_MAINTENANCE.AMO_COMPANY, dbo.T_MAINTENANCE.AMO_AUTHORIZED, 
                  dbo.T_MAINTENANCE.AMO_TRANSFARE
FROM        dbo.T_MAINTENANCE_LABEL LEFT OUTER JOIN
                  dbo.T_MAINTENANCE ON dbo.T_MAINTENANCE_LABEL.BILL_NUMBER = dbo.T_MAINTENANCE.BILL_NUMBER
WHERE    dbo.T_MAINTENANCE_LABEL.BILL_NUMBER = @BILL_NUMBER
ORDER BY dbo.T_MAINTENANCE_LABEL.T_ID

END	--END OF PROGRAM





































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_PURCHASE_ORDER_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_PURCHASE_ORDER_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'














CREATE PROCEDURE [dbo].[PV_A_V_PURCHASE_ORDER_DETAILS]
@BILL_BRANCH	nvarchar(200)
AS

BEGIN

SELECT      BD.*,II.IS_ITEM_AREA,II.UNIT_QTY_X1,II.UNIT_QTY_XY,II.UNIT_QTY_XZ  FROM V_PURCHASE_ORDER_DETAILS BD  LEFT OUTER JOIN 
   dbo.T_ITEMS II ON BD.ITEM_CODE = II.ITEM_CODE

WHERE    BD.BILL_BRANCH LIKE @BILL_BRANCH
ORDER BY T_ID

END	--END OF PROGRAM



































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_PURCHASE_ORDER_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_PURCHASE_ORDER_INVOICE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'














CREATE PROCEDURE [dbo].[PV_A_V_PURCHASE_ORDER_INVOICE]
@BILL_BRANCH	nvarchar(200)
AS
BEGIN
SELECT      * FROM V_PURCHASE_ORDER
WHERE    BILL_BRANCH LIKE @BILL_BRANCH
ORDER BY BILL_NUMBER
END	--END OF PROGRAM



































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_DIRECT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_DIRECT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[PV_A_V_SALES_DIRECT]
@BILL_NUMBER	INT
AS

BEGIN

SELECT      * FROM V_SALES_DIRECT

WHERE    BILL_NUMBER = @BILL_NUMBER


END	--END OF PROGRAM




































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_DIRECT_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_DIRECT_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[PV_A_V_SALES_DIRECT_DETAILS]
@BILL_NUMBER	INT
AS

BEGIN

SELECT      * FROM V_SALES_DIRECT_DETAILS

WHERE    BILL_NUMBER = @BILL_NUMBER


END	--END OF PROGRAM




































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_EXPENSES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_EXPENSES]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_A_V_SALES_EXPENSES]
@BILL_SALES	INT
AS

BEGIN

SELECT      * FROM V_SALES_EXPENSES

WHERE    BILL_SALES LIKE @BILL_SALES
ORDER BY T_ID_SALES

END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_FRUIT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_FRUIT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[PV_A_V_SALES_FRUIT]
@BILL_NUMBER	INT
AS

BEGIN

SELECT      * FROM V_SALES_FRUIT

WHERE    BILL_NUMBER = @BILL_NUMBER


END	--END OF PROGRAM




































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_FRUIT_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_FRUIT_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[PV_A_V_SALES_FRUIT_DETAILS]
@BILL_NUMBER	INT
AS

BEGIN

SELECT      * FROM T_SALES_FRUIT_DETAILS

WHERE    BILL_NUMBER = @BILL_NUMBER


END	--END OF PROGRAM





































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'












CREATE PROCEDURE [dbo].[PV_A_V_SALES_INVOICE]
@BILL_BRANCH	nvarchar(200)
AS
DECLARE
@CURRANCY_EQUAL FLOAT
BEGIN
SELECT @CURRANCY_EQUAL=MAX(CURRANCY_EQUAL) FROM T_CURRANNCY 
UPDATE T_SALES SET CNY_IQ=1/@CURRANCY_EQUAL WHERE    BILL_BRANCH LIKE @BILL_BRANCH
SELECT      * FROM V_SALES_INVOICE

WHERE    BILL_BRANCH LIKE @BILL_BRANCH
ORDER BY BILL_NUMBER
END	--END OF PROGRAM

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_80]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_80]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_80]
@BILL_BRANCH	nvarchar(200)
AS
DECLARE
@CURRANCY_EQUAL FLOAT
BEGIN
SELECT @CURRANCY_EQUAL=MAX(CURRANCY_EQUAL) FROM T_CURRANNCY 
UPDATE T_SALES SET CNY_IQ=1/@CURRANCY_EQUAL WHERE    BILL_BRANCH LIKE @BILL_BRANCH
SELECT      * FROM V_SALES_INVOICE_80

WHERE    BILL_BRANCH LIKE @BILL_BRANCH
ORDER BY BILL_NUMBER
END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_DETAILS]
@BILL_BRANCH	nvarchar(200)
AS

BEGIN

SELECT      * FROM V_SALES_INVOICE_DETAILS

WHERE    BILL_BRANCH LIKE @BILL_BRANCH AND TYPE_CODE<>8
ORDER BY T_ID

END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_DETAILS_80]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_DETAILS_80]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'














CREATE PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_DETAILS_80]
@BILL_BRANCH	nvarchar(200)
AS

BEGIN

SELECT      * FROM V_SALES_INVOICE_DETAILS_80

WHERE    BILL_BRANCH LIKE @BILL_BRANCH AND TYPE_CODE<>8
ORDER BY T_ID

END	--END OF PROGRAM



































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_DETAILS_AKSAT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_DETAILS_AKSAT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'














CREATE PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_DETAILS_AKSAT]
@BILL_BRANCH	nvarchar(200)
AS

BEGIN

SELECT      *,ISNULL((SELECT AMO_AKSAT FROM T_AKSAT_ITEMS WHERE BILL_NUMBER=V_SALES_INVOICE_DETAILS.BILL_NUMBER AND ITEM_CODE=V_SALES_INVOICE_DETAILS.ITEM_CODE),0) AS AMO_AKSAT  FROM V_SALES_INVOICE_DETAILS

WHERE    BILL_BRANCH LIKE @BILL_BRANCH AND TYPE_CODE<>8
ORDER BY T_ID

END	--END OF PROGRAM



































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_DETAILS_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_DETAILS_ITEMS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_DETAILS_ITEMS]
@BILL_NUMBER	INT
AS

BEGIN

SELECT      * FROM V_SALES_DETAILS

WHERE    RELATION_BILL_CODE = @BILL_NUMBER AND RELATION_B_CODE=65 AND TYPE_CODE<>8
ORDER BY T_ID

END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_DETAILS_KIMASH]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_DETAILS_KIMASH]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N' 


CREATE PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_DETAILS_KIMASH]
@BILL_BRANCH	nvarchar(200)
AS
 

BEGIN
 
 

SELECT   *  FROM  
 
   dbo.V_SALES_INVOICE_DETAILS_KIMASH  
WHERE    BILL_BRANCH LIKE @BILL_BRANCH AND TYPE_CODE<>8
ORDER BY T_ID

 







 END



























' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_DETAILS_KIMASH_LABEL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_DETAILS_KIMASH_LABEL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_DETAILS_KIMASH_LABEL]
@BILL_BRANCH	nvarchar(200)
AS
DECLARE DETAILS_CURSOR CURSOR FOR SELECT  T_ID FROM V_SALES_INVOICE_DETAILS_KIMASH  WHERE BILL_BRANCH LIKE @BILL_BRANCH;
DECLARE
@T_ID_CURSOR INT,
@QTY_AREA INT,
@ID_NUMBER INT,
@Number INT

BEGIN
SET @ID_NUMBER=0
CREATE TABLE #temp
(
    id INT PRIMARY KEY,
    T_ID_DETAILS INT
);
OPEN DETAILS_CURSOR
FETCH NEXT FROM DETAILS_CURSOR INTO @T_ID_CURSOR
WHILE @@FETCH_STATUS = 0
BEGIN
SET @Number = 1
SELECT @QTY_AREA=QTY_AREA FROM T_SALES_DETAILS WHERE T_ID=@T_ID_CURSOR

WHILE @Number <= @QTY_AREA
BEGIN
    
    SET @Number = @Number + 1;
SET @ID_NUMBER+=1

INSERT INTO #temp(id, T_ID_DETAILS)
VALUES (@ID_NUMBER, @T_ID_CURSOR) ;

END;

FETCH NEXT FROM DETAILS_CURSOR INTO @T_ID_CURSOR

END

CLOSE DETAILS_CURSOR
DEALLOCATE DETAILS_CURSOR

--SELECT * FROM #temp

SELECT  #temp.id  ,  SK.*  FROM  
 #temp 
LEFT OUTER JOIN 
   dbo.V_SALES_INVOICE_DETAILS_KIMASH SK ON  #temp.T_ID_DETAILS = SK.T_ID 
WHERE    BILL_BRANCH LIKE @BILL_BRANCH
ORDER BY T_ID


-- Step 3: Clean up by dropping the temporary table
DROP TABLE #temp;

END	--END OF PROGRAM




































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_DETAILS_MATERIAL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_DETAILS_MATERIAL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_DETAILS_MATERIAL]
@BILL_BRANCH	nvarchar(200)
AS

BEGIN

SELECT      * FROM V_SALES_INVOICE_DETAILS_MATERIAL

WHERE    BILL_BRANCH LIKE @BILL_BRANCH
ORDER BY T_ID

END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_GENERATE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_GENERATE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_GENERATE]
@BILL_BRANCH	nvarchar(200)
AS
 
 
BEGIN
 
SELECT      * FROM T_SALES

WHERE    BILL_INVOICE LIKE @BILL_BRANCH
ORDER BY BILL_NUMBER
END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_MATERIAL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_MATERIAL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_MATERIAL]
@BILL_BRANCH	nvarchar(200)
AS

BEGIN

SELECT      * FROM V_SALES_INVOICE_MATERIAL

WHERE    BILL_BRANCH LIKE @BILL_BRANCH
ORDER BY BILL_NUMBER
END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_TEMP]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'














CREATE PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_TEMP]
@BILL_BRANCH	nvarchar(200)
AS

BEGIN

SELECT      * FROM T_SALES_TEMP

WHERE    BILL_BRANCH LIKE @BILL_BRANCH  
ORDER BY T_ID

END	--END OF PROGRAM



































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_V_SALES_INVOICE_TESSSSSSSST]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_V_SALES_INVOICE_TESSSSSSSST]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_A_V_SALES_INVOICE_TESSSSSSSST]
AS

BEGIN
SELECT TOP(1) *  FROM T_CURRANNCY  WHERE CURRANCY_EQUAL<>1
 





END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_A_VB_HOUSE_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_A_VB_HOUSE_CLIENT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

 
CREATE PROCEDURE [dbo].[PV_A_VB_HOUSE_CLIENT]
@BILL_NUMBER	INT
AS

BEGIN

SELECT      * FROM VB_HOUSE_CLIENT

WHERE    HOUSE_CODE = @BILL_NUMBER


END	--END OF PROGRAM






































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_AKSAT_ALL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_AKSAT_ALL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_AKSAT_ALL]
@D1 DATE

AS

BEGIN
SELECT * FROM [dbo].[V_AKSAT]
 WHERE   (DATEDIFF(DAY, V_AKSAT.DATE_DUE, @D1)>= 0)  AND CASH_CODE < 2  order by DATE_DUE ASC
END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_AKSAT_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_AKSAT_CLIENT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_AKSAT_CLIENT]
@D1 DATE,
@ACCOUNT_CODE INT
AS

BEGIN
SELECT * FROM [dbo].[V_AKSAT]
WHERE    (DATEDIFF(DAY, V_AKSAT.DATE_DUE, @D1)>= 0 ) AND CASH_CODE < 2 AND ACCOUNT_CODE=@ACCOUNT_CODE  order by DATE_DUE ASC
END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_AKSAT_KAFEL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_AKSAT_KAFEL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_AKSAT_KAFEL]
@D1 DATE,
@KAFEL_CODE INT
AS

BEGIN
SELECT * FROM [dbo].[V_AKSAT]
WHERE    (DATEDIFF(DAY, V_AKSAT.DATE_DUE, @D1)>= 0)  AND CASH_CODE < 2 AND KAFEL_CODE=@KAFEL_CODE  order by DATE_DUE ASC
END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_AKSAT_TABLE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_AKSAT_TABLE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'












CREATE PROCEDURE [dbo].[PV_AKSAT_TABLE]
@BILL_BRANCH	nvarchar(50)	,
@B_CODE INT
AS

BEGIN
SELECT * FROM [dbo].[V_AKSAT]
WHERE   BILL_BRANCH LIKE @BILL_BRANCH AND B_CODE = @B_CODE
ORDER BY DATE_DUE ASC
END	--END OF PROGRAM

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_CENTER_COST]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_CENTER_COST]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[PV_CENTER_COST]
@D1 DATE,
@D2 DATE


AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  CENTER_CODE FROM T_CENTER_COST WHERE ACTIVE = 1  ORDER BY CENTER_CODE ;

DECLARE
@CENTER_CODE_CR	int	,
@CENTER_NAME	nvarchar(MAX)	,
@CATEGORY_LIST	nvarchar(MAX)	,
@ACCOUNT_LIST	nvarchar(MAX)	,
@TOTAL_SALES	float	,
@TOTAL_COST	float	,
@TOTAL_EXPENSES	float	,
@NET_ARBAH	float	
BEGIN TRAN
BEGIN

OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @CENTER_CODE_CR
WHILE @@FETCH_STATUS = 0
BEGIN
SET @TOTAL_SALES=0
SET @TOTAL_COST=0
SET @TOTAL_EXPENSES=0
SET @NET_ARBAH=0
SELECT @CENTER_NAME=CENTER_NAME,@CATEGORY_LIST=CATEGORY_LIST,@ACCOUNT_LIST=ACCOUNT_LIST FROM T_CENTER_COST WHERE CENTER_CODE=@CENTER_CODE_CR

SELECT @TOTAL_SALES=ISNULL(SUM(NET_TOTAL),0) FROM V_SALES_DETAILS WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND CATEGORY_NAME IN( SELECT   
     Split.a.value(''.'', ''VARCHAR(500)'') AS Data  
 FROM  
 (
     SELECT CATEGORY_LIST,  
         CAST (''<M>'' + REPLACE(CATEGORY_LIST, '','', ''</M><M>'') + ''</M>'' AS XML) AS Data  
     FROM  T_CENTER_COST WHERE CENTER_CODE=@CENTER_CODE_CR
 ) AS A CROSS APPLY Data.nodes (''/M'') AS Split(a))

SELECT @TOTAL_COST=ISNULL(SUM(TOTAL_COST),0) FROM V_SALES_DETAILS WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND CATEGORY_NAME IN( SELECT   
     Split.a.value(''.'', ''VARCHAR(500)'') AS Data  
 FROM  
 (
     SELECT CATEGORY_LIST,  
         CAST (''<M>'' + REPLACE(CATEGORY_LIST, '','', ''</M><M>'') + ''</M>'' AS XML) AS Data  
     FROM  T_CENTER_COST  WHERE CENTER_CODE=@CENTER_CODE_CR
 ) AS A CROSS APPLY Data.nodes (''/M'') AS Split(a))
SELECT @TOTAL_EXPENSES=ISNULL(SUM(DEBIT_CUR-CREDIT_CUR),0) FROM V_BOX WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND ACCOUNT_NAME IN( SELECT   
     Split.a.value(''.'', ''VARCHAR(500)'') AS Data  
 FROM  
 (
     SELECT ACCOUNT_LIST,  
         CAST (''<M>'' + REPLACE(ACCOUNT_LIST, '','', ''</M><M>'') + ''</M>'' AS XML) AS Data  
     FROM  T_CENTER_COST  WHERE CENTER_CODE=@CENTER_CODE_CR
 ) AS A CROSS APPLY Data.nodes (''/M'') AS Split(a))

SET @NET_ARBAH=@TOTAL_SALES-@TOTAL_COST-@TOTAL_EXPENSES

UPDATE T_CENTER_COST SET TOTAL_SALES=@TOTAL_SALES,TOTAL_COST=@TOTAL_COST,TOTAL_EXPENSES=@TOTAL_EXPENSES,NET_ARBAH=@NET_ARBAH WHERE CENTER_CODE=@CENTER_CODE_CR

FETCH NEXT FROM BOX_CURSOR INTO @CENTER_CODE_CR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SELECT * FROM T_CENTER_COST WHERE ACTIVE=1 ORDER BY CENTER_CODE

END	--END OF PROGRAM

commit
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_CENTER_COST_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_CENTER_COST_INVOICE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


















CREATE PROCEDURE [dbo].[PV_CENTER_COST_INVOICE]
@D1 DATE,
@D2 DATE


AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  CENTER_CODE FROM T_CENTER_COST_INVOICE WHERE ACTIVE = 1 ORDER BY CENTER_CODE ;

DECLARE
@CENTER_CODE_CR	int	,
@CENTER_NAME	nvarchar(MAX)	,
@MOVE_LIST	nvarchar(MAX)	,
@TOTAL_SALES	float	,
@TOTAL_COST	float	,
@TOTAL_EXPENSES	float	,
@NET_ARBAH	float	
BEGIN TRAN
BEGIN

OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @CENTER_CODE_CR
WHILE @@FETCH_STATUS = 0
BEGIN
SET @TOTAL_SALES=0
SET @TOTAL_COST=0
SET @TOTAL_EXPENSES=0
SET @NET_ARBAH=0
SELECT @CENTER_NAME=CENTER_NAME,@MOVE_LIST=MOVE_LIST FROM T_CENTER_COST_INVOICE WHERE CENTER_CODE=@CENTER_CODE_CR

SELECT @TOTAL_SALES=ISNULL(SUM(NET_TOTAL),0) FROM V_SALES_DETAILS WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND CENTER_CODE =@CENTER_CODE_CR

SELECT @TOTAL_COST=ISNULL(SUM(TOTAL_COST),0) FROM V_SALES_DETAILS WHERE (BILL_DATE BETWEEN @D1 AND @D2)  AND CENTER_CODE =@CENTER_CODE_CR
   
SELECT @TOTAL_EXPENSES=ISNULL(SUM(DEBIT_CUR-CREDIT_CUR),0) FROM V_BOX WHERE (BILL_DATE BETWEEN @D1 AND @D2)AND ACCOUNT_PARENT=3 AND MOVE_NAME IN( SELECT   
     Split.a.value(''.'', ''VARCHAR(500)'') AS Data  
 FROM  
 (
     SELECT MOVE_LIST,  
         CAST (''<M>'' + REPLACE(MOVE_LIST, '','', ''</M><M>'') + ''</M>'' AS XML) AS Data  
     FROM  T_CENTER_COST_INVOICE  WHERE CENTER_CODE=@CENTER_CODE_CR
 ) AS A CROSS APPLY Data.nodes (''/M'') AS Split(a))

SET @NET_ARBAH=@TOTAL_SALES-@TOTAL_COST-@TOTAL_EXPENSES

UPDATE T_CENTER_COST_INVOICE SET TOTAL_SALES=@TOTAL_SALES,TOTAL_COST=@TOTAL_COST,TOTAL_EXPENSES=@TOTAL_EXPENSES,NET_ARBAH=@NET_ARBAH WHERE CENTER_CODE=@CENTER_CODE_CR

FETCH NEXT FROM BOX_CURSOR INTO @CENTER_CODE_CR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SELECT * FROM T_CENTER_COST_INVOICE WHERE ACTIVE=1 ORDER BY CENTER_CODE

END	--END OF PROGRAM

commit


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_CENTER_COST_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_CENTER_COST_ITEMS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

















CREATE PROCEDURE [dbo].[PV_CENTER_COST_ITEMS]
@D1 DATE,
@D2 DATE


AS



DECLARE BOX_CURSOR CURSOR FOR SELECT  CENTER_CODE FROM T_CENTER_COST_ITEMS WHERE ACTIVE = 1 ORDER BY CENTER_CODE ;

DECLARE
@CENTER_CODE_CR	int	,
@CENTER_NAME	nvarchar(MAX)	,
@ITEM_LIST	nvarchar(MAX)	,
@MOVE_LIST	nvarchar(MAX)	,
@TOTAL_SALES	float	,
@TOTAL_COST	float	,
@TOTAL_EXPENSES	float	,
@NET_ARBAH	float	
BEGIN TRAN
BEGIN

OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @CENTER_CODE_CR
WHILE @@FETCH_STATUS = 0
BEGIN
SET @TOTAL_SALES=0
SET @TOTAL_COST=0
SET @TOTAL_EXPENSES=0
SET @NET_ARBAH=0
SELECT @CENTER_NAME=CENTER_NAME,@ITEM_LIST=ITEM_LIST,@MOVE_LIST=MOVE_LIST FROM T_CENTER_COST_ITEMS WHERE CENTER_CODE=@CENTER_CODE_CR

SELECT @TOTAL_SALES=ISNULL(SUM(NET_TOTAL),0) FROM V_SALES_DETAILS WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND ITEM_NAME IN( SELECT   
     Split.a.value(''.'', ''VARCHAR(500)'') AS Data  
 FROM  
 (
     SELECT ITEM_LIST,  
         CAST (''<M>'' + REPLACE(ITEM_LIST, '','', ''</M><M>'') + ''</M>'' AS XML) AS Data  
     FROM  T_CENTER_COST_ITEMS WHERE CENTER_CODE=@CENTER_CODE_CR
 ) AS A CROSS APPLY Data.nodes (''/M'') AS Split(a))

SELECT @TOTAL_COST=ISNULL(SUM(TOTAL_COST),0) FROM V_SALES_DETAILS WHERE (BILL_DATE BETWEEN @D1 AND @D2) AND ITEM_NAME IN( SELECT   
     Split.a.value(''.'', ''VARCHAR(500)'') AS Data  
 FROM  
 (
     SELECT ITEM_LIST,  
         CAST (''<M>'' + REPLACE(ITEM_LIST, '','', ''</M><M>'') + ''</M>'' AS XML) AS Data  
     FROM  T_CENTER_COST_ITEMS  WHERE CENTER_CODE=@CENTER_CODE_CR
 ) AS A CROSS APPLY Data.nodes (''/M'') AS Split(a))

SELECT @TOTAL_EXPENSES=ISNULL(SUM(DEBIT_CUR-CREDIT_CUR),0) FROM V_BOX WHERE (BILL_DATE BETWEEN @D1 AND @D2)AND ACCOUNT_PARENT=3 AND MOVE_NAME IN( SELECT   
     Split.a.value(''.'', ''VARCHAR(500)'') AS Data  
 FROM  
 (
     SELECT MOVE_LIST,  
         CAST (''<M>'' + REPLACE(MOVE_LIST, '','', ''</M><M>'') + ''</M>'' AS XML) AS Data  
     FROM  T_CENTER_COST_ITEMS  WHERE CENTER_CODE=@CENTER_CODE_CR
 ) AS A CROSS APPLY Data.nodes (''/M'') AS Split(a))

SET @NET_ARBAH=@TOTAL_SALES-@TOTAL_COST-@TOTAL_EXPENSES

UPDATE T_CENTER_COST_ITEMS SET TOTAL_SALES=@TOTAL_SALES,TOTAL_COST=@TOTAL_COST,TOTAL_EXPENSES=@TOTAL_EXPENSES,NET_ARBAH=@NET_ARBAH WHERE CENTER_CODE=@CENTER_CODE_CR

FETCH NEXT FROM BOX_CURSOR INTO @CENTER_CODE_CR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


SELECT * FROM T_CENTER_COST_ITEMS WHERE ACTIVE=1 ORDER BY CENTER_CODE

END	--END OF PROGRAM

commit

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_CLIENT_BALANCE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_CLIENT_BALANCE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[PV_CLIENT_BALANCE]
AS
BEGIN

SELECT TOP (100) PERCENT  
    ACCOUNT_CODE, 
    ACCOUNT_NAME, 
    ACCOUNT_FULL_NAME, 
    ACCOUNT_PARENT, 
    ACCOUNT_LEVEL, 
    BALANCE, 
    BALANCE_IQ, 
    BALANCE_CUR, 
    CLIENT_PHONE, 
    CLIENT_PHONE_SMS, 
    CLIENT_FULL_PHONE, 
    CLIENT_REGION, 
    MANDOOB_CODE, 
    MANDOOB_NAME, 
    C_TYPE_NAME, 
    SECURETY_CODE, 
    CLIENT_BUSINESS, 
    CLIENT_TYPE, 
    LAST_CASH_DATE, 
    LAST_ID, 
    LAST_AMO, 
    CASE 
        WHEN ISDATE(LAST_CASH_DATE) = 1 
            THEN CAST(DATEDIFF(DAY, CAST(LAST_CASH_DATE AS DATE), GETDATE()) AS NVARCHAR)
        ELSE N''----''
    END AS DIFF
FROM dbo.V_CLIENT_BALANCE
WHERE 
    BALANCE_CUR > 0.1 
ORDER BY ACCOUNT_CODE

END -- END OF PROGRAM
' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_CLIENT_BALANCE_DIFF]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_CLIENT_BALANCE_DIFF]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[PV_CLIENT_BALANCE_DIFF]

AS

BEGIN

SELECT      TOP (100) PERCENT   ACCOUNT_CODE, ACCOUNT_NAME, ACCOUNT_FULL_NAME, ACCOUNT_PARENT, ACCOUNT_LEVEL, BALANCE, BALANCE_IQ, BALANCE_CUR, CLIENT_PHONE, CLIENT_PHONE_SMS, CLIENT_FULL_PHONE, 
                         CLIENT_REGION, MANDOOB_CODE, MANDOOB_NAME, C_TYPE_NAME, SECURETY_CODE, CLIENT_BUSINESS, CLIENT_TYPE, LAST_CASH_DATE, LAST_ID, LAST_AMO
						 ,CASE 
        WHEN ISDATE(LAST_CASH_DATE) = 1 
            THEN DATEDIFF(DAY, CAST(LAST_CASH_DATE AS DATE), GETDATE())
        ELSE NULL
    END AS DIFF
FROM            dbo.V_CLIENT_BALANCE
where BALANCE_CUR>0.1
ORDER BY   ACCOUNT_CODE

END	--END OF PROGRAM




































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_CLIENT_BALANCE_TO_DATE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_CLIENT_BALANCE_TO_DATE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[PV_CLIENT_BALANCE_TO_DATE]
AS
BEGIN
    DECLARE @REPORT_DATE DATE;
    SELECT @REPORT_DATE = D_DATE FROM dbo.T_DATE_REPORT_DEBIT WHERE ID = 1;

    -- بناء CTE لمبلغ آخر عملية قبض بناءً على تاريخ القبض
    WITH BOX_CASH_AMO AS (
        SELECT
            B.ACCOUNT_CODE,
            SUM(B.DEBIT_CUR + B.CREDIT_CUR) AS LAST_AMO
        FROM dbo.T_BOX B
        INNER JOIN (
            SELECT
                ACCOUNT_CODE,
                MAX(BILL_DATE) AS MAX_BILL_DATE
            FROM dbo.T_BOX
            WHERE ACTIVE = 1 AND CREDIT_CUR <> 0 AND B_CODE IN (5,7,15,28)
            GROUP BY ACCOUNT_CODE
        ) M ON B.ACCOUNT_CODE = M.ACCOUNT_CODE AND B.BILL_DATE = M.MAX_BILL_DATE
        WHERE B.ACTIVE = 1 AND B.CREDIT_CUR <> 0 AND B.B_CODE IN (5,7,15,28)
        GROUP BY B.ACCOUNT_CODE
    )

    SELECT 
        C.CLIENT_CODE            AS ACCOUNT_CODE,
        C.CLIENT_NAME            AS ACCOUNT_NAME,
        C.CLIENT_NAME            AS ACCOUNT_FULL_NAME,
        21                       AS ACCOUNT_PARENT,
        3                        AS ACCOUNT_LEVEL,
        SUM(B.B_USA)             AS BALANCE,
        SUM(B.B_IQ)              AS BALANCE_IQ,
        SUM(B.B_CUR)             AS BALANCE_CUR,
        C.CLIENT_PHONE,
        C.CLIENT_PHONE_SMS,
        C.CLIENT_FULL_PHONE,
        C.CLIENT_REGION,
        C.MANDOOB_CODE,
        M.MANDOOB_NAME,
        CT.C_TYPE_NAME,
        C.SECURETY_CODE,
        C.CLIENT_BUSINESS,
        C.CLIENT_TYPE,

        -- آخر تاريخ قبض
        (
            SELECT ISNULL(CONVERT(NVARCHAR(10), MAX(BILL_DATE), 120), N''----'')
            FROM dbo.T_BOX B2
            WHERE B2.ACCOUNT_CODE = C.CLIENT_CODE
              AND B2.ACTIVE = 1
              AND B2.CREDIT_CUR <> 0
              AND B2.B_CODE IN (5,7,15,28)
        ) AS LAST_CASH_DATE,

        -- آخر معرف عملية قبض
        (
            SELECT ISNULL(MAX(T_ID_BOX), 0)
            FROM dbo.T_BOX B3
            WHERE B3.ACCOUNT_CODE = C.CLIENT_CODE
              AND B3.ACTIVE = 1
              AND B3.CREDIT_CUR <> 0
              AND B3.B_CODE IN (5,7,15,28)
        ) AS LAST_ID,

        -- مبلغ آخر عملية قبض حسب تاريخ القبض (نفس طريقة الفيو)
        ISNULL(BCA.LAST_AMO, 0) AS LAST_AMO ,

        -- عدد الأيام منذ آخر قبض
CASE 
    WHEN ISDATE(CONVERT(NVARCHAR, (
        SELECT MAX(BILL_DATE)
        FROM dbo.T_BOX B4
        WHERE B4.ACCOUNT_CODE = C.CLIENT_CODE
          AND B4.ACTIVE = 1
          AND B4.CREDIT_CUR <> 0
          AND B4.B_CODE IN (5,7,15,28)
    ))) = 1 
        THEN DATEDIFF(
            DAY,
            CAST((
                SELECT MAX(BILL_DATE)
                FROM dbo.T_BOX B5
                WHERE B5.ACCOUNT_CODE = C.CLIENT_CODE
                  AND B5.ACTIVE = 1
                  AND B5.CREDIT_CUR <> 0
                  AND B5.B_CODE IN (5,7,15,28)
            ) AS DATE),
            GETDATE()
        )
    ELSE NULL
END AS DIFF


    FROM 
        dbo.T_CLIENT C
        LEFT JOIN dbo.T_BOX B 
            ON C.CLIENT_CODE = B.ACCOUNT_CODE
            AND B.ACTIVE = 1
            AND B.BILL_DATE <= @REPORT_DATE
        LEFT JOIN dbo.T_MANDOOB M 
            ON C.MANDOOB_CODE = M.MANDOOB_CODE
        LEFT JOIN dbo.T_CLIENT_TYPE CT 
            ON C.CLIENT_TYPE = CT.C_TYPE_CODE
        LEFT JOIN BOX_CASH_AMO BCA 
            ON C.CLIENT_CODE = BCA.ACCOUNT_CODE

    GROUP BY 
        C.CLIENT_CODE,
        C.CLIENT_NAME,
        C.CLIENT_PHONE,
        C.CLIENT_PHONE_SMS,
        C.CLIENT_FULL_PHONE,
        C.CLIENT_REGION,
        C.MANDOOB_CODE,
        M.MANDOOB_NAME,
        CT.C_TYPE_NAME,
        C.SECURETY_CODE,
        C.CLIENT_BUSINESS,
        C.CLIENT_TYPE,
        BCA.LAST_AMO

    HAVING SUM(B.DEBIT_CUR) > 0

    ORDER BY C.CLIENT_CODE
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_ERADAT_MOVE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_ERADAT_MOVE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_ERADAT_MOVE]

@D1 DATE,
@D2 DATE

AS

BEGIN

SELECT      TOP (100) PERCENT     ACCOUNT_CODE, ACCOUNT_NAME, SUM(DEBIT) AS DEBIT, SUM(CREDIT) AS CREDIT, SUM(DEBIT_IQ) AS DEBIT_IQ, SUM(CREDIT_IQ) AS CREDIT_IQ, SUM(DEBIT_CUR) AS DEBIT_CUR, SUM(CREDIT_CUR)  AS CREDIT_CUR,MOVE_CODE ,MOVE_NAME
                       
FROM            dbo.V_BOX_ERADAT
WHERE       BILL_DATE BETWEEN @D1 AND @D2
GROUP BY ACCOUNT_CODE, ACCOUNT_NAME,MOVE_CODE ,MOVE_NAME
ORDER BY   ACCOUNT_CODE

END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_EXPENSES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_EXPENSES]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_EXPENSES]

@D1 DATE,
@D2 DATE
AS

BEGIN

SELECT      TOP (100) PERCENT     ACCOUNT_CODE, ACCOUNT_NAME, SUM(DEBIT) AS DEBIT, SUM(CREDIT) AS CREDIT, SUM(DEBIT_IQ) AS DEBIT_IQ, SUM(CREDIT_IQ) AS CREDIT_IQ, SUM(DEBIT_CUR) AS DEBIT_CUR, SUM(CREDIT_CUR) 
                         AS CREDIT_CUR
FROM            dbo.V_BOX_EXPENSES
WHERE       BILL_DATE BETWEEN @D1 AND @D2
GROUP BY ACCOUNT_CODE, ACCOUNT_NAME
ORDER BY   ACCOUNT_CODE

END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_EXPENSES_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_EXPENSES_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[PV_EXPENSES_DETAILS]

@D1 DATE,
@D2 DATE
AS

BEGIN

SELECT     *
FROM            dbo.V_BOX_EXPENSES

WHERE       BILL_DATE BETWEEN @D1 AND @D2

END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_EXPENSES_MOVE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_EXPENSES_MOVE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'












CREATE PROCEDURE [dbo].[PV_EXPENSES_MOVE]

@D1 DATE,
@D2 DATE

AS

BEGIN

SELECT      TOP (100) PERCENT     ACCOUNT_CODE, ACCOUNT_NAME, SUM(DEBIT) AS DEBIT, SUM(CREDIT) AS CREDIT, SUM(DEBIT_IQ) AS DEBIT_IQ, SUM(CREDIT_IQ) AS CREDIT_IQ, SUM(DEBIT_CUR) AS DEBIT_CUR, SUM(CREDIT_CUR)  AS CREDIT_CUR,MOVE_CODE ,MOVE_NAME
                       
FROM            dbo.V_BOX_EXPENSES
WHERE       BILL_DATE BETWEEN @D1 AND @D2
GROUP BY ACCOUNT_CODE, ACCOUNT_NAME,MOVE_CODE ,MOVE_NAME
ORDER BY   ACCOUNT_CODE

END	--END OF PROGRAM

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_BUY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_BUY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[PV_GET_BUY]

@D1 DATE,
@D2 DATE
AS

BEGIN

SELECT     dbo.T_BUY.BILL_BRANCH,  dbo.T_BUY.BILL_NUMBER, dbo.T_BUY.BILL_INVOICE, dbo.T_BUY.BILL_DATE, dbo.T_BUY.CURRANCY_CODE, dbo.T_CURRANNCY.CURRANCY_NAME, dbo.T_BUY.CURRANCY_EQUAL, dbo.T_BUY.CLIENT_CODE, 
                         dbo.T_BUY.CLIENT_NAME, dbo.T_BUY.DESCRIPTION, dbo.T_BUY.USER_CREATE, dbo.T_BUY.SECURETY_CODE, dbo.T_BUY.TOTAL_BUY, dbo.T_BUY.TOTAL_EXPENSES, dbo.T_BUY.NET_BUY, 
                         dbo.T_BUY.TOTAL_COST - dbo.T_BUY.DISCOUNT_AMOUNT AS TOTAL_COST, dbo.T_BUY.IVC_CODE, dbo.T_IVC_TYPE.IVC_NAME, dbo.T_BUY.DAY_CASH, dbo.T_BUY.DATE_CASH, dbo.T_BUY.TOT_CONV, 
                         dbo.T_BUY.ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME, dbo.T_BUY.CASH_USA, dbo.T_BUY.REMAIN_USA, dbo.T_BUY.CASH_IQ, dbo.T_BUY.REMAIN_IQ, dbo.T_BUY.C_DATE, dbo.T_BUY.C_UPDATE, 
                         dbo.T_BUY.USER_UPDATE, dbo.T_BUY.ACTIVE, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_BUSINESS, dbo.T_BUY.WAJBA_CODE, dbo.T_WAJBA.WAJBA_NAME, dbo.T_BUY.DISCOUNT_PERCENT, 
                         dbo.T_BUY.DISCOUNT_AMOUNT, dbo.T_BUY.EXP_CASH, dbo.T_BUY.EXP_PERCENT
FROM            dbo.T_BUY LEFT OUTER JOIN
                         dbo.T_WAJBA ON dbo.T_BUY.WAJBA_CODE = dbo.T_WAJBA.WAJBA_CODE LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.T_BUY.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                         dbo.T_ACCOUNTS ON dbo.T_BUY.ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.T_IVC_TYPE ON dbo.T_BUY.IVC_CODE = dbo.T_IVC_TYPE.IVC_CODE LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.T_BUY.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE
WHERE        (dbo.T_BUY.ACTIVE = 1) AND (dbo.T_BUY.IVC_CODE < 10) AND T_BUY.BILL_DATE BETWEEN @D1 AND @D2  
ORDER BY dbo.T_BUY.BILL_NUMBER
END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_BUY_DATE_CASH]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_BUY_DATE_CASH]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_GET_BUY_DATE_CASH]


AS

BEGIN
SELECT       dbo.T_BUY.BILL_BRANCH, dbo.T_BUY.BILL_NUMBER, dbo.T_BUY.BILL_INVOICE, dbo.T_BUY.BILL_DATE, dbo.T_BUY.USER_CREATE, dbo.T_BUY.CURRANCY_CODE, dbo.T_CURRANNCY.CURRANCY_NAME, dbo.T_BUY.CURRANCY_EQUAL, 
                         dbo.T_BUY.CLIENT_CODE, dbo.T_CLIENT.CLIENT_NAME, dbo.T_CLIENT.CLIENT_FULL_PHONE, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_ADDRESS, dbo.T_CLIENT.CLIENT_BUSINESS, dbo.T_BUY.DESCRIPTION, 
                         dbo.T_BUY.TOTAL_BUY, dbo.T_BUY.DISCOUNT_PERCENT, dbo.T_BUY.DISCOUNT_AMOUNT, dbo.T_BUY.NET_BUY, dbo.T_BUY.TOTAL_EXPENSES, dbo.T_BUY.TOTAL_COST, dbo.T_BUY.IVC_CODE, 
                         dbo.T_IVC_TYPE.IVC_NAME, dbo.T_BUY.DAY_CASH, dbo.T_BUY.DATE_CASH, dbo.T_BUY.TOT_CONV, dbo.T_BUY.ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME, dbo.T_BUY.CASH_USA, 
                         dbo.T_BUY.REMAIN_USA, dbo.T_BUY.CASH_IQ, dbo.T_BUY.REMAIN_IQ, dbo.T_BUY.EXP_CASH, dbo.T_BUY.EXP_PERCENT, dbo.T_BUY.C_DATE, dbo.T_BUY.C_UPDATE, dbo.T_BUY.USER_UPDATE, dbo.T_BUY.ACTIVE, 
                         DATEDIFF(DAY, dbo.T_BUY.DATE_CASH, GETDATE()) AS CASH_DIFF
FROM            dbo.T_BUY LEFT OUTER JOIN
                         dbo.T_ACCOUNTS ON dbo.T_BUY.ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.T_IVC_TYPE ON dbo.T_BUY.IVC_CODE = dbo.T_IVC_TYPE.IVC_CODE LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.T_BUY.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.T_BUY.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE
WHERE        (dbo.T_BUY.ACTIVE = 1) AND (dbo.T_BUY.IVC_CODE = 4) AND (dbo.T_BUY.DAY_CASH <> 0)
ORDER BY dbo.T_BUY.BILL_NUMBER
END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_BUY_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_BUY_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[PV_GET_BUY_DETAILS]

@D1 DATE,
@D2 DATE
AS

BEGIN

SELECT    dbo.T_BUY.BILL_BRANCH,   dbo.T_BUY.BILL_NUMBER, CONVERT(NVARCHAR(12), dbo.T_BUY.BILL_NUMBER) AS BILL_STR, dbo.T_BUY.BILL_INVOICE, dbo.T_BUY.BILL_DATE, dbo.T_BUY.USER_CREATE, dbo.T_BUY.CURRANCY_CODE, 
                         dbo.T_CURRANNCY.CURRANCY_NAME, dbo.T_BUY.CLIENT_CODE, dbo.T_BUY.CLIENT_NAME, dbo.T_CLIENT.CLIENT_PHONE, dbo.T_CLIENT.CLIENT_PHONE_SMS, dbo.T_CLIENT.CLIENT_FULL_PHONE, 
                         dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_ADDRESS, dbo.T_CLIENT.CLIENT_BUSINESS, dbo.T_BUY.DESCRIPTION, dbo.T_BUY.WAJBA_CODE, dbo.T_WAJBA.WAJBA_NAME, dbo.T_BUY.SECURETY_CODE, 
                         dbo.T_BUY_DETAILS.ITEM_CODE, dbo.T_ITEMS.ITEM_BARCODE AS ITEM_SIGN, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_BUY_DETAILS.QTY, 
                         dbo.T_BUY_DETAILS.UNIT_NAME, dbo.T_BUY_DETAILS.UNIT_QTY, dbo.T_BUY_DETAILS.STORE_CODE, dbo.T_STORE_TYPE.STORE_NAME, dbo.T_BUY_DETAILS.EXP_DATE, dbo.T_BUY_DETAILS.PRICE_BUY, 
                         dbo.T_BUY_DETAILS.CURRANCY_EQUAL, dbo.T_BUY_DETAILS.PRICE, dbo.T_BUY_DETAILS.TOTAL, dbo.T_BUY_DETAILS.EXPENSES, dbo.T_BUY_DETAILS.TOTAL_EXPENSES, dbo.T_BUY_DETAILS.COST, 
                         dbo.T_BUY_DETAILS.TOTAL_COST, dbo.T_BUY.IVC_CODE, dbo.T_IVC_TYPE.IVC_NAME
FROM            dbo.T_BUY INNER JOIN
                         dbo.T_BUY_DETAILS ON dbo.T_BUY.BILL_NUMBER = dbo.T_BUY_DETAILS.BILL_NUMBER LEFT OUTER JOIN
                         dbo.T_IVC_TYPE ON dbo.T_BUY.IVC_CODE = dbo.T_IVC_TYPE.IVC_CODE LEFT OUTER JOIN
                         dbo.T_STORE_TYPE ON dbo.T_BUY_DETAILS.STORE_CODE = dbo.T_STORE_TYPE.STORE_CODE LEFT OUTER JOIN
                         dbo.T_ITEMS ON dbo.T_BUY_DETAILS.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_WAJBA ON dbo.T_BUY.WAJBA_CODE = dbo.T_WAJBA.WAJBA_CODE LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.T_BUY.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.T_BUY.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE
WHERE        (dbo.T_BUY.ACTIVE = 1) AND (dbo.T_BUY.IVC_CODE < 10)
 AND T_BUY.BILL_DATE BETWEEN @D1 AND @D2
 ORDER BY dbo.T_BUY.BILL_NUMBER
END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_BUY_DETAILS_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_BUY_DETAILS_CATEGORY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'












CREATE PROCEDURE [dbo].[PV_GET_BUY_DETAILS_CATEGORY]

@D1 DATE,
@D2 DATE
AS

BEGIN

SELECT        CATEGORY_CODE, CATEGORY_NAME,  SUM(TOTAL) AS TOTAL, SUM(TOTAL_EXPENSES) AS TOTAL_EXPENSES, SUM(TOTAL_COST) 
                         AS TOTAL_COST
FROM            dbo.V_BUY_DETAILS

WHERE          V_BUY_DETAILS.BILL_DATE BETWEEN @D1 AND @D2
 
GROUP BY   CATEGORY_CODE, CATEGORY_NAME
END	--END OF PROGRAM

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_BUY_DETAILS_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_BUY_DETAILS_CLIENT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'












CREATE PROCEDURE [dbo].[PV_GET_BUY_DETAILS_CLIENT]

@D1 DATE,
@D2 DATE
AS

BEGIN
SELECT        CLIENT_CODE, CLIENT_NAME, CLIENT_REGION, CLIENT_BUSINESS, SUM(TOTAL_BUY) AS TOTAL_BUY, SUM(TOTAL_EXPENSES) AS TOTAL_EXPENSES, SUM(NET_BUY) AS NET_BUY, SUM(TOTAL_COST) AS TOTAL_COST, 
                         SUM(DISCOUNT_AMOUNT) AS DISCOUNT_AMOUNT
FROM            dbo.V_BUY

WHERE          V_BUY.BILL_DATE BETWEEN @D1 AND @D2
 
GROUP BY  CLIENT_CODE, CLIENT_NAME, CLIENT_REGION, CLIENT_BUSINESS
END	--END OF PROGRAM

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_BUY_DETAILS_CORRECT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_BUY_DETAILS_CORRECT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_GET_BUY_DETAILS_CORRECT]

@D1 DATE,
@D2 DATE
AS

BEGIN

SELECT        TOP (100) PERCENT dbo.T_BUY_DETAILS.T_ID, dbo.T_BUY_DETAILS.BILL_BRANCH, dbo.T_BUY_DETAILS.BILL_NUMBER, dbo.T_BUY_DETAILS.ITEM_CODE, dbo.T_ITEMS.ITEM_BARCODE, dbo.T_ITEMS.ITEM_NAME, 
                         dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_BUY_DETAILS.QTY, dbo.T_BUY_DETAILS.UNIT_NAME, dbo.T_BUY_DETAILS.UNIT_QTY, dbo.T_BUY_DETAILS.STORE_CODE, 
                         dbo.T_STORE_TYPE.STORE_NAME, dbo.T_BUY_DETAILS.EXP_DATE, dbo.T_BUY_DETAILS.PRICE_BUY, dbo.T_BUY_DETAILS.CURRANCY_EQUAL, dbo.T_BUY_DETAILS.PRICE, dbo.T_BUY_DETAILS.TOTAL, 
                         dbo.T_BUY_DETAILS.EXPENSES, dbo.T_BUY_DETAILS.TOTAL_EXPENSES, dbo.T_BUY_DETAILS.COST, dbo.T_BUY_DETAILS.TOTAL_COST, CAST(dbo.T_BUY_DETAILS.C_DATE AS date)   AS BILL_DATE
FROM            dbo.T_BUY_DETAILS LEFT OUTER JOIN
                         dbo.T_STORE_TYPE ON dbo.T_BUY_DETAILS.STORE_CODE = dbo.T_STORE_TYPE.STORE_CODE LEFT OUTER JOIN
                         dbo.T_ITEMS ON dbo.T_BUY_DETAILS.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE
WHERE        (dbo.T_BUY_DETAILS.BILL_NUMBER < 0) AND  CAST(dbo.T_BUY_DETAILS.C_DATE AS date)  BETWEEN @D1 AND @D2

 
 ORDER BY dbo.T_BUY_DETAILS.C_DATE ASC
END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_BUY_DETAILS_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_BUY_DETAILS_ITEMS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_GET_BUY_DETAILS_ITEMS]

@D1 DATE,
@D2 DATE
AS

BEGIN

SELECT        ITEM_CODE, ITEM_SIGN, ITEM_NAME, CATEGORY_CODE, CATEGORY_NAME, SUM(QTY) AS QTY, UNIT_NAME, SUM(TOTAL) AS TOTAL, SUM(TOTAL_EXPENSES) AS TOTAL_EXPENSES, SUM(TOTAL_COST) 
                         AS TOTAL_COST
FROM            dbo.V_BUY_DETAILS

WHERE          V_BUY_DETAILS.BILL_DATE BETWEEN @D1 AND @D2
 
GROUP BY  ITEM_CODE, ITEM_SIGN, ITEM_NAME, CATEGORY_CODE, CATEGORY_NAME, UNIT_NAME
END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_EMPLOYEE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_EMPLOYEE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_GET_EMPLOYEE]

@D1 DATE
AS

BEGIN

SELECT       EMP_CODE, EMP_NAME, EMP_CARD, EMP_SALLARY, PER_DAY, JOB_HOUR, PRICE_HOUR, PRICE_MINUTE, JOB_FROM, JOB_TO, ACTIVE,(SELECT COUNT(T_ID) FROM T_EMP_ENTER WHERE EMP_CODE=dbo.T_EMPLOYEE.EMP_CODE AND T_EMP_ENTER.D_DATE=@D1) AS COUNT_DAY
FROM            dbo.T_EMPLOYEE

ORDER BY EMP_NAME ASC









END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_EMPLOYEE_ENTERY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_EMPLOYEE_ENTERY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_GET_EMPLOYEE_ENTERY]


@D1 DATE,
@D2 DATE
AS


DECLARE BOX_CURSOR CURSOR FOR SELECT  EMP_CODE FROM T_EMPLOYEE  WHERE ACTIVE=1   order by EMP_NAME asc;



DECLARE
@T_ID_BOX_CURCOR INT,
@D_DATE	date	,
@EMP_CODE	int	,
@EMP_NAME	nvarchar(MAX)	,
@START_TIME	datetime	,
@END_TIME	datetime	,
@C_COUNT	int	

BEGIN



DELETE FROM T_EMP_ENTER_REPORT


OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN
SELECT  @EMP_CODE=EMP_CODE,@EMP_NAME=EMP_NAME FROM T_EMPLOYEE WHERE EMP_CODE= @T_ID_BOX_CURCOR
SELECT @C_COUNT=COUNT(T_ID)  FROM V_EMP_ENTRY WHERE EMP_CODE=@EMP_CODE AND D_DATE BETWEEN @D1 AND @D2
SELECT TOP (1) @START_TIME=START_TIME,@END_TIME=END_TIME  FROM V_EMP_ENTRY WHERE EMP_CODE=@EMP_CODE AND D_DATE BETWEEN @D1 AND @D2

IF @C_COUNT<>0
BEGIN

INSERT INTO [dbo].[T_EMP_ENTER_REPORT]
           ([D_DATE]
           ,[EMP_CODE]
           ,[EMP_NAME]
           ,[START_TIME]
           ,[END_TIME]
           ,[C_COUNT])
     SELECT 
           D_DATE
           ,EMP_CODE
           ,EMP_NAME
           ,START_TIME
           ,END_TIME
           ,1
		    FROM V_EMP_ENTRY WHERE EMP_CODE=@EMP_CODE AND D_DATE BETWEEN @D1 AND @D2
END


FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR
SELECT * FROM T_EMP_ENTER_REPORT 

END	--END OF PROGRAM





























' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_EXPENSES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_EXPENSES]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_GET_EXPENSES]

@D1 DATE,
@D2 DATE
AS

BEGIN
SELECT       T_ID, D_DATE, D_TIME, EXP_TYPE, AMO, NOTE, USER_CODE, USER_NAME
FROM            dbo.V_EXPENSES
	

 WHERE 	dbo. V_EXPENSES.D_DATE BETWEEN @D1 AND @D2





	END






















' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_FILL_AVG_ITEM]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_FILL_AVG_ITEM]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'




CREATE PROCEDURE [dbo].[PV_GET_FILL_AVG_ITEM]


@ITEM_CODE INT 

AS
DECLARE 
@BILL_SEQ decimal(18, 0)
 
IF OBJECT_ID(''tempdb..#TEMP_AVG_ITEM'') IS NOT NULL DROP Table #TEMP_AVG_ITEM
SELECT CAST( ROW_NUMBER() OVER (ORDER BY BILL_DATE ASC,BILL_NUMBER ASC ,QTY DESC) AS FLOAT) AS RowNum, x.* INTO #TEMP_AVG_ITEM FROM 
( SELECT 0 AS SEQ,ITEM_CODE, ITEM_NAME,N'''' AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST AS PRICE,TOTAL_COST AS TOTAL,''2000-01-01'' AS BILL_DATE,BILL_NUMBER,BILL_BRANCH,0 AS B_CODE,N''رصيد اولي'' AS B_NAME,(N''رصيد اولي للمادة'') AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG ,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD  FROM V_BUY_DETAILS_FIRST WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT 1 AS SEQ,ITEM_CODE, ITEM_NAME,ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,BILL_DATE,BILL_NUMBER,BILL_BRANCH,21 AS B_CODE,N''مشتريات'' AS B_NAME,(N''المورد :''+CLIENT_NAME) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS int) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE AND QTY<>0
UNION 
SELECT 2 AS SEQ,ITEM_CODE, ITEM_NAME,ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,TOTAL_QTY AS QTY,UNIT_NAME,UNIT_QTY,(TOTAL_QTY*UNIT_QTY)AS QTY_MIN,(TOTAL_QTY*UNIT_QTY)*-1 AS QTY_MIN_BALANCE ,PRICE,TOTAL,BILL_DATE,BILL_NUMBER,BILL_BRANCH,2 AS B_CODE ,N''مبيعات'' AS B_NAME ,(N''العميل :''+CLIENT_NAME) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_SALES_DETAILS WHERE ITEM_CODE=@ITEM_CODE 
 UNION 
SELECT 3 AS SEQ,ITEM_CODE, ITEM_NAME,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,24 AS B_CODE,N''تصحيح مخزني او تلف'' AS B_NAME,IIF(QTY<0,N''تلف'' ,N''اضافة عدد'') AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG ,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_BUY_DETAILS_CORRECT WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT 4 AS SEQ,ITEM_CODE_FACTORY, ITEM_NAME_FACTORY,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,11 AS B_CODE,N''تصنيع'' AS B_NAME,N''تصنيع'' AS DESCRIPTION_TYPE,BILL_NUMBER AS GUID_ID,0 AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_FACTORY WHERE ITEM_CODE_FACTORY=@ITEM_CODE
UNION 
SELECT 5 AS SEQ,ITEM_CODE, ITEM_NAME,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,(TOT_QTY_MIN/UNIT_QTY) AS QTY,UNIT_NAME,UNIT_QTY,(TOT_QTY_MIN)AS QTY_MIN,(TOT_QTY_MIN)*-1 AS QTY_MIN_BALANCE ,PRICE,(PRICE*TOT_QTY_MIN) AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,12 AS B_CODE,N''استهلاك في التصنيع'' AS B_NAME,(N''استهلاك في التصنيع للمادة : ''+ITEM_NAME_FACTORY) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_FACTORY_DETAILS WHERE ITEM_CODE=@ITEM_CODE
 )x ORDER BY SEQ ASC,BILL_DATE ASC,BILL_NUMBER ASC


UPDATE #TEMP_AVG_ITEM SET PROCCESS_ID=RowNum,PROCCESS_ID_OLD=RowNum
--SELECT * FROM #TEMP_AVG_ITEM

DECLARE
@LOOP_COUNT INT


SET @LOOP_COUNT=0
LOOP_FIRST:
SET @LOOP_COUNT+=1
 --UPDATE #TEMP_AVG_ITEM SET RowNum=0,PROCCESS_ID=0 WHERE B_CODE=0
DECLARE BOX_CURSOR CURSOR FOR SELECT  RowNum FROM #TEMP_AVG_ITEM   ORDER BY PROCCESS_ID ASC

DECLARE
@T_ID_BOX_CURCOR numeric(18, 2),
@B_CODE INT,
@GUID_ID numeric(18, 2),
@MAX_ID numeric(18, 2),
@BILL_BRANCH NVARCHAR(30),
@QTY FLOAT,
@COST FLOAT,
@COSTIFZERO FLOAT,
@TOTAL_AVG_COST	FLOAT	,
@TOTAL_BALANCE	FLOAT	,
@TOTAL_BALANCE_BEFORE	FLOAT	,
@COST_BEFORE FLOAT,
@TOTAL FLOAT,
@BALANCE_QTY FLOAT,
@BALANCE_QTY_BEFORE FLOAT,
@PROCCESS_IDD numeric(18, 2),
@PROCCESS_NEW numeric(18, 2),

@TOTAL_COST	FLOAT	

BEGIN



OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN

SELECT @B_CODE=B_CODE,@GUID_ID=GUID_ID,@BILL_BRANCH=BILL_BRANCH,@QTY=QTY_MIN_BALANCE,@COST=PRICE,@TOTAL=TOTAL,@COST=AVG_COST,@TOTAL_AVG_COST=TOTAL_AVG,@PROCCESS_IDD=PROCCESS_ID FROM #TEMP_AVG_ITEM WHERE RowNum=@T_ID_BOX_CURCOR
  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''SELECT '' 
 

 IF @B_CODE=0
		 BEGIN 
		UPDATE #TEMP_AVG_ITEM SET AVG_COST=PRICE,TOTAL_AVG=TOTAL,BALANCE_MIN_AVG=QTY_MIN_BALANCE,TOTAL_BALANCE=TOTAL WHERE RowNum=@T_ID_BOX_CURCOR

		END
ELSE IF @B_CODE=2
		 BEGIN 
		 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
		 
		  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
		 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

		 IF (@BALANCE_QTY_BEFORE)=0
		 BEGIN 
		 SET @COST=@COST
		 SET @TOTAL_AVG_COST=@COST*@QTY
		 END
		  ELSE
		 BEGIN

		 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

		 END
 
		 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
		UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

 
		END
ELSE IF @B_CODE=21
				 BEGIN 

				SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
				  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
				 SELECT @COST =PRICE,@COSTIFZERO= AVG_COST , @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 
				 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY

				  IF @BALANCE_QTY=0
				 BEGIN 
				SET @COST=@COSTIFZERO

				 IF @LOOP_COUNT=1 
				  BEGIN
				 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
				  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''ZERO '' 
				  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
				 set @LOOP_COUNT=0
				 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

				CLOSE BOX_CURSOR
				DEALLOCATE BOX_CURSOR
				 GOTO LOOP_FIRST
				 END
 
 
				 END
				  ELSE IF @BALANCE_QTY>0

 

				 IF @BALANCE_QTY_BEFORE<0
				 BEGIN 
				 IF @LOOP_COUNT=1
				  BEGIN
				 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
					--PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MORE'' 
				  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
				 set @LOOP_COUNT=0
				 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

				CLOSE BOX_CURSOR
				DEALLOCATE BOX_CURSOR
				 GOTO LOOP_FIRST
				 END


				 END
				 ELSE
				  BEGIN

				 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
   
				 END

 

				 ELSE IF @BALANCE_QTY<0 OR @BALANCE_QTY_BEFORE<0
				 BEGIN
				 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
  
				IF @LOOP_COUNT=1
				  BEGIN
				 SET @PROCCESS_NEW=(SELECT  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
				  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MINNNN'' 
				  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
				 set @LOOP_COUNT=0
				 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

				CLOSE BOX_CURSOR
				DEALLOCATE BOX_CURSOR
				 GOTO LOOP_FIRST
				 END


				 END
 
 

 
				 SET @TOTAL_AVG_COST=@COST*@QTY
				UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

				END

ELSE IF @B_CODE=24
			 BEGIN 
			 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
			  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
			 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

			 IF (@BALANCE_QTY_BEFORE)=0
			 BEGIN 
			 SET @COST=@COST
			 SET @TOTAL_AVG_COST=@COST*@QTY
			 END
			  ELSE
			 BEGIN

			 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

			 END
 
			 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
			UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

			----UPDATE T_BUY_DETAILS SET [PRICE_BUY]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[PRICE]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[TOTAL]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL]*QTY,[COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[TOTAL_COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL]*QTY WHERE T_ID=@GUID_ID

			END
ELSE IF @B_CODE=11
			 BEGIN 

			SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
			  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
			 SELECT @COST =PRICE,@COSTIFZERO= AVG_COST ,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 



 
 
			 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
			   IF @BALANCE_QTY=0
			 BEGIN 
			SET @COST=@COSTIFZERO
			 --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''ZERO'' 
			 IF @LOOP_COUNT=1
			  BEGIN
			 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
			  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
			 set @LOOP_COUNT=0
			 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

			CLOSE BOX_CURSOR
			DEALLOCATE BOX_CURSOR
			 GOTO LOOP_FIRST
			 END
 
 
			 END
			  ELSE IF @BALANCE_QTY>0
			 IF @BALANCE_QTY_BEFORE<0
			 BEGIN 
			 IF @LOOP_COUNT=1
			  BEGIN
			 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
			  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
			 set @LOOP_COUNT=0
			 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

			CLOSE BOX_CURSOR
			DEALLOCATE BOX_CURSOR
			 GOTO LOOP_FIRST
			 END


			 END
			 ELSE
			  BEGIN
			  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MORE'' 
			 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
   
			 END
			 ELSE IF @BALANCE_QTY<0 OR @BALANCE_QTY_BEFORE<0
			 BEGIN
			 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
			  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MINNNN'' 
			IF @LOOP_COUNT=1
			  BEGIN
			 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
			  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
			 set @LOOP_COUNT=0
			 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

			CLOSE BOX_CURSOR
			DEALLOCATE BOX_CURSOR
			 GOTO LOOP_FIRST
			 END


			 END
 

 
			 SET @TOTAL_AVG_COST=@COST*@QTY
			UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

			END
ELSE IF @B_CODE=12
			 BEGIN 
			 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
			  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
			 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

			 IF (@BALANCE_QTY_BEFORE)=0
			 BEGIN 
			 SET @COST=@COST
			 SET @TOTAL_AVG_COST=@COST*@QTY
			 END
			  ELSE
			 BEGIN

			 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

			 END
 
			 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
			UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

			--UPDATE T_FACTORY_DETAILS SET [PRICE]=@COST*[UNIT_QTY],TOTAL=@COST*[UNIT_QTY] WHERE T_ID=@GUID_ID
			--SET @TOTAL_COST=ISNULL((SELECT  SUM(TOTAL_COST) FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH),0)
			--UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST WHERE BILL_BRANCH LIKE @BILL_BRANCH

			END
---------------****************

 
FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


DECLARE ITEMS_CURSOR CURSOR FOR SELECT  UNIT_GUID FROM T_ITEM_UNIT  WHERE ITEM_CODE=@ITEM_CODE   ;

DECLARE
@T_ID_GUID_CURCOR INT,
@QTY_UU FLOAT,
@COST_MIN FLOAT,
@AVG_COST FLOAT,
@BILL_SELECT NVARCHAR(30)

 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0) FROM #TEMP_AVG_ITEM 
 SELECT @AVG_COST =AVG_COST FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID


OPEN ITEMS_CURSOR

FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN



SELECT @QTY_UU=UNIT_QTY FROM  T_ITEM_UNIT WHERE UNIT_GUID=@T_ID_GUID_CURCOR
SELECT TOP (1) @BILL_SELECT=ISNULL(BILL_BRANCH,N''0'') FROM  T_BUY_DETAILS WHERE ACTIVE=1 AND ITEM_CODE=@ITEM_CODE ORDER BY BILL_NUMBER DESC

--IF @BILL_SELECT=@BILL_BRANCH
--BEGIN
UPDATE T_ITEM_UNIT SET PRICE_AVG_COST=@AVG_COST*@QTY_UU  WHERE UNIT_GUID=@T_ID_GUID_CURCOR
--IF @FLAG_UPDATE=1
--BEGIN
UPDATE T_ITEMS SET COST= @AVG_COST WHERE ITEM_CODE=@ITEM_CODE
UPDATE T_ITEM_UNIT SET PRICE_COST=@AVG_COST*@QTY_UU  WHERE UNIT_GUID=@T_ID_GUID_CURCOR
--END

--END




FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR

END

CLOSE ITEMS_CURSOR
DEALLOCATE ITEMS_CURSOR

SELECT * FROM #TEMP_AVG_ITEM ORDER BY PROCCESS_ID ASC


END	--END OF PROGRAM



















' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_FILL_AVG_ITEM_NOT_SELECT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_FILL_AVG_ITEM_NOT_SELECT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'





CREATE PROCEDURE [dbo].[PV_GET_FILL_AVG_ITEM_NOT_SELECT]


@ITEM_CODE INT 

AS
DECLARE 
@BILL_SEQ decimal(18, 0)

IF OBJECT_ID(''tempdb..#TEMP_AVG_ITEM'') IS NOT NULL DROP Table #TEMP_AVG_ITEM
SELECT ROW_NUMBER() OVER (ORDER BY BILL_DATE ASC,BILL_NUMBER ASC,QTY DESC) AS RowNum, x.* INTO #TEMP_AVG_ITEM FROM 
( SELECT 0 AS SEQ,ITEM_CODE, ITEM_NAME,N'''' AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST AS PRICE,TOTAL_COST AS TOTAL,''2000-01-01'' AS BILL_DATE,BILL_NUMBER,BILL_BRANCH,0 AS B_CODE,N''رصيد اولي'' AS B_NAME,(N''رصيد اولي للمادة'') AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG ,CAST(0 AS FLOAT) AS TOTAL_BALANCE  FROM V_BUY_DETAILS_FIRST WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT 1 AS SEQ,ITEM_CODE, ITEM_NAME,ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,BILL_DATE,BILL_NUMBER,BILL_BRANCH,21 AS B_CODE,N''مشتريات'' AS B_NAME,(N''المورد :''+CLIENT_NAME) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE FROM V_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT 2 AS SEQ,ITEM_CODE, ITEM_NAME,ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,TOTAL_QTY AS QTY,UNIT_NAME,UNIT_QTY,(TOTAL_QTY*UNIT_QTY)AS QTY_MIN,(TOTAL_QTY*UNIT_QTY)*-1 AS QTY_MIN_BALANCE ,PRICE,TOTAL,BILL_DATE,BILL_NUMBER,BILL_BRANCH,2 AS B_CODE ,N''مبيعات'' AS B_NAME ,(N''العميل :''+CLIENT_NAME) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE FROM V_SALES_DETAILS WHERE ITEM_CODE=@ITEM_CODE 
 UNION 
SELECT 3 AS SEQ,ITEM_CODE, ITEM_NAME,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,24 AS B_CODE,N''تصحيح مخزني او تلف'' AS B_NAME,IIF(QTY<0,N''تلف'' ,N''اضافة عدد'') AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG ,CAST(0 AS FLOAT) AS TOTAL_BALANCE FROM V_BUY_DETAILS_CORRECT WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT 4 AS SEQ,ITEM_CODE_FACTORY, ITEM_NAME_FACTORY,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,11 AS B_CODE,N''تصنيع'' AS B_NAME,N''تصنيع'' AS DESCRIPTION_TYPE,BILL_NUMBER AS GUID_ID,0 AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE FROM V_FACTORY WHERE ITEM_CODE_FACTORY=@ITEM_CODE
UNION 
SELECT 5 AS SEQ,ITEM_CODE, ITEM_NAME,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,(TOT_QTY_MIN/UNIT_QTY) AS QTY,UNIT_NAME,UNIT_QTY,(TOT_QTY_MIN)AS QTY_MIN,(TOT_QTY_MIN)*-1 AS QTY_MIN_BALANCE ,PRICE,(PRICE*TOT_QTY_MIN) AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,12 AS B_CODE,N''استهلاك في التصنيع'' AS B_NAME,(N''استهلاك في التصنيع للمادة : ''+ITEM_NAME_FACTORY) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE FROM V_FACTORY_DETAILS WHERE ITEM_CODE=@ITEM_CODE
 )x ORDER BY SEQ ASC,BILL_DATE ASC,BILL_NUMBER ASC

--SELECT * FROM #TEMP_AVG_ITEM
DECLARE BOX_CURSOR CURSOR FOR SELECT  RowNum FROM #TEMP_AVG_ITEM  

DECLARE
@T_ID_BOX_CURCOR INT,
@B_CODE INT,
@GUID_ID numeric(18, 0),
@MAX_ID INT,
@BILL_BRANCH NVARCHAR(30),
@QTY FLOAT,
@COST FLOAT,
@COSTIFZERO FLOAT,
@TOTAL_AVG_COST	FLOAT	,
@TOTAL_BALANCE	FLOAT	,
@TOTAL_BALANCE_BEFORE	FLOAT	,
@COST_BEFORE FLOAT,
@TOTAL FLOAT,
@BALANCE_QTY FLOAT,
@BALANCE_QTY_BEFORE FLOAT,
@TOTAL_COST	FLOAT	
BEGIN



OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN

SELECT @B_CODE=B_CODE,@GUID_ID=GUID_ID,@BILL_BRANCH=BILL_BRANCH,@QTY=QTY_MIN_BALANCE,@COST=PRICE,@TOTAL=TOTAL,@COST=AVG_COST,@TOTAL_AVG_COST=TOTAL_AVG FROM #TEMP_AVG_ITEM WHERE RowNum=@T_ID_BOX_CURCOR


 IF @B_CODE=0
 BEGIN 
UPDATE #TEMP_AVG_ITEM SET AVG_COST=PRICE,TOTAL_AVG=TOTAL,BALANCE_MIN_AVG=QTY_MIN_BALANCE,TOTAL_BALANCE=TOTAL WHERE RowNum=@T_ID_BOX_CURCOR

END
ELSE IF @B_CODE=2
 BEGIN 
 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

 IF (@BALANCE_QTY_BEFORE)=0
 BEGIN 
 SET @COST=@COST
 SET @TOTAL_AVG_COST=@COST*@QTY
 END
  ELSE
 BEGIN

 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

 END
 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

UPDATE T_SALES_DETAILS SET [COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL] WHERE T_ID=@GUID_ID
SET @TOTAL_COST=ISNULL((SELECT  SUM(TOTAL_COST) FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH),0)
UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST WHERE BILL_BRANCH LIKE @BILL_BRANCH

END
ELSE IF @B_CODE=21
 BEGIN 

SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
 SELECT @COST =PRICE,@COSTIFZERO= AVG_COST ,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 


 
 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
  IF @BALANCE_QTY=0
 BEGIN 
SET @COST=@COSTIFZERO
 END
  ELSE
 BEGIN

SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
 END
 
 SET @TOTAL_AVG_COST=@COST*@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

END

ELSE IF @B_CODE=24
 BEGIN 
 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

 IF (@BALANCE_QTY_BEFORE)=0
 BEGIN 
 SET @COST=@COST
 SET @TOTAL_AVG_COST=@COST*@QTY
 END
  ELSE
 BEGIN

 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

 END
 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

UPDATE T_BUY_DETAILS SET [PRICE_BUY]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[PRICE]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[TOTAL]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL]*QTY,[COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[TOTAL_COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL]*QTY WHERE T_ID=@GUID_ID

END
ELSE IF @B_CODE=11
 BEGIN 

SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
 SELECT @COST =PRICE, @COSTIFZERO= AVG_COST , @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 



 
 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY


  IF @BALANCE_QTY=0
 BEGIN 
SET @COST=@COSTIFZERO
 END
  ELSE
 BEGIN

 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
 END

 SET @TOTAL_AVG_COST=@COST*@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

END
ELSE IF @B_CODE=12
 BEGIN 
 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

 IF (@BALANCE_QTY_BEFORE)=0
 BEGIN 
 SET @COST=@COST
 SET @TOTAL_AVG_COST=@COST*@QTY
 END
  ELSE
 BEGIN

 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

 END
 
 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

--UPDATE T_FACTORY_DETAILS SET [PRICE]=@COST*[UNIT_QTY],TOTAL=@COST*[UNIT_QTY] WHERE T_ID=@GUID_ID
--SET @TOTAL_COST=ISNULL((SELECT  SUM(TOTAL_COST) FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH),0)
--UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST WHERE BILL_BRANCH LIKE @BILL_BRANCH

END
---------------****************

 
FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


DECLARE ITEMS_CURSOR CURSOR FOR SELECT  UNIT_GUID FROM T_ITEM_UNIT  WHERE ITEM_CODE=@ITEM_CODE   ;

DECLARE
@T_ID_GUID_CURCOR INT,
@QTY_UU FLOAT,
@COST_MIN FLOAT,
@AVG_COST FLOAT,
@BILL_SELECT NVARCHAR(30)

 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0) FROM #TEMP_AVG_ITEM 
 SELECT @AVG_COST =AVG_COST FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID


OPEN ITEMS_CURSOR

FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN



SELECT @QTY_UU=UNIT_QTY FROM  T_ITEM_UNIT WHERE UNIT_GUID=@T_ID_GUID_CURCOR
SELECT TOP (1) @BILL_SELECT=ISNULL(BILL_BRANCH,N''0'') FROM  T_BUY_DETAILS WHERE ACTIVE=1 AND ITEM_CODE=@ITEM_CODE ORDER BY BILL_NUMBER DESC

--IF @BILL_SELECT=@BILL_BRANCH
--BEGIN
UPDATE T_ITEM_UNIT SET PRICE_AVG_COST=@AVG_COST*@QTY_UU  WHERE UNIT_GUID=@T_ID_GUID_CURCOR
--IF @FLAG_UPDATE=1
--BEGIN
UPDATE T_ITEMS SET COST= @AVG_COST WHERE ITEM_CODE=@ITEM_CODE
UPDATE T_ITEM_UNIT SET PRICE_COST=@AVG_COST*@QTY_UU  WHERE UNIT_GUID=@T_ID_GUID_CURCOR
--END

--END




FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR

END

CLOSE ITEMS_CURSOR
DEALLOCATE ITEMS_CURSOR




END	--END OF PROGRAM




















' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_FILL_AVG_ITEM_SHOW_ONLY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_FILL_AVG_ITEM_SHOW_ONLY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'






CREATE PROCEDURE [dbo].[PV_GET_FILL_AVG_ITEM_SHOW_ONLY]


@ITEM_CODE INT 

AS
DECLARE 
@BILL_SEQ decimal(18, 0)

 
IF OBJECT_ID(''tempdb..#TEMP_AVG_ITEM'') IS NOT NULL DROP Table #TEMP_AVG_ITEM
SELECT CAST( ROW_NUMBER() OVER (ORDER BY BILL_DATE ASC,BILL_NUMBER ASC ,QTY DESC) AS FLOAT) AS RowNum, x.* INTO #TEMP_AVG_ITEM FROM 
( SELECT 0 AS SEQ,ITEM_CODE, ITEM_NAME,N'''' AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST AS PRICE,TOTAL_COST AS TOTAL,''2000-01-01'' AS BILL_DATE,BILL_NUMBER,BILL_BRANCH,0 AS B_CODE,N''رصيد اولي'' AS B_NAME,(N''رصيد اولي للمادة'') AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG ,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD  FROM V_BUY_DETAILS_FIRST WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT 1 AS SEQ,ITEM_CODE, ITEM_NAME,ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,BILL_DATE,BILL_NUMBER,BILL_BRANCH,21 AS B_CODE,N''مشتريات'' AS B_NAME,(N''المورد :''+CLIENT_NAME) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS int) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE AND QTY<>0
UNION 
SELECT 2 AS SEQ,ITEM_CODE, ITEM_NAME,ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,TOTAL_QTY AS QTY,UNIT_NAME,UNIT_QTY,(TOTAL_QTY*UNIT_QTY)AS QTY_MIN,(TOTAL_QTY*UNIT_QTY)*-1 AS QTY_MIN_BALANCE ,PRICE,TOTAL,BILL_DATE,BILL_NUMBER,BILL_BRANCH,2 AS B_CODE ,N''مبيعات'' AS B_NAME ,(N''العميل :''+CLIENT_NAME) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_SALES_DETAILS WHERE ITEM_CODE=@ITEM_CODE 
 UNION 
SELECT 3 AS SEQ,ITEM_CODE, ITEM_NAME,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,24 AS B_CODE,N''تصحيح مخزني او تلف'' AS B_NAME,IIF(QTY<0,N''تلف'' ,N''اضافة عدد'') AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG ,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_BUY_DETAILS_CORRECT WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT 4 AS SEQ,ITEM_CODE_FACTORY, ITEM_NAME_FACTORY,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,11 AS B_CODE,N''تصنيع'' AS B_NAME,N''تصنيع'' AS DESCRIPTION_TYPE,BILL_NUMBER AS GUID_ID,0 AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_FACTORY WHERE ITEM_CODE_FACTORY=@ITEM_CODE
UNION 
SELECT 5 AS SEQ,ITEM_CODE, ITEM_NAME,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,(TOT_QTY_MIN/UNIT_QTY) AS QTY,UNIT_NAME,UNIT_QTY,(TOT_QTY_MIN)AS QTY_MIN,(TOT_QTY_MIN)*-1 AS QTY_MIN_BALANCE ,PRICE,(PRICE*TOT_QTY_MIN) AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,12 AS B_CODE,N''استهلاك في التصنيع'' AS B_NAME,(N''استهلاك في التصنيع للمادة : ''+ITEM_NAME_FACTORY) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_FACTORY_DETAILS WHERE ITEM_CODE=@ITEM_CODE
 )x ORDER BY SEQ ASC,BILL_DATE ASC,BILL_NUMBER ASC


UPDATE #TEMP_AVG_ITEM SET PROCCESS_ID=RowNum,PROCCESS_ID_OLD=RowNum
--SELECT * FROM #TEMP_AVG_ITEM

DECLARE
@LOOP_COUNT INT


SET @LOOP_COUNT=0
LOOP_FIRST:
SET @LOOP_COUNT+=1
 --UPDATE #TEMP_AVG_ITEM SET RowNum=0,PROCCESS_ID=0 WHERE B_CODE=0
DECLARE BOX_CURSOR CURSOR FOR SELECT  RowNum FROM #TEMP_AVG_ITEM   ORDER BY PROCCESS_ID ASC

DECLARE
@T_ID_BOX_CURCOR numeric(18, 2),
@B_CODE INT,
@GUID_ID numeric(18, 2),
@MAX_ID numeric(18, 2),
@BILL_BRANCH NVARCHAR(30),
@QTY FLOAT,
@COST FLOAT,
@COSTIFZERO FLOAT,
@TOTAL_AVG_COST	FLOAT	,
@TOTAL_BALANCE	FLOAT	,
@TOTAL_BALANCE_BEFORE	FLOAT	,
@COST_BEFORE FLOAT,
@TOTAL FLOAT,
@BALANCE_QTY FLOAT,
@BALANCE_QTY_BEFORE FLOAT,
@PROCCESS_IDD numeric(18, 2),
@PROCCESS_NEW numeric(18, 2),

@TOTAL_COST	FLOAT	

BEGIN



OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN

SELECT @B_CODE=B_CODE,@GUID_ID=GUID_ID,@BILL_BRANCH=BILL_BRANCH,@QTY=QTY_MIN_BALANCE,@COST=PRICE,@TOTAL=TOTAL,@COST=AVG_COST,@TOTAL_AVG_COST=TOTAL_AVG,@PROCCESS_IDD=PROCCESS_ID FROM #TEMP_AVG_ITEM WHERE RowNum=@T_ID_BOX_CURCOR
  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''SELECT '' 
 

 IF @B_CODE=0
		 BEGIN 
		UPDATE #TEMP_AVG_ITEM SET AVG_COST=PRICE,TOTAL_AVG=TOTAL,BALANCE_MIN_AVG=QTY_MIN_BALANCE,TOTAL_BALANCE=TOTAL WHERE RowNum=@T_ID_BOX_CURCOR

		END
ELSE IF @B_CODE=2
		 BEGIN 
		 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
		 
		  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
		 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

		 IF (@BALANCE_QTY_BEFORE)=0
		 BEGIN 
		 SET @COST=@COST
		 SET @TOTAL_AVG_COST=@COST*@QTY
		 END
		  ELSE
		 BEGIN

		 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

		 END
 
		 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
		UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

 
		END
ELSE IF @B_CODE=21
				 BEGIN 

				SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
				  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
				 SELECT @COST =PRICE,@COSTIFZERO= AVG_COST , @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 
				 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY

				  IF @BALANCE_QTY=0
				 BEGIN 
				SET @COST=@COSTIFZERO

				 IF @LOOP_COUNT=1 
				  BEGIN
				 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
				  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''ZERO '' 
				  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
				 set @LOOP_COUNT=0
				 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

				CLOSE BOX_CURSOR
				DEALLOCATE BOX_CURSOR
				 GOTO LOOP_FIRST
				 END
 
 
				 END
				  ELSE IF @BALANCE_QTY>0

 

				 IF @BALANCE_QTY_BEFORE<0
				 BEGIN 
				 IF @LOOP_COUNT=1
				  BEGIN
				 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
					--PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MORE'' 
				  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
				 set @LOOP_COUNT=0
				 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

				CLOSE BOX_CURSOR
				DEALLOCATE BOX_CURSOR
				 GOTO LOOP_FIRST
				 END


				 END
				 ELSE
				  BEGIN

				 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
   
				 END

 

				 ELSE IF @BALANCE_QTY<0 OR @BALANCE_QTY_BEFORE<0
				 BEGIN
				 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
  
				IF @LOOP_COUNT=1
				  BEGIN
				 SET @PROCCESS_NEW=(SELECT  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
				  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MINNNN'' 
				  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
				 set @LOOP_COUNT=0
				 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

				CLOSE BOX_CURSOR
				DEALLOCATE BOX_CURSOR
				 GOTO LOOP_FIRST
				 END


				 END
 
 

 
				 SET @TOTAL_AVG_COST=@COST*@QTY
				UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

				END

ELSE IF @B_CODE=24
			 BEGIN 
			 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
			  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
			 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

			 IF (@BALANCE_QTY_BEFORE)=0
			 BEGIN 
			 SET @COST=@COST
			 SET @TOTAL_AVG_COST=@COST*@QTY
			 END
			  ELSE
			 BEGIN

			 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

			 END
 
			 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
			UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

			----UPDATE T_BUY_DETAILS SET [PRICE_BUY]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[PRICE]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[TOTAL]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL]*QTY,[COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[TOTAL_COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL]*QTY WHERE T_ID=@GUID_ID

			END
ELSE IF @B_CODE=11
			 BEGIN 

			SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
			  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
			 SELECT @COST =PRICE,@COSTIFZERO= AVG_COST ,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 



 
 
			 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
			   IF @BALANCE_QTY=0
			 BEGIN 
			SET @COST=@COSTIFZERO
			 --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''ZERO'' 
			 IF @LOOP_COUNT=1
			  BEGIN
			 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
			  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
			 set @LOOP_COUNT=0
			 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

			CLOSE BOX_CURSOR
			DEALLOCATE BOX_CURSOR
			 GOTO LOOP_FIRST
			 END
 
 
			 END
			  ELSE IF @BALANCE_QTY>0
			 IF @BALANCE_QTY_BEFORE<0
			 BEGIN 
			 IF @LOOP_COUNT=1
			  BEGIN
			 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
			  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
			 set @LOOP_COUNT=0
			 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

			CLOSE BOX_CURSOR
			DEALLOCATE BOX_CURSOR
			 GOTO LOOP_FIRST
			 END


			 END
			 ELSE
			  BEGIN
			  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MORE'' 
			 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
   
			 END
			 ELSE IF @BALANCE_QTY<0 OR @BALANCE_QTY_BEFORE<0
			 BEGIN
			 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
			  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MINNNN'' 
			IF @LOOP_COUNT=1
			  BEGIN
			 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
			  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
			 set @LOOP_COUNT=0
			 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

			CLOSE BOX_CURSOR
			DEALLOCATE BOX_CURSOR
			 GOTO LOOP_FIRST
			 END


			 END
 

 
			 SET @TOTAL_AVG_COST=@COST*@QTY
			UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

			END
ELSE IF @B_CODE=12
			 BEGIN 
			 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
			  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
			 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

			 IF (@BALANCE_QTY_BEFORE)=0
			 BEGIN 
			 SET @COST=@COST
			 SET @TOTAL_AVG_COST=@COST*@QTY
			 END
			  ELSE
			 BEGIN

			 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

			 END
 
			 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
			UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

			--UPDATE T_FACTORY_DETAILS SET [PRICE]=@COST*[UNIT_QTY],TOTAL=@COST*[UNIT_QTY] WHERE T_ID=@GUID_ID
			--SET @TOTAL_COST=ISNULL((SELECT  SUM(TOTAL_COST) FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH),0)
			--UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST WHERE BILL_BRANCH LIKE @BILL_BRANCH

			END
---------------****************

 
FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


DECLARE ITEMS_CURSOR CURSOR FOR SELECT  UNIT_GUID FROM T_ITEM_UNIT  WHERE ITEM_CODE=@ITEM_CODE   ;

DECLARE
@T_ID_GUID_CURCOR INT,
@QTY_UU FLOAT,
@COST_MIN FLOAT,
@AVG_COST FLOAT,
@BILL_SELECT NVARCHAR(30)

 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0) FROM #TEMP_AVG_ITEM 
 SELECT @AVG_COST =AVG_COST FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID


OPEN ITEMS_CURSOR

FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN



SELECT @QTY_UU=UNIT_QTY FROM  T_ITEM_UNIT WHERE UNIT_GUID=@T_ID_GUID_CURCOR
SELECT TOP (1) @BILL_SELECT=ISNULL(BILL_BRANCH,N''0'') FROM  T_BUY_DETAILS WHERE ACTIVE=1 AND ITEM_CODE=@ITEM_CODE ORDER BY BILL_NUMBER DESC

 
--END




FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR

END

CLOSE ITEMS_CURSOR
DEALLOCATE ITEMS_CURSOR

SELECT * FROM #TEMP_AVG_ITEM ORDER BY PROCCESS_ID ASC


END	--END OF PROGRAM
 ' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_FILL_AVG_ITEM_SHOW_ONLY_OLD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_FILL_AVG_ITEM_SHOW_ONLY_OLD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'






CREATE PROCEDURE [dbo].[PV_GET_FILL_AVG_ITEM_SHOW_ONLY_OLD]


@ITEM_CODE INT 

AS
DECLARE 
@BILL_SEQ decimal(18, 0)

 
IF OBJECT_ID(''tempdb..#TEMP_AVG_ITEM'') IS NOT NULL DROP Table #TEMP_AVG_ITEM
SELECT CAST( ROW_NUMBER() OVER (ORDER BY BILL_DATE ASC,BILL_NUMBER ASC ,QTY DESC) AS FLOAT) AS RowNum, x.* INTO #TEMP_AVG_ITEM FROM 
( SELECT 0 AS SEQ,ITEM_CODE, ITEM_NAME,N'''' AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST AS PRICE,TOTAL_COST AS TOTAL,''2000-01-01'' AS BILL_DATE,BILL_NUMBER,BILL_BRANCH,0 AS B_CODE,N''رصيد اولي'' AS B_NAME,(N''رصيد اولي للمادة'') AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG ,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD  FROM V_BUY_DETAILS_FIRST WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT 1 AS SEQ,ITEM_CODE, ITEM_NAME,ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,BILL_DATE,BILL_NUMBER,BILL_BRANCH,21 AS B_CODE,N''مشتريات'' AS B_NAME,(N''المورد :''+CLIENT_NAME) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS int) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE AND QTY<>0
UNION 
SELECT 2 AS SEQ,ITEM_CODE, ITEM_NAME,ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,TOTAL_QTY AS QTY,UNIT_NAME,UNIT_QTY,(TOTAL_QTY*UNIT_QTY)AS QTY_MIN,(TOTAL_QTY*UNIT_QTY)*-1 AS QTY_MIN_BALANCE ,PRICE,TOTAL,BILL_DATE,BILL_NUMBER,BILL_BRANCH,2 AS B_CODE ,N''مبيعات'' AS B_NAME ,(N''العميل :''+CLIENT_NAME) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_SALES_DETAILS WHERE ITEM_CODE=@ITEM_CODE 
 UNION 
SELECT 3 AS SEQ,ITEM_CODE, ITEM_NAME,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,24 AS B_CODE,N''تصحيح مخزني او تلف'' AS B_NAME,IIF(QTY<0,N''تلف'' ,N''اضافة عدد'') AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG ,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_BUY_DETAILS_CORRECT WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT 4 AS SEQ,ITEM_CODE_FACTORY, ITEM_NAME_FACTORY,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,11 AS B_CODE,N''تصنيع'' AS B_NAME,N''تصنيع'' AS DESCRIPTION_TYPE,BILL_NUMBER AS GUID_ID,0 AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_FACTORY WHERE ITEM_CODE_FACTORY=@ITEM_CODE
UNION 
SELECT 5 AS SEQ,ITEM_CODE, ITEM_NAME,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,(TOT_QTY_MIN/UNIT_QTY) AS QTY,UNIT_NAME,UNIT_QTY,(TOT_QTY_MIN)AS QTY_MIN,(TOT_QTY_MIN)*-1 AS QTY_MIN_BALANCE ,PRICE,(PRICE*TOT_QTY_MIN) AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,12 AS B_CODE,N''استهلاك في التصنيع'' AS B_NAME,(N''استهلاك في التصنيع للمادة : ''+ITEM_NAME_FACTORY) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_FACTORY_DETAILS WHERE ITEM_CODE=@ITEM_CODE
 )x ORDER BY SEQ ASC,BILL_DATE ASC,BILL_NUMBER ASC


UPDATE #TEMP_AVG_ITEM SET PROCCESS_ID=RowNum,PROCCESS_ID_OLD=RowNum
--SELECT * FROM #TEMP_AVG_ITEM

DECLARE
@LOOP_COUNT INT


SET @LOOP_COUNT=0
LOOP_FIRST:
SET @LOOP_COUNT+=1
 --UPDATE #TEMP_AVG_ITEM SET RowNum=0,PROCCESS_ID=0 WHERE B_CODE=0
DECLARE BOX_CURSOR CURSOR FOR SELECT  RowNum FROM #TEMP_AVG_ITEM   ORDER BY PROCCESS_ID ASC

DECLARE
@T_ID_BOX_CURCOR numeric(18, 2),
@B_CODE INT,
@GUID_ID numeric(18, 2),
@MAX_ID numeric(18, 2),
@BILL_BRANCH NVARCHAR(30),
@QTY FLOAT,
@COST FLOAT,
@COSTIFZERO FLOAT,
@TOTAL_AVG_COST	FLOAT	,
@TOTAL_BALANCE	FLOAT	,
@TOTAL_BALANCE_BEFORE	FLOAT	,
@COST_BEFORE FLOAT,
@TOTAL FLOAT,
@BALANCE_QTY FLOAT,
@BALANCE_QTY_BEFORE FLOAT,
@PROCCESS_IDD numeric(18, 2),
@PROCCESS_NEW numeric(18, 2),

@TOTAL_COST	FLOAT	

BEGIN



OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN

SELECT @B_CODE=B_CODE,@GUID_ID=GUID_ID,@BILL_BRANCH=BILL_BRANCH,@QTY=QTY_MIN_BALANCE,@COST=PRICE,@TOTAL=TOTAL,@COST=AVG_COST,@TOTAL_AVG_COST=TOTAL_AVG,@PROCCESS_IDD=PROCCESS_ID FROM #TEMP_AVG_ITEM WHERE RowNum=@T_ID_BOX_CURCOR
  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''SELECT '' 
 

 IF @B_CODE=0
		 BEGIN 
		UPDATE #TEMP_AVG_ITEM SET AVG_COST=PRICE,TOTAL_AVG=TOTAL,BALANCE_MIN_AVG=QTY_MIN_BALANCE,TOTAL_BALANCE=TOTAL WHERE RowNum=@T_ID_BOX_CURCOR

		END
ELSE IF @B_CODE=2
		 BEGIN 
		 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
		 
		  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
		 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

		 IF (@BALANCE_QTY_BEFORE)=0
		 BEGIN 
		 SET @COST=@COST
		 SET @TOTAL_AVG_COST=@COST*@QTY
		 END
		  ELSE
		 BEGIN

		 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

		 END
 
		 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
		UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

 
		END
ELSE IF @B_CODE=21
				 BEGIN 

				SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
				  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
				 SELECT @COST =PRICE,@COSTIFZERO= AVG_COST , @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 
				 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY

				  IF @BALANCE_QTY=0
				 BEGIN 
				SET @COST=@COSTIFZERO

				 IF @LOOP_COUNT=1 
				  BEGIN
				 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
				  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''ZERO '' 
				  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
				 set @LOOP_COUNT=0
				 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

				CLOSE BOX_CURSOR
				DEALLOCATE BOX_CURSOR
				 GOTO LOOP_FIRST
				 END
 
 
				 END
				  ELSE IF @BALANCE_QTY>0

 

				 IF @BALANCE_QTY_BEFORE<0
				 BEGIN 
				 IF @LOOP_COUNT=1
				  BEGIN
				 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
					--PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MORE'' 
				  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
				 set @LOOP_COUNT=0
				 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

				CLOSE BOX_CURSOR
				DEALLOCATE BOX_CURSOR
				 GOTO LOOP_FIRST
				 END


				 END
				 ELSE
				  BEGIN

				 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
   
				 END

 

				 ELSE IF @BALANCE_QTY<0 OR @BALANCE_QTY_BEFORE<0
				 BEGIN
				 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
  
				IF @LOOP_COUNT=1
				  BEGIN
				 SET @PROCCESS_NEW=(SELECT  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
				  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MINNNN'' 
				  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
				 set @LOOP_COUNT=0
				 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

				CLOSE BOX_CURSOR
				DEALLOCATE BOX_CURSOR
				 GOTO LOOP_FIRST
				 END


				 END
 
 

 
				 SET @TOTAL_AVG_COST=@COST*@QTY
				UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

				END

ELSE IF @B_CODE=24
			 BEGIN 
			 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
			  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
			 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

			 IF (@BALANCE_QTY_BEFORE)=0
			 BEGIN 
			 SET @COST=@COST
			 SET @TOTAL_AVG_COST=@COST*@QTY
			 END
			  ELSE
			 BEGIN

			 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

			 END
 
			 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
			UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

			----UPDATE T_BUY_DETAILS SET [PRICE_BUY]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[PRICE]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[TOTAL]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL]*QTY,[COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[TOTAL_COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL]*QTY WHERE T_ID=@GUID_ID

			END
ELSE IF @B_CODE=11
			 BEGIN 

			SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
			  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
			 SELECT @COST =PRICE,@COSTIFZERO= AVG_COST ,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 



 
 
			 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
			   IF @BALANCE_QTY=0
			 BEGIN 
			SET @COST=@COSTIFZERO
			 --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''ZERO'' 
			 IF @LOOP_COUNT=1
			  BEGIN
			 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
			  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
			 set @LOOP_COUNT=0
			 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

			CLOSE BOX_CURSOR
			DEALLOCATE BOX_CURSOR
			 GOTO LOOP_FIRST
			 END
 
 
			 END
			  ELSE IF @BALANCE_QTY>0
			 IF @BALANCE_QTY_BEFORE<0
			 BEGIN 
			 IF @LOOP_COUNT=1
			  BEGIN
			 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
			  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
			 set @LOOP_COUNT=0
			 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

			CLOSE BOX_CURSOR
			DEALLOCATE BOX_CURSOR
			 GOTO LOOP_FIRST
			 END


			 END
			 ELSE
			  BEGIN
			  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MORE'' 
			 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
   
			 END
			 ELSE IF @BALANCE_QTY<0 OR @BALANCE_QTY_BEFORE<0
			 BEGIN
			 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
			  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MINNNN'' 
			IF @LOOP_COUNT=1
			  BEGIN
			 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
			  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
			 set @LOOP_COUNT=0
			 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

			CLOSE BOX_CURSOR
			DEALLOCATE BOX_CURSOR
			 GOTO LOOP_FIRST
			 END


			 END
 

 
			 SET @TOTAL_AVG_COST=@COST*@QTY
			UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

			END
ELSE IF @B_CODE=12
			 BEGIN 
			 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
			  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
			 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

			 IF (@BALANCE_QTY_BEFORE)=0
			 BEGIN 
			 SET @COST=@COST
			 SET @TOTAL_AVG_COST=@COST*@QTY
			 END
			  ELSE
			 BEGIN

			 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

			 END
 
			 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
			UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

			--UPDATE T_FACTORY_DETAILS SET [PRICE]=@COST*[UNIT_QTY],TOTAL=@COST*[UNIT_QTY] WHERE T_ID=@GUID_ID
			--SET @TOTAL_COST=ISNULL((SELECT  SUM(TOTAL_COST) FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH),0)
			--UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST WHERE BILL_BRANCH LIKE @BILL_BRANCH

			END
---------------****************

 
FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


DECLARE ITEMS_CURSOR CURSOR FOR SELECT  UNIT_GUID FROM T_ITEM_UNIT  WHERE ITEM_CODE=@ITEM_CODE   ;

DECLARE
@T_ID_GUID_CURCOR INT,
@QTY_UU FLOAT,
@COST_MIN FLOAT,
@AVG_COST FLOAT,
@BILL_SELECT NVARCHAR(30)

 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0) FROM #TEMP_AVG_ITEM 
 SELECT @AVG_COST =AVG_COST FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID


OPEN ITEMS_CURSOR

FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN



SELECT @QTY_UU=UNIT_QTY FROM  T_ITEM_UNIT WHERE UNIT_GUID=@T_ID_GUID_CURCOR
SELECT TOP (1) @BILL_SELECT=ISNULL(BILL_BRANCH,N''0'') FROM  T_BUY_DETAILS WHERE ACTIVE=1 AND ITEM_CODE=@ITEM_CODE ORDER BY BILL_NUMBER DESC

 
--END




FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR

END

CLOSE ITEMS_CURSOR
DEALLOCATE ITEMS_CURSOR

SELECT * FROM #TEMP_AVG_ITEM ORDER BY PROCCESS_ID ASC


END	--END OF PROGRAM
 ' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_FILL_AVG_ITEM_SHOW_ONLY_WITH_UPDATE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_FILL_AVG_ITEM_SHOW_ONLY_WITH_UPDATE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'






CREATE PROCEDURE [dbo].[PV_GET_FILL_AVG_ITEM_SHOW_ONLY_WITH_UPDATE]


@ITEM_CODE INT 

AS
DECLARE 
@BILL_SEQ decimal(18, 0)

 
IF OBJECT_ID(''tempdb..#TEMP_AVG_ITEM'') IS NOT NULL DROP Table #TEMP_AVG_ITEM
SELECT CAST( ROW_NUMBER() OVER (ORDER BY BILL_DATE ASC,BILL_NUMBER ASC ,QTY DESC) AS FLOAT) AS RowNum, x.* INTO #TEMP_AVG_ITEM FROM 
( SELECT 0 AS SEQ,ITEM_CODE, ITEM_NAME,N'''' AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST AS PRICE,TOTAL_COST AS TOTAL,''2000-01-01'' AS BILL_DATE,BILL_NUMBER,BILL_BRANCH,0 AS B_CODE,N''رصيد اولي'' AS B_NAME,(N''رصيد اولي للمادة'') AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG ,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD  FROM V_BUY_DETAILS_FIRST WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT 1 AS SEQ,ITEM_CODE, ITEM_NAME,ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,BILL_DATE,BILL_NUMBER,BILL_BRANCH,21 AS B_CODE,N''مشتريات'' AS B_NAME,(N''المورد :''+CLIENT_NAME) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS int) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE AND QTY<>0
UNION 
SELECT 2 AS SEQ,ITEM_CODE, ITEM_NAME,ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,TOTAL_QTY AS QTY,UNIT_NAME,UNIT_QTY,(TOTAL_QTY*UNIT_QTY)AS QTY_MIN,(TOTAL_QTY*UNIT_QTY)*-1 AS QTY_MIN_BALANCE ,PRICE,TOTAL,BILL_DATE,BILL_NUMBER,BILL_BRANCH,2 AS B_CODE ,N''مبيعات'' AS B_NAME ,(N''العميل :''+CLIENT_NAME) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_SALES_DETAILS WHERE ITEM_CODE=@ITEM_CODE 
 UNION 
SELECT 3 AS SEQ,ITEM_CODE, ITEM_NAME,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,24 AS B_CODE,N''تصحيح مخزني او تلف'' AS B_NAME,IIF(QTY<0,N''تلف'' ,N''اضافة عدد'') AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG ,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_BUY_DETAILS_CORRECT WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT 4 AS SEQ,ITEM_CODE_FACTORY, ITEM_NAME_FACTORY,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,COST/UNIT_QTY AS PRICE,TOTAL_COST AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,11 AS B_CODE,N''تصنيع'' AS B_NAME,N''تصنيع'' AS DESCRIPTION_TYPE,BILL_NUMBER AS GUID_ID,0 AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_FACTORY WHERE ITEM_CODE_FACTORY=@ITEM_CODE
UNION 
SELECT 5 AS SEQ,ITEM_CODE, ITEM_NAME,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,(TOT_QTY_MIN/UNIT_QTY) AS QTY,UNIT_NAME,UNIT_QTY,(TOT_QTY_MIN)AS QTY_MIN,(TOT_QTY_MIN)*-1 AS QTY_MIN_BALANCE ,PRICE,(PRICE*TOT_QTY_MIN) AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,12 AS B_CODE,N''استهلاك في التصنيع'' AS B_NAME,(N''استهلاك في التصنيع للمادة : ''+ITEM_NAME_FACTORY) AS DESCRIPTION_TYPE,T_ID AS GUID_ID,CAST(0 AS FLOAT) AS AVG_COST,CAST(0 AS FLOAT) AS TOTAL_AVG,CAST(0 AS FLOAT) AS BALANCE_MIN_AVG,CAST(0 AS FLOAT) AS TOTAL_BALANCE,CAST(0 AS FLOAT) AS PROCCESS_ID,CAST(0 AS FLOAT) AS PROCCESS_ID_OLD FROM V_FACTORY_DETAILS WHERE ITEM_CODE=@ITEM_CODE
 )x ORDER BY SEQ ASC,BILL_DATE ASC,BILL_NUMBER ASC


UPDATE #TEMP_AVG_ITEM SET PROCCESS_ID=RowNum,PROCCESS_ID_OLD=RowNum
--SELECT * FROM #TEMP_AVG_ITEM

DECLARE
@LOOP_COUNT INT


SET @LOOP_COUNT=0
LOOP_FIRST:
SET @LOOP_COUNT+=1
 --UPDATE #TEMP_AVG_ITEM SET RowNum=0,PROCCESS_ID=0 WHERE B_CODE=0
DECLARE BOX_CURSOR CURSOR FOR SELECT  RowNum FROM #TEMP_AVG_ITEM   ORDER BY PROCCESS_ID ASC

DECLARE
@T_ID_BOX_CURCOR numeric(18, 2),
@B_CODE INT,
@GUID_ID numeric(18, 2),
@MAX_ID numeric(18, 2),
@BILL_BRANCH NVARCHAR(30),
@QTY FLOAT,
@COST FLOAT,
@COSTIFZERO FLOAT,
@TOTAL_AVG_COST	FLOAT	,
@TOTAL_BALANCE	FLOAT	,
@TOTAL_BALANCE_BEFORE	FLOAT	,
@COST_BEFORE FLOAT,
@TOTAL FLOAT,
@BALANCE_QTY FLOAT,
@BALANCE_QTY_BEFORE FLOAT,
@PROCCESS_IDD numeric(18, 2),
@PROCCESS_NEW numeric(18, 2),

@TOTAL_COST	FLOAT	

BEGIN



OPEN BOX_CURSOR

FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN

SELECT @B_CODE=B_CODE,@GUID_ID=GUID_ID,@BILL_BRANCH=BILL_BRANCH,@QTY=QTY_MIN_BALANCE,@COST=PRICE,@TOTAL=TOTAL,@COST=AVG_COST,@TOTAL_AVG_COST=TOTAL_AVG,@PROCCESS_IDD=PROCCESS_ID FROM #TEMP_AVG_ITEM WHERE RowNum=@T_ID_BOX_CURCOR
  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''SELECT '' 
 

 IF @B_CODE=0
		 BEGIN 
		UPDATE #TEMP_AVG_ITEM SET AVG_COST=PRICE,TOTAL_AVG=TOTAL,BALANCE_MIN_AVG=QTY_MIN_BALANCE,TOTAL_BALANCE=TOTAL WHERE RowNum=@T_ID_BOX_CURCOR

		END
ELSE IF @B_CODE=2
		 BEGIN 
		 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
		 
		  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
		 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

		 IF (@BALANCE_QTY_BEFORE)=0
		 BEGIN 
		 SET @COST=@COST
		 SET @TOTAL_AVG_COST=@COST*@QTY
		 END
		  ELSE
		 BEGIN

		 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

		 END
 
		 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
		UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR
					
					--UPDATE
					 UPDATE T_SALES_DETAILS SET [COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL] WHERE T_ID=@GUID_ID
					SET @TOTAL_COST=ISNULL((SELECT  SUM(TOTAL_COST) FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH),0)
					UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST WHERE BILL_BRANCH LIKE @BILL_BRANCH
		END
ELSE IF @B_CODE=21
				 BEGIN 

				SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
				  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
				 SELECT @COST =PRICE,@COSTIFZERO= AVG_COST , @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 
				 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY

				  IF @BALANCE_QTY=0
				 BEGIN 
				SET @COST=@COSTIFZERO

				 IF @LOOP_COUNT=1 
				  BEGIN
				 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
				  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''ZERO '' 
				  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
				 set @LOOP_COUNT=0
				 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

				CLOSE BOX_CURSOR
				DEALLOCATE BOX_CURSOR
				 GOTO LOOP_FIRST
				 END
 
 
				 END
				  ELSE IF @BALANCE_QTY>0

 

				 IF @BALANCE_QTY_BEFORE<0
				 BEGIN 
				 IF @LOOP_COUNT=1
				  BEGIN
				 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
					--PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MORE'' 
				  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
				 set @LOOP_COUNT=0
				 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

				CLOSE BOX_CURSOR
				DEALLOCATE BOX_CURSOR
				 GOTO LOOP_FIRST
				 END


				 END
				 ELSE
				  BEGIN

				 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
   
				 END

 

				 ELSE IF @BALANCE_QTY<0 OR @BALANCE_QTY_BEFORE<0
				 BEGIN
				 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
  
				IF @LOOP_COUNT=1
				  BEGIN
				 SET @PROCCESS_NEW=(SELECT  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
				  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MINNNN'' 
				  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
				 set @LOOP_COUNT=0
				 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

				CLOSE BOX_CURSOR
				DEALLOCATE BOX_CURSOR
				 GOTO LOOP_FIRST
				 END


				 END
 
 

 
				 SET @TOTAL_AVG_COST=@COST*@QTY
				UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

				END

ELSE IF @B_CODE=24
			 BEGIN 
			 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
			  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
			 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

			 IF (@BALANCE_QTY_BEFORE)=0
			 BEGIN 
			 SET @COST=@COST
			 SET @TOTAL_AVG_COST=@COST*@QTY
			 END
			  ELSE
			 BEGIN

			 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

			 END
 
			 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
			UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

						--UPDATE  
						UPDATE T_BUY_DETAILS SET [PRICE_BUY]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[PRICE]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[TOTAL]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL]*QTY,[COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL],[TOTAL_COST]=@COST*[UNIT_QTY]*[CURRANCY_EQUAL]*QTY WHERE T_ID=@GUID_ID

			END
ELSE IF @B_CODE=11
			 BEGIN 

			SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
			  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
			 SELECT @COST =PRICE,@COSTIFZERO= AVG_COST ,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 



 
 
			 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
			   IF @BALANCE_QTY=0
			 BEGIN 
			SET @COST=@COSTIFZERO
			 --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''ZERO'' 
			 IF @LOOP_COUNT=1
			  BEGIN
			 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
			  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
			 set @LOOP_COUNT=0
			 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

			CLOSE BOX_CURSOR
			DEALLOCATE BOX_CURSOR
			 GOTO LOOP_FIRST
			 END
 
 
			 END
			  ELSE IF @BALANCE_QTY>0
			 IF @BALANCE_QTY_BEFORE<0
			 BEGIN 
			 IF @LOOP_COUNT=1
			  BEGIN
			 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2)FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
			  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
			 set @LOOP_COUNT=0
			 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

			CLOSE BOX_CURSOR
			DEALLOCATE BOX_CURSOR
			 GOTO LOOP_FIRST
			 END


			 END
			 ELSE
			  BEGIN
			  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MORE'' 
			 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
   
			 END
			 ELSE IF @BALANCE_QTY<0 OR @BALANCE_QTY_BEFORE<0
			 BEGIN
			 SET @COST=(@TOTAL_BALANCE_BEFORE+@TOTAL)/@BALANCE_QTY
			  --PRINT CAST(@PROCCESS_IDD AS Nvarchar) +N''MINNNN'' 
			IF @LOOP_COUNT=1
			  BEGIN
			 SET @PROCCESS_NEW=(SELECT TOP (1)  ISNULL(MIN(PROCCESS_ID),2) FROM #TEMP_AVG_ITEM WHERE TOTAL_BALANCE<0  )-0.01
  
			  UPDATE #TEMP_AVG_ITEM SET RowNum=@PROCCESS_NEW,PROCCESS_ID=@PROCCESS_NEW WHERE PROCCESS_ID=@PROCCESS_IDD
			 set @LOOP_COUNT=0
			 FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

			CLOSE BOX_CURSOR
			DEALLOCATE BOX_CURSOR
			 GOTO LOOP_FIRST
			 END


			 END
 

 
			 SET @TOTAL_AVG_COST=@COST*@QTY
			UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

			END
ELSE IF @B_CODE=12
			 BEGIN 
			 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0),@BALANCE_QTY_BEFORE=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum < @T_ID_BOX_CURCOR
			  SELECT @BALANCE_QTY=ISNULL(SUM(QTY_MIN_BALANCE),0) FROM #TEMP_AVG_ITEM WHERE   RowNum <= @T_ID_BOX_CURCOR
 
			 SELECT @COST =AVG_COST,  @TOTAL_AVG_COST=TOTAL_AVG,  @TOTAL_BALANCE_BEFORE=TOTAL_BALANCE,  @BALANCE_QTY_BEFORE=BALANCE_MIN_AVG FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID

 

			 IF (@BALANCE_QTY_BEFORE)=0
			 BEGIN 
			 SET @COST=@COST
			 SET @TOTAL_AVG_COST=@COST*@QTY
			 END
			  ELSE
			 BEGIN

			 SET @COST = (@TOTAL_BALANCE_BEFORE/@BALANCE_QTY_BEFORE)

			 END
 
			 set @BALANCE_QTY=@BALANCE_QTY_BEFORE+@QTY
			UPDATE #TEMP_AVG_ITEM SET AVG_COST=@COST,TOTAL_AVG=@QTY*@COST,BALANCE_MIN_AVG=@BALANCE_QTY,TOTAL_BALANCE=@BALANCE_QTY*@COST WHERE RowNum=@T_ID_BOX_CURCOR

			--UPDATE T_FACTORY_DETAILS SET [PRICE]=@COST*[UNIT_QTY],TOTAL=@COST*[UNIT_QTY] WHERE T_ID=@GUID_ID
			--SET @TOTAL_COST=ISNULL((SELECT  SUM(TOTAL_COST) FROM T_SALES_DETAILS WHERE BILL_BRANCH LIKE @BILL_BRANCH),0)
			--UPDATE T_SALES SET TOTAL_COST=@TOTAL_COST WHERE BILL_BRANCH LIKE @BILL_BRANCH

			END
---------------****************

 
FETCH NEXT FROM BOX_CURSOR INTO @T_ID_BOX_CURCOR

END

CLOSE BOX_CURSOR
DEALLOCATE BOX_CURSOR


DECLARE ITEMS_CURSOR CURSOR FOR SELECT  UNIT_GUID FROM T_ITEM_UNIT  WHERE ITEM_CODE=@ITEM_CODE   ;

DECLARE
@T_ID_GUID_CURCOR INT,
@QTY_UU FLOAT,
@COST_MIN FLOAT,
@AVG_COST FLOAT,
@BILL_SELECT NVARCHAR(30)

 SELECT @MAX_ID =ISNULL(MAX(RowNum ),0) FROM #TEMP_AVG_ITEM 
 SELECT @AVG_COST =AVG_COST FROM #TEMP_AVG_ITEM WHERE   RowNum=@MAX_ID


OPEN ITEMS_CURSOR

FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR
WHILE @@FETCH_STATUS = 0
BEGIN



SELECT @QTY_UU=UNIT_QTY FROM  T_ITEM_UNIT WHERE UNIT_GUID=@T_ID_GUID_CURCOR
SELECT TOP (1) @BILL_SELECT=ISNULL(BILL_BRANCH,N''0'') FROM  T_BUY_DETAILS WHERE ACTIVE=1 AND ITEM_CODE=@ITEM_CODE ORDER BY BILL_NUMBER DESC
				
				--UPDATE
				 UPDATE T_ITEM_UNIT SET PRICE_AVG_COST=@AVG_COST*@QTY_UU  WHERE UNIT_GUID=@T_ID_GUID_CURCOR
				 UPDATE T_ITEMS SET COST= @AVG_COST WHERE ITEM_CODE=@ITEM_CODE
		     	UPDATE T_ITEM_UNIT SET PRICE_COST=@AVG_COST*@QTY_UU  WHERE UNIT_GUID=@T_ID_GUID_CURCOR
				 




FETCH NEXT FROM ITEMS_CURSOR INTO @T_ID_GUID_CURCOR

END

CLOSE ITEMS_CURSOR
DEALLOCATE ITEMS_CURSOR

--SELECT * FROM #TEMP_AVG_ITEM ORDER BY PROCCESS_ID ASC


END	--END OF PROGRAM
 ' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_ITEMS_EXPIRED]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_ITEMS_EXPIRED]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_GET_ITEMS_EXPIRED]
@NOTI_CODE INT
AS
DECLARE
@CC_SETTIBG INT
BEGIN
SELECT @CC_SETTIBG=COUNT_SETTING  FROM T_NOTIFICATION WHERE NOTI_CODE=@NOTI_CODE
SELECT   TOP(99999999)  * FROM V_BUY_DETAILS_EXPIRED_REMAIN WHERE  REMAIN_BUY_MIN >0 AND DATEDIFF(DAY,GETDATE(),EXP_DATE)<=@CC_SETTIBG
ORDER BY ITEM_NAME
END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_OFFER_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_OFFER_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_GET_OFFER_DETAILS]

AS

BEGIN

SELECT       *
FROM            dbo.V_OFFERS_DETAILS
 
 
END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'









CREATE PROCEDURE [dbo].[PV_GET_SALES]
    @D1 DATE,
    @D2 DATE
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
         s.BILL_BRANCH,
         s.BILL_NUMBER,
         s.BILL_INVOICE,
         s.BILL_DATE,
         s.OFFER_CODE,
         s.CURRANCY_CODE,
         cur.CURRANCY_NAME,
         s.CURRANCY_EQUAL,
         s.CLIENT_CODE,
         s.CLIENT_NAME,
         s.CLIENT_PHONE,
         s.CLIENT_ADRESS,
         s.MANDOOB_CODE,
         m.MANDOOB_NAME,
         m.MANDOOB_PERCENT,
         s.DESCRIPTION,
         s.USER_CREATE,
         s.SECURETY_CODE,
         s.TOTAL_SALES / s.CURRANCY_EQUAL AS TOTAL_SALES,
         s.DISCOUNT_ITEMS / s.CURRANCY_EQUAL AS DISCOUNT_ITEMS,
         s.DISCOUNT_PERCENT,
         s.DISCOUNT_AMOUNT / s.CURRANCY_EQUAL AS DISCOUNT_AMOUNT,
         s.TOTAL_DISCOUNT / s.CURRANCY_EQUAL AS TOTAL_DISCOUNT,
         s.NET_SALES / s.CURRANCY_EQUAL AS NET_SALES,
         s.TOTAL_COST / s.CURRANCY_EQUAL AS TOTAL_COST,
         s.TOTAL_ARBAH / s.CURRANCY_EQUAL AS TOTAL_ARBAH,
         s.IVC_CODE,
         ivc.IVC_NAME,
         s.DAY_CASH,
         s.DATE_CASH,
         s.TOT_CONV,
         s.ACCOUNT_CODE,
         a.ACCOUNT_NAME,
         s.CASH_USA,
         s.REMAIN_USA,
         s.CASH_IQ,
         s.REMAIN_IQ,
         s.C_DATE,
         s.C_UPDATE,
         s.USER_UPDATE,
         s.ACTIVE,
         c.CLIENT_REGION,
         c.CLIENT_BUSINESS,
         DATEDIFF(DAY, s.DATE_CASH, GETDATE()) AS CASH_DIFF,
         0 AS QTY
    FROM dbo.T_SALES s
         LEFT JOIN dbo.T_CLIENT c ON s.CLIENT_CODE = c.CLIENT_CODE
         LEFT JOIN dbo.T_ACCOUNTS a ON s.ACCOUNT_CODE = a.ACCOUNT_CODE
         LEFT JOIN dbo.T_TYPE_PRICE_SELL tp ON s.TYPE_PRICE_SELL = tp.TYPE_PRICE_CODE
         LEFT JOIN dbo.T_IVC_TYPE ivc ON s.IVC_CODE = ivc.IVC_CODE
         LEFT JOIN dbo.T_MANDOOB m ON s.MANDOOB_CODE = m.MANDOOB_CODE
         LEFT JOIN dbo.T_CURRANNCY cur ON s.CURRANCY_CODE = cur.CURRANCY_CODE
    WHERE s.ACTIVE = 1 
      AND s.IVC_CODE < 10
      AND s.BILL_DATE BETWEEN @D1 AND @D2
    ORDER BY s.BILL_NUMBER ASC;
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_CLIENT_NOT_CASH]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_CLIENT_NOT_CASH]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[PV_GET_SALES_CLIENT_NOT_CASH]

AS

BEGIN


SELECT      dbo.T_SALES.BILL_BRANCH, dbo.T_SALES.BILL_NUMBER, dbo.T_SALES.BILL_INVOICE, dbo.T_SALES.BILL_DATE, dbo.T_SALES.OFFER_CODE, dbo.T_SALES.CURRANCY_CODE, dbo.T_CURRANNCY.CURRANCY_NAME, 
                         dbo.T_SALES.CURRANCY_EQUAL, dbo.T_SALES.CLIENT_CODE, dbo.T_SALES.CLIENT_NAME, dbo.T_SALES.CLIENT_PHONE, dbo.T_SALES.CLIENT_ADRESS, dbo.T_SALES.MANDOOB_CODE, 
                         dbo.T_MANDOOB.MANDOOB_NAME, dbo.T_MANDOOB.MANDOOB_PERCENT, dbo.T_SALES.DESCRIPTION, dbo.T_SALES.USER_CREATE, dbo.T_SALES.SECURETY_CODE, dbo.T_SALES.TOTAL_SALES / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_SALES, 
                         dbo.T_SALES.DISCOUNT_ITEMS / dbo.T_SALES.CURRANCY_EQUAL AS DISCOUNT_ITEMS, dbo.T_SALES.DISCOUNT_PERCENT, 
                         dbo.T_SALES.DISCOUNT_AMOUNT / dbo.T_SALES.CURRANCY_EQUAL AS DISCOUNT_AMOUNT, dbo.T_SALES.TOTAL_DISCOUNT / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_DISCOUNT, 
                         dbo.T_SALES.NET_SALES / dbo.T_SALES.CURRANCY_EQUAL AS NET_SALES, dbo.T_SALES.TOTAL_COST / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_COST, 
                         dbo.T_SALES.TOTAL_ARBAH / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_ARBAH, dbo.T_SALES.IVC_CODE, dbo.T_IVC_TYPE.IVC_NAME, dbo.T_SALES.DAY_CASH, dbo.T_SALES.DATE_CASH, 
                         dbo.T_SALES.TOT_CONV, dbo.T_SALES.ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME, dbo.T_SALES.CASH_USA, dbo.T_SALES.REMAIN_USA, dbo.T_SALES.CASH_IQ, dbo.T_SALES.REMAIN_IQ, 
                         dbo.T_SALES.C_DATE, dbo.T_SALES.C_UPDATE, dbo.T_SALES.USER_UPDATE, dbo.T_SALES.ACTIVE, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_BUSINESS,DATEDIFF(DAY,dbo.T_SALES.DATE_CASH,GETDATE())AS CASH_DIFF
						,ISNULL((SELECT TOP(1) ISNULL((NET_SALES ),0) FROM V_SALES WHERE V_SALES.BILL_RETURN=T_SALES.BILL_NUMBER ),0) AS NET_RETURN
FROM            dbo.T_SALES LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.T_SALES.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                         dbo.T_ACCOUNTS ON dbo.T_SALES.ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.T_TYPE_PRICE_SELL ON dbo.T_SALES.TYPE_PRICE_SELL = dbo.T_TYPE_PRICE_SELL.TYPE_PRICE_CODE LEFT OUTER JOIN
                         dbo.T_IVC_TYPE ON dbo.T_SALES.IVC_CODE = dbo.T_IVC_TYPE.IVC_CODE LEFT OUTER JOIN
                         dbo.T_MANDOOB ON dbo.T_SALES.MANDOOB_CODE = dbo.T_MANDOOB.MANDOOB_CODE LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.T_SALES.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE
WHERE        (dbo.T_SALES.ACTIVE = 1) AND (dbo.T_SALES.IVC_CODE < 10) AND (dbo.T_SALES.FLAG_CASH =0) AND (dbo.T_SALES.CLIENT_CODE >2100000) AND   (dbo.T_SALES.NET_SALES>=0)

order by dbo.T_SALES.BILL_NUMBER asc
END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_CLIENT_NOT_CASH_ALL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_CLIENT_NOT_CASH_ALL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_GET_SALES_CLIENT_NOT_CASH_ALL]

AS

BEGIN


SELECT      dbo.T_SALES.BILL_BRANCH, dbo.T_SALES.BILL_NUMBER, dbo.T_SALES.BILL_INVOICE, dbo.T_SALES.BILL_DATE, dbo.T_SALES.OFFER_CODE, dbo.T_SALES.CURRANCY_CODE, dbo.T_CURRANNCY.CURRANCY_NAME, 
                         dbo.T_SALES.CURRANCY_EQUAL, dbo.T_SALES.CLIENT_CODE, dbo.T_SALES.CLIENT_NAME, dbo.T_SALES.CLIENT_PHONE, dbo.T_SALES.CLIENT_ADRESS, dbo.T_SALES.MANDOOB_CODE, 
                         dbo.T_MANDOOB.MANDOOB_NAME, dbo.T_MANDOOB.MANDOOB_PERCENT, dbo.T_SALES.DESCRIPTION, dbo.T_SALES.USER_CREATE, dbo.T_SALES.SECURETY_CODE, dbo.T_SALES.TOTAL_SALES / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_SALES, 
                         dbo.T_SALES.DISCOUNT_ITEMS / dbo.T_SALES.CURRANCY_EQUAL AS DISCOUNT_ITEMS, dbo.T_SALES.DISCOUNT_PERCENT, 
                         dbo.T_SALES.DISCOUNT_AMOUNT / dbo.T_SALES.CURRANCY_EQUAL AS DISCOUNT_AMOUNT, dbo.T_SALES.TOTAL_DISCOUNT / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_DISCOUNT, 
                         dbo.T_SALES.NET_SALES / dbo.T_SALES.CURRANCY_EQUAL AS NET_SALES, dbo.T_SALES.TOTAL_COST / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_COST, 
                         dbo.T_SALES.TOTAL_ARBAH / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_ARBAH, dbo.T_SALES.IVC_CODE, dbo.T_IVC_TYPE.IVC_NAME, dbo.T_SALES.DAY_CASH, dbo.T_SALES.DATE_CASH, 
                         dbo.T_SALES.TOT_CONV, dbo.T_SALES.ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME, dbo.T_SALES.CASH_USA, dbo.T_SALES.REMAIN_USA, dbo.T_SALES.CASH_IQ, dbo.T_SALES.REMAIN_IQ, 
                         dbo.T_SALES.C_DATE, dbo.T_SALES.C_UPDATE, dbo.T_SALES.USER_UPDATE, dbo.T_SALES.ACTIVE, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_BUSINESS,DATEDIFF(DAY,dbo.T_SALES.DATE_CASH,GETDATE())AS CASH_DIFF
						,ISNULL((SELECT TOP(1) ISNULL((NET_SALES ),0) FROM V_SALES WHERE V_SALES.BILL_RETURN=T_SALES.BILL_NUMBER ),0) AS NET_RETURN
						, dbo.T_SALES.FLAG_CASH
FROM            dbo.T_SALES LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.T_SALES.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                         dbo.T_ACCOUNTS ON dbo.T_SALES.ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.T_TYPE_PRICE_SELL ON dbo.T_SALES.TYPE_PRICE_SELL = dbo.T_TYPE_PRICE_SELL.TYPE_PRICE_CODE LEFT OUTER JOIN
                         dbo.T_IVC_TYPE ON dbo.T_SALES.IVC_CODE = dbo.T_IVC_TYPE.IVC_CODE LEFT OUTER JOIN
                         dbo.T_MANDOOB ON dbo.T_SALES.MANDOOB_CODE = dbo.T_MANDOOB.MANDOOB_CODE LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.T_SALES.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE
WHERE        (dbo.T_SALES.ACTIVE = 1) AND (dbo.T_SALES.IVC_CODE < 10) AND (dbo.T_SALES.FLAG_CASH =0) AND (dbo.T_SALES.CLIENT_CODE >2100000)

order by dbo.T_SALES.BILL_NUMBER asc
END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_DATE_CASH]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_DATE_CASH]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_GET_SALES_DATE_CASH]


AS

BEGIN

SELECT      TOP (100) PERCENT   dbo.T_SALES.BILL_BRANCH,  dbo.T_SALES.BILL_NUMBER, dbo.T_SALES.BILL_INVOICE, dbo.T_SALES.BILL_DATE, dbo.T_SALES.OFFER_CODE, dbo.T_SALES.CURRANCY_CODE, dbo.T_CURRANNCY.CURRANCY_NAME, 
                         dbo.T_SALES.CURRANCY_EQUAL, dbo.T_SALES.CLIENT_CODE, dbo.T_SALES.CLIENT_NAME, dbo.T_SALES.CLIENT_PHONE, dbo.T_SALES.CLIENT_ADRESS, dbo.T_SALES.MANDOOB_CODE, 
                         dbo.T_MANDOOB.MANDOOB_NAME, dbo.T_MANDOOB.MANDOOB_PERCENT, dbo.T_SALES.DESCRIPTION, dbo.T_SALES.USER_CREATE, dbo.T_SALES.SECURETY_CODE, dbo.T_SALES.TOTAL_SALES / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_SALES, 
                         dbo.T_SALES.DISCOUNT_ITEMS / dbo.T_SALES.CURRANCY_EQUAL AS DISCOUNT_ITEMS, dbo.T_SALES.DISCOUNT_PERCENT, 
                         dbo.T_SALES.DISCOUNT_AMOUNT / dbo.T_SALES.CURRANCY_EQUAL AS DISCOUNT_AMOUNT, dbo.T_SALES.TOTAL_DISCOUNT / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_DISCOUNT, 
                         dbo.T_SALES.NET_SALES / dbo.T_SALES.CURRANCY_EQUAL AS NET_SALES, dbo.T_SALES.TOTAL_COST / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_COST, 
                         dbo.T_SALES.TOTAL_ARBAH / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_ARBAH, dbo.T_SALES.IVC_CODE, dbo.T_IVC_TYPE.IVC_NAME, dbo.T_SALES.DAY_CASH, dbo.T_SALES.DATE_CASH, 
                         dbo.T_SALES.TOT_CONV, dbo.T_SALES.ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME, dbo.T_SALES.CASH_USA, dbo.T_SALES.REMAIN_USA, dbo.T_SALES.CASH_IQ, dbo.T_SALES.REMAIN_IQ, 
                         dbo.T_SALES.C_DATE, dbo.T_SALES.C_UPDATE, dbo.T_SALES.USER_UPDATE, dbo.T_SALES.ACTIVE, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_BUSINESS,DATEDIFF(DAY,dbo.T_SALES.DATE_CASH,GETDATE())AS CASH_DIFF
FROM            dbo.T_SALES LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.T_SALES.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                         dbo.T_ACCOUNTS ON dbo.T_SALES.ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.T_TYPE_PRICE_SELL ON dbo.T_SALES.TYPE_PRICE_SELL = dbo.T_TYPE_PRICE_SELL.TYPE_PRICE_CODE LEFT OUTER JOIN
                         dbo.T_IVC_TYPE ON dbo.T_SALES.IVC_CODE = dbo.T_IVC_TYPE.IVC_CODE LEFT OUTER JOIN
                         dbo.T_MANDOOB ON dbo.T_SALES.MANDOOB_CODE = dbo.T_MANDOOB.MANDOOB_CODE LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.T_SALES.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE
WHERE        (dbo.T_SALES.ACTIVE = 1) AND (dbo.T_SALES.IVC_CODE =4)  AND  FLAG_CASH <>1
ORDER BY   dbo.T_SALES.BILL_NUMBER
END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_DAYLY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_DAYLY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_GET_SALES_DAYLY]

@YEAR_NO INT
AS

BEGIN

SELECT       YEAR(BILL_DATE) AS YEAR_BILL_DATE, MONTH(BILL_DATE) AS MONTH_BILL_DATE, DATENAME(month, BILL_DATE) AS MONTH_NAME, DAY(BILL_DATE) AS DAY_BILL_DATE, DATENAME(dw, BILL_DATE) AS DAY_NAME, 
                         SUM(TOTAL_SALES) AS TOTAL_SALES, SUM(DISCOUNT_ITEMS) AS DISCOUNT_ITEMS, SUM(DISCOUNT_AMOUNT) AS DISCOUNT_AMOUNT, SUM(TOTAL_DISCOUNT) AS TOTAL_DISCOUNT, SUM(NET_SALES) AS NET_SALES, 
                         SUM(TOTAL_COST) AS TOTAL_COST, SUM(TOTAL_ARBAH) AS TOTAL_ARBAH, BILL_DATE
FROM            dbo.V_SALES
GROUP BY MONTH(BILL_DATE), YEAR(BILL_DATE), DATENAME(month, BILL_DATE), DAY(BILL_DATE), DATENAME(dw, BILL_DATE), BILL_DATE
HAVING       (YEAR(BILL_DATE) = @YEAR_NO)

END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'









CREATE PROCEDURE [dbo].[PV_GET_SALES_DETAILS]
    @D1 DATE,
    @D2 DATE
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
         s.BILL_BRANCH,
         s.BILL_NUMBER,
         CONVERT(NVARCHAR(12), s.BILL_NUMBER) AS BILL_STR,
         s.BILL_INVOICE,
         s.BILL_DATE,
         s.CLIENT_CODE,
         s.CLIENT_NAME,
         s.CLIENT_PHONE,
         s.CLIENT_ADRESS,
         s.MANDOOB_CODE,
         m.MANDOOB_NAME,
         m.MANDOOB_PERCENT,
         s.DESCRIPTION,
         s.USER_CREATE,
         sd.QTY,
         sd.UNIT_NAME,
         sd.UNIT_QTY,
         sd.STORE_CODE,
         st.STORE_NAME,
         sd.WAJBA_CODE,
         sd.WAJBA_NAME,
         sd.WAJBA_BALANCE,
         sd.CURRANCY_CODE,
         sd.CURRANCY_EQUAL,
         sd.COST / sd.CURRANCY_EQUAL AS COST,
         sd.PRICE / sd.CURRANCY_EQUAL AS PRICE,
         sd.TOTAL / sd.CURRANCY_EQUAL AS TOTAL,
         sd.DISCOUNT_PERCENT_ITEM,
         sd.DISCOUNT_AMOUNT_ITEM / sd.CURRANCY_EQUAL AS DISCOUNT_AMOUNT_ITEM,
         sd.TOTAL_COST / sd.CURRANCY_EQUAL AS TOTAL_COST,
         sd.NET_TOTAL / sd.CURRANCY_EQUAL AS NET_TOTAL,
         sd.ARBAH_ITEM / sd.CURRANCY_EQUAL AS ARBAH_ITEM,
         sd.C_DATE,
         s.ACTIVE,
         s.IVC_CODE,
         ivc.IVC_NAME,
         sd.ITEM_CODE,
         sd.ITEM_NAME,
         i.ITEM_BARCODE AS ITEM_SIGN,
         i.CATEGORY_CODE,
         ic.CATEGORY_NAME,
         i.TYPE_CODE,
         it.TYPE_NAME,
         sd.QTY_FREE,
         sd.TOTAL_QTY
    FROM dbo.T_SALES s
         INNER JOIN dbo.T_SALES_DETAILS sd 
             ON s.BILL_BRANCH = sd.BILL_BRANCH
         LEFT JOIN dbo.T_ITEMS i 
             ON sd.ITEM_CODE = i.ITEM_CODE
         LEFT JOIN dbo.T_IVC_TYPE ivc 
             ON s.IVC_CODE = ivc.IVC_CODE
         LEFT JOIN dbo.T_MANDOOB m 
             ON s.MANDOOB_CODE = m.MANDOOB_CODE
         LEFT JOIN dbo.T_CURRANNCY cur 
             ON sd.CURRANCY_CODE = cur.CURRANCY_CODE
         LEFT JOIN dbo.T_STORE_TYPE st 
             ON sd.STORE_CODE = st.STORE_CODE
         LEFT JOIN dbo.T_ITEM_TYPE it 
             ON i.TYPE_CODE = it.TYPE_CODE
         LEFT JOIN dbo.T_ITEM_CATEGORY ic 
             ON i.CATEGORY_CODE = ic.CATEGORY_CODE
    WHERE s.ACTIVE = 1 
      AND s.IVC_CODE < 10
      AND s.BILL_DATE BETWEEN @D1 AND @D2
    ORDER BY s.BILL_NUMBER ASC;
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_DETAILS_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_DETAILS_CATEGORY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_GET_SALES_DETAILS_CATEGORY]

@D1 DATE,
@D2 DATE
AS

BEGIN

SELECT        CATEGORY_CODE, CATEGORY_NAME, SUM(TOTAL ) AS TOTAL, SUM(DISCOUNT_AMOUNT_ITEM ) AS DISCOUNT_AMOUNT_ITEM, 
                         SUM(TOTAL_COST ) AS TOTAL_COST, SUM(NET_TOTAL ) AS NET_TOTAL,SUM(ARBAH_ITEM ) AS ARBAH_ITEM
FROM            dbo.V_SALES_DETAILS
WHERE          V_SALES_DETAILS.BILL_DATE BETWEEN @D1 AND @D2
 
GROUP BY  CATEGORY_CODE, CATEGORY_NAME

END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_DETAILS_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_DETAILS_ITEMS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[PV_GET_SALES_DETAILS_ITEMS]

@D1 DATE,
@D2 DATE
AS

BEGIN

SELECT       ITEM_CODE, ITEM_NAME, ITEM_SIGN, CATEGORY_CODE, CATEGORY_NAME, TYPE_CODE, TYPE_NAME,  SUM(QTY) AS QTY, UNIT_NAME, SUM(TOTAL ) AS TOTAL, 
                         SUM(DISCOUNT_AMOUNT_ITEM) AS DISCOUNT_AMOUNT_ITEM, SUM(TOTAL_COST ) AS TOTAL_COST, SUM(NET_TOTAL ) AS NET_TOTAL,SUM(  ARBAH_ITEM ) AS ARBAH_ITEM
						  , SUM(QTY_FREE) AS  QTY_FREE  
					, SUM(TOTAL_QTY) AS  TOTAL_QTY
FROM            dbo.V_SALES_DETAILS
WHERE          V_SALES_DETAILS.BILL_DATE BETWEEN @D1 AND @D2
 
GROUP BY  ITEM_CODE, ITEM_NAME, ITEM_SIGN, CATEGORY_CODE, CATEGORY_NAME, TYPE_CODE, TYPE_NAME, UNIT_NAME

END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_DETAILS_ITEMS_AFTER_DISCOUNT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_DETAILS_ITEMS_AFTER_DISCOUNT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_GET_SALES_DETAILS_ITEMS_AFTER_DISCOUNT]

@D1 DATE,
@D2 DATE
AS

BEGIN

SELECT       ITEM_CODE, ITEM_NAME, ITEM_SIGN, CATEGORY_CODE, CATEGORY_NAME, TYPE_CODE, TYPE_NAME,  SUM(QTY) AS QTY, UNIT_NAME, SUM(TOTAL ) AS TOTAL, 
                         SUM(DISCOUNT_AMOUNT_ITEM) AS DISCOUNT_AMOUNT_ITEM, SUM(TOTAL_COST ) AS TOTAL_COST, SUM(NET_TOTAL ) AS NET_TOTAL,SUM(  ARBAH_ITEM ) AS ARBAH_ITEM,SUM(  DISCOUNT_ITEM_AFTER ) AS DISCOUNT_ITEM_AFTER
						 , SUM(QTY_FREE) AS  QTY_FREE  
					, SUM(TOTAL_QTY) AS  TOTAL_QTY
FROM            dbo.V_SALES_DETAILS_AFTER_DISCOUNT
WHERE          V_SALES_DETAILS_AFTER_DISCOUNT.BILL_DATE BETWEEN @D1 AND @D2 
 
GROUP BY  ITEM_CODE, ITEM_NAME, ITEM_SIGN, CATEGORY_CODE, CATEGORY_NAME, TYPE_CODE, TYPE_NAME, UNIT_NAME

END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_DETAILS_ITEMS_MANDOOB]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_DETAILS_ITEMS_MANDOOB]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_GET_SALES_DETAILS_ITEMS_MANDOOB]

@D1 DATE,
@D2 DATE
AS

BEGIN

SELECT       ITEM_CODE, ITEM_NAME, ITEM_SIGN, CATEGORY_CODE, CATEGORY_NAME, TYPE_CODE, TYPE_NAME,  SUM(QTY) AS QTY, UNIT_NAME, SUM(TOTAL ) AS TOTAL, 
                         SUM(DISCOUNT_AMOUNT_ITEM) AS DISCOUNT_AMOUNT_ITEM, SUM(TOTAL_COST ) AS TOTAL_COST, SUM(NET_TOTAL ) AS NET_TOTAL,SUM(  ARBAH_ITEM ) AS ARBAH_ITEM
						 ,MANDOOB_CODE,MANDOOB_NAME
						 , SUM(QTY_FREE) AS  QTY_FREE  
					, SUM(TOTAL_QTY) AS  TOTAL_QTY
FROM            dbo.V_SALES_DETAILS
WHERE          V_SALES_DETAILS.BILL_DATE BETWEEN @D1 AND @D2
 
GROUP BY  ITEM_CODE, ITEM_NAME, ITEM_SIGN, CATEGORY_CODE, CATEGORY_NAME, TYPE_CODE, TYPE_NAME, UNIT_NAME,MANDOOB_CODE,MANDOOB_NAME

END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_DETAILS_ITEMS_TASAWEK]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_DETAILS_ITEMS_TASAWEK]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_GET_SALES_DETAILS_ITEMS_TASAWEK]

@D1 DATE,
@D2 DATE
AS

BEGIN


SELECT        dbo.V_SALES_DETAILS.ITEM_CODE, dbo.V_SALES_DETAILS.ITEM_NAME, dbo.V_SALES_DETAILS.ITEM_SIGN, dbo.V_SALES_DETAILS.CATEGORY_CODE, dbo.V_SALES_DETAILS.CATEGORY_NAME, 
                         dbo.V_SALES_DETAILS.TYPE_CODE, dbo.V_SALES_DETAILS.TYPE_NAME, SUM(dbo.V_SALES_DETAILS.QTY) AS QTY, dbo.V_SALES_DETAILS.UNIT_NAME, SUM(dbo.V_SALES_DETAILS.TOTAL) AS TOTAL, 
                         SUM(dbo.V_SALES_DETAILS.DISCOUNT_AMOUNT_ITEM) AS DISCOUNT_AMOUNT_ITEM, SUM(dbo.V_SALES_DETAILS.TOTAL_COST) AS TOTAL_COST, SUM(dbo.V_SALES_DETAILS.NET_TOTAL) AS NET_TOTAL, 
                         SUM(dbo.V_SALES_DETAILS.ARBAH_ITEM) AS ARBAH_ITEM, dbo.V_SALES_DETAILS.CLIENT_NAME_BEST, dbo.V_STORE_BOX.BALANCE
						 , SUM(dbo.V_SALES_DETAILS.QTY_FREE) AS  QTY_FREE  
					, SUM(dbo.V_SALES_DETAILS.TOTAL_QTY) AS  TOTAL_QTY


FROM            dbo.V_SALES_DETAILS LEFT OUTER JOIN
                         dbo.V_STORE_BOX ON dbo.V_SALES_DETAILS.UNIT_QTY = dbo.V_STORE_BOX.UNIT_QTY AND dbo.V_SALES_DETAILS.ITEM_CODE = dbo.V_STORE_BOX.ITEM_CODE
WHERE      ( V_SALES_DETAILS.BILL_DATE BETWEEN @D1 AND @D2) AND  (dbo.V_SALES_DETAILS.ITEM_CODE > 0)
GROUP BY dbo.V_SALES_DETAILS.ITEM_CODE, dbo.V_SALES_DETAILS.ITEM_NAME, dbo.V_SALES_DETAILS.ITEM_SIGN, dbo.V_SALES_DETAILS.CATEGORY_CODE, dbo.V_SALES_DETAILS.CATEGORY_NAME, 
                         dbo.V_SALES_DETAILS.TYPE_CODE, dbo.V_SALES_DETAILS.TYPE_NAME, dbo.V_SALES_DETAILS.UNIT_NAME, dbo.V_SALES_DETAILS.CLIENT_NAME_BEST, dbo.V_STORE_BOX.BALANCE

END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_DETAILS_RETURN]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_DETAILS_RETURN]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_GET_SALES_DETAILS_RETURN]

@D1 DATE,
@D2 DATE
AS

BEGIN

SELECT      dbo.T_SALES.BILL_BRANCH, dbo.T_SALES.BILL_NUMBER, CONVERT(NVARCHAR(12), dbo.T_SALES.BILL_NUMBER) AS BILL_STR, dbo.T_SALES.BILL_INVOICE, dbo.T_SALES.BILL_DATE, dbo.T_SALES.CLIENT_CODE, dbo.T_SALES.CLIENT_NAME, 
                         dbo.T_SALES.CLIENT_PHONE, dbo.T_SALES.CLIENT_ADRESS, dbo.T_SALES.MANDOOB_CODE, dbo.T_MANDOOB.MANDOOB_NAME, dbo.T_MANDOOB.MANDOOB_PERCENT, dbo.T_SALES.DESCRIPTION, 
                         dbo.T_SALES.USER_CREATE, dbo.T_SALES_DETAILS.QTY, dbo.T_SALES_DETAILS.UNIT_NAME, dbo.T_SALES_DETAILS.UNIT_QTY, dbo.T_SALES_DETAILS.STORE_CODE, dbo.T_STORE_TYPE.STORE_NAME, 
                         dbo.T_SALES_DETAILS.WAJBA_CODE, dbo.T_SALES_DETAILS.WAJBA_NAME, dbo.T_SALES_DETAILS.WAJBA_BALANCE, dbo.T_SALES_DETAILS.CURRANCY_CODE, dbo.T_SALES_DETAILS.CURRANCY_EQUAL, 
                         dbo.T_SALES_DETAILS.COST / dbo.T_SALES_DETAILS.CURRANCY_EQUAL AS COST, dbo.T_SALES_DETAILS.PRICE / dbo.T_SALES_DETAILS.CURRANCY_EQUAL AS PRICE, 
                         dbo.T_SALES_DETAILS.TOTAL / dbo.T_SALES_DETAILS.CURRANCY_EQUAL AS TOTAL, dbo.T_SALES_DETAILS.DISCOUNT_PERCENT_ITEM, 
                         dbo.T_SALES_DETAILS.DISCOUNT_AMOUNT_ITEM / dbo.T_SALES_DETAILS.CURRANCY_EQUAL AS DISCOUNT_AMOUNT_ITEM, 
                         dbo.T_SALES_DETAILS.TOTAL_COST / dbo.T_SALES_DETAILS.CURRANCY_EQUAL AS TOTAL_COST, dbo.T_SALES_DETAILS.NET_TOTAL / dbo.T_SALES_DETAILS.CURRANCY_EQUAL AS NET_TOTAL, 
                         dbo.T_SALES_DETAILS.ARBAH_ITEM / dbo.T_SALES_DETAILS.CURRANCY_EQUAL AS ARBAH_ITEM, dbo.T_SALES_DETAILS.C_DATE, dbo.T_SALES.ACTIVE, dbo.T_SALES.IVC_CODE, dbo.T_IVC_TYPE.IVC_NAME, 
                         dbo.T_SALES_DETAILS.ITEM_CODE, dbo.T_SALES_DETAILS.ITEM_NAME, dbo.T_ITEMS.ITEM_BARCODE AS ITEM_SIGN, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_ITEMS.TYPE_CODE, 
                         dbo.T_ITEM_TYPE.TYPE_NAME, dbo.T_SALES_DETAILS.QTY_FREE  
					, dbo.T_SALES_DETAILS.TOTAL_QTY
FROM            dbo.T_SALES INNER JOIN
                         dbo.T_SALES_DETAILS ON dbo.T_SALES.BILL_BRANCH = dbo.T_SALES_DETAILS.BILL_BRANCH LEFT OUTER JOIN
                         dbo.T_ITEMS ON dbo.T_SALES_DETAILS.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_IVC_TYPE ON dbo.T_SALES.IVC_CODE = dbo.T_IVC_TYPE.IVC_CODE LEFT OUTER JOIN
                         dbo.T_MANDOOB ON dbo.T_SALES.MANDOOB_CODE = dbo.T_MANDOOB.MANDOOB_CODE LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.T_SALES_DETAILS.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE LEFT OUTER JOIN
                         dbo.T_STORE_TYPE ON dbo.T_SALES_DETAILS.STORE_CODE = dbo.T_STORE_TYPE.STORE_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_TYPE ON dbo.T_ITEMS.TYPE_CODE = dbo.T_ITEM_TYPE.TYPE_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE
WHERE        (dbo.T_SALES.ACTIVE = 1) AND (dbo.T_SALES.IVC_CODE < 10)AND (dbo.T_SALES_DETAILS.NET_TOTAL / dbo.T_SALES_DETAILS.CURRANCY_EQUAL < 0)

 AND T_SALES.BILL_DATE BETWEEN @D1 AND @D2
 order by dbo.T_SALES.BILL_NUMBER asc
END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_MANDOOB_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_MANDOOB_ITEMS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'

 
CREATE PROCEDURE [dbo].[PV_GET_SALES_MANDOOB_ITEMS]

@D1 DATE,
@D2 DATE
AS

BEGIN

SELECT     dbo.V_SALES_DETAILS.MANDOOB_CODE, dbo.V_SALES_DETAILS.MANDOOB_NAME, SUM(dbo.V_SALES_DETAILS.QTY) AS QTY, dbo.V_SALES_DETAILS.UNIT_NAME,dbo.V_SALES_DETAILS.UNIT_QTY,SUM(dbo.V_SALES_DETAILS.TOTAL) AS TOTAL, SUM(dbo.V_SALES_DETAILS.TOTAL_COST) AS TOTAL_COST, SUM(dbo.V_SALES_DETAILS.NET_TOTAL) 
                  AS NET_TOTAL, SUM(dbo.V_SALES_DETAILS.ARBAH_ITEM) AS ARBAH_ITEM, dbo.V_SALES_DETAILS.ITEM_CODE, dbo.V_SALES_DETAILS.ITEM_NAME, dbo.V_SALES_DETAILS.ITEM_SIGN, dbo.V_SALES_DETAILS.CATEGORY_CODE, dbo.V_SALES_DETAILS.CATEGORY_NAME, 
                  ISNULL(dbo.T_ITEMS_MANDOOB.MANDOOB_PERCENT, 0) AS MANDOOB_PERCENT, ISNULL(dbo.T_ITEMS_MANDOOB.MANDOOB_AMO, 0) AS MANDOOB_AMO, SUM(dbo.V_SALES_DETAILS.QTY_FREE) AS  QTY_FREE  
					, SUM(dbo.V_SALES_DETAILS.TOTAL_QTY) AS  TOTAL_QTY
FROM        dbo.V_SALES_DETAILS LEFT OUTER JOIN

                  dbo.T_ITEMS_MANDOOB ON dbo.V_SALES_DETAILS.MANDOOB_CODE = dbo.T_ITEMS_MANDOOB.MANDOOB_CODE AND dbo.V_SALES_DETAILS.ITEM_CODE = dbo.T_ITEMS_MANDOOB.ITEM_CODE
 WHERE BILL_DATE BETWEEN @D1 AND @D2
GROUP BY dbo.V_SALES_DETAILS.MANDOOB_CODE, dbo.V_SALES_DETAILS.MANDOOB_NAME,dbo.V_SALES_DETAILS.UNIT_NAME,dbo.V_SALES_DETAILS.UNIT_QTY, dbo.V_SALES_DETAILS.ITEM_CODE, dbo.V_SALES_DETAILS.ITEM_NAME, dbo.V_SALES_DETAILS.ITEM_SIGN, dbo.V_SALES_DETAILS.CATEGORY_CODE, dbo.V_SALES_DETAILS.CATEGORY_NAME, 
                  ISNULL(dbo.T_ITEMS_MANDOOB.MANDOOB_PERCENT, 0), ISNULL(dbo.T_ITEMS_MANDOOB.MANDOOB_AMO, 0)
END	--END OF PROGRAM






































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_MONTHLY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_MONTHLY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[PV_GET_SALES_MONTHLY]

@YEAR_NO INT
AS

BEGIN

SELECT       YEAR(BILL_DATE) AS YEAR_BILL_DATE, MONTH(BILL_DATE) AS MONTH_BILL_DATE, DATENAME(month, BILL_DATE) AS MONTH_NAME, SUM(TOTAL_SALES) AS TOTAL_SALES, SUM(DISCOUNT_ITEMS) 
                         AS DISCOUNT_ITEMS, SUM(DISCOUNT_AMOUNT) AS DISCOUNT_AMOUNT, SUM(TOTAL_DISCOUNT) AS TOTAL_DISCOUNT, SUM(NET_SALES) AS NET_SALES, SUM(TOTAL_COST) AS TOTAL_COST, SUM(TOTAL_ARBAH) 
                         AS TOTAL_ARBAH
FROM            dbo.V_SALES
GROUP BY MONTH(BILL_DATE), YEAR(BILL_DATE), DATENAME(month, BILL_DATE)
HAVING       (YEAR(BILL_DATE) = @YEAR_NO)

END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_RETURN]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_RETURN]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[PV_GET_SALES_RETURN]

@D1 DATE,
@D2 DATE
AS

BEGIN

SELECT      dbo.T_SALES.BILL_BRANCH, dbo.T_SALES.BILL_NUMBER, dbo.T_SALES.BILL_INVOICE, dbo.T_SALES.BILL_DATE, dbo.T_SALES.OFFER_CODE, dbo.T_SALES.CURRANCY_CODE, dbo.T_CURRANNCY.CURRANCY_NAME, 
                         dbo.T_SALES.CURRANCY_EQUAL, dbo.T_SALES.CLIENT_CODE, dbo.T_SALES.CLIENT_NAME, dbo.T_SALES.CLIENT_PHONE, dbo.T_SALES.CLIENT_ADRESS, dbo.T_SALES.MANDOOB_CODE, 
                         dbo.T_MANDOOB.MANDOOB_NAME, dbo.T_SALES.DESCRIPTION, dbo.T_SALES.USER_CREATE, dbo.T_SALES.SECURETY_CODE, dbo.T_SALES.TOTAL_SALES / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_SALES, 
                         dbo.T_SALES.DISCOUNT_ITEMS / dbo.T_SALES.CURRANCY_EQUAL AS DISCOUNT_ITEMS, dbo.T_SALES.DISCOUNT_PERCENT, 
                         dbo.T_SALES.DISCOUNT_AMOUNT / dbo.T_SALES.CURRANCY_EQUAL AS DISCOUNT_AMOUNT, dbo.T_SALES.TOTAL_DISCOUNT / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_DISCOUNT, 
                         dbo.T_SALES.NET_SALES / dbo.T_SALES.CURRANCY_EQUAL AS NET_SALES, dbo.T_SALES.TOTAL_COST / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_COST, 
                         dbo.T_SALES.TOTAL_ARBAH / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_ARBAH, dbo.T_SALES.IVC_CODE, dbo.T_IVC_TYPE.IVC_NAME, dbo.T_SALES.DAY_CASH, dbo.T_SALES.DATE_CASH, 
                         dbo.T_SALES.TOT_CONV, dbo.T_SALES.ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME, dbo.T_SALES.CASH_USA, dbo.T_SALES.REMAIN_USA, dbo.T_SALES.CASH_IQ, dbo.T_SALES.REMAIN_IQ, 
                         dbo.T_SALES.C_DATE, dbo.T_SALES.C_UPDATE, dbo.T_SALES.USER_UPDATE, dbo.T_SALES.ACTIVE, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_BUSINESS,DATEDIFF(DAY,dbo.T_SALES.DATE_CASH,GETDATE())AS CASH_DIFF
						 ,ISNULL((select sum(QTY) from T_SALES_DETAILS where BILL_NUMBER =dbo.T_SALES.BILL_NUMBER),0)as QTY
FROM            dbo.T_SALES LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.T_SALES.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                         dbo.T_ACCOUNTS ON dbo.T_SALES.ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.T_TYPE_PRICE_SELL ON dbo.T_SALES.TYPE_PRICE_SELL = dbo.T_TYPE_PRICE_SELL.TYPE_PRICE_CODE LEFT OUTER JOIN
                         dbo.T_IVC_TYPE ON dbo.T_SALES.IVC_CODE = dbo.T_IVC_TYPE.IVC_CODE LEFT OUTER JOIN
                         dbo.T_MANDOOB ON dbo.T_SALES.MANDOOB_CODE = dbo.T_MANDOOB.MANDOOB_CODE LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.T_SALES.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE
WHERE        (dbo.T_SALES.ACTIVE = 1) AND (dbo.T_SALES.IVC_CODE < 10) AND T_SALES.BILL_DATE BETWEEN @D1 AND @D2 AND (dbo.T_SALES.NET_SALES / dbo.T_SALES.CURRANCY_EQUAL < 0)

order by dbo.T_SALES.BILL_NUMBER asc
END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_SUM_QTY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_SUM_QTY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[PV_GET_SALES_SUM_QTY]

@D1 DATE,
@D2 DATE
AS

BEGIN


SELECT      dbo.T_SALES.BILL_BRANCH, dbo.T_SALES.BILL_NUMBER, dbo.T_SALES.BILL_INVOICE, dbo.T_SALES.BILL_DATE, dbo.T_SALES.OFFER_CODE, dbo.T_SALES.CURRANCY_CODE, dbo.T_CURRANNCY.CURRANCY_NAME, 
                         dbo.T_SALES.CURRANCY_EQUAL, dbo.T_SALES.CLIENT_CODE, dbo.T_SALES.CLIENT_NAME, dbo.T_SALES.CLIENT_PHONE, dbo.T_SALES.CLIENT_ADRESS, dbo.T_SALES.MANDOOB_CODE, 
                         dbo.T_MANDOOB.MANDOOB_NAME, dbo.T_MANDOOB.MANDOOB_PERCENT, dbo.T_SALES.DESCRIPTION, dbo.T_SALES.USER_CREATE, dbo.T_SALES.SECURETY_CODE, dbo.T_SALES.TOTAL_SALES / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_SALES, 
                         dbo.T_SALES.DISCOUNT_ITEMS / dbo.T_SALES.CURRANCY_EQUAL AS DISCOUNT_ITEMS, dbo.T_SALES.DISCOUNT_PERCENT, 
                         dbo.T_SALES.DISCOUNT_AMOUNT / dbo.T_SALES.CURRANCY_EQUAL AS DISCOUNT_AMOUNT, dbo.T_SALES.TOTAL_DISCOUNT / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_DISCOUNT, 
                         dbo.T_SALES.NET_SALES / dbo.T_SALES.CURRANCY_EQUAL AS NET_SALES, dbo.T_SALES.TOTAL_COST / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_COST, 
                         dbo.T_SALES.TOTAL_ARBAH / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_ARBAH, dbo.T_SALES.IVC_CODE, dbo.T_IVC_TYPE.IVC_NAME, dbo.T_SALES.DAY_CASH, dbo.T_SALES.DATE_CASH, 
                         dbo.T_SALES.TOT_CONV, dbo.T_SALES.ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME, dbo.T_SALES.CASH_USA, dbo.T_SALES.REMAIN_USA, dbo.T_SALES.CASH_IQ, dbo.T_SALES.REMAIN_IQ, 
                         dbo.T_SALES.C_DATE, dbo.T_SALES.C_UPDATE, dbo.T_SALES.USER_UPDATE, dbo.T_SALES.ACTIVE, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_BUSINESS,DATEDIFF(DAY,dbo.T_SALES.DATE_CASH,GETDATE())AS CASH_DIFF
						,ISNULL((select sum(QTY) from T_SALES_DETAILS where BILL_NUMBER =dbo.T_SALES.BILL_NUMBER),0)as QTY
FROM            dbo.T_SALES LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.T_SALES.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                         dbo.T_ACCOUNTS ON dbo.T_SALES.ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.T_TYPE_PRICE_SELL ON dbo.T_SALES.TYPE_PRICE_SELL = dbo.T_TYPE_PRICE_SELL.TYPE_PRICE_CODE LEFT OUTER JOIN
                         dbo.T_IVC_TYPE ON dbo.T_SALES.IVC_CODE = dbo.T_IVC_TYPE.IVC_CODE LEFT OUTER JOIN
                         dbo.T_MANDOOB ON dbo.T_SALES.MANDOOB_CODE = dbo.T_MANDOOB.MANDOOB_CODE LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.T_SALES.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE
WHERE        (dbo.T_SALES.ACTIVE = 1) AND (dbo.T_SALES.IVC_CODE < 10) AND T_SALES.BILL_DATE BETWEEN CONVERT(VARCHAR(10),  @D1, 111) AND CONVERT(VARCHAR(10),  @D2, 111)  

order by dbo.T_SALES.BILL_NUMBER asc
END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_TEMP_ORDER_DELETE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_TEMP_ORDER_DELETE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_GET_SALES_TEMP_ORDER_DELETE]
@BILL_NUMBER INT
AS

BEGIN

SELECT        dbo.T_SALES_TEMP.T_ID, dbo.T_SALES_TEMP.BILL_BRANCH, dbo.T_SALES_TEMP.BILL_NUMBER, dbo.T_SALES_TEMP.ITEM_CODE, dbo.T_SALES_TEMP.ITEM_NAME, dbo.T_SALES_TEMP.QTY, 
                         dbo.T_SALES_TEMP.UNIT_NAME, dbo.T_SALES_TEMP.UNIT_QTY, dbo.T_SALES_TEMP.STORE_CODE, dbo.T_STORE_TYPE.STORE_NAME, dbo.T_SALES_TEMP.ITEM_NOTE_SALES, dbo.T_SALES_TEMP.IS_PRINT, 
                         dbo.T_SALES_TEMP.USER_PREPARE, dbo.T_SALES_TEMP.USER_CUT, dbo.T_SALES_TEMP.NOTE_PRINT, dbo.T_SALES_TEMP.PROCCESS_ID, dbo.T_SALES.CLIENT_CODE, dbo.T_SALES.CLIENT_NAME, 
                         dbo.T_SALES.CLIENT_PHONE, dbo.T_SALES.CLIENT_ADRESS, dbo.T_SALES.DESCRIPTION, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_PRINTER.PRINTER_NAME, 
                         dbo.T_PRINTER.DEVICE_NAME, dbo.T_ITEMS.ITEM_NOTE, dbo.T_ITEMS.ITEM_BARCODE, dbo.T_ITEMS.RAF_NAME, dbo.T_ITEMS.IMG_URL, dbo.T_PRINTER_STORE.PRINTER_ID
FROM            dbo.T_SALES RIGHT OUTER JOIN
                         dbo.T_STORE_TYPE RIGHT OUTER JOIN
                         dbo.T_SALES_TEMP LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY LEFT OUTER JOIN
                         dbo.T_ITEMS ON dbo.T_ITEM_CATEGORY.CATEGORY_CODE = dbo.T_ITEMS.CATEGORY_CODE ON dbo.T_SALES_TEMP.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_PRINTER_STORE LEFT OUTER JOIN
                         dbo.T_PRINTER ON dbo.T_PRINTER_STORE.PRINTER_ID = dbo.T_PRINTER.T_ID ON dbo.T_SALES_TEMP.STORE_CODE = dbo.T_PRINTER.STORE_CODE AND 
                         dbo.T_ITEM_CATEGORY.CATEGORY_CODE = dbo.T_PRINTER_STORE.CATEGORY_CODE ON dbo.T_STORE_TYPE.STORE_CODE = dbo.T_SALES_TEMP.STORE_CODE ON 
                         dbo.T_SALES.BILL_BRANCH = dbo.T_SALES_TEMP.BILL_BRANCH
WHERE dbo.T_SALES_TEMP.BILL_NUMBER=@BILL_NUMBER AND LEN(dbo.T_SALES_TEMP.ITEM_NOTE_SALES)>1
order by dbo.T_SALES.BILL_NUMBER asc
END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_SALES_TEMP_ORDER_NOT_PRINT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_SALES_TEMP_ORDER_NOT_PRINT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_GET_SALES_TEMP_ORDER_NOT_PRINT]
@BILL_NUMBER INT,
@PRINTER_ID INT
AS

BEGIN

SELECT        dbo.T_SALES_TEMP.T_ID, dbo.T_SALES_TEMP.BILL_BRANCH, dbo.T_SALES_TEMP.BILL_NUMBER, dbo.T_SALES_TEMP.ITEM_CODE, dbo.T_SALES_TEMP.ITEM_NAME, dbo.T_SALES_TEMP.QTY, 
                         dbo.T_SALES_TEMP.UNIT_NAME, dbo.T_SALES_TEMP.UNIT_QTY, dbo.T_SALES_TEMP.STORE_CODE, dbo.T_STORE_TYPE.STORE_NAME, dbo.T_SALES_TEMP.ITEM_NOTE_SALES, dbo.T_SALES_TEMP.IS_PRINT, 
                         dbo.T_SALES_TEMP.USER_PREPARE, dbo.T_SALES_TEMP.USER_CUT, dbo.T_SALES_TEMP.NOTE_PRINT, dbo.T_SALES_TEMP.PROCCESS_ID, dbo.T_SALES.CLIENT_CODE, dbo.T_SALES.CLIENT_NAME, 
                         dbo.T_SALES.CLIENT_PHONE, dbo.T_SALES.CLIENT_ADRESS, dbo.T_SALES.DESCRIPTION, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_PRINTER.PRINTER_NAME, 
                         dbo.T_PRINTER.DEVICE_NAME, dbo.T_ITEMS.ITEM_NOTE, dbo.T_ITEMS.ITEM_BARCODE, dbo.T_ITEMS.RAF_NAME, dbo.T_ITEMS.IMG_URL, dbo.T_PRINTER_STORE.PRINTER_ID,dbo.T_SALES_TEMP.PRICE,dbo.T_SALES_TEMP.TOTAL, dbo.T_SALES.BILL_ORDER
FROM            dbo.T_SALES RIGHT OUTER JOIN
                         dbo.T_STORE_TYPE RIGHT OUTER JOIN
                         dbo.T_SALES_TEMP LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY LEFT OUTER JOIN
                         dbo.T_ITEMS ON dbo.T_ITEM_CATEGORY.CATEGORY_CODE = dbo.T_ITEMS.CATEGORY_CODE ON dbo.T_SALES_TEMP.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_PRINTER_STORE LEFT OUTER JOIN
                         dbo.T_PRINTER ON dbo.T_PRINTER_STORE.PRINTER_ID = dbo.T_PRINTER.T_ID ON dbo.T_SALES_TEMP.STORE_CODE = dbo.T_PRINTER.STORE_CODE AND 
                         dbo.T_ITEM_CATEGORY.CATEGORY_CODE = dbo.T_PRINTER_STORE.CATEGORY_CODE ON dbo.T_STORE_TYPE.STORE_CODE = dbo.T_SALES_TEMP.STORE_CODE ON 
                         dbo.T_SALES.BILL_BRANCH = dbo.T_SALES_TEMP.BILL_BRANCH
WHERE dbo.T_SALES_TEMP.BILL_NUMBER=@BILL_NUMBER AND dbo.T_PRINTER_STORE.PRINTER_ID=@PRINTER_ID
order by dbo.T_SALES.BILL_NUMBER asc
END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_STORE_TRANSFARE_ORDER_NOT_PRINT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_STORE_TRANSFARE_ORDER_NOT_PRINT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_GET_STORE_TRANSFARE_ORDER_NOT_PRINT]
@BILL_NUMBER INT,
@PRINTER_ID INT
AS

BEGIN

SELECT       * FROM V_STORE_TRANSFARE_ORDER
WHERE BILL_NUMBER=@BILL_NUMBER AND PRINTER_ID=@PRINTER_ID AND IS_PRINT=0

END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_GET_USER_ERROR_COUNT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_GET_USER_ERROR_COUNT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'










CREATE PROCEDURE [dbo].[PV_GET_USER_ERROR_COUNT]

@D1 DATE,
@D2 DATE
AS

BEGIN
delete from T_USER_ERROR where E_COUNT=0
--INSERT INTO [dbo].[T_USER_ERROR]
--           ([USER_NAME]
--           ,[E_COUNT]
--           ,[NOTE]
--           ,[D_DATE]
--           ,[D_TIME]
--           ,[USER_CREATE])
--     SELECT
--           USER_PREPARE
--           ,0
--           ,N''''
--           ,@D1
--           ,@D1
--           ,N''SYSTEM'' FROM V_SALES_DETAILS WHERE  BILL_DATE BETWEEN CONVERT(VARCHAR(10),  @D1, 111) AND CONVERT(VARCHAR(10),  @D2, 111) and len(USER_PREPARE)>0 and QTY>0 group by USER_PREPARE

--INSERT INTO [dbo].[T_USER_ERROR]
--           ([USER_NAME]
--           ,[E_COUNT]
--           ,[NOTE]
--           ,[D_DATE]
--           ,[D_TIME]
--           ,[USER_CREATE])
--     SELECT
--           USER_CUT
--           ,0
--           ,N''''
--           ,@D1
--           ,@D1
--           ,N''SYSTEM'' FROM V_SALES_DETAILS WHERE  BILL_DATE BETWEEN CONVERT(VARCHAR(10),  @D1, 111) AND CONVERT(VARCHAR(10),  @D2, 111) and len(USER_CUT)>0 and QTY>0 group by USER_CUT

--SELECT    ROW_NUMBER() OVER (ORDER BY USER_NAME  ) AS ROW_NUM, [USER_NAME],SUM(E_COUNT) AS ERROR_COUNT ,(SELECT COUNT (T_ID) FROM V_SALES_DETAILS WHERE (USER_PREPARE LIKE T_USER_ERROR.USER_NAME or USER_CUT LIKE T_USER_ERROR.USER_NAME ) AND BILL_DATE BETWEEN CONVERT(VARCHAR(10),  @D1, 111) AND CONVERT(VARCHAR(10),  @D2, 111)  ) AS CORRECT_COUNT ,(SELECT COUNT (T_ID) FROM V_SALES_DETAILS WHERE  (USER_PREPARE LIKE T_USER_ERROR.USER_NAME or USER_CUT LIKE T_USER_ERROR.USER_NAME ) AND BILL_DATE BETWEEN CONVERT(VARCHAR(10),  @D1, 111) AND CONVERT(VARCHAR(10),  @D2, 111))- SUM(E_COUNT) AS BALANCE_COUNT

--FROM T_USER_ERROR
--WHERE       T_USER_ERROR.D_DATE BETWEEN CONVERT(VARCHAR(10),  @D1, 111) AND CONVERT(VARCHAR(10),  @D2, 111)  

--GROUP BY [USER_NAME]

IF OBJECT_ID(''tempdb..#TEMP_USER_ERROR'') IS NOT NULL DROP Table #TEMP_USER_ERROR

Create Table #TEMP_USER_ERROR (
    ROW_NUM int  
	,USER_NAME nvarchar(max)
	,ERROR_COUNT int
	,CORRECT_COUNT int
	,BALANCE_COUNT int
);

INSERT INTO #TEMP_USER_ERROR
select 
ROW_NUMBER() OVER (ORDER BY USER_NAME  ) 
,USER_NAME
,(select COUNT(E_COUNT)FROM T_USER_ERROR WHERE   [USER_NAME] LIKE T_USERS.USER_NAME  and  D_DATE BETWEEN CONVERT(VARCHAR(10),  @D1, 111) AND CONVERT(VARCHAR(10),  @D2, 111)  )  
,(SELECT COUNT (T_ID) FROM V_SALES_DETAILS WHERE (USER_PREPARE LIKE T_USERS.USER_NAME or USER_CUT LIKE T_USERS.USER_NAME ) AND BILL_DATE BETWEEN CONVERT(VARCHAR(10),  @D1, 111) AND CONVERT(VARCHAR(10),  @D2, 111)   )
 ,0--(SELECT COUNT (T_ID) FROM V_SALES_DETAILS WHERE  (USER_PREPARE LIKE T_USERS.USER_NAME or USER_CUT LIKE T_USERS.USER_NAME ) AND BILL_DATE BETWEEN   @D1 AND   @D2 )- (select count(E_COUNT)FROM T_USER_ERROR WHERE   [USER_NAME] like T_USERS.USER_NAME  and   T_USER_ERROR.D_DATE BETWEEN   @D1 AND   @D2   ) 


	  FROM  [dbo].T_USERS WHERE ACTIVE=1 and LEVEL_CODE>1

 delete from #TEMP_USER_ERROR where ERROR_COUNT=0 and CORRECT_COUNT=0  
 UPDATE #TEMP_USER_ERROR SET BALANCE_COUNT=CORRECT_COUNT-ERROR_COUNT
 SELECT * FROM #TEMP_USER_ERROR order by ROW_NUM asc

 DROP TABLE #TEMP_USER_ERROR
END	--END OF PROGRAM































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_ITEM_LAST_DATE_DIFF]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_ITEM_LAST_DATE_DIFF]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_ITEM_LAST_DATE_DIFF]
@DIFF INT
AS

BEGIN

SELECT @DIFF=COUNT_SETTING FROM T_NOTIFICATION WHERE NOTI_CODE=4
SELECT [ITEM_CODE]
      ,[ITEM_SIGN]
      ,[ITEM_NAME]
      ,[TYPE_CODE]
      ,[UNIT_CODE]
      ,[UNIT_QTY]
      ,[UNIT_NAME]
      ,[BALANCE]
      ,[DF_SALE]
      ,[DF_STORE]
      ,[DF_BUY]
      ,[FULL_NAME]
      ,[PRICE_BUY]
      ,[PRICE_COST]
      ,[PRICE_SALE_1]
      ,[PRICE_SALE_2]
      ,[PRICE_SALE_3]
      ,[PRICE_AVG_COST]
      ,[PRICE_SALE_CUR]
      ,[CATEGORY_CODE]
      ,[CATEGORY_NAME]
      ,[LAST_SALE]
      ,[LAST_DIFF]
  FROM [dbo].[V_ITEM_LAST_DATE_DIFF] WHERE LAST_DIFF>=@DIFF
END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_ITEM_MOVE_PRICE_NFO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_ITEM_MOVE_PRICE_NFO]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_ITEM_MOVE_PRICE_NFO]
@ITEM_CODE INT
AS

BEGIN
SELECT ITEM_CODE, ITEM_NAME,N'''' AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,PRICE,TOTAL,''2022-01-01'' AS BILL_DATE,BILL_NUMBER,BILL_BRANCH,0 AS B_CODE,N''رصيد اولي'' AS B_NAME,(N''رصيد اولي للمادة'') AS DESCRIPTION_TYPE FROM V_BUY_DETAILS_FIRST WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT ITEM_CODE, ITEM_NAME,ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,PRICE,TOTAL,BILL_DATE,BILL_NUMBER,BILL_BRANCH,21 AS B_CODE,N''مشتريات'' AS B_NAME,(N''المورد :''+CLIENT_NAME) AS DESCRIPTION_TYPE FROM V_BUY_DETAILS WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT ITEM_CODE, ITEM_NAME,ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY)*-1 AS QTY_MIN_BALANCE ,PRICE,TOTAL,BILL_DATE,BILL_NUMBER,BILL_BRANCH,2 AS B_CODE ,N''مبيعات'' AS B_NAME ,(N''العميل :''+CLIENT_NAME) AS DESCRIPTION_TYPE FROM V_SALES_DETAILS WHERE ITEM_CODE=@ITEM_CODE 
 UNION 
SELECT ITEM_CODE, ITEM_NAME,ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,0 AS STORE_CODE,(N''من  : ''+FROM_STORE_NAME+N''  /  الى : ''+ TO_STORE_NAME) AS STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,0 AS QTY_MIN_BALANCE,0 AS PRICE,0 AS TOTAL,BILL_DATE,BILL_NUMBER,BILL_BRANCH,4 AS B_CODE,N''نقل مخزني'' AS B_NAME ,(N''من  : ''+FROM_STORE_NAME+N''  /  الى : ''+ TO_STORE_NAME) AS DESCRIPTION_TYPE FROM V_STORE_TRANFARE_DETAILS WHERE ITEM_CODE=@ITEM_CODE 
UNION 
SELECT ITEM_CODE, ITEM_NAME,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,PRICE,TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,24 AS B_CODE,N''تصحيح مخزني او تلف'' AS B_NAME,IIF(QTY<0,N''تلف'' ,N''اضافة عدد'') AS DESCRIPTION_TYPE FROM V_BUY_DETAILS_CORRECT WHERE ITEM_CODE=@ITEM_CODE
UNION 
SELECT ITEM_CODE_FACTORY, ITEM_NAME_FACTORY,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,QTY,UNIT_NAME,UNIT_QTY,(QTY*UNIT_QTY)AS QTY_MIN,(QTY*UNIT_QTY) AS QTY_MIN_BALANCE ,PRICE,TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,11 AS B_CODE,N''تصنيع'' AS B_NAME,N''تصنيع'' AS DESCRIPTION_TYPE FROM V_FACTORY WHERE ITEM_CODE_FACTORY=@ITEM_CODE
UNION 
SELECT ITEM_CODE, ITEM_NAME,N''''AS ITEM_SIGN,CATEGORY_CODE,CATEGORY_NAME,STORE_CODE,STORE_NAME,(TOT_QTY_MIN/UNIT_QTY) AS QTY,UNIT_NAME,UNIT_QTY,(TOT_QTY_MIN)AS QTY_MIN,(TOT_QTY_MIN)*-1 AS QTY_MIN_BALANCE ,PRICE,(PRICE*TOT_QTY_MIN) AS TOTAL,  BILL_DATE,BILL_NUMBER,BILL_BRANCH,12 AS B_CODE,N''استهلاك في التصنيع'' AS B_NAME,(N''استهلاك في التصنيع للمادة : ''+ITEM_NAME_FACTORY) AS DESCRIPTION_TYPE FROM V_FACTORY_DETAILS WHERE ITEM_CODE=@ITEM_CODE


ORDER BY BILL_DATE,BILL_NUMBER;




END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_ITEMS_BALANCE_MIN_STORE_QTYMIN_GSTORE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_ITEMS_BALANCE_MIN_STORE_QTYMIN_GSTORE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'












CREATE PROCEDURE [dbo].[PV_ITEMS_BALANCE_MIN_STORE_QTYMIN_GSTORE]

AS

BEGIN
SELECT     TOP (100) PERCENT   dbo.V_ITEMS_BALANCE_MIN_STORE.ITEM_CODE, dbo.T_ITEMS.ITEM_BARCODE AS ITEM_SIGN, dbo.T_ITEMS.ITEM_NAME, dbo.V_ITEMS_BALANCE_MIN_STORE.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, IIF(dbo.T_ITEMS.DF_SALE=1,2,1 )AS UNIT_CODE, 
                       IIF(dbo.T_ITEMS.DF_SALE=1,dbo.T_ITEMS.UNIT2_QTY,1 )  AS UNIT_QTY,IIF(dbo.T_ITEMS.DF_SALE=1,dbo.T_ITEMS.UNIT2_NAME,dbo.T_ITEMS.UNIT_NAME )  AS UNIT_NAME,IIF(dbo.T_ITEMS.DF_SALE=1,dbo.V_ITEMS_BALANCE_MIN_STORE.BALANCE /dbo.T_ITEMS.UNIT2_QTY ,dbo.V_ITEMS_BALANCE_MIN_STORE.BALANCE )    AS BALANCE,   dbo.T_ITEMS.QTY_MIN
					   , dbo.V_ITEMS_BALANCE_MIN_STORE.STORE_CODE, dbo.V_ITEMS_BALANCE_MIN_STORE.STORE_NAME
FROM            dbo.V_ITEMS_BALANCE_MIN_STORE LEFT OUTER JOIN
                         dbo.T_ITEMS ON dbo.V_ITEMS_BALANCE_MIN_STORE.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE

WHERE          (dbo.T_ITEMS.QTY_MIN > IIF(dbo.T_ITEMS.DF_SALE=1,dbo.V_ITEMS_BALANCE_MIN_STORE.BALANCE /dbo.T_ITEMS.UNIT2_QTY ,dbo.V_ITEMS_BALANCE_MIN_STORE.BALANCE )) AND T_ITEMS.TYPE_CODE<>5
ORDER BY   dbo.T_ITEMS.ITEM_NAME
END	--END OF PROGRAM

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_SALES_DETAILS_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SALES_DETAILS_CLIENT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'












CREATE PROCEDURE [dbo].[PV_SALES_DETAILS_CLIENT]

@D1 DATE,
@D2 DATE
AS

BEGIN
SELECT       dbo.V_SALES.CLIENT_CODE, dbo.T_CLIENT.CLIENT_NAME, dbo.T_CLIENT.CLIENT_FULL_PHONE, dbo.T_CLIENT.CLIENT_ADDRESS, SUM(dbo.V_SALES.TOTAL_SALES) AS TOTAL, SUM(dbo.V_SALES.TOTAL_DISCOUNT) 
                         AS DISCOUNT_AMOUNT_ITEM, SUM(dbo.V_SALES.TOTAL_COST) AS TOTAL_COST, SUM(dbo.V_SALES.NET_SALES) AS NET_TOTAL, dbo.T_CLIENT.CLIENT_REGION, SUM(dbo.V_SALES.TOTAL_ARBAH) 
                         AS TOTAL_ARBAH
FROM            dbo.V_SALES LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.V_SALES.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE

WHERE          V_SALES.BILL_DATE BETWEEN @D1 AND @D2
 
GROUP BY dbo.V_SALES.CLIENT_CODE, dbo.T_CLIENT.CLIENT_NAME, dbo.T_CLIENT.CLIENT_FULL_PHONE, dbo.T_CLIENT.CLIENT_ADDRESS, dbo.T_CLIENT.CLIENT_REGION

END	--END OF PROGRAM

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_SALES_DETAILS_CLIENT_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SALES_DETAILS_CLIENT_CATEGORY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_SALES_DETAILS_CLIENT_CATEGORY]

@D1 DATE,
@D2 DATE
AS

BEGIN
SELECT       dbo.V_SALES_DETAILS.CLIENT_CODE, dbo.T_CLIENT.CLIENT_NAME, dbo.T_CLIENT.CLIENT_FULL_PHONE, dbo.T_CLIENT.CLIENT_ADDRESS, 
                         SUM(dbo.V_SALES_DETAILS.TOTAL  ) AS TOTAL, SUM(dbo.V_SALES_DETAILS.DISCOUNT_AMOUNT_ITEM  ) 
                         AS DISCOUNT_AMOUNT_ITEM, SUM(dbo.V_SALES_DETAILS.TOTAL_COST  ) AS TOTAL_COST, 
                         SUM(dbo.V_SALES_DETAILS.NET_TOTAL  ) AS NET_TOTAL, dbo.V_SALES_DETAILS.CATEGORY_CODE, dbo.V_SALES_DETAILS.CATEGORY_NAME,dbo.T_CLIENT.CLIENT_REGION
FROM            dbo.V_SALES_DETAILS LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.V_SALES_DETAILS.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE
WHERE          V_SALES_DETAILS.BILL_DATE BETWEEN @D1 AND @D2
 
GROUP BY  dbo.V_SALES_DETAILS.CLIENT_CODE, dbo.T_CLIENT.CLIENT_NAME, dbo.T_CLIENT.CLIENT_FULL_PHONE, dbo.T_CLIENT.CLIENT_ADDRESS, dbo.V_SALES_DETAILS.CATEGORY_CODE, dbo.T_CLIENT.CLIENT_REGION,
                         dbo.V_SALES_DETAILS.CATEGORY_NAME
END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_SALES_DETAILS_CLIENT_DIFF]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SALES_DETAILS_CLIENT_DIFF]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_SALES_DETAILS_CLIENT_DIFF]
@DIFF INT
AS

BEGIN
SELECT [CLIENT_CODE]
      ,[CLIENT_NAME]
      ,[CLIENT_TYPE]
      ,[C_TYPE_NAME]
      ,[MANDOOB_CODE]
      ,[MANDOOB_NAME]
      ,[CLIENT_PHONE]
      ,[CLIENT_PHONE_SMS]
      ,[CLIENT_FULL_PHONE]
      ,[CLIENT_REGION]
      ,[CLIENT_ADDRESS]
      ,[CLIENT_BUSINESS]
      ,[LAST_DATE]
      ,[DIFF]
  FROM [dbo].[V_SALES_DETAILS_CLIENT_DIFF] WHERE DIFF >=@DIFF
END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_SALES_DETAILS_CLIENT_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SALES_DETAILS_CLIENT_ITEMS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
















CREATE PROCEDURE [dbo].[PV_SALES_DETAILS_CLIENT_ITEMS]

@D1 DATE,
@D2 DATE
AS

BEGIN
SELECT        dbo.V_SALES_DETAILS.CLIENT_CODE, dbo.T_CLIENT.CLIENT_NAME, dbo.T_CLIENT.CLIENT_FULL_PHONE, dbo.T_CLIENT.CLIENT_ADDRESS, 
                         SUM(dbo.V_SALES_DETAILS.TOTAL  ) AS TOTAL, SUM(dbo.V_SALES_DETAILS.DISCOUNT_AMOUNT_ITEM  ) 
                         AS DISCOUNT_AMOUNT_ITEM, SUM(dbo.V_SALES_DETAILS.TOTAL_COST  ) AS TOTAL_COST, 
                         SUM(dbo.V_SALES_DETAILS.NET_TOTAL  ) AS NET_TOTAL,SUM(dbo.V_SALES_DETAILS.QTY  ) AS QTY, dbo.V_SALES_DETAILS.ITEM_CODE, dbo.V_SALES_DETAILS.ITEM_NAME, dbo.V_SALES_DETAILS.ITEM_SIGN
,dbo.T_CLIENT.CLIENT_REGION
FROM            dbo.V_SALES_DETAILS LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.V_SALES_DETAILS.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE

WHERE          V_SALES_DETAILS.BILL_DATE BETWEEN @D1 AND @D2
 
GROUP BY  dbo.V_SALES_DETAILS.CLIENT_CODE, dbo.T_CLIENT.CLIENT_NAME, dbo.T_CLIENT.CLIENT_FULL_PHONE, dbo.T_CLIENT.CLIENT_ADDRESS, dbo.V_SALES_DETAILS.ITEM_CODE, 
                         dbo.V_SALES_DETAILS.ITEM_NAME, dbo.V_SALES_DETAILS.ITEM_SIGN,dbo.T_CLIENT.CLIENT_REGION
END	--END OF PROGRAM





































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_SALES_DETAILS_CLIENT_IVC]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SALES_DETAILS_CLIENT_IVC]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'












CREATE PROCEDURE [dbo].[PV_SALES_DETAILS_CLIENT_IVC]

@D1 DATE,
@D2 DATE
AS

BEGIN
SELECT       dbo.V_SALES.CLIENT_CODE, dbo.T_CLIENT.CLIENT_NAME, dbo.T_CLIENT.CLIENT_FULL_PHONE, dbo.T_CLIENT.CLIENT_ADDRESS, SUM(dbo.V_SALES.TOTAL_SALES) AS TOTAL, SUM(dbo.V_SALES.TOTAL_DISCOUNT) 
                         AS DISCOUNT_AMOUNT_ITEM, SUM(dbo.V_SALES.TOTAL_COST) AS TOTAL_COST, SUM(dbo.V_SALES.NET_SALES) AS NET_TOTAL, dbo.V_SALES.IVC_CODE, dbo.V_SALES.IVC_NAME, dbo.T_CLIENT.CLIENT_REGION, 
                      SUM(dbo.V_SALES.TOTAL_ARBAH) AS TOTAL_ARBAH
FROM            dbo.V_SALES LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.V_SALES.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE

WHERE          V_SALES.BILL_DATE BETWEEN @D1 AND @D2
 
GROUP BY dbo.V_SALES.CLIENT_CODE, dbo.T_CLIENT.CLIENT_NAME, dbo.T_CLIENT.CLIENT_FULL_PHONE, dbo.T_CLIENT.CLIENT_ADDRESS, dbo.V_SALES.IVC_CODE, dbo.V_SALES.IVC_NAME, dbo.T_CLIENT.CLIENT_REGION
END	--END OF PROGRAM

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_SALES_DETAILS_CLIENT_REGION]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SALES_DETAILS_CLIENT_REGION]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_SALES_DETAILS_CLIENT_REGION]

@D1 DATE,
@D2 DATE
AS

BEGIN
SELECT       dbo.V_SALES.CLIENT_CODE, dbo.T_CLIENT.CLIENT_NAME, dbo.T_CLIENT.CLIENT_FULL_PHONE, dbo.T_CLIENT.CLIENT_ADDRESS, SUM(dbo.V_SALES.TOTAL_SALES) AS TOTAL, SUM(dbo.V_SALES.TOTAL_DISCOUNT) 
                         AS DISCOUNT_AMOUNT_ITEM, SUM(dbo.V_SALES.TOTAL_COST) AS TOTAL_COST, SUM(dbo.V_SALES.NET_SALES) AS NET_TOTAL, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_BUSINESS, 
                      SUM(dbo.V_SALES.TOTAL_ARBAH) AS TOTAL_ARBAH
FROM            dbo.V_SALES LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.V_SALES.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE

WHERE          V_SALES.BILL_DATE BETWEEN @D1 AND @D2
 
GROUP BY dbo.V_SALES.CLIENT_CODE, dbo.T_CLIENT.CLIENT_NAME, dbo.T_CLIENT.CLIENT_FULL_PHONE, dbo.T_CLIENT.CLIENT_ADDRESS,dbo.T_CLIENT.CLIENT_REGION,dbo.T_CLIENT.CLIENT_BUSINESS

END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_SALES_DETAILS_MANDOOB]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SALES_DETAILS_MANDOOB]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_SALES_DETAILS_MANDOOB]

@D1 DATE,
@D2 DATE
AS

BEGIN
SELECT        SUM(dbo.V_SALES.TOTAL_SALES) AS TOTAL, SUM(dbo.V_SALES.TOTAL_DISCOUNT) AS DISCOUNT_AMOUNT_ITEM, SUM(dbo.V_SALES.TOTAL_COST) AS TOTAL_COST, SUM(dbo.V_SALES.NET_SALES) AS NET_TOTAL, 
                         SUM(dbo.V_SALES.TOTAL_ARBAH) AS TOTAL_ARBAH, dbo.V_SALES.MANDOOB_CODE, dbo.T_MANDOOB.MANDOOB_NAME, dbo.T_MANDOOB.MANDOOB_PERCENT
FROM            dbo.V_SALES LEFT OUTER JOIN
                         dbo.T_MANDOOB ON dbo.V_SALES.MANDOOB_CODE = dbo.T_MANDOOB.MANDOOB_CODE

WHERE          V_SALES.BILL_DATE BETWEEN @D1 AND @D2
 
GROUP BY dbo.V_SALES.MANDOOB_CODE, dbo.T_MANDOOB.MANDOOB_NAME, dbo.T_MANDOOB.MANDOOB_PERCENT

END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SANAD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'











CREATE PROCEDURE [dbo].[PV_SANAD]

@D1 DATE,
@D2 DATE
AS

BEGIN

SELECT    TOP (100) PERCENT  dbo.T_SANAD.BILL_BRANCH,  dbo.T_SANAD.BILL_NUMBER, dbo.T_SANAD.BILL_DATE, dbo.T_SANAD.BILL_TIME, dbo.T_SANAD.USER_CREATE, dbo.T_SANAD.CURRANCY_EQUAL, dbo.T_SANAD.FROM_ACCOUNT, dbo.T_SANAD.TO_ACCCOUNT, 
                         dbo.T_SANAD.FROM_ACC, dbo.T_SANAD.TO_ACC, dbo.T_SANAD.AMO_USA, dbo.T_SANAD.AMO_IQ, dbo.T_SANAD.CONV_USA, dbo.T_SANAD.CONV_IQ, dbo.T_SANAD.DESCRIPTION, dbo.T_SANAD.C_DATE, 
                         dbo.T_SANAD.C_UPDATE, dbo.T_SANAD.USER_UPDATE, dbo.T_SANAD.SECURETY_CODE, dbo.T_SANAD.SANAD_ACTIVE, dbo.T_SANAD.MOVE_CODE, dbo.T_MOVE.MOVE_NAME
FROM            dbo.T_SANAD LEFT OUTER JOIN
                         dbo.T_MOVE ON dbo.T_SANAD.MOVE_CODE = dbo.T_MOVE.MOVE_CODE

WHERE    dbo.T_SANAD.SANAD_ACTIVE=1 and    T_SANAD.BILL_DATE BETWEEN @D1 AND @D2
ORDER BY   dbo.T_SANAD.BILL_NUMBER
END	--END OF PROGRAM
































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_SANAD_A5]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SANAD_A5]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PV_SANAD_A5]
@BILL_BRANCH	nvarchar(50)	

AS

BEGIN
SELECT * FROM [dbo].[V_SANAD]
WHERE   BILL_BRANCH LIKE @BILL_BRANCH 

END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_SANAD_A5_CNY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SANAD_A5_CNY]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'














CREATE PROCEDURE [dbo].[PV_SANAD_A5_CNY]
@BILL_BRANCH	nvarchar(50)	

AS

BEGIN
SELECT * FROM [dbo].[V_SANAD_CNY]
WHERE   BILL_BRANCH LIKE @BILL_BRANCH 

END	--END OF PROGRAM



































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_SANAD_DOLLAR_A5]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SANAD_DOLLAR_A5]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[PV_SANAD_DOLLAR_A5]
@BILL_BRANCH	nvarchar(50)	

AS

BEGIN
SELECT * FROM [dbo].[V_SANAD_DOLLAR]
WHERE   BILL_BRANCH LIKE @BILL_BRANCH 

END	--END OF PROGRAM




































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_SANAD_HAWALA_A5]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SANAD_HAWALA_A5]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'














CREATE PROCEDURE [dbo].[PV_SANAD_HAWALA_A5]
@BILL_BRANCH	nvarchar(50)	

AS

BEGIN
SELECT * FROM [dbo].[V_SANAD_HAWALA]
WHERE   BILL_BRANCH LIKE @BILL_BRANCH 

END	--END OF PROGRAM



































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_SANAD_KAYD_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SANAD_KAYD_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'















CREATE PROCEDURE [dbo].[PV_SANAD_KAYD_DETAILS]
@BILL_BRANCH	nvarchar(50)	

AS

BEGIN
SELECT * FROM [dbo].[V_SANAD_KAYD_DETAILS]
WHERE   BILL_BRANCH LIKE @BILL_BRANCH 

END	--END OF PROGRAM




































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_SANAD_SMAH_A5]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_SANAD_SMAH_A5]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'














CREATE PROCEDURE [dbo].[PV_SANAD_SMAH_A5]
@BILL_BRANCH	nvarchar(50)	

AS

BEGIN
SELECT * FROM [dbo].[V_SANAD_SMAH]
WHERE   BILL_BRANCH LIKE @BILL_BRANCH 

END	--END OF PROGRAM



































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_BOX]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_BOX]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[PV_STORE_BOX]
    @COL_NO INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT  
         i.ITEM_CODE,
         i.ITEM_BARCODE AS ITEM_SIGN,
         i.ITEM_NAME,
         i.TYPE_CODE,
         iu.UNIT_CODE,
         iu.UNIT_QTY,
         iu.UNIT_NAME,
         SUM(ISNULL(sb.BALANCE_M, 0)) / iu.UNIT_QTY AS BALANCE,
         iu.DF_SALE,
         iu.DF_STORE,
         iu.DF_BUY,
         IIF(i.ITEM_BARCODE = N'''', i.ITEM_NAME, i.ITEM_BARCODE + '' : '' + i.ITEM_NAME) AS FULL_NAME,
         iu.PRICE_BUY,
         iu.PRICE_COST,
         iu.PRICE_SALE_1,
         iu.PRICE_SALE_2,
         iu.PRICE_SALE_3,
         iu.PRICE_AVG_COST,
         iu.PRICE_SALE_CUR,
         i.CATEGORY_CODE,
         ic.CATEGORY_NAME,
         CASE
            WHEN @COL_NO = 1 THEN iu.PRICE_SALE_1
            WHEN @COL_NO = 2 THEN iu.PRICE_SALE_2
            WHEN @COL_NO = 3 THEN iu.PRICE_SALE_3
            WHEN @COL_NO = 4 THEN iu.PRICE_BUY
            WHEN @COL_NO = 5 THEN iu.PRICE_COST
            WHEN @COL_NO = 6 THEN (
                SELECT ISNULL(SUM(TD.TOTAL_COST) / SUM(IIF(TD.QTY = 0, NULL, TD.QTY)), 0)
                FROM dbo.T_BUY_DETAILS TD
                WHERE TD.ITEM_CODE = i.ITEM_CODE 
                  AND ((TD.BILL_NUMBER = 0 AND TD.ACTIVE = 0) OR (TD.BILL_NUMBER <> 0 AND TD.ACTIVE = 1))
            )
            WHEN @COL_NO = 7 THEN iu.PRICE_SALE_CUR
            ELSE 0
         END AS PRICE_SHOW
    FROM dbo.T_ITEMS i
         INNER JOIN dbo.T_ITEM_UNIT iu ON i.ITEM_CODE = iu.ITEM_CODE
         LEFT JOIN dbo.T_STORE_BOX sb ON i.ITEM_CODE = sb.ITEM_CODE
         LEFT JOIN dbo.T_ITEM_CATEGORY ic ON i.CATEGORY_CODE = ic.CATEGORY_CODE
    WHERE iu.ON_OFF = 1
      AND i.TYPE_CODE <> 5 
      AND i.ITEM_CODE > 0
    GROUP BY 
         i.ITEM_CODE,
         i.ITEM_NAME,
         iu.UNIT_CODE,
         iu.UNIT_NAME,
         iu.UNIT_QTY,
         iu.DF_BUY,
         iu.ON_OFF,
         i.ITEM_BARCODE,
         iu.DF_SALE,
         iu.DF_STORE,
         i.ACTIVE,
         i.TYPE_CODE,
         sb.ACTIVE,
         iu.PRICE_BUY,
         iu.PRICE_COST,
         iu.PRICE_SALE_1,
         iu.PRICE_SALE_2,
         iu.PRICE_SALE_3,
         iu.PRICE_AVG_COST,
         iu.PRICE_SALE_CUR,
         i.CATEGORY_CODE,
         ic.CATEGORY_NAME
    HAVING i.ACTIVE = 1 
       AND sb.ACTIVE = 1
    ORDER BY i.ITEM_CODE;
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_BOX_ALL_B_CODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_BOX_ALL_B_CODE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[PV_STORE_BOX_ALL_B_CODE]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
         i.ITEM_CODE,
         i.ITEM_BARCODE AS ITEM_SIGN,
         i.ITEM_NAME,
         i.CATEGORY_CODE,
         ic.CATEGORY_NAME,
         iu.UNIT_CODE,
         iu.UNIT_NAME,
         (SELECT ISNULL(SUM(bd.QTY_IN * bd.UNIT_QTY), 0)
          FROM dbo.V_BUY_DETAILS bd
          WHERE bd.ITEM_CODE = i.ITEM_CODE) AS TOT_BUY,
         (SELECT ISNULL(SUM(sb.BALANCE_M), 0)
          FROM dbo.T_STORE_BOX sb
          WHERE sb.ITEM_CODE = i.ITEM_CODE AND sb.B_CODE = 24 AND sb.ACTIVE = 1) AS TOT_TALAF,
         (SELECT ISNULL(SUM(sb2.BALANCE_M), 0)
          FROM dbo.T_STORE_BOX sb2
          WHERE sb2.ITEM_CODE = i.ITEM_CODE AND sb2.B_CODE = 25 AND sb2.ACTIVE = 1) AS TOT_ADD,
         (SELECT ISNULL(SUM(sd.QTY * sd.UNIT_QTY), 0)
          FROM dbo.V_SALES_DETAILS sd
          WHERE sd.ITEM_CODE = i.ITEM_CODE AND sd.QTY > 0 AND sd.ACTIVE = 1) AS TOT_SALES,
         (SELECT ISNULL(SUM(bd2.QTY * bd2.UNIT_QTY), 0)
          FROM dbo.T_BUY_DETAILS bd2
          WHERE bd2.BILL_NUMBER = 0 AND bd2.ITEM_CODE = i.ITEM_CODE AND bd2.ACTIVE = 0) AS TOT_START,
         (SELECT ISNULL(SUM(sd2.QTY * sd2.UNIT_QTY) * -1, 0)
          FROM dbo.V_SALES_DETAILS sd2
          WHERE sd2.ITEM_CODE = i.ITEM_CODE AND sd2.QTY < 0) AS TOT_SALES_RETARN,
         (SELECT ISNULL(SUM(bd3.QTY_OUT * bd3.UNIT_QTY), 0)
          FROM dbo.V_BUY_DETAILS bd3
          WHERE bd3.ITEM_CODE = i.ITEM_CODE) AS TOT_BUY_RETARN
    FROM dbo.T_ITEMS i
         LEFT JOIN dbo.T_ITEM_UNIT iu ON i.ITEM_CODE = iu.ITEM_CODE
         LEFT JOIN dbo.T_ITEM_CATEGORY ic ON i.CATEGORY_CODE = ic.CATEGORY_CODE
    WHERE i.ACTIVE = 1 
      AND iu.UNIT_CODE = 1 
      AND i.ITEM_CODE > 0
    ORDER BY i.ITEM_CODE;
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_BOX_MOVE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_BOX_MOVE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[PV_STORE_BOX_MOVE]
    @ITEM_CODE INT,
    @D1 DATE,
    @D2 DATE
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
         sb.T_ID,
         sb.BILL_BRANCH,
         sb.BILL_NUMBER,
         sb.B_CODE,
         bt.B_NAME,
         sb.WAJBA_CODE,
         w.WAJBA_NAME,
         sb.STORE_CODE,
         sb.EXP_DATE,
         sb.ITEM_CODE,
         i.ITEM_BARCODE AS ITEM_SIGN,
         i.ITEM_NAME,
         i.CATEGORY_CODE,
         ic.CATEGORY_NAME,
         sb.UNIT_CODE,
         iu.UNIT_NAME,
         sb.ST_IN,
         sb.ST_OUT,
         sb.ST_BALANCE,
         sb.QTY_UNIT,
         sb.IN_M,
         sb.OUT_M,
         sb.BALANCE_M,
         sb.BILL_DATE,
         st.STORE_NAME
    FROM dbo.T_STORE_BOX sb
         LEFT JOIN dbo.T_ITEM_UNIT iu 
             ON sb.ITEM_CODE = iu.ITEM_CODE AND sb.UNIT_CODE = iu.UNIT_CODE
         LEFT JOIN dbo.T_ITEMS i 
             ON sb.ITEM_CODE = i.ITEM_CODE
         LEFT JOIN dbo.T_STORE_TYPE st 
             ON sb.STORE_CODE = st.STORE_CODE
         LEFT JOIN dbo.T_WAJBA w 
             ON sb.WAJBA_CODE = w.WAJBA_CODE
         LEFT JOIN dbo.T_BILL_TYPE bt 
             ON sb.B_CODE = bt.B_CODE
         LEFT JOIN dbo.T_ITEM_CATEGORY ic 
             ON i.CATEGORY_CODE = ic.CATEGORY_CODE
    WHERE sb.ACTIVE = 1
      AND sb.BILL_DATE BETWEEN @D1 AND @D2
      AND sb.ITEM_CODE = @ITEM_CODE
    ORDER BY sb.T_ID;
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_BOX_PHOTO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_BOX_PHOTO]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[PV_STORE_BOX_PHOTO]
    @COL_NO INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT  
         i.ITEM_CODE,
         i.ITEM_BARCODE AS ITEM_SIGN,
         i.ITEM_NAME,
         i.TYPE_CODE,
         i.IMG_URL,
         i.ITEM_NOTE,
         iu.UNIT_CODE,
         iu.UNIT_QTY,
         iu.UNIT_NAME,
         SUM(ISNULL(sb.BALANCE_M, 0)) / iu.UNIT_QTY AS BALANCE,
         iu.DF_SALE,
         iu.DF_STORE,
         iu.DF_BUY,
         IIF(i.ITEM_BARCODE = N'''', i.ITEM_NAME, i.ITEM_BARCODE + '' : '' + i.ITEM_NAME) AS FULL_NAME,
         iu.PRICE_BUY,
         iu.PRICE_COST,
         iu.PRICE_SALE_1,
         iu.PRICE_SALE_2,
         iu.PRICE_SALE_3,
         iu.PRICE_AVG_COST,
         iu.PRICE_SALE_CUR,
         i.CATEGORY_CODE,
         ic.CATEGORY_NAME,
         CASE
            WHEN @COL_NO = 1 THEN iu.PRICE_SALE_1
            WHEN @COL_NO = 2 THEN iu.PRICE_SALE_2
            WHEN @COL_NO = 3 THEN iu.PRICE_SALE_3
            WHEN @COL_NO = 4 THEN iu.PRICE_BUY
            WHEN @COL_NO = 5 THEN iu.PRICE_COST
            WHEN @COL_NO = 6 THEN (
                SELECT ISNULL(SUM(TD.TOTAL_COST) / SUM(IIF(TD.QTY = 0, NULL, TD.QTY)), 0)
                FROM dbo.T_BUY_DETAILS TD
                WHERE TD.ITEM_CODE = i.ITEM_CODE 
                  AND ((TD.BILL_NUMBER = 0 AND TD.ACTIVE = 0) OR (TD.BILL_NUMBER <> 0 AND TD.ACTIVE = 1))
            )
            WHEN @COL_NO = 7 THEN iu.PRICE_SALE_CUR
            ELSE 0
         END AS PRICE_SHOW
    FROM dbo.T_ITEMS i
         INNER JOIN dbo.T_ITEM_UNIT iu ON i.ITEM_CODE = iu.ITEM_CODE
         LEFT JOIN dbo.T_STORE_BOX sb ON i.ITEM_CODE = sb.ITEM_CODE
         LEFT JOIN dbo.T_ITEM_CATEGORY ic ON i.CATEGORY_CODE = ic.CATEGORY_CODE
    WHERE iu.ON_OFF = 1
      AND i.TYPE_CODE <> 5
    GROUP BY 
         i.ITEM_CODE,
         i.ITEM_NAME,
         i.TYPE_CODE,
         i.IMG_URL,
         i.ITEM_NOTE,
         iu.UNIT_CODE,
         iu.UNIT_QTY,
         iu.UNIT_NAME,
         iu.DF_SALE,
         iu.DF_STORE,
         iu.DF_BUY,
         i.ITEM_BARCODE,
         iu.PRICE_BUY,
         iu.PRICE_COST,
         iu.PRICE_SALE_1,
         iu.PRICE_SALE_2,
         iu.PRICE_SALE_3,
         iu.PRICE_AVG_COST,
         iu.PRICE_SALE_CUR,
         i.CATEGORY_CODE,
         ic.CATEGORY_NAME,
         sb.ACTIVE,
         i.ACTIVE
    HAVING i.ACTIVE = 1 
       AND sb.ACTIVE = 1
    ORDER BY i.ITEM_CODE;
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_BOX_PRICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_BOX_PRICE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[PV_STORE_BOX_PRICE]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT  
         i.ITEM_CODE,
         i.ITEM_BARCODE AS ITEM_SIGN,
         i.ITEM_NAME,
         i.TYPE_CODE,
         iu.UNIT_CODE,
         iu.UNIT_QTY,
         iu.UNIT_NAME,
         SUM(ISNULL(sb.BALANCE_M, 0)) / iu.UNIT_QTY AS BALANCE,
         iu.DF_SALE,
         iu.DF_STORE,
         iu.DF_BUY,
         IIF(i.ITEM_BARCODE = N'''', i.ITEM_NAME, i.ITEM_BARCODE + '' : '' + i.ITEM_NAME) AS FULL_NAME,
         iu.PRICE_BUY,
         iu.PRICE_COST,
         iu.PRICE_SALE_1,
         iu.PRICE_SALE_2,
         iu.PRICE_SALE_3,
         iu.PRICE_AVG_COST,
         iu.PRICE_SALE_CUR,
         i.CATEGORY_CODE,
         ic.CATEGORY_NAME,
         (
           SELECT ISNULL(SUM(TD.TOTAL_COST) / SUM(IIF(TD.QTY = 0, NULL, TD.QTY)), 0)
           FROM dbo.T_BUY_DETAILS TD
           WHERE TD.ITEM_CODE = i.ITEM_CODE
             AND ((TD.BILL_NUMBER = 0 AND TD.ACTIVE = 0)
               OR (TD.BILL_NUMBER <> 0 AND TD.ACTIVE = 1))
         ) AS AVG_BUY
    FROM dbo.T_ITEMS i
         INNER JOIN dbo.T_ITEM_UNIT iu ON i.ITEM_CODE = iu.ITEM_CODE
         LEFT JOIN dbo.T_STORE_BOX sb ON i.ITEM_CODE = sb.ITEM_CODE
         LEFT JOIN dbo.T_ITEM_CATEGORY ic ON i.CATEGORY_CODE = ic.CATEGORY_CODE
    WHERE iu.ON_OFF = 1
      AND i.TYPE_CODE <> 5
    GROUP BY 
         i.ITEM_CODE,
         i.ITEM_NAME,
         iu.UNIT_CODE,
         iu.UNIT_NAME,
         iu.UNIT_QTY,
         iu.DF_BUY,
         iu.ON_OFF,
         i.ITEM_BARCODE,
         iu.DF_SALE,
         iu.DF_STORE,
         i.ACTIVE,
         i.TYPE_CODE,
         sb.ACTIVE,
         iu.PRICE_BUY,
         iu.PRICE_COST,
         iu.PRICE_SALE_1,
         iu.PRICE_SALE_2,
         iu.PRICE_SALE_3,
         iu.PRICE_AVG_COST,
         iu.PRICE_SALE_CUR,
         i.CATEGORY_CODE,
         ic.CATEGORY_NAME
    HAVING i.ACTIVE = 1
       AND sb.ACTIVE = 1
    ORDER BY i.ITEM_CODE;
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_BOX_QTYMIN]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_BOX_QTYMIN]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[PV_STORE_BOX_QTYMIN]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
         vs.ITEM_CODE,
         vs.ITEM_BARCODE AS ITEM_SIGN,
         vs.ITEM_NAME,
         vs.CATEGORY_CODE,
         vs.CATEGORY_NAME,
         vs.UNIT_CODE,
         vs.UNIT_QTY,
         vs.UNIT_NAME,
         vs.BALANCE,
         vs.DF_STORE,
         ti.QTY_MIN
    FROM dbo.V_STORE_BOX vs
         LEFT JOIN dbo.T_ITEMS ti 
             ON vs.ITEM_CODE = ti.ITEM_CODE
    WHERE vs.DF_STORE = 1
      AND ti.QTY_MIN > vs.BALANCE
      AND vs.TYPE_CODE <> 5
    ORDER BY vs.ITEM_CODE;
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_BOX_QTYMIN_GSTORE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_BOX_QTYMIN_GSTORE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[PV_STORE_BOX_QTYMIN_GSTORE]
AS
BEGIN
    SELECT 
         V.ITEM_CODE,
         T.ITEM_BARCODE AS ITEM_SIGN,
         T.ITEM_NAME,
         V.CATEGORY_CODE,
         C.CATEGORY_NAME,
         IIF(T.DF_SALE = 1, 2, 1) AS UNIT_CODE,
         IIF(T.DF_SALE = 1, T.UNIT2_QTY, 1) AS UNIT_QTY,
         IIF(T.DF_SALE = 1, T.UNIT2_NAME, T.UNIT_NAME) AS UNIT_NAME,
         IIF(T.DF_SALE = 1, V.BALANCE / T.UNIT2_QTY, V.BALANCE) AS BALANCE,
         T.QTY_MIN,
         V.STORE_CODE,
         V.STORE_NAME
    FROM dbo.V_ITEMS_BALANCE_MIN_STORE AS V
    INNER JOIN dbo.T_ITEMS AS T 
           ON V.ITEM_CODE = T.ITEM_CODE
    INNER JOIN dbo.T_ITEM_CATEGORY AS C 
           ON T.CATEGORY_CODE = C.CATEGORY_CODE
    WHERE T.QTY_MIN > IIF(T.DF_SALE = 1, V.BALANCE / T.UNIT2_QTY, V.BALANCE)
      AND T.TYPE_CODE <> 5
    ORDER BY T.ITEM_NAME;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_BOX_QTYMIN_NOTIFICATION]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_BOX_QTYMIN_NOTIFICATION]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[PV_STORE_BOX_QTYMIN_NOTIFICATION]
AS
BEGIN
    DECLARE @CountSetting INT;
    
    -- استرجاع قيمة الإعداد من جدول الإشعارات
    SELECT @CountSetting = COUNT_SETTING
    FROM T_NOTIFICATION
    WHERE NOTI_CODE = 1;
    
    SELECT 
         VS.ITEM_CODE,
         VS.SHOW_MENU,
         VS.ITEM_BARCODE AS ITEM_SIGN,
         VS.ITEM_NAME,
         VS.TYPE_CODE,
         VS.UNIT_CODE,
         VS.UNIT_QTY,
         VS.UNIT_NAME,
         VS.BALANCE,
         VS.DF_SALE,
         VS.DF_STORE,
         VS.DF_BUY,
         VS.FULL_NAME,
         VS.PRICE_BUY,
         VS.PRICE_COST,
         VS.PRICE_SALE_1,
         VS.PRICE_SALE_2,
         VS.PRICE_SALE_3,
         VS.PRICE_AVG_COST,
         VS.PRICE_SALE_CUR,
         VS.CATEGORY_CODE,
         VS.CATEGORY_NAME,
         SA.LastSale AS LAST_SALE,
         DATEDIFF(DAY, SA.LastSale, GETDATE()) AS LAST_DIFF,
         VS.IS_USED,
         VS.SHOW_MENU_CAT,
         VS.TIME_USE,
         VS.QTY_MIN
    FROM dbo.V_STORE_BOX AS VS
    CROSS APPLY
    (
         SELECT ISNULL(MAX(BILL_DATE), DATEADD(DAY, 1, GETDATE())) AS LastSale
         FROM dbo.V_SALES_DETAILS AS VSD
         WHERE VSD.ITEM_CODE = VS.ITEM_CODE
    ) AS SA
    WHERE VS.DF_STORE = 1 
      AND DATEDIFF(DAY, SA.LastSale, GETDATE()) BETWEEN 0 AND @CountSetting
      AND VS.BALANCE <= VS.QTY_MIN
    ORDER BY VS.ITEM_CODE;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_BOX_STORE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_BOX_STORE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[PV_STORE_BOX_STORE]
    @COL_NO INT
AS
BEGIN
    SET NOCOUNT ON;

    /* 1) عناصر فعالة وغير نوع 5 */
    ;WITH I AS (
        SELECT T.ITEM_CODE,
               T.ITEM_BARCODE,
               T.ITEM_NAME,
               T.TYPE_CODE,
               T.CATEGORY_CODE,
               T.ACTIVE
        FROM dbo.T_ITEMS AS T WITH (NOLOCK)
        WHERE T.ACTIVE = 1
          AND T.TYPE_CODE <> 5
    ),

    /* 2) وحدات فعّالة فقط */
    U AS (
        SELECT U.ITEM_CODE,
               U.UNIT_CODE,
               U.UNIT_QTY,
               U.UNIT_NAME,
               U.DF_SALE, U.DF_STORE, U.DF_BUY,
               U.PRICE_BUY, U.PRICE_COST,
               U.PRICE_SALE_1, U.PRICE_SALE_2, U.PRICE_SALE_3,
               U.PRICE_AVG_COST, U.PRICE_SALE_CUR
        FROM dbo.T_ITEM_UNIT AS U WITH (NOLOCK)
        WHERE U.ON_OFF = 1
          AND U.UNIT_QTY > 0
    ),

    /* 3) تجميع الجرد مرّة واحدة (ACTIVE=1 فقط) */
    S AS (
        SELECT SB.ITEM_CODE,
               SB.STORE_CODE,
               SUM(ISNULL(SB.BALANCE_M,0)) AS BALANCE_M_SUM
        FROM dbo.T_STORE_BOX AS SB WITH (NOLOCK)
        WHERE SB.ACTIVE = 1
        GROUP BY SB.ITEM_CODE, SB.STORE_CODE
    ),

    /* 4) متوسط تكلفة الشراء لكل مادة مرّة واحدة
          الشرط المكافئ لِما في CASE @COL_NO=6  */
    BUY_AGG AS (
        SELECT TD.ITEM_CODE,
               CAST(
                   ISNULL(SUM(TD.TOTAL_COST) / NULLIF(SUM(CASE WHEN TD.QTY = 0 THEN 0 ELSE TD.QTY * TD.UNIT_QTY END), 0), 0)
               AS DECIMAL(18,6)) AS AVG_COST_PER_MIN_UNIT
        FROM dbo.T_BUY_DETAILS AS TD WITH (NOLOCK)
        WHERE ( (TD.BILL_NUMBER = 0 AND TD.ACTIVE = 0)
             OR (TD.BILL_NUMBER <> 0 AND TD.ACTIVE = 1) )
        GROUP BY TD.ITEM_CODE
    )

    SELECT
        I.ITEM_CODE,
        I.ITEM_BARCODE AS ITEM_SIGN,
        I.ITEM_NAME,
        I.TYPE_CODE,

        U.UNIT_CODE,
        U.UNIT_QTY,
        U.UNIT_NAME,

        /* الرصيد بوحدة البيع */
        CAST(S.BALANCE_M_SUM / U.UNIT_QTY AS DECIMAL(38,6)) AS BALANCE,

        U.DF_SALE, U.DF_STORE, U.DF_BUY,

        /* الاسم الكامل */
        CASE WHEN I.ITEM_BARCODE = N'''' THEN I.ITEM_NAME
             ELSE I.ITEM_BARCODE + N'' : '' + I.ITEM_NAME END AS FULL_NAME,

        U.PRICE_BUY, U.PRICE_COST,
        U.PRICE_SALE_1, U.PRICE_SALE_2, U.PRICE_SALE_3,
        U.PRICE_AVG_COST, U.PRICE_SALE_CUR,

        I.CATEGORY_CODE,
        C.CATEGORY_NAME,

        S.STORE_CODE,
        ST.STORE_NAME,

        /* اختيار السعر المعروض */
        CASE @COL_NO
            WHEN 1 THEN U.PRICE_SALE_1
            WHEN 2 THEN U.PRICE_SALE_2
            WHEN 3 THEN U.PRICE_SALE_3
            WHEN 4 THEN U.PRICE_BUY
            WHEN 5 THEN U.PRICE_COST
            WHEN 6 THEN ISNULL(BA.AVG_COST_PER_MIN_UNIT, 0) * U.UNIT_QTY
            WHEN 7 THEN U.PRICE_SALE_CUR
            ELSE 0
        END AS PRICE_SHOW
    FROM I
    INNER JOIN U
        ON I.ITEM_CODE = U.ITEM_CODE
    INNER JOIN S
        ON I.ITEM_CODE = S.ITEM_CODE
    INNER JOIN dbo.T_STORE_TYPE AS ST WITH (NOLOCK)
        ON S.STORE_CODE = ST.STORE_CODE
    LEFT  JOIN dbo.T_ITEM_CATEGORY AS C WITH (NOLOCK)
        ON I.CATEGORY_CODE = C.CATEGORY_CODE
    LEFT  JOIN BUY_AGG AS BA
        ON I.ITEM_CODE = BA.ITEM_CODE
    WHERE
        /* رصيد ليس صفراً بوحدة البيع */
        (S.BALANCE_M_SUM / U.UNIT_QTY) <> 0
    ORDER BY I.ITEM_CODE;
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[PV_STORE_TRANFARE_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PV_STORE_TRANFARE_DETAILS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[PV_STORE_TRANFARE_DETAILS]
    @D1 DATE,
    @D2 DATE
AS
BEGIN
    SELECT 
         ST.BILL_BRANCH,
         ST.BILL_NUMBER,
         ST.BILL_DATE,
         ST.USER_CREATE,
         ST.FROM_STORE,
         ST_FROM.STORE_NAME AS FROM_STORE_NAME,
         ST.TO_STORE,
         ST_TO.STORE_NAME AS TO_STORE_NAME,
         ST.DESCRIPTION,
         ST.DRIVER_NAME,
         ST.DRIVER_PHONE,
         ST.CAR_NO,
         STD.ITEM_CODE,
         TI.ITEM_BARCODE AS ITEM_SIGN,
         TI.ITEM_NAME,
         TI.CATEGORY_CODE,
         TIC.CATEGORY_NAME,
         STD.QTY,
         STD.UNIT_CODE,
         STD.UNIT_NAME,
         STD.UNIT_QTY,
         STD.WAJBA_CODE,
         STD.WAJBA_NAME
    FROM dbo.T_STORE_TRANSFARE AS ST
    INNER JOIN dbo.T_STORE_TRANSFARE_DETAILS AS STD
           ON ST.BILL_NUMBER = STD.BILL_NUMBER
    INNER JOIN dbo.T_STORE_TYPE AS ST_FROM
           ON ST_FROM.STORE_CODE = ST.FROM_STORE
    INNER JOIN dbo.T_STORE_TYPE AS ST_TO
           ON ST_TO.STORE_CODE = ST.TO_STORE
    INNER JOIN dbo.T_ITEMS AS TI
           ON TI.ITEM_CODE = STD.ITEM_CODE
    LEFT JOIN dbo.T_ITEM_CATEGORY AS TIC
           ON TI.CATEGORY_CODE = TIC.CATEGORY_CODE
    WHERE ST.ACTIVE = 1
      AND ST.BILL_DATE BETWEEN @D1 AND @D2
    ORDER BY ST.BILL_NUMBER ASC;
END;
' 
END
GO
/****** Object:  StoredProcedure [dbo].[PVB_GET_AQED_AYGAR]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PVB_GET_AQED_AYGAR]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'













CREATE PROCEDURE [dbo].[PVB_GET_AQED_AYGAR]

@T_ID INT
AS

BEGIN

SELECT * FROM VB_AQED_AYGAR WHERE T_ID=@T_ID
END	--END OF PROGRAM


































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PVB_GET_HOUSE_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PVB_GET_HOUSE_CLIENT]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'












CREATE PROCEDURE [dbo].[PVB_GET_HOUSE_CLIENT]

@HOUSE_CODE INT
AS

BEGIN

SELECT * FROM VB_HOUSE_CLIENT WHERE HOUSE_CODE=@HOUSE_CODE
END	--END OF PROGRAM

































' 
END
GO
/****** Object:  StoredProcedure [dbo].[PVB_SERVICE_BALANCE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PVB_SERVICE_BALANCE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[PVB_SERVICE_BALANCE]
    @SERVICE_CODE INT,
    @D1 DATE,
    @D2 DATE
AS
BEGIN
    SELECT 
         S.*,
         CA_INCOME.INCOME_BALANCE,
         CA_OUTCOME.OUTCOME_BALANCE
    FROM dbo.TB_SERVICE AS S
    CROSS APPLY (
         SELECT ISNULL(SUM(DEBIT_CUR - CREDIT_CUR), 0) * -1 AS INCOME_BALANCE
         FROM V_BOX
         WHERE ACCOUNT_CODE LIKE S.SERVICE_ACCOUNT_CODE_INCOME
           AND BILL_DATE BETWEEN @D1 AND @D2
    ) AS CA_INCOME
    CROSS APPLY (
         SELECT ISNULL(SUM(DEBIT_CUR - CREDIT_CUR), 0) AS OUTCOME_BALANCE
         FROM V_BOX
         WHERE ACCOUNT_CODE LIKE S.SERVICE_ACCOUNT_CODE_OUTCOME
           AND BILL_DATE BETWEEN @D1 AND @D2
    ) AS CA_OUTCOME
    WHERE S.SERVICE_CODE = @SERVICE_CODE;
END;
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[parseJSON]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[parseJSON]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[parseJSON]( @JSON NVARCHAR(MAX))
/*
-- Create by Phil Factor	15 November 2010
-- Update by Kaden Mai		21 August 2014
-- How to Use	http://mtkcode.blogspot.com/2014/08/parse-json-string-by-sql-script.html
*/
RETURNS @hierarchy TABLE
  (
   element_id INT IDENTITY(1, 1) NOT NULL, /* internal surrogate primary key gives the order of parsing and the list order */
   sequenceNo [int] NULL, /* the place in the sequence for the element */
   parent_ID INT,/* if the element has a parent then it is in this column. The document is the ultimate parent, so you can get the structure from recursing from the document */
   Object_ID INT,/* each list or object has an object id. This ties all elements to a parent. Lists are treated as objects here */
   NAME NVARCHAR(2000),/* the name of the object */
   StringValue NVARCHAR(MAX) NOT NULL,/*the string representation of the value of the element. */
   ValueType VARCHAR(10) NOT null /* the declared type of the value represented as a string in StringValue*/
  )
AS
BEGIN
  DECLARE
    @FirstObject INT, --the index of the first open bracket found in the JSON string
    @OpenDelimiter INT,--the index of the next open bracket found in the JSON string
    @NextOpenDelimiter INT,--the index of subsequent open bracket found in the JSON string
    @NextCloseDelimiter INT,--the index of subsequent close bracket found in the JSON string
    @Type NVARCHAR(10),--whether it denotes an object or an array
    @NextCloseDelimiterChar CHAR(1),--either a ''}'' or a '']''
    @Contents NVARCHAR(MAX), --the unparsed contents of the bracketed expression
    @Start INT, --index of the start of the token that you are parsing
    @end INT,--index of the end of the token that you are parsing
    @param INT,--the parameter at the end of the next Object/Array token
    @EndOfName INT,--the index of the start of the parameter at end of Object/Array token
    @token NVARCHAR(200),--either a string or object
    @value NVARCHAR(MAX), -- the value as a string
    @SequenceNo int, -- the sequence number within a list
    @name NVARCHAR(200), --the name as a string
    @parent_ID INT,--the next parent ID to allocate
    @lenJSON INT,--the current length of the JSON String
    @characters NCHAR(36),--used to convert hex to decimal
    @result BIGINT,--the value of the hex symbol being parsed
    @index SMALLINT,--used for parsing the hex value
    @Escape INT --the index of the next escape character
   
 
  DECLARE @Strings TABLE /* in this temporary table we keep all strings, even the names of the elements, since they are ''escaped'' in a different way, and may contain, unescaped, brackets denoting objects or lists. These are replaced in the JSON string by tokens representing the string */
    (
     String_ID INT IDENTITY(1, 1),
     StringValue NVARCHAR(MAX)
    )
  SELECT--initialise the characters to convert hex to ascii
    @characters=''0123456789abcdefghijklmnopqrstuvwxyz'',
    @SequenceNo=0, --set the sequence no. to something sensible.
  /* firstly we process all strings. This is done because [{} and ] aren''t escaped in strings, which complicates an iterative parse. */
    @parent_ID=0;
  WHILE 1=1 --forever until there is nothing more to do
    BEGIN
      SELECT
        @start=PATINDEX(''%[^a-zA-Z]["]%'', @json collate SQL_Latin1_General_CP850_Bin);--next delimited string
      IF @start=0 BREAK --no more so drop through the WHILE loop
      IF SUBSTRING(@json, @start+1, 1)=''"''
        BEGIN --Delimited Name
          SET @start=@Start+1;
          SET @end=PATINDEX(''%[^\]["]%'', RIGHT(@json, LEN(@json+''|'')-@start) collate SQL_Latin1_General_CP850_Bin);
        END
      IF @end=0 --no end delimiter to last string
        BREAK --no more
      SELECT @token=SUBSTRING(@json, @start+1, @end-1)
      --now put in the escaped control characters
      SELECT @token=REPLACE(@token, FROMString, TOString)
      FROM
        (SELECT
          ''\"'' AS FromString, ''"'' AS ToString
         UNION ALL SELECT ''\\'', ''\''
         UNION ALL SELECT ''\/'', ''/''
         UNION ALL SELECT ''\b'', CHAR(08)
         UNION ALL SELECT ''\f'', CHAR(12)
         UNION ALL SELECT ''\n'', CHAR(10)
         UNION ALL SELECT ''\r'', CHAR(13)
         UNION ALL SELECT ''\t'', CHAR(09)
        ) substitutions
      SELECT @result=0, @escape=1
  --Begin to take out any hex escape codes
      WHILE @escape>0
        BEGIN
          SELECT @index=0,
          --find the next hex escape sequence
          @escape=PATINDEX(''%\x[0-9a-f][0-9a-f][0-9a-f][0-9a-f]%'', @token collate SQL_Latin1_General_CP850_Bin)
          IF @escape>0 --if there is one
            BEGIN
              WHILE @index<4 --there are always four digits to a \x sequence  
                BEGIN
                  SELECT --determine its value
                    @result=@result+POWER(16, @index)
                    *(CHARINDEX(SUBSTRING(@token, @escape+2+3-@index, 1),
                                @characters)-1), @index=@index+1 ;
        
                END
                -- and replace the hex sequence by its unicode value
              SELECT @token=STUFF(@token, @escape, 6, NCHAR(@result))
            END
        END
      --now store the string away
      INSERT INTO @Strings (StringValue) SELECT @token
      -- and replace the string with a token
      SELECT @JSON=STUFF(@json, @start, @end+1,
                    ''@string''+CONVERT(NVARCHAR(5), @@identity))
    END
  -- all strings are now removed. Now we find the first leaf. 
  WHILE 1=1  --forever until there is nothing more to do
  BEGIN
 
  SELECT @parent_ID=@parent_ID+1
  --find the first object or list by looking for the open bracket
  SELECT @FirstObject=PATINDEX(''%[{[[]%'', @json collate SQL_Latin1_General_CP850_Bin)--object or array
  IF @FirstObject = 0 BREAK
  IF (SUBSTRING(@json, @FirstObject, 1)=''{'')
    SELECT @NextCloseDelimiterChar=''}'', @type=''object''
  ELSE
    SELECT @NextCloseDelimiterChar='']'', @type=''array''
  SELECT @OpenDelimiter=@firstObject
 
  WHILE 1=1 --find the innermost object or list...
    BEGIN
      SELECT
        @lenJSON=LEN(@JSON+''|'')-1
  --find the matching close-delimiter proceeding after the open-delimiter
      SELECT
        @NextCloseDelimiter=CHARINDEX(@NextCloseDelimiterChar, @json,
                                      @OpenDelimiter+1)
  --is there an intervening open-delimiter of either type
      SELECT @NextOpenDelimiter=PATINDEX(''%[{[[]%'',
             RIGHT(@json, @lenJSON-@OpenDelimiter)collate SQL_Latin1_General_CP850_Bin)--object
      IF @NextOpenDelimiter=0
        BREAK
      SELECT @NextOpenDelimiter=@NextOpenDelimiter+@OpenDelimiter
      IF @NextCloseDelimiter<@NextOpenDelimiter
        BREAK
      IF SUBSTRING(@json, @NextOpenDelimiter, 1)=''{''
        SELECT @NextCloseDelimiterChar=''}'', @type=''object''
      ELSE
        SELECT @NextCloseDelimiterChar='']'', @type=''array''
      SELECT @OpenDelimiter=@NextOpenDelimiter
    END
  ---and parse out the list or name/value pairs
  SELECT
    @contents=SUBSTRING(@json, @OpenDelimiter+1,
                        @NextCloseDelimiter-@OpenDelimiter-1)
  SELECT
    @JSON=STUFF(@json, @OpenDelimiter,
                @NextCloseDelimiter-@OpenDelimiter+1,
                ''@''+@type+CONVERT(NVARCHAR(5), @parent_ID))
  WHILE (PATINDEX(''%[A-Za-z0-9@+.e]%'', @contents collate SQL_Latin1_General_CP850_Bin))<>0
    BEGIN
      IF @Type=''Object'' --it will be a 0-n list containing a string followed by a string, number,boolean, or null
        BEGIN
          SELECT
            @SequenceNo=0,@end=CHARINDEX('':'', '' ''+@contents)--if there is anything, it will be a string-based name.
          SELECT  @start=PATINDEX(''%[^A-Za-z@][@]%'', '' ''+@contents collate SQL_Latin1_General_CP850_Bin)--AAAAAAAA
          SELECT @token=SUBSTRING('' ''+@contents, @start+1, @End-@Start-1),
            @endofname=PATINDEX(''%[0-9]%'', @token collate SQL_Latin1_General_CP850_Bin),
            @param=RIGHT(@token, LEN(@token)-@endofname+1)
          SELECT
            @token=LEFT(@token, @endofname-1),
            @Contents=RIGHT('' ''+@contents, LEN('' ''+@contents+''|'')-@end-1)
          SELECT  @name=stringvalue FROM @strings
            WHERE string_id=@param --fetch the name
        END
      ELSE
        SELECT @Name=null,@SequenceNo=@SequenceNo+1
      SELECT
        @end=CHARINDEX('','', @contents)-- a string-token, object-token, list-token, number,boolean, or null
      IF @end=0
        SELECT  @end=PATINDEX(''%[A-Za-z0-9@+.e][^A-Za-z0-9@+.e]%'', @Contents+'' '' collate SQL_Latin1_General_CP850_Bin)
          +1
       SELECT
         @start=PATINDEX(''%[^A-Za-z0-9@+.e][A-Za-z0-9@+.e][\-]%'', '' ''+@contents collate SQL_Latin1_General_CP850_Bin)
		-- Edited: add more condition [\-] in order to detect negative number 08-20-2014
      --select @start,@end, LEN(@contents+''|''), @contents 
      SELECT
        @Value=RTRIM(SUBSTRING(@contents, @start, @End-@Start)),
        @Contents=RIGHT(@contents+'' '', LEN(@contents+''|'')-@end)
      IF SUBSTRING(@value, 1, 7)=''@object''
        INSERT INTO @hierarchy
          (NAME, SequenceNo, parent_ID, StringValue, Object_ID, ValueType)
          SELECT @name, @SequenceNo, @parent_ID, SUBSTRING(@value, 8, 5),
            SUBSTRING(@value, 8, 5), ''object''
      ELSE
        IF SUBSTRING(@value, 1, 6)=''@array''
          INSERT INTO @hierarchy
            (NAME, SequenceNo, parent_ID, StringValue, Object_ID, ValueType)
            SELECT @name, @SequenceNo, @parent_ID, SUBSTRING(@value, 7, 5),
              SUBSTRING(@value, 7, 5), ''array''
        ELSE
          IF SUBSTRING(@value, 1, 7)=''@string''
            INSERT INTO @hierarchy
              (NAME, SequenceNo, parent_ID, StringValue, ValueType)
              SELECT @name, @SequenceNo, @parent_ID, stringvalue, ''string''
              FROM @strings
              WHERE string_id=SUBSTRING(@value, 8, 5)
          ELSE
            IF @value IN (''true'', ''false'')
              INSERT INTO @hierarchy
                (NAME, SequenceNo, parent_ID, StringValue, ValueType)
                SELECT @name, @SequenceNo, @parent_ID, @value, ''boolean''
            ELSE
              IF @value=''null''
                INSERT INTO @hierarchy
                  (NAME, SequenceNo, parent_ID, StringValue, ValueType)
                  SELECT @name, @SequenceNo, @parent_ID, @value, ''null''
              ELSE
                IF PATINDEX(''%[^0-9]%'', @value collate SQL_Latin1_General_CP850_Bin)>0
                  INSERT INTO @hierarchy
                    (NAME, SequenceNo, parent_ID, StringValue, ValueType)
                    SELECT @name, @SequenceNo, @parent_ID, @value, ''real''
                ELSE
                  INSERT INTO @hierarchy
                    (NAME, SequenceNo, parent_ID, StringValue, ValueType)
                    SELECT @name, @SequenceNo, @parent_ID, @value, ''int''
      if @Contents='' '' Select @SequenceNo=0
    END
  END
INSERT INTO @hierarchy (NAME, SequenceNo, parent_ID, StringValue, Object_ID, ValueType)
  SELECT ''-'',1, NULL, '''', @parent_id-1, @type
--
   RETURN
END' 
END

GO
/****** Object:  UserDefinedFunction [dbo].[ParseJSON_TO_TABLE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ParseJSON_TO_TABLE]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[ParseJSON_TO_TABLE]
(
    @json NVARCHAR(MAX)
)
RETURNS @ResultTable TABLE
(
    [Key] NVARCHAR(255), -- اسم الحقل
    [Value] NVARCHAR(MAX) -- القيمة
)
AS
BEGIN
    -- إزالة الأقواس الخارجية
    SET @json = SUBSTRING(@json, 2, LEN(@json) - 2);

    -- تحليل نص JSON وإدخال النتائج في الجدول
    ;WITH cte AS
    (
        SELECT value = LTRIM(RTRIM(Split.a.value(''.'', ''NVARCHAR(MAX)'')))
        FROM
        (
            SELECT CAST(''<M>'' + REPLACE(@json, '','', ''</M><M>'') + ''</M>'' AS XML) AS Data
        ) AS A
        CROSS APPLY Data.nodes(''/M'') AS Split(a)
    ),
    kv AS
    (
        SELECT 
            [Key] = REPLACE(SUBSTRING(value, 1, CHARINDEX('':'', value) - 1), ''"'', ''''),
            [Value] = CASE 
                        WHEN REPLACE(SUBSTRING(value, CHARINDEX('':'', value) + 1, LEN(value)), ''"'', '''') = ''null'' THEN NULL
                        ELSE REPLACE(SUBSTRING(value, CHARINDEX('':'', value) + 1, LEN(value)), ''"'', '''')
                      END
        FROM cte
    )
    INSERT INTO @ResultTable ([Key], [Value])
    SELECT [Key], [Value]
    FROM kv;

    RETURN;
END;
' 
END

GO
/****** Object:  UserDefinedFunction [dbo].[ParseJSONToTable_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ParseJSONToTable_DETAILS]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N' 
 
CREATE FUNCTION [dbo].[ParseJSONToTable_DETAILS](@json NVARCHAR(MAX))
RETURNS @Results TABLE
(
    ITEM_CODE NVARCHAR(100),
    ITEM_NAME NVARCHAR(1000),
    QTY NVARCHAR(100),
    UNIT_NAME NVARCHAR(100),
    UNIT_QTY NVARCHAR(100),
    STORE_CODE NVARCHAR(100),
    PRICE_COST NVARCHAR(100),
    PRICE NVARCHAR(100),
    DISC_PERCENT NVARCHAR(100),
    DISC_AMO NVARCHAR(100),
    ITEM_NOTE NVARCHAR(1000),
    TAX_PERCENT_ITEM NVARCHAR(100),
    TAX_AMO_ITEM NVARCHAR(100),
    IS_MANDOOB NVARCHAR(100),
    MANDOOB_PERCENT_ITEM NVARCHAR(100),
    totalNetProfitMandob NVARCHAR(100),
    QTY_FREE NVARCHAR(100)
)
AS
BEGIN
    DECLARE @tmpJson NVARCHAR(MAX);
    SET @tmpJson = @json;

    -- إزالة الأقواس المربعة الأولى والأخيرة [ ] من المصفوفة
    SET @tmpJson = SUBSTRING(@tmpJson, 2, LEN(@tmpJson)-2);

    -- استبدال ''},{'' بـ ''}|{'' لتسهيل الفصل
    SET @tmpJson = REPLACE(@tmpJson, ''},{'', ''}|{'');

    ;WITH SplitObjects AS
    (
        SELECT LTRIM(RTRIM(Split.a.value(''.'', ''NVARCHAR(MAX)''))) AS JsonObject
        FROM
        (
            SELECT CAST(''<M>'' + REPLACE(@tmpJson, ''|'', ''</M><M>'') + ''</M>'' AS XML) AS Data
        ) AS A
        CROSS APPLY Data.nodes(''/M'') AS Split(a)
    ),
    KeyValuePairs AS
    (
        SELECT JsonObject,
               Value = LTRIM(RTRIM(SplitVal.a.value(''.'', ''NVARCHAR(MAX)'')))
        FROM SplitObjects
        CROSS APPLY 
        (
            SELECT CAST(''<N>'' + REPLACE(
                                  REPLACE(
                                      REPLACE(JsonObject, ''{'', '''')
                                      , ''}'', ''''
                                  )
                                  , '','', ''</N><N>''
                              ) + ''</N>'' AS XML)
        ) AS X(Val)
        CROSS APPLY Val.nodes(''/N'') AS SplitVal(a)
    ),
    Parsed AS
    (
        SELECT 
            JsonObject,
            [Key] = REPLACE(SUBSTRING(Value,1,CHARINDEX('':'',Value)-1),''"'',''''),
            [Value] = REPLACE(SUBSTRING(Value,CHARINDEX('':'',Value)+1,4000),''"'','''')
        FROM KeyValuePairs
    ),
    Pivoted AS
    (
        SELECT JsonObject,
               [ITEM_CODE],
               [ITEM_NAME],
               [QTY],
               [UNIT_NAME],
               [UNIT_QTY],
               [STORE_CODE],
               [PRICE_COST],
               [PRICE],
               [DISC_PERCENT],
               [DISC_AMO],
               [ITEM_NOTE],
               [TAX_PERCENT_ITEM],
               [TAX_AMO_ITEM],
               [IS_MANDOOB],
               [MANDOOB_PERCENT_ITEM],
               [totalNetProfitMandob],
               [QTY_FREE]
        FROM Parsed
        PIVOT
        (
            MAX([Value])
            FOR [Key] IN ([ITEM_CODE],[ITEM_NAME],[QTY],[UNIT_NAME],[UNIT_QTY],[STORE_CODE],[PRICE_COST],[PRICE],[DISC_PERCENT],[DISC_AMO],[ITEM_NOTE],[TAX_PERCENT_ITEM],[TAX_AMO_ITEM],[IS_MANDOOB],[MANDOOB_PERCENT_ITEM],[totalNetProfitMandob],[QTY_FREE])
        ) p
    )
    INSERT INTO @Results
    SELECT ITEM_CODE,
           ITEM_NAME,
           QTY,
           UNIT_NAME,
           UNIT_QTY,
           STORE_CODE,
           PRICE_COST,
           PRICE,
           DISC_PERCENT,
           DISC_AMO,
           ITEM_NOTE,
           TAX_PERCENT_ITEM,
           TAX_AMO_ITEM,
           IS_MANDOOB,
           MANDOOB_PERCENT_ITEM,
           totalNetProfitMandob,
           QTY_FREE
    FROM Pivoted;

    RETURN;
END
' 
END

GO
/****** Object:  UserDefinedFunction [dbo].[ParseJSONToTable_INFO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ParseJSONToTable_INFO]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[ParseJSONToTable_INFO]
(
    @json NVARCHAR(MAX)
)
RETURNS @ResultTable TABLE
(
    [CURRANCY_CODE] NVARCHAR(10),
    [CLIENT_BARCODE] NVARCHAR(50),
    [CURRANCY_EQUAL] NVARCHAR(50),
    [INVOICE_CODE] INT,
    [CLIENT_CODE] NVARCHAR(50),
    [CLIENT_ADDRESS] NVARCHAR(200),
    [CLIENT_PHONE] NVARCHAR(50),
    [CLIENT_NAME] NVARCHAR(100),
    [MANDOOB_CODE] NVARCHAR(10),
    [NOTE_ORDER] NVARCHAR(400),
    [lAT] NVARCHAR(50),
    [lNG] NVARCHAR(50),
    [REMAIN_AMO] FLOAT,
    [TOTAL] FLOAT,
    [TOTAL_CASH] FLOAT,
    [TOTAL_DISCOUNT] FLOAT,
    [SERVICE] FLOAT,
    [USER_CODE] NVARCHAR(50),
    [USER_CREATE] NVARCHAR(50),
    [CASH_AMO] FLOAT,
    [CASH_PAID] FLOAT,
    [deliveryCost] FLOAT,
    [INVOICE_STATUS] INT,
    [BILL_INVOICE] NVARCHAR(50),
    [DRIVER_CODE] INT
)
AS
BEGIN
    -- إزالة الأقواس الخارجية
    SET @json = SUBSTRING(@json, 2, LEN(@json) - 2);

    ;WITH cte AS
    (
        SELECT value = LTRIM(RTRIM(Split.a.value(''.'', ''NVARCHAR(MAX)'')))
        FROM
        (
            SELECT CAST(''<M>'' + REPLACE(@json, '','', ''</M><M>'') + ''</M>'' AS XML) AS Data
        ) AS A
        CROSS APPLY Data.nodes(''/M'') AS Split(a)
    ),
    kv AS
    (
        SELECT 
            [Key] = REPLACE(SUBSTRING(value, 1, CHARINDEX('':'', value) - 1), ''"'', ''''),
            [Value] = CASE 
                        WHEN REPLACE(SUBSTRING(value, CHARINDEX('':'', value) + 1, LEN(value)), ''"'', '''') = ''null'' THEN NULL
                        ELSE REPLACE(SUBSTRING(value, CHARINDEX('':'', value) + 1, LEN(value)), ''"'', '''')
                      END
        FROM cte
    )
    INSERT INTO @ResultTable
    SELECT [CURRANCY_CODE],
           [CLIENT_BARCODE],
           [CURRANCY_EQUAL],
           [INVOICE_CODE],
           [CLIENT_CODE],
           [CLIENT_ADDRESS],
           [CLIENT_PHONE],
           [CLIENT_NAME],
           [MANDOOB_CODE],
           [NOTE_ORDER],
           [lAT],
           [lNG],
           [REMAIN_AMO],
           [TOTAL],
           [TOTAL_CASH],
           [TOTAL_DISCOUNT],
           [SERVICE],
           [USER_CODE],
           [USER_CREATE],
           [CASH_AMO],
           [CASH_PAID],
           [deliveryCost],
           [INVOICE_STATUS],
           [BILL_INVOICE],
           [DRIVER_CODE]
    FROM kv
    PIVOT
    (
      MAX([Value]) 
      FOR [Key] IN ([CURRANCY_CODE],
           [CLIENT_BARCODE],
           [CURRANCY_EQUAL],
           [INVOICE_CODE],
           [CLIENT_CODE],
           [CLIENT_ADDRESS],
           [CLIENT_PHONE],
           [CLIENT_NAME],
           [MANDOOB_CODE],
           [NOTE_ORDER],
           [lAT],
           [lNG],
           [REMAIN_AMO],
           [TOTAL],
           [TOTAL_CASH],
           [TOTAL_DISCOUNT],
           [SERVICE],
           [USER_CODE],
           [USER_CREATE],
           [CASH_AMO],
           [CASH_PAID],
           [deliveryCost],
           [INVOICE_STATUS],
           [BILL_INVOICE],
           [DRIVER_CODE])
    ) p;

    RETURN;
END;
' 
END

GO
/****** Object:  UserDefinedFunction [dbo].[splitstring]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[splitstring]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[splitstring] ( @stringToSplit VARCHAR(MAX) )
RETURNS
 @returnList TABLE ([Name] [nvarchar] (500))
AS
BEGIN

 DECLARE @name NVARCHAR(255)
 DECLARE @pos INT

 WHILE CHARINDEX('','', @stringToSplit) > 0
 BEGIN
  SELECT @pos  = CHARINDEX('','', @stringToSplit)  
  SELECT @name = SUBSTRING(@stringToSplit, 1, @pos-1)

  INSERT INTO @returnList 
  SELECT @name

  SELECT @stringToSplit = SUBSTRING(@stringToSplit, @pos+1, LEN(@stringToSplit)-@pos)
 END

 INSERT INTO @returnList
 SELECT @stringToSplit

 RETURN
END' 
END

GO
/****** Object:  UserDefinedFunction [dbo].[STRING_SPLIT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STRING_SPLIT]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[STRING_SPLIT]
(
    @string NVARCHAR(MAX),
    @delimiter CHAR(1)
)
RETURNS @result TABLE (value NVARCHAR(MAX))
AS
BEGIN
    DECLARE @start INT, @end INT;
    SET @start = 1;

    WHILE CHARINDEX(@delimiter, @string, @start) > 0
    BEGIN
        SET @end = CHARINDEX(@delimiter, @string, @start);
        INSERT INTO @result(value)
        VALUES (SUBSTRING(@string, @start, @end - @start));
        SET @start = @end + 1;
    END;

    INSERT INTO @result(value)
    VALUES (SUBSTRING(@string, @start, LEN(@string) - @start + 1));

    RETURN;
END;
' 
END

GO
/****** Object:  View [dbo].[V_BUY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_BUY]
AS
SELECT        TOP (100) PERCENT dbo.T_BUY.BILL_BRANCH, dbo.T_BUY.BILL_NUMBER, dbo.T_BUY.BILL_INVOICE, dbo.T_BUY.BILL_DATE, dbo.T_BUY.CURRANCY_CODE, dbo.T_CURRANNCY.CURRANCY_NAME, 
                         dbo.T_BUY.CURRANCY_EQUAL, dbo.T_BUY.CLIENT_CODE, dbo.T_BUY.CLIENT_NAME, dbo.T_BUY.DESCRIPTION, dbo.T_BUY.USER_CREATE, dbo.T_BUY.SECURETY_CODE, dbo.T_BUY.TOTAL_BUY, 
                         dbo.T_BUY.TOTAL_EXPENSES, dbo.T_BUY.NET_BUY, dbo.T_BUY.TOTAL_COST - dbo.T_BUY.DISCOUNT_AMOUNT AS TOTAL_COST, dbo.T_BUY.IVC_CODE, dbo.T_IVC_TYPE.IVC_NAME, dbo.T_BUY.DAY_CASH, 
                         dbo.T_BUY.DATE_CASH, dbo.T_BUY.TOT_CONV, dbo.T_BUY.ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME, dbo.T_BUY.CASH_USA, dbo.T_BUY.REMAIN_USA, dbo.T_BUY.CASH_IQ, dbo.T_BUY.REMAIN_IQ, 
                         dbo.T_BUY.C_DATE, dbo.T_BUY.C_UPDATE, dbo.T_BUY.USER_UPDATE, dbo.T_BUY.ACTIVE, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_BUSINESS, dbo.T_BUY.WAJBA_CODE, dbo.T_WAJBA.WAJBA_NAME, 
                         dbo.T_BUY.DISCOUNT_PERCENT, dbo.T_BUY.DISCOUNT_AMOUNT, dbo.T_BUY.EXP_CASH, dbo.T_BUY.EXP_PERCENT, dbo.T_BUY.IS_OUT, dbo.T_BUY.OFFER_CODE, dbo.T_BUY.IS_TRANS, dbo.T_BUY.NET_SUPPLIER, 
                         dbo.T_BUY.TOTAL_OUT, dbo.T_BUY.TOTAL_SUPPLIER, dbo.T_BUY.QR_DATA
FROM            dbo.T_BUY LEFT OUTER JOIN
                         dbo.T_WAJBA ON dbo.T_BUY.WAJBA_CODE = dbo.T_WAJBA.WAJBA_CODE LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.T_BUY.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                         dbo.T_ACCOUNTS ON dbo.T_BUY.ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.T_IVC_TYPE ON dbo.T_BUY.IVC_CODE = dbo.T_IVC_TYPE.IVC_CODE LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.T_BUY.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE
WHERE        (dbo.T_BUY.ACTIVE = 1) AND (dbo.T_BUY.IVC_CODE < 10)
ORDER BY dbo.T_BUY.BILL_NUMBER
' 
GO
/****** Object:  View [dbo].[V_BUY_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_BUY_DETAILS]
AS
SELECT
    B.BILL_BRANCH,
    B.BILL_NUMBER,
    CONVERT(NVARCHAR(12), B.BILL_NUMBER) AS BILL_STR,
    B.BILL_INVOICE,
    B.BILL_DATE,
    B.DATE_RETURN,
    B.USER_CREATE,
    B.CURRANCY_CODE,
    CUR.CURRANCY_NAME,
    B.CLIENT_CODE,
    B.CLIENT_NAME,
    CL.CLIENT_PHONE,
    CL.CLIENT_PHONE_SMS,
    CL.CLIENT_FULL_PHONE,
    CL.CLIENT_REGION,
    CL.CLIENT_ADDRESS,
    CL.CLIENT_BUSINESS,
    B.DESCRIPTION,
    B.WAJBA_CODE,
    W.WAJBA_NAME,
    B.SECURETY_CODE,
    BD.ITEM_CODE,
    I.ITEM_BARCODE AS ITEM_SIGN,
    I.ITEM_NAME,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    BD.QTY,
    BD.UNIT_NAME,
    BD.UNIT_QTY,
    BD.STORE_CODE,
    ST.STORE_NAME,
    BD.EXP_DATE,
    BD.PRICE_BUY,
    BD.CURRANCY_EQUAL,
    BD.PRICE,
    BD.TOTAL,
    BD.EXPENSES,
    BD.TOTAL_EXPENSES,
    BD.COST,
    BD.TOTAL_COST,
    B.IVC_CODE,
    IV.IVC_NAME,
    BD.SELL1,
    BD.SELL2,
    BD.ACTIVE,
    BD.C_DATE,
    BD.IS_USED,
    BD.QTY_IN,
    BD.QTY_OUT,
    BD.TOTAL_OUT,
    BD.EXPENSES_OUT,
    BD.DISCOUNT_PERCENT_ITEM,
    BD.DISCOUNT_AMOUNT_ITEM,
    BD.T_ID,
    B.TAG_PROCCESS_CODE,
    TP.TAG_PROCCESS_NAME,
    BD.NOTE1,
    BD.NOTE2,
    B.QR_DATA,
    I.KIND_NAME,
    B.BILL_PURCHASE_ORDER
FROM dbo.T_BUY AS B
    INNER JOIN dbo.T_BUY_DETAILS AS BD ON B.BILL_BRANCH = BD.BILL_BRANCH
    LEFT JOIN dbo.T_TAG_PROCCESS AS TP ON B.TAG_PROCCESS_CODE = TP.TAG_PROCCESS_CODE
    LEFT JOIN dbo.T_IVC_TYPE AS IV ON B.IVC_CODE = IV.IVC_CODE
    LEFT JOIN dbo.T_STORE_TYPE AS ST ON BD.STORE_CODE = ST.STORE_CODE
    LEFT JOIN dbo.T_ITEMS AS I ON BD.ITEM_CODE = I.ITEM_CODE
    LEFT JOIN dbo.T_WAJBA AS W ON B.WAJBA_CODE = W.WAJBA_CODE
    LEFT JOIN dbo.T_CLIENT AS CL ON B.CLIENT_CODE = CL.CLIENT_CODE
    LEFT JOIN dbo.T_CURRANNCY AS CUR ON B.CURRANCY_CODE = CUR.CURRANCY_CODE
    LEFT JOIN dbo.T_ITEM_CATEGORY AS IC ON I.CATEGORY_CODE = IC.CATEGORY_CODE
WHERE
    B.ACTIVE = 1
    AND B.IVC_CODE < 10
' 
GO
/****** Object:  View [dbo].[V_A_ERROR_BUY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_A_ERROR_BUY]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_A_ERROR_BUY]
AS
SELECT        TOP (100) PERCENT dbo.V_BUY.BILL_BRANCH, dbo.V_BUY.TOTAL_BUY AS BUY, SUM(dbo.V_BUY_DETAILS.TOTAL) AS DETAILS, dbo.V_BUY.TOTAL_BUY - SUM(dbo.V_BUY_DETAILS.TOTAL) AS REMAIN
FROM            dbo.V_BUY LEFT OUTER JOIN
                         dbo.V_BUY_DETAILS ON dbo.V_BUY.BILL_BRANCH = dbo.V_BUY_DETAILS.BILL_BRANCH
GROUP BY dbo.V_BUY.BILL_BRANCH, dbo.V_BUY.TOTAL_BUY
HAVING        (dbo.V_BUY.TOTAL_BUY - SUM(dbo.V_BUY_DETAILS.TOTAL) <> 0)
ORDER BY REMAIN DESC

' 
GO
/****** Object:  View [dbo].[V_ITEM_AVG_COST_BUY_MIN_UNIT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_AVG_COST_BUY_MIN_UNIT]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEM_AVG_COST_BUY_MIN_UNIT]
AS
SELECT
    I.ITEM_CODE,
    I.ITEM_NAME,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    I.KIND_NAME,
    I.TYPE_CODE,
    ITYPE.TYPE_NAME,
    IU.UNIT_CODE,
    IU.UNIT_NAME,
    IU.UNIT_QTY,
    IU.PRICE_BUY,
    IU.PRICE_COST,
    IU.PRICE_SALE_1,
    IU.PRICE_SALE_2,
    IU.PRICE_SALE_3,
    IU.PRICE_AVG_COST,
    IU.PRICE_SALE_CUR,
    ISNULL(AVG_BUY.AVG_BUY, 0) * IU.UNIT_QTY AS AVG_BUY
FROM dbo.T_ITEMS AS I
    LEFT JOIN dbo.T_ITEM_TYPE AS ITYPE ON I.TYPE_CODE = ITYPE.TYPE_CODE
    LEFT JOIN dbo.T_ITEM_CATEGORY AS IC ON I.CATEGORY_CODE = IC.CATEGORY_CODE
    LEFT JOIN dbo.T_ITEM_UNIT AS IU ON I.ITEM_CODE = IU.ITEM_CODE
    LEFT JOIN (
        SELECT
            ITEM_CODE,
            ISNULL(SUM(TOTAL_COST) / NULLIF(SUM(IIF(QTY = 0, NULL, QTY) * UNIT_QTY), 0), 0) AS AVG_BUY
        FROM dbo.T_BUY_DETAILS
        WHERE
            ((BILL_NUMBER = 0 AND ACTIVE = 0) OR (BILL_NUMBER <> 0 AND ACTIVE = 1))
        GROUP BY ITEM_CODE
    ) AS AVG_BUY ON I.ITEM_CODE = AVG_BUY.ITEM_CODE
WHERE
    IU.UNIT_CODE = 1
' 
GO
/****** Object:  View [dbo].[V_SALES_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS]'))
EXEC dbo.sp_executesql @statement = N'

-- إعادة إنشاء الـ View
CREATE VIEW [dbo].[V_SALES_DETAILS]
AS
SELECT 
    S.BILL_NUMBER,
    CONVERT(NVARCHAR(12), S.BILL_NUMBER) AS BILL_STR,
    S.BILL_INVOICE,
    S.BILL_DATE,
    S.CLIENT_CODE,
    S.CLIENT_NAME,
    S.CLIENT_PHONE,
    S.CLIENT_ADRESS,
    S.MANDOOB_CODE,
    M.MANDOOB_NAME,
    M.MANDOOB_PERCENT,
    S.DESCRIPTION,
    S.USER_CREATE,
    SD.QTY,
    SD.UNIT_NAME,
    SD.UNIT_QTY,
    SD.STORE_CODE,
    STYPE.STORE_NAME,
    SD.WAJBA_CODE,
    SD.WAJBA_NAME,
    SD.WAJBA_BALANCE,
    SD.CURRANCY_CODE,
    SD.CURRANCY_EQUAL,
    SD.COST / SD.CURRANCY_EQUAL AS COST,
    SD.PRICE / SD.CURRANCY_EQUAL AS PRICE,
    SD.TOTAL / SD.CURRANCY_EQUAL AS TOTAL,
    SD.DISCOUNT_PERCENT_ITEM,
    SD.DISCOUNT_AMOUNT_ITEM / SD.CURRANCY_EQUAL AS DISCOUNT_AMOUNT_ITEM,
    SD.TAX_PERCENT_ITEM,
    SD.TAX_AMO_ITEM / SD.CURRANCY_EQUAL AS TAX_AMO_ITEM,
    SD.MANDOOB_PERCENT_ITEM,
    SD.MANDOOB_AMO_ITEM / SD.CURRANCY_EQUAL AS MANDOOB_AMO_ITEM,
    SD.TOTAL_TAX_ITEM / SD.CURRANCY_EQUAL AS TOTAL_TAX_ITEM,
    SD.TOTAL_MANDOOB_ITEM / SD.CURRANCY_EQUAL AS TOTAL_MANDOOB_ITEM,
    SD.TOTAL_COST / SD.CURRANCY_EQUAL AS TOTAL_COST,
    SD.NET_TOTAL / SD.CURRANCY_EQUAL AS NET_TOTAL,
    SD.ARBAH_ITEM / SD.CURRANCY_EQUAL AS ARBAH_ITEM,
    SD.C_DATE,
    S.ACTIVE,
    S.IVC_CODE,
    ITYPE.IVC_NAME,
    SD.ITEM_CODE,
    SD.ITEM_NAME,
    I.ITEM_BARCODE AS ITEM_SIGN,
    I.CATEGORY_CODE,
    ICATEGORY.CATEGORY_NAME,
    I.TYPE_CODE,
    ITYPE2.TYPE_NAME,
    VA.PRICE_BUY,
    VA.PRICE_COST,
    VA.AVG_BUY,
    I.ITEM_NOTE,
    I.IMG_URL,
    I.ITEM_NAME_EN,
    I.ITEM_NOTE_EN,
    I.TIME_USE,
    SD.T_ID,
    SD.BILL_BRANCH,
    SD.BILL_BUY,
    I.CLIENT_NAME_BEST,
    SD.DISCOUNT_TYPE,
    SD.USER_PREPARE,
    SD.IS_PRINT,
    SD.NOTE_PRINT,
    SD.USER_CUT,
    SD.TOTAL_DISCOUNT / SD.CURRANCY_EQUAL AS TOTAL_DISCOUNT,
    S.CENTER_CODE,
    CI.CENTER_NAME,
    VA.PRICE_AVG_COST,
    SD.ITEM_NOTE_SALES,
    I.QTY_AKSAT,
    SD.IS_ITEM_AREA,
    SD.WIDTH_CM,
    SD.LENGTH_CM,
    SD.AREA_M2,
    SD.QTY_AREA,
    SD.QTY_XZ,
    SD.UNIT_QTY_XZ,
    SD.QTY_X1,
    SD.UNIT_QTY_X1,
    SD.QTY_XY,
    SD.UNIT_QTY_XY,
    S.RELATION_BILL_CODE,
    S.RELATION_B_CODE,
    SD.NOTE_PRINT_2,
    SD.K_STORE_ITEM_CODE,
    SD.K_STORE_COST,
    SD.K_STORE_SELL,
    SD.K_PRINT_ITEM_CODE,
    SD.K_PRINT_COST,
    SD.K_PRINT_SELL,
    SD.K_MODEL_ITEM_CODE,
    SD.K_MODEL_COST,
    SD.K_MODEL_SELL,
    SD.K_MOTOR_ITEM_CODE,
    SD.K_MOTOR_COST,
    SD.K_MOTOR_SELL,
    SD.K_HABEL_ITEM_CODE,
    SD.K_HABEL_COST,
    SD.K_HABEL_SELL,
    SD.K_STORE_TOTAL,
    SD.K_PRINT_TOTAL,
    SD.K_MODEL_TOTAL,
    SD.K_MOTOR_TOTAL,
    SD.K_HABEL_TOTAL,
    IIF(SD.K_STORE_ITEM_CODE = 0, N'''', ST.ITEM_NAME) AS K_STORE_ITEM_NAME,
    IIF(SD.K_PRINT_ITEM_CODE = 0, N'''', PR.ITEM_NAME) AS K_PRINT_ITEM_NAME,
    IIF(SD.K_MODEL_ITEM_CODE = 0, N'''', MD.ITEM_NAME) AS K_MODEL_ITEM_NAME,
    IIF(SD.K_MOTOR_ITEM_CODE = 0, N'''', MO.ITEM_NAME) AS K_MOTOR_ITEM_NAME,
    IIF(SD.K_HABEL_ITEM_CODE = 0, N'''', HB.ITEM_NAME) AS K_HABEL_ITEM_NAME,
    SD.QTY_FREE,
    SD.TOTAL_QTY,
    S.DRIVER_CODE,
    DR.DRIVER_NAME,
    RS.REGION_NAME,
    SS.SHIP_NAME,
    S.COL_INT1,
    S.COL_INT2,
    S.COL_INT3,
    S.COL_STR1,
    S.COL_STR2,
    S.COL_STR3,
    I.KIND_NAME,
    SD.TOTAL_POINTS,
    SD.MANDOOB_CODE AS MANDOOB_CODE_DETAILS,
    TM.MANDOOB_NAME AS MANDOOB_NAME_DETAILS,
    TF.MANDOOB_NAME AS MANDOOB_NAME_FINISH
FROM dbo.T_SALES AS S
    INNER JOIN dbo.T_SALES_DETAILS AS SD ON S.BILL_NUMBER = SD.BILL_NUMBER
    LEFT OUTER JOIN dbo.T_CENTER_COST_INVOICE AS CI ON S.CENTER_CODE = CI.CENTER_CODE
    LEFT OUTER JOIN dbo.V_ITEM_AVG_COST_BUY_MIN_UNIT AS VA ON SD.ITEM_CODE = VA.ITEM_CODE
    LEFT OUTER JOIN dbo.T_ITEMS AS I ON SD.ITEM_CODE = I.ITEM_CODE
    LEFT OUTER JOIN dbo.T_IVC_TYPE AS ITYPE ON S.IVC_CODE = ITYPE.IVC_CODE
    LEFT OUTER JOIN dbo.T_DRIVERS AS DR ON S.DRIVER_CODE = DR.DRIVER_CODE
    LEFT OUTER JOIN dbo.T_SALES_SHIPPING AS SS ON S.SHIP_CODE = SS.SHIP_CODE
    LEFT OUTER JOIN dbo.T_REGION_SHIP AS RS ON S.REGION_CODE = RS.REGION_CODE
    LEFT OUTER JOIN dbo.T_MANDOOB AS M ON S.MANDOOB_CODE = M.MANDOOB_CODE
    LEFT OUTER JOIN dbo.T_MANDOOB AS TM ON SD.MANDOOB_CODE = TM.MANDOOB_CODE
    LEFT OUTER JOIN dbo.T_MANDOOB AS TF ON SD.MANDOOB_CODE_FINISH = TF.MANDOOB_CODE
    LEFT OUTER JOIN dbo.T_STORE_TYPE AS STYPE ON SD.STORE_CODE = STYPE.STORE_CODE
    LEFT OUTER JOIN dbo.T_ITEM_TYPE AS ITYPE2 ON I.TYPE_CODE = ITYPE2.TYPE_CODE
    LEFT OUTER JOIN dbo.T_ITEM_CATEGORY AS ICATEGORY ON I.CATEGORY_CODE = ICATEGORY.CATEGORY_CODE
    LEFT OUTER JOIN dbo.T_ITEMS AS ST ON SD.K_STORE_ITEM_CODE = ST.ITEM_CODE
    LEFT OUTER JOIN dbo.T_ITEMS AS PR ON SD.K_PRINT_ITEM_CODE = PR.ITEM_CODE
    LEFT OUTER JOIN dbo.T_ITEMS AS MD ON SD.K_MODEL_ITEM_CODE = MD.ITEM_CODE
    LEFT OUTER JOIN dbo.T_ITEMS AS MO ON SD.K_MOTOR_ITEM_CODE = MO.ITEM_CODE
    LEFT OUTER JOIN dbo.T_ITEMS AS HB ON SD.K_HABEL_ITEM_CODE = HB.ITEM_CODE
WHERE 
    S.ACTIVE = 1
    AND S.IVC_CODE < 10;

' 
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_CLIENT_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_CLIENT_ITEMS]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_DETAILS_CLIENT_ITEMS]
AS
SELECT
    CL.CLIENT_CODE,
    CL.CLIENT_NAME,
    S.ITEM_CODE,
    S.ITEM_NAME,
    S.ITEM_SIGN,
    S.CATEGORY_NAME,
    S.KIND_NAME,
    SUM(S.QTY) AS QTY,
    S.UNIT_NAME,
    SUM(S.TOTAL) AS TOTAL,
    SUM(S.DISCOUNT_AMOUNT_ITEM) AS DISCOUNT_AMOUNT_ITEM,
    SUM(S.TOTAL_COST) AS TOTAL_COST,
    (SUM(S.NET_TOTAL) / NULLIF(SUM(S.QTY), 0)) AS PRICE,
    SUM(S.NET_TOTAL) AS NET_TOTAL,
    SUM(S.ARBAH_ITEM) AS ARBAH_ITEM,
    SUM(S.QTY_FREE) AS QTY_FREE,
    SUM(S.TOTAL_QTY) AS TOTAL_QTY
FROM
    dbo.V_SALES_DETAILS S
    LEFT JOIN dbo.T_CLIENT CL ON S.CLIENT_CODE = CL.CLIENT_CODE
GROUP BY
    S.ITEM_CODE,
    S.ITEM_NAME,
    S.ITEM_SIGN,
    S.CATEGORY_NAME,
    S.KIND_NAME,
    S.UNIT_NAME,
    CL.CLIENT_NAME,
    CL.CLIENT_CODE
' 
GO
/****** Object:  View [dbo].[V_SALES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES]
AS
SELECT
    S.BILL_BRANCH,
    S.BILL_NUMBER,
    S.BILL_INVOICE,
    S.BILL_DATE,
    S.OFFER_CODE,
    S.CURRANCY_CODE,
    C.CURRANCY_NAME,
    S.CURRANCY_EQUAL,
    S.CLIENT_CODE,
    S.CLIENT_NAME,
    S.CLIENT_PHONE,
    S.CLIENT_ADRESS,
    S.MANDOOB_CODE,
    M.MANDOOB_NAME,
    S.DESCRIPTION,
    S.USER_CREATE,
    S.SECURETY_CODE,
    S.TOTAL_SALES / S.CURRANCY_EQUAL AS TOTAL_SALES,
    S.DISCOUNT_ITEMS / S.CURRANCY_EQUAL AS DISCOUNT_ITEMS,
    S.DISCOUNT_PERCENT,
    S.DISCOUNT_AMOUNT / S.CURRANCY_EQUAL AS DISCOUNT_AMOUNT,
    S.TOTAL_DISCOUNT / S.CURRANCY_EQUAL AS TOTAL_DISCOUNT,
    S.NET_SALES / S.CURRANCY_EQUAL AS NET_SALES,
    S.TOTAL_COST / S.CURRANCY_EQUAL AS TOTAL_COST,
    S.TOTAL_ARBAH / S.CURRANCY_EQUAL AS TOTAL_ARBAH,
    S.IVC_CODE,
    IT.IVC_NAME,
    S.DAY_CASH,
    S.DATE_CASH,
    S.TOT_CONV,
    S.ACCOUNT_CODE,
    A.ACCOUNT_NAME,
    S.CASH_USA,
    S.REMAIN_USA,
    S.CASH_IQ,
    S.REMAIN_IQ,
    S.C_DATE,
    S.C_UPDATE,
    S.USER_UPDATE,
    S.ACTIVE,
    CL.CLIENT_REGION,
    CL.CLIENT_BUSINESS,
    DATEDIFF(DAY, S.DATE_CASH, GETDATE()) AS CASH_DIFF,
    M.MANDOOB_PERCENT,
    S.FLAG_CASH,
    S.IS_OUT,
    S.IS_TRANS,
    S.CENTER_CODE,
    S.QR_DATA,
    S.ITEM_ID_PAYMENT,
    S.TAG_PROCCESS_CODE,
    TP.TAG_PROCCESS_NAME,
    S.LINK_ID_PAYMENT,
    S.BILL_RETURN,
    S.BILL_SANAD_CNY,
    S.CNY_IQ,
    S.IS_PREPARE,
    S.DRIVER_CODE,
    S.LAT,
    S.LNG,
    S.STATUS_SHIPING,
    S.MOVE_CODE,
    S.BILL_ORDER,
    S.TOTAL_TAX_ITEM / S.CURRANCY_EQUAL AS TOTAL_TAX_ITEM,
    S.TOTAL_MANDOOB_ITEM / S.CURRANCY_EQUAL AS TOTAL_MANDOOB_ITEM,
    S.TOTAL_ADD_COST / S.CURRANCY_EQUAL AS TOTAL_ADD_COST,
    S.TOTAL_ADD_AMO / S.CURRANCY_EQUAL AS TOTAL_ADD_AMO,
    S.SHIP_CODE,
    S.COST_SHIP,
    S.IS_POINT,
    S.COST_SHIP_CLIENT,
    S.USER_TAG_CODE,
    S.RELATION_BILL_CODE,
    S.RELATION_B_CODE,
    S.REGION_CODE,
    S.COL_INT1,
    S.COL_INT2,
    S.COL_INT3,
    S.COL_STR1,
    S.COL_STR2,
    S.COL_STR3,
    S.IS_PDF,
    S.PATH_PDF,
    S.PATH_PDF_API,
    S.ZONE_CODE,
    Z.ZONE_NAME,
    Z.ZONE_COLOR
FROM
    dbo.T_SALES S
    LEFT JOIN dbo.T_SALES_ZONE Z ON S.ZONE_CODE = Z.ZONE_CODE
    LEFT JOIN dbo.T_CLIENT CL ON S.CLIENT_CODE = CL.CLIENT_CODE
    LEFT JOIN dbo.T_ACCOUNTS A ON S.ACCOUNT_CODE = A.ACCOUNT_CODE
    LEFT JOIN dbo.T_TYPE_PRICE_SELL TPS ON S.TYPE_PRICE_SELL = TPS.TYPE_PRICE_CODE
    LEFT JOIN dbo.T_IVC_TYPE IT ON S.IVC_CODE = IT.IVC_CODE
    LEFT JOIN dbo.T_MANDOOB M ON S.MANDOOB_CODE = M.MANDOOB_CODE
    LEFT JOIN dbo.T_CURRANNCY C ON S.CURRANCY_CODE = C.CURRANCY_CODE
    LEFT JOIN dbo.T_TAG_PROCCESS TP ON S.TAG_PROCCESS_CODE = TP.TAG_PROCCESS_CODE
WHERE
    S.ACTIVE = 1
    AND S.IVC_CODE < 10
' 
GO
/****** Object:  View [dbo].[V_SALES_PHONE_LIST_APPLICATION]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_PHONE_LIST_APPLICATION]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_SALES_PHONE_LIST_APPLICATION]
AS
SELECT        CLIENT_PHONE
FROM            dbo.V_SALES
WHERE        (LEN(CLIENT_PHONE) > 5)
GROUP BY CLIENT_PHONE



' 
GO
/****** Object:  View [dbo].[V_STORE_BOX_STORE_AVG_ON_MOVE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_STORE_AVG_ON_MOVE]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_STORE_BOX_STORE_AVG_ON_MOVE]
AS
SELECT
    SB.T_ID,
    SB.BILL_NUMBER,
    SB.B_CODE,
    BT.B_NAME,
    SB.WAJBA_CODE,
    W.WAJBA_NAME,
    SB.STORE_CODE,
    SB.EXP_DATE,
    SB.ITEM_CODE,
    I.ITEM_BARCODE,
    I.ITEM_NAME,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    SB.UNIT_CODE,
    IU.UNIT_NAME,
    SB.ST_IN,
    SB.ST_OUT,
    SB.ST_BALANCE,
    SB.QTY_UNIT,
    SB.IN_M,
    SB.OUT_M,
    SB.BALANCE_M,
    SB.BILL_DATE,
    VAVG.PRICE_BUY,
    VAVG.PRICE_COST,
    VAVG.AVG_BUY,
    ISNULL(SB.BALANCE_M, 0) * VAVG.AVG_BUY AS BALANCE_AVG_BUY,
    ISNULL(SB.BALANCE_M, 0) * VAVG.PRICE_BUY AS BALANCE_PRICE_BUY,
    ISNULL(SB.BALANCE_M, 0) * VAVG.PRICE_COST AS BALANCE_PRICE_COST,
    ISNULL(SB.BALANCE_M, 0) * VAVG.AVG_BUY AS BALANCE_PRICE_AVG_COST,
    I.KIND_NAME
FROM dbo.T_STORE_BOX AS SB
    LEFT JOIN dbo.V_ITEM_AVG_COST_BUY_MIN_UNIT AS VAVG ON SB.ITEM_CODE = VAVG.ITEM_CODE AND SB.UNIT_CODE = VAVG.UNIT_CODE
    LEFT JOIN dbo.T_ITEM_UNIT AS IU ON SB.ITEM_CODE = IU.ITEM_CODE AND SB.UNIT_CODE = IU.UNIT_CODE
    LEFT JOIN dbo.T_ITEMS AS I ON SB.ITEM_CODE = I.ITEM_CODE
    LEFT JOIN dbo.T_STORE_TYPE AS ST ON SB.STORE_CODE = ST.STORE_CODE
    LEFT JOIN dbo.T_WAJBA AS W ON SB.WAJBA_CODE = W.WAJBA_CODE
    LEFT JOIN dbo.T_BILL_TYPE AS BT ON SB.B_CODE = BT.B_CODE
    LEFT JOIN dbo.T_ITEM_CATEGORY AS IC ON I.CATEGORY_CODE = IC.CATEGORY_CODE
WHERE
    SB.ACTIVE = 1
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_CLIENT_CATEGORY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_CLIENT_CATEGORY]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_DETAILS_CLIENT_CATEGORY]
AS
SELECT
    CL.CLIENT_CODE,
    CL.CLIENT_NAME,
    S.CATEGORY_NAME,
    SUM(S.TOTAL_COST) AS TOTAL_COST,
    SUM(S.NET_TOTAL) AS NET_TOTAL,
    SUM(S.ARBAH_ITEM) AS ARBAH_ITEM
FROM
    dbo.V_SALES_DETAILS S
    LEFT JOIN dbo.T_CLIENT CL ON S.CLIENT_CODE = CL.CLIENT_CODE
GROUP BY
    CL.CLIENT_CODE,
    CL.CLIENT_NAME,
    S.CATEGORY_NAME
' 
GO
/****** Object:  View [dbo].[V_STORE_BOX_WAJBA]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_WAJBA]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_STORE_BOX_WAJBA]
AS
SELECT
    I.ITEM_CODE,
    I.ITEM_BARCODE,
    I.ITEM_NAME,
    I.TYPE_CODE,
    IU.UNIT_CODE,
    IU.UNIT_QTY,
    IU.UNIT_NAME,
    SUM(ISNULL(SB.BALANCE_M, 0)) / IU.UNIT_QTY AS BALANCE,
    IU.DF_SALE,
    IU.DF_STORE,
    IU.DF_BUY,
    CASE
        WHEN I.ITEM_BARCODE = N'''' THEN I.ITEM_NAME
        ELSE I.ITEM_BARCODE + N'' : '' + I.ITEM_NAME
    END AS FULL_NAME,
    SB.WAJBA_CODE,
    W.WAJBA_NAME,
    W.WAJBA_NAME + N''('' + CONVERT(NVARCHAR, SUM(ISNULL(SB.BALANCE_M, 0)) / IU.UNIT_QTY) + N'')'' AS WAJBA_BALANCE,
    I.KIND_NAME
FROM dbo.T_ITEMS AS I
    INNER JOIN dbo.T_ITEM_UNIT AS IU ON I.ITEM_CODE = IU.ITEM_CODE
    LEFT JOIN dbo.T_STORE_BOX AS SB ON I.ITEM_CODE = SB.ITEM_CODE AND IU.UNIT_CODE = SB.UNIT_CODE
    LEFT JOIN dbo.T_WAJBA AS W ON SB.WAJBA_CODE = W.WAJBA_CODE
WHERE
    IU.ON_OFF = 1
    AND I.ACTIVE = 1
    AND ISNULL(SB.ACTIVE, 1) = 1
GROUP BY
    I.ITEM_CODE,
    I.ITEM_BARCODE,
    I.ITEM_NAME,
    I.TYPE_CODE,
    IU.UNIT_CODE,
    IU.UNIT_QTY,
    IU.UNIT_NAME,
    IU.DF_SALE,
    IU.DF_STORE,
    IU.DF_BUY,
    I.TYPE_CODE,
    SB.WAJBA_CODE,
    W.WAJBA_NAME,
    I.KIND_NAME
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_ITEM_BARCODE_3]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_BARCODE_3]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEM_BARCODE_3]
AS
SELECT
    I.ITEM_CODE,
    I.ITEM_BARCODE AS ITEM_BARCODE_MAIN,
    I.ITEM_NAME,
    IU.UNIT_NAME,
    IU.UNIT_CODE,
    IB.ITEM_BARCODE,
    IU.DF_SALE,
    IU.DF_BUY,
    IU.DF_STORE,
    IU.UNIT_QTY,
    SBW.WAJBA_CODE,
    SBW.WAJBA_NAME,
    SBW.BALANCE,
    SBW.WAJBA_NAME + N''('' + CONVERT(NVARCHAR, ISNULL(SBW.BALANCE, 0) / IU.UNIT_QTY) + N'')'' AS WAJBA_BALANCE,
    I.CLIENT_NAME_BEST,
    I.RAF_NAME,
    I.IS_HIDE,
    I.SERVER_ITEM_CODE,
    I.SERVER_BRANCH,
    I.IS_SERIAL,
    I.KIND_NAME
FROM dbo.T_ITEMS AS I
    INNER JOIN dbo.T_ITEM_UNIT AS IU ON I.ITEM_CODE = IU.ITEM_CODE
    LEFT JOIN dbo.T_ITEM_BARCODE AS IB ON IU.ITEM_CODE = IB.ITEM_CODE AND IU.UNIT_CODE = IB.UNIT_CODE
    LEFT JOIN dbo.V_STORE_BOX_WAJBA AS SBW ON I.ITEM_CODE = SBW.ITEM_CODE AND IU.UNIT_NAME = SBW.UNIT_NAME
WHERE
    I.ACTIVE = 1
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_DATE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_DATE]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_BUY_DETAILS_DATE]
AS
SELECT      TOP(1000000000)   dbo.T_BUY_DETAILS.T_ID, dbo.T_BUY_DETAILS.BILL_BRANCH, dbo.T_BUY_DETAILS.BILL_NUMBER, T_BUY_1.BILL_INVOICE, ISNULL(T_BUY_1.BILL_DATE, dbo.T_BUY_DETAILS.C_DATE) AS BILL_DATE, 
                         dbo.T_BUY_DETAILS.ITEM_CODE, dbo.T_BUY_DETAILS.QTY, dbo.T_BUY_DETAILS.UNIT_NAME, dbo.T_BUY_DETAILS.UNIT_QTY, dbo.T_BUY_DETAILS.STORE_CODE, dbo.T_BUY_DETAILS.EXP_DATE, 
                         dbo.T_BUY_DETAILS.PRICE_BUY, dbo.T_BUY_DETAILS.CURRANCY_EQUAL, dbo.T_BUY_DETAILS.PRICE, dbo.T_BUY_DETAILS.TOTAL, dbo.T_BUY_DETAILS.EXPENSES, dbo.T_BUY_DETAILS.TOTAL_EXPENSES, 
                         dbo.T_BUY_DETAILS.COST, dbo.T_BUY_DETAILS.TOTAL_COST, dbo.T_BUY_DETAILS.SELL1, dbo.T_BUY_DETAILS.SELL2, dbo.T_BUY_DETAILS.C_DATE, dbo.T_BUY_DETAILS.ACTIVE
FROM            dbo.T_BUY_DETAILS LEFT OUTER JOIN
                         dbo.T_BUY AS T_BUY_1 ON dbo.T_BUY_DETAILS.BILL_BRANCH = T_BUY_1.BILL_BRANCH
WHERE        (dbo.T_BUY_DETAILS.ACTIVE = 1) OR
                         (dbo.T_BUY_DETAILS.BILL_NUMBER = 0)
ORDER BY dbo.T_BUY_DETAILS.T_ID

' 
GO
/****** Object:  View [dbo].[V_ITEM_REMAIN_BUY_FIFO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_REMAIN_BUY_FIFO]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEM_REMAIN_BUY_FIFO]
AS
SELECT
    I.ITEM_CODE,
    I.ITEM_NAME,
    BD.BILL_NUMBER,
    SUM(BD.QTY * BD.UNIT_QTY) AS BUY_QTY_MIN,
    ISNULL(
        (SELECT SUM(SD.QTY * SD.UNIT_QTY)
         FROM dbo.V_SALES_DETAILS AS SD
         WHERE SD.BILL_BUY = BD.BILL_NUMBER
           AND SD.ITEM_CODE = I.ITEM_CODE), 0
    ) AS SALES_QTY_MIN,
    SUM(BD.QTY * BD.UNIT_QTY)
        - ISNULL(
            (SELECT SUM(SD.QTY * SD.UNIT_QTY)
             FROM dbo.V_SALES_DETAILS AS SD
             WHERE SD.BILL_BUY = BD.BILL_NUMBER
               AND SD.ITEM_CODE = I.ITEM_CODE), 0
          ) AS REMAIN_QTY_MIN
FROM dbo.T_ITEMS AS I
    LEFT JOIN dbo.V_BUY_DETAILS_DATE AS BD ON I.ITEM_CODE = BD.ITEM_CODE
WHERE
    I.ITEM_CODE > 0
GROUP BY
    I.ITEM_CODE,
    I.ITEM_NAME,
    BD.BILL_NUMBER
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_ITEM_APPLICATION]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_APPLICATION]'))
EXEC dbo.sp_executesql @statement = N'



CREATE VIEW [dbo].[V_ITEM_APPLICATION]
AS
SELECT        TOP (1000000000) dbo.T_ITEMS.ITEM_CODE, dbo.T_ITEMS.TIME_USE, dbo.T_ITEMS.IS_TRANS,
                             (SELECT        TOP (1) ISNULL(ITEM_BARCODE, dbo.T_ITEMS.ITEM_BARCODE)
                                FROM            T_ITEM_BARCODE
                                WHERE        ITEM_CODE = dbo.T_ITEMS.ITEM_CODE AND UNIT_CODE = dbo.T_ITEM_UNIT.UNIT_CODE) AS ITEM_BARCODE, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.TYPE_CODE, dbo.T_ITEM_UNIT.UNIT_CODE, 
                         dbo.T_ITEM_UNIT.UNIT_QTY, dbo.T_ITEM_UNIT.UNIT_NAME, SUM(ISNULL(dbo.T_STORE_BOX.BALANCE_M, 0)) / dbo.T_ITEM_UNIT.UNIT_QTY AS BALANCE, dbo.T_ITEM_UNIT.DF_SALE, dbo.T_ITEM_UNIT.DF_STORE, 
                         dbo.T_ITEM_UNIT.DF_BUY, iif(dbo.T_ITEMS.ITEM_BARCODE = N'''', dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.ITEM_BARCODE + '' : '' + dbo.T_ITEMS.ITEM_NAME) AS FULL_NAME, dbo.T_ITEM_UNIT.PRICE_BUY, 
                         dbo.T_ITEM_UNIT.PRICE_COST, dbo.T_ITEM_UNIT.PRICE_SALE_1, dbo.T_ITEM_UNIT.PRICE_SALE_2, dbo.T_ITEM_UNIT.PRICE_SALE_3, dbo.T_ITEM_UNIT.PRICE_AVG_COST, dbo.T_ITEM_UNIT.PRICE_SALE_CUR, 
                         dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_STORE_BOX.STORE_CODE, T_STORE_TYPE.STORE_NAME, T_STORE_TYPE.IS_USED, dbo.T_ITEMS.ITEM_NAME_EN, 
                         dbo.T_ITEMS.ITEM_NOTE, dbo.T_ITEMS.ITEM_NOTE_EN, dbo.T_ITEMS.IMG_URL, dbo.T_ITEM_CATEGORY.CATEGORY_NAME_EN, dbo.T_ITEM_CATEGORY.CATEGORY_IMAGE_PATH, 
                         CAST(dbo.T_ITEMS.ITEM_CODE AS varchar(MAX)) + CAST(dbo.T_ITEM_UNIT.UNIT_CODE AS varchar(MAX)) + CAST(dbo.T_STORE_BOX.STORE_CODE AS varchar(MAX)) AS ID_APPLICATION, dbo.T_ITEMS.RAF_NAME, dbo.T_ITEMS.IS_DISCOUNT, dbo.T_ITEMS.MAIN_ITEM_CODE, dbo.T_ITEMS.IS_FEATURE, dbo.T_ITEMS.DISC_PERCENT, dbo.T_ITEMS.DISC_AMO
						  ,[ITEM_PARENT]   ,[ITEM_SUB_PARENT]  ,[LEVEL_SUB] ,[AREA_M2]  ,[WIDTH_CM] ,[LENGTH_CM] ,[COMPANY_CREATE],[EFFECTIVE_MATERIAL], dbo.T_ITEMS.KIND_NAME
FROM            dbo.T_ITEMS INNER JOIN
                         dbo.T_ITEM_UNIT ON dbo.T_ITEMS.ITEM_CODE = dbo.T_ITEM_UNIT.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_STORE_BOX ON dbo.T_ITEMS.ITEM_CODE = dbo.T_STORE_BOX.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_STORE_TYPE ON dbo.T_STORE_BOX.STORE_CODE = dbo.T_STORE_TYPE.STORE_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE
WHERE        (dbo.T_ITEM_UNIT.ON_OFF = 1) AND T_STORE_TYPE.IS_USED = 1 AND dbo.T_ITEM_CATEGORY.SHOW_MENU = 1 AND dbo.T_ITEMS.SHOW_MENU = 1
GROUP BY dbo.T_ITEMS.ITEM_CODE, dbo.T_ITEMS.TIME_USE, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEM_UNIT.UNIT_CODE, dbo.T_ITEM_UNIT.UNIT_NAME, dbo.T_ITEM_UNIT.UNIT_QTY, dbo.T_ITEM_UNIT.DF_BUY, 
                         dbo.T_ITEM_UNIT.ON_OFF, dbo.T_ITEMS.ITEM_BARCODE, dbo.T_ITEM_UNIT.DF_SALE, dbo.T_ITEM_UNIT.DF_STORE, dbo.T_ITEMS.ACTIVE, dbo.T_ITEMS.TYPE_CODE, dbo.T_STORE_BOX.ACTIVE, 
                         dbo.T_ITEM_UNIT.PRICE_BUY, dbo.T_ITEM_UNIT.PRICE_COST, dbo.T_ITEM_UNIT.PRICE_SALE_1, dbo.T_ITEM_UNIT.PRICE_SALE_2, dbo.T_ITEM_UNIT.PRICE_SALE_3, dbo.T_ITEM_UNIT.PRICE_AVG_COST, 
                         dbo.T_ITEM_UNIT.PRICE_SALE_CUR, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_STORE_BOX.STORE_CODE, T_STORE_TYPE.STORE_NAME, T_STORE_TYPE.IS_USED, 
                         dbo.T_ITEMS.ITEM_NAME_EN, dbo.T_ITEMS.ITEM_NOTE, dbo.T_ITEMS.ITEM_NOTE_EN, dbo.T_ITEMS.IMG_URL, dbo.T_ITEM_CATEGORY.CATEGORY_NAME_EN, dbo.T_ITEM_CATEGORY.CATEGORY_IMAGE_PATH, 
                         dbo.T_ITEMS.IS_TRANS,  dbo.T_ITEMS.RAF_NAME, dbo.T_ITEMS.IS_DISCOUNT, dbo.T_ITEMS.MAIN_ITEM_CODE, dbo.T_ITEMS.IS_FEATURE, dbo.T_ITEMS.DISC_PERCENT, dbo.T_ITEMS.DISC_AMO
						  ,[ITEM_PARENT]   ,[ITEM_SUB_PARENT]  ,[LEVEL_SUB] ,[AREA_M2]  ,[WIDTH_CM] ,[LENGTH_CM] ,[COMPANY_CREATE],[EFFECTIVE_MATERIAL], dbo.T_ITEMS.KIND_NAME
HAVING        (dbo.T_ITEMS.ACTIVE = 1) AND dbo.T_STORE_BOX.ACTIVE = 1
ORDER BY dbo.T_ITEMS.ITEM_CODE




' 
GO
/****** Object:  View [dbo].[V_ITEM_APPLICATION_JISON]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_APPLICATION_JISON]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEM_APPLICATION_JISON]
AS
SELECT        ITEM_NAME AS name, IMG_URL AS image_link, ITEM_CODE AS id, CATEGORY_CODE AS cat_id, PRICE_SALE_1 AS price, ITEM_NOTE AS [desc], BALANCE AS qty, UNIT_NAME AS unit, UNIT_CODE AS unit_id, 
                         TIME_USE AS rating, IS_TRANS
FROM            dbo.V_ITEM_APPLICATION
WHERE        (IS_TRANS = 0)
' 
GO
/****** Object:  View [dbo].[V_PURCHASE_ORDER_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_PURCHASE_ORDER_DETAILS]'))
EXEC dbo.sp_executesql @statement = N'


CREATE VIEW [dbo].[V_PURCHASE_ORDER_DETAILS]
AS
SELECT     dbo.T_PURCHASE_ORDER.BILL_BRANCH, dbo.T_PURCHASE_ORDER.BILL_NUMBER, CONVERT(NVARCHAR(12), dbo.T_PURCHASE_ORDER.BILL_NUMBER) AS BILL_STR, dbo.T_PURCHASE_ORDER.BILL_INVOICE, dbo.T_PURCHASE_ORDER.BILL_DATE, dbo.T_PURCHASE_ORDER.DATE_RETURN, dbo.T_PURCHASE_ORDER.USER_CREATE, dbo.T_PURCHASE_ORDER.CURRANCY_CODE, 
                  dbo.T_CURRANNCY.CURRANCY_NAME, dbo.T_PURCHASE_ORDER.CLIENT_CODE, dbo.T_PURCHASE_ORDER.CLIENT_NAME, dbo.T_CLIENT.CLIENT_PHONE, dbo.T_CLIENT.CLIENT_PHONE_SMS, dbo.T_CLIENT.CLIENT_FULL_PHONE, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_ADDRESS, 
                  dbo.T_CLIENT.CLIENT_BUSINESS, dbo.T_PURCHASE_ORDER.DESCRIPTION, dbo.T_PURCHASE_ORDER.WAJBA_CODE, dbo.T_WAJBA.WAJBA_NAME, dbo.T_PURCHASE_ORDER.SECURETY_CODE, dbo.T_PURCHASE_ORDER_DETAILS.ITEM_CODE, dbo.T_ITEMS.ITEM_BARCODE AS ITEM_SIGN, dbo.T_ITEMS.ITEM_NAME, 
                  dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_PURCHASE_ORDER_DETAILS.QTY, dbo.T_PURCHASE_ORDER_DETAILS.UNIT_NAME, dbo.T_PURCHASE_ORDER_DETAILS.UNIT_QTY, dbo.T_PURCHASE_ORDER_DETAILS.STORE_CODE, dbo.T_STORE_TYPE.STORE_NAME, dbo.T_PURCHASE_ORDER_DETAILS.EXP_DATE, 
                  dbo.T_PURCHASE_ORDER_DETAILS.PRICE_BUY, dbo.T_PURCHASE_ORDER_DETAILS.CURRANCY_EQUAL, dbo.T_PURCHASE_ORDER_DETAILS.PRICE, dbo.T_PURCHASE_ORDER_DETAILS.TOTAL, dbo.T_PURCHASE_ORDER_DETAILS.EXPENSES, dbo.T_PURCHASE_ORDER_DETAILS.TOTAL_EXPENSES, dbo.T_PURCHASE_ORDER_DETAILS.COST, dbo.T_PURCHASE_ORDER_DETAILS.TOTAL_COST, 
                  dbo.T_PURCHASE_ORDER.IVC_CODE, dbo.T_IVC_TYPE.IVC_NAME, dbo.T_PURCHASE_ORDER_DETAILS.SELL1, dbo.T_PURCHASE_ORDER_DETAILS.SELL2, dbo.T_PURCHASE_ORDER_DETAILS.ACTIVE, dbo.T_PURCHASE_ORDER_DETAILS.C_DATE, dbo.T_PURCHASE_ORDER_DETAILS.IS_USED, dbo.T_PURCHASE_ORDER_DETAILS.QTY_IN, dbo.T_PURCHASE_ORDER_DETAILS.QTY_OUT, 
                  dbo.T_PURCHASE_ORDER_DETAILS.TOTAL_OUT, dbo.T_PURCHASE_ORDER_DETAILS.EXPENSES_OUT, dbo.T_PURCHASE_ORDER_DETAILS.DISCOUNT_PERCENT_ITEM, dbo.T_PURCHASE_ORDER_DETAILS.DISCOUNT_AMOUNT_ITEM, dbo.T_PURCHASE_ORDER_DETAILS.T_ID, dbo.T_PURCHASE_ORDER.TAG_PROCCESS_CODE, 
                  dbo.T_TAG_PROCCESS.TAG_PROCCESS_NAME, dbo.T_PURCHASE_ORDER_DETAILS.NOTE1, dbo.T_PURCHASE_ORDER_DETAILS.NOTE2, dbo.T_PURCHASE_ORDER.QR_DATA, dbo.T_ITEMS.KIND_NAME
				  ,T_PURCHASE_ORDER_DETAILS.QTY-ISNULL((SELECT ISNULL(SUM(QTY),0) FROM V_BUY_DETAILS WHERE ITEM_CODE=T_PURCHASE_ORDER_DETAILS.ITEM_CODE AND BILL_PURCHASE_ORDER =T_PURCHASE_ORDER.BILL_NUMBER),0)  AS BALANCE
FROM        dbo.T_PURCHASE_ORDER INNER JOIN
                  dbo.T_PURCHASE_ORDER_DETAILS ON dbo.T_PURCHASE_ORDER.BILL_BRANCH = dbo.T_PURCHASE_ORDER_DETAILS.BILL_BRANCH LEFT OUTER JOIN
                  dbo.T_TAG_PROCCESS ON dbo.T_PURCHASE_ORDER.TAG_PROCCESS_CODE = dbo.T_TAG_PROCCESS.TAG_PROCCESS_CODE LEFT OUTER JOIN
                  dbo.T_IVC_TYPE ON dbo.T_PURCHASE_ORDER.IVC_CODE = dbo.T_IVC_TYPE.IVC_CODE LEFT OUTER JOIN
                  dbo.T_STORE_TYPE ON dbo.T_PURCHASE_ORDER_DETAILS.STORE_CODE = dbo.T_STORE_TYPE.STORE_CODE LEFT OUTER JOIN
                  dbo.T_ITEMS ON dbo.T_PURCHASE_ORDER_DETAILS.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                  dbo.T_WAJBA ON dbo.T_PURCHASE_ORDER.WAJBA_CODE = dbo.T_WAJBA.WAJBA_CODE LEFT OUTER JOIN
                  dbo.T_CLIENT ON dbo.T_PURCHASE_ORDER.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                  dbo.T_CURRANNCY ON dbo.T_PURCHASE_ORDER.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE LEFT OUTER JOIN
                  dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE
WHERE     (dbo.T_PURCHASE_ORDER.ACTIVE = 1) AND (dbo.T_PURCHASE_ORDER.IVC_CODE < 10)



' 
GO
/****** Object:  View [dbo].[V_STORE_TRANFARE_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_TRANFARE_DETAILS]'))
EXEC dbo.sp_executesql @statement = N'

CREATE VIEW [dbo].[V_STORE_TRANFARE_DETAILS]
AS
SELECT        TOP (100) PERCENT dbo.T_STORE_TRANSFARE.BILL_BRANCH, dbo.T_STORE_TRANSFARE.BILL_NUMBER, dbo.T_STORE_TRANSFARE.BILL_DATE, dbo.T_STORE_TRANSFARE.USER_CREATE, 
                         dbo.T_STORE_TRANSFARE.FROM_STORE, dbo.T_STORE_TYPE.STORE_NAME AS FROM_STORE_NAME, dbo.T_STORE_TRANSFARE.TO_STORE, T_STORE_TYPE_1.STORE_NAME AS TO_STORE_NAME, 
                         dbo.T_STORE_TRANSFARE.DESCRIPTION, dbo.T_STORE_TRANSFARE.DRIVER_NAME, dbo.T_STORE_TRANSFARE.DRIVER_PHONE, dbo.T_STORE_TRANSFARE.CAR_NO, dbo.T_STORE_TRANSFARE_DETAILS.ITEM_CODE, 
                         dbo.T_ITEMS.ITEM_BARCODE AS ITEM_SIGN, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_STORE_TRANSFARE_DETAILS.QTY, 
                         dbo.T_STORE_TRANSFARE_DETAILS.UNIT_CODE, dbo.T_STORE_TRANSFARE_DETAILS.UNIT_NAME, dbo.T_STORE_TRANSFARE_DETAILS.UNIT_QTY, dbo.T_STORE_TRANSFARE_DETAILS.WAJBA_CODE, 
                         dbo.T_STORE_TRANSFARE_DETAILS.WAJBA_NAME, dbo.T_STORE_TRANSFARE_DETAILS.IS_PRINT, dbo.T_ITEMS.SELL, dbo.T_ITEMS.COST, dbo.T_STORE_TRANSFARE_DETAILS.QTY * dbo.T_ITEMS.SELL AS TOTAL_SELL, 
                         dbo.T_STORE_TRANSFARE_DETAILS.QTY * dbo.T_ITEMS.COST AS TOTAL_COST, dbo.T_STORE_TRANSFARE_DETAILS.T_ID, dbo.T_ITEMS.KIND_NAME
FROM            dbo.T_ITEMS LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE RIGHT OUTER JOIN
                         dbo.T_STORE_TYPE AS T_STORE_TYPE_1 RIGHT OUTER JOIN
                         dbo.T_STORE_TYPE RIGHT OUTER JOIN
                         dbo.T_STORE_TRANSFARE ON dbo.T_STORE_TYPE.STORE_CODE = dbo.T_STORE_TRANSFARE.FROM_STORE ON T_STORE_TYPE_1.STORE_CODE = dbo.T_STORE_TRANSFARE.TO_STORE LEFT OUTER JOIN
                         dbo.T_STORE_TRANSFARE_DETAILS ON dbo.T_STORE_TRANSFARE.BILL_NUMBER = dbo.T_STORE_TRANSFARE_DETAILS.BILL_NUMBER ON 
                         dbo.T_ITEMS.ITEM_CODE = dbo.T_STORE_TRANSFARE_DETAILS.ITEM_CODE
WHERE        (dbo.T_STORE_TRANSFARE.ACTIVE = 1)
ORDER BY dbo.T_STORE_TRANSFARE.BILL_NUMBER ,dbo.T_STORE_TRANSFARE_DETAILS.T_ID


' 
GO
/****** Object:  View [dbo].[V_STORE_TRANSFARE_ORDER]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_TRANSFARE_ORDER]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_STORE_TRANSFARE_ORDER]
AS
SELECT        dbo.V_STORE_TRANFARE_DETAILS.BILL_BRANCH, dbo.V_STORE_TRANFARE_DETAILS.BILL_NUMBER, dbo.V_STORE_TRANFARE_DETAILS.BILL_DATE, dbo.V_STORE_TRANFARE_DETAILS.USER_CREATE, 
                         dbo.V_STORE_TRANFARE_DETAILS.FROM_STORE, dbo.V_STORE_TRANFARE_DETAILS.FROM_STORE_NAME, dbo.V_STORE_TRANFARE_DETAILS.TO_STORE, dbo.V_STORE_TRANFARE_DETAILS.TO_STORE_NAME, 
                         dbo.V_STORE_TRANFARE_DETAILS.DESCRIPTION, dbo.V_STORE_TRANFARE_DETAILS.DRIVER_NAME, dbo.V_STORE_TRANFARE_DETAILS.DRIVER_PHONE, dbo.V_STORE_TRANFARE_DETAILS.CAR_NO, 
                         dbo.V_STORE_TRANFARE_DETAILS.ITEM_CODE, dbo.V_STORE_TRANFARE_DETAILS.ITEM_SIGN, dbo.V_STORE_TRANFARE_DETAILS.ITEM_NAME, dbo.V_STORE_TRANFARE_DETAILS.CATEGORY_CODE, 
                         dbo.V_STORE_TRANFARE_DETAILS.CATEGORY_NAME, dbo.V_STORE_TRANFARE_DETAILS.QTY, dbo.V_STORE_TRANFARE_DETAILS.UNIT_CODE, dbo.V_STORE_TRANFARE_DETAILS.UNIT_NAME, 
                         dbo.V_STORE_TRANFARE_DETAILS.UNIT_QTY, dbo.V_STORE_TRANFARE_DETAILS.WAJBA_CODE, dbo.V_STORE_TRANFARE_DETAILS.WAJBA_NAME, dbo.T_PRINTER_STORE.PRINTER_ID, dbo.T_PRINTER.PRINTER_NAME, 
                         dbo.T_PRINTER.DEVICE_NAME, dbo.V_STORE_TRANFARE_DETAILS.IS_PRINT
FROM            dbo.T_PRINTER_STORE RIGHT OUTER JOIN
                         dbo.T_PRINTER ON dbo.T_PRINTER_STORE.PRINTER_ID = dbo.T_PRINTER.T_ID RIGHT OUTER JOIN
                         dbo.V_STORE_TRANFARE_DETAILS ON dbo.T_PRINTER_STORE.CATEGORY_CODE = dbo.V_STORE_TRANFARE_DETAILS.CATEGORY_CODE AND 
                         dbo.T_PRINTER.STORE_CODE = dbo.V_STORE_TRANFARE_DETAILS.FROM_STORE
' 
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_EXPIRED_REMAIN]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN]
AS
SELECT     TOP (100) PERCENT MAX(DISTINCT dbo.T_BUY_DETAILS.T_ID) AS T_ID, dbo.T_BUY_DETAILS.BILL_BRANCH, dbo.T_BUY_DETAILS.BILL_NUMBER, dbo.T_BUY_DETAILS.ITEM_CODE, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.CATEGORY_CODE, 
                  dbo.T_ITEM_CATEGORY.CATEGORY_NAME, SUM(DISTINCT dbo.T_BUY_DETAILS.QTY) AS QTY, dbo.T_BUY_DETAILS.UNIT_QTY, dbo.T_BUY_DETAILS.UNIT_NAME, dbo.T_BUY_DETAILS.STORE_CODE, dbo.T_STORE_TYPE.STORE_NAME, MIN(dbo.T_BUY_DETAILS.EXP_DATE) 
                  AS EXP_DATE, MAX(DISTINCT dbo.T_BUY_DETAILS.PRICE_BUY) AS PRICE_BUY, dbo.T_BUY_DETAILS.CURRANCY_EQUAL, MAX(DISTINCT dbo.T_BUY_DETAILS.PRICE) AS PRICE, MAX(DISTINCT dbo.T_BUY_DETAILS.TOTAL) AS TOTAL, MAX(DISTINCT dbo.T_BUY_DETAILS.EXPENSES) 
                  AS EXPENSES, MAX(DISTINCT dbo.T_BUY_DETAILS.TOTAL_EXPENSES) AS TOTAL_EXPENSES, MAX(DISTINCT dbo.T_BUY_DETAILS.COST) AS COST, MAX(DISTINCT dbo.T_BUY_DETAILS.TOTAL_COST) AS TOTAL_COST, MAX(DISTINCT dbo.T_BUY_DETAILS.SELL1) AS SELL1, 
                  MAX(DISTINCT dbo.T_BUY_DETAILS.SELL2) AS SELL2, MAX(DISTINCT dbo.T_BUY_DETAILS.C_DATE) AS C_DATE, dbo.T_BUY_DETAILS.ACTIVE,
                      (SELECT     ISNULL(SUM(ISNULL(QTY * UNIT_QTY, 0)), 0) AS Expr1
                       FROM        dbo.T_SALES_DETAILS
                       WHERE     (ITEM_CODE = dbo.T_BUY_DETAILS.ITEM_CODE) AND (BILL_BUY = dbo.T_BUY.BILL_NUMBER) AND (ACTIVE = 1)) / dbo.T_BUY_DETAILS.UNIT_QTY AS QTY_SALES, SUM(DISTINCT dbo.T_BUY_DETAILS.QTY) -
                      (SELECT     ISNULL(SUM(ISNULL(QTY * UNIT_QTY, 0)), 0) / dbo.T_BUY_DETAILS.UNIT_QTY AS Expr1
                       FROM        dbo.T_SALES_DETAILS AS T_SALES_DETAILS_3
                       WHERE     (ITEM_CODE = dbo.T_BUY_DETAILS.ITEM_CODE) AND (BILL_BUY = dbo.T_BUY.BILL_NUMBER) AND (ACTIVE = 1)) AS REMAIN_BUY, SUM(DISTINCT dbo.T_BUY_DETAILS.QTY) * dbo.T_BUY_DETAILS.UNIT_QTY -
                      (SELECT     ISNULL(SUM(ISNULL(QTY * UNIT_QTY, 0)), 0) AS Expr1
                       FROM        dbo.T_SALES_DETAILS AS T_SALES_DETAILS_2
                       WHERE     (ITEM_CODE = dbo.T_BUY_DETAILS.ITEM_CODE) AND (BILL_BUY = dbo.T_BUY.BILL_NUMBER) AND (ACTIVE = 1)) AS REMAIN_BUY_MIN, dbo.T_BUY.CLIENT_CODE, dbo.T_BUY.CLIENT_NAME, dbo.T_BUY.BILL_DATE, dbo.T_BUY_DETAILS.IS_USED, 
                  dbo.T_ITEMS.CLIENT_NAME_BEST, dbo.T_ITEMS.KIND_NAME, dbo.T_BUY_DETAILS.NOTE1, dbo.T_BUY_DETAILS.NOTE2
FROM        dbo.T_ITEMS RIGHT OUTER JOIN
                  dbo.T_SALES_DETAILS AS T_SALES_DETAILS_1 RIGHT OUTER JOIN
                  dbo.T_BUY_DETAILS LEFT OUTER JOIN
                  dbo.T_BUY ON dbo.T_BUY_DETAILS.BILL_BRANCH = dbo.T_BUY.BILL_BRANCH ON T_SALES_DETAILS_1.ITEM_CODE = dbo.T_BUY_DETAILS.ITEM_CODE AND T_SALES_DETAILS_1.BILL_BUY = dbo.T_BUY_DETAILS.BILL_NUMBER LEFT OUTER JOIN
                  dbo.T_STORE_TYPE ON dbo.T_BUY_DETAILS.STORE_CODE = dbo.T_STORE_TYPE.STORE_CODE ON dbo.T_ITEMS.ITEM_CODE = dbo.T_BUY_DETAILS.ITEM_CODE LEFT OUTER JOIN
                  dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE
WHERE     (dbo.T_BUY_DETAILS.ACTIVE = 1) OR
                  (dbo.T_BUY_DETAILS.BILL_NUMBER = 0) AND (dbo.T_BUY_DETAILS.QTY <> 0)
GROUP BY dbo.T_BUY_DETAILS.ITEM_CODE, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_BUY_DETAILS.UNIT_NAME, dbo.T_BUY_DETAILS.UNIT_QTY, dbo.T_BUY_DETAILS.STORE_CODE, dbo.T_STORE_TYPE.STORE_NAME, 
                  dbo.T_BUY_DETAILS.CURRANCY_EQUAL, dbo.T_BUY_DETAILS.ACTIVE, dbo.T_BUY.CLIENT_CODE, dbo.T_BUY.CLIENT_NAME, dbo.T_BUY.BILL_DATE, dbo.T_BUY_DETAILS.IS_USED, dbo.T_ITEMS.CLIENT_NAME_BEST, dbo.T_BUY_DETAILS.BILL_BRANCH, 
                  dbo.T_BUY_DETAILS.BILL_NUMBER, dbo.T_BUY.BILL_NUMBER, dbo.T_ITEMS.ACTIVE, dbo.T_ITEMS.KIND_NAME, dbo.T_BUY_DETAILS.NOTE1, dbo.T_BUY_DETAILS.NOTE2
HAVING     (dbo.T_ITEMS.ACTIVE = 1)
ORDER BY dbo.T_BUY_DETAILS.ITEM_CODE

' 
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_CLIENT_BEST]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_CLIENT_BEST]'))
EXEC dbo.sp_executesql @statement = N'

CREATE VIEW [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_CLIENT_BEST]
AS
SELECT        ITEM_CODE, ITEM_NAME, CATEGORY_CODE, CATEGORY_NAME,KIND_NAME, MIN(COST) AS COST, SUM(QTY_SALES) AS QTY_SALES, SUM(REMAIN_BUY) AS REMAIN_BUY, SUM(REMAIN_BUY_MIN) AS REMAIN_BUY_MIN, 
                         CLIENT_NAME_BEST
FROM            dbo.V_BUY_DETAILS_EXPIRED_REMAIN
GROUP BY ITEM_CODE, ITEM_NAME, CATEGORY_CODE, CATEGORY_NAME, CLIENT_NAME_BEST,KIND_NAME


' 
GO
/****** Object:  View [dbo].[V_PURCHASE_ORDER_REMAIN]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_PURCHASE_ORDER_REMAIN]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_PURCHASE_ORDER_REMAIN]
AS
SELECT 
    BILL_NUMBER,
    BILL_INVOICE,
    BILL_DATE,
    CLIENT_NAME,
    ITEM_CODE,
    ITEM_NAME,
    ITEM_SIGN,
    CATEGORY_CODE,
    CATEGORY_NAME,
	PRICE_BUY,
	UNIT_NAME,
	    QTY AS QTY_PURCHASE_ORDER,
    ISNULL(
        (SELECT ISNULL(SUM(QTY), 0) 
         FROM V_BUY_DETAILS 
         WHERE ITEM_CODE = V_PURCHASE_ORDER_DETAILS.ITEM_CODE 
           AND BILL_PURCHASE_ORDER = V_PURCHASE_ORDER_DETAILS.BILL_NUMBER),
        0
    ) AS QTY_BUY,
    QTY - ISNULL(
        (SELECT ISNULL(SUM(QTY), 0) 
         FROM V_BUY_DETAILS 
         WHERE ITEM_CODE = V_PURCHASE_ORDER_DETAILS.ITEM_CODE 
           AND BILL_PURCHASE_ORDER = V_PURCHASE_ORDER_DETAILS.BILL_NUMBER),
        0
    ) AS BALANCE,
    CASE 
        WHEN QTY - ISNULL(
            (SELECT ISNULL(SUM(QTY), 0) 
             FROM V_BUY_DETAILS 
             WHERE ITEM_CODE = V_PURCHASE_ORDER_DETAILS.ITEM_CODE 
               AND BILL_PURCHASE_ORDER = V_PURCHASE_ORDER_DETAILS.BILL_NUMBER),
            0
        ) <= 0 THEN N''تم الإنجاز''
        ELSE N''قيد الإنجاز''
    END AS STATUS
FROM dbo.V_PURCHASE_ORDER_DETAILS  
WHERE ACTIVE = 1
' 
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_AFTER]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_AFTER]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_DETAILS_AFTER]
AS
SELECT
    S.BILL_NUMBER,
    CONVERT(NVARCHAR(12), S.BILL_NUMBER) AS BILL_STR,
    S.BILL_INVOICE,
    S.BILL_DATE,
    S.CLIENT_CODE,
    S.CLIENT_NAME,
    S.CLIENT_PHONE,
    S.CLIENT_ADRESS,
    S.MANDOOB_CODE,
    M.MANDOOB_NAME,
    M.MANDOOB_PERCENT,
    S.DESCRIPTION,
    S.USER_CREATE,
    SD.QTY,
    SD.UNIT_NAME,
    SD.UNIT_QTY,
    SD.STORE_CODE,
    ST.STORE_NAME,
    SD.WAJBA_CODE,
    SD.WAJBA_NAME,
    SD.WAJBA_BALANCE,
    SD.CURRANCY_CODE,
    SD.CURRANCY_EQUAL,
    SD.COST / SD.CURRANCY_EQUAL AS COST,
    SD.PRICE / SD.CURRANCY_EQUAL AS PRICE,
    SD.TOTAL / SD.CURRANCY_EQUAL AS TOTAL,
    SD.DISCOUNT_PERCENT_ITEM,
    SD.DISCOUNT_AMOUNT_ITEM / SD.CURRANCY_EQUAL AS DISCOUNT_AMOUNT_ITEM,
    SD.TAX_PERCENT_ITEM,
    SD.TAX_AMO_ITEM / SD.CURRANCY_EQUAL AS TAX_AMO_ITEM,
    SD.MANDOOB_PERCENT_ITEM,
    SD.MANDOOB_AMO_ITEM / SD.CURRANCY_EQUAL AS MANDOOB_AMO_ITEM,
    SD.TOTAL_TAX_ITEM / SD.CURRANCY_EQUAL AS TOTAL_TAX_ITEM,
    SD.TOTAL_MANDOOB_ITEM / SD.CURRANCY_EQUAL AS TOTAL_MANDOOB_ITEM,
    SD.TOTAL_COST / SD.CURRANCY_EQUAL AS TOTAL_COST,
    SD.NET_TOTAL / SD.CURRANCY_EQUAL AS NET_TOTAL,
    SD.ARBAH_ITEM / SD.CURRANCY_EQUAL AS ARBAH_ITEM,
    SD.C_DATE,
    S.ACTIVE,
    S.IVC_CODE,
    IT.IVC_NAME,
    SD.ITEM_CODE,
    SD.ITEM_NAME,
    I.ITEM_BARCODE AS ITEM_SIGN,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    I.TYPE_CODE,
    ITY.TYPE_NAME,
    V.PRICE_BUY,
    V.PRICE_COST,
    V.AVG_BUY,
    I.ITEM_NOTE,
    I.IMG_URL,
    I.ITEM_NAME_EN,
    I.ITEM_NOTE_EN,
    I.TIME_USE,
    S.TOTAL_DISCOUNT,
    S.TOTAL_SALES,
    SD.T_ID,
    SD.BILL_BRANCH,
    SD.IS_ITEM_AREA,
    SD.WIDTH_CM,
    SD.LENGTH_CM,
    SD.AREA_M2,
    SD.QTY_AREA,
    SD.QTY_XZ,
    SD.UNIT_QTY_XZ,
    SD.QTY_X1,
    SD.UNIT_QTY_X1,
    SD.QTY_XY,
    SD.UNIT_QTY_XY,
    SD.QTY_FREE,
    SD.TOTAL_QTY,
    I.KIND_NAME
FROM
    dbo.T_SALES S
    INNER JOIN dbo.T_SALES_DETAILS SD ON S.BILL_NUMBER = SD.BILL_NUMBER
    LEFT JOIN dbo.V_ITEM_AVG_COST_BUY_MIN_UNIT V ON SD.ITEM_CODE = V.ITEM_CODE
    LEFT JOIN dbo.T_ITEMS I ON SD.ITEM_CODE = I.ITEM_CODE
    LEFT JOIN dbo.T_IVC_TYPE IT ON S.IVC_CODE = IT.IVC_CODE
    LEFT JOIN dbo.T_MANDOOB M ON S.MANDOOB_CODE = M.MANDOOB_CODE
    LEFT JOIN dbo.T_CURRANNCY CUR ON SD.CURRANCY_CODE = CUR.CURRANCY_CODE
    LEFT JOIN dbo.T_STORE_TYPE ST ON SD.STORE_CODE = ST.STORE_CODE
    LEFT JOIN dbo.T_ITEM_TYPE ITY ON I.TYPE_CODE = ITY.TYPE_CODE
    LEFT JOIN dbo.T_ITEM_CATEGORY IC ON I.CATEGORY_CODE = IC.CATEGORY_CODE
WHERE
    S.ACTIVE = 1
    AND S.IVC_CODE < 10
' 
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_AFTER_DISCOUNT_OLD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_AFTER_DISCOUNT_OLD]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_DETAILS_AFTER_DISCOUNT_OLD]
AS
SELECT
    BILL_BRANCH,
    BILL_NUMBER,
    BILL_STR,
    BILL_INVOICE,
    BILL_DATE,
    CLIENT_CODE,
    CLIENT_NAME,
    CLIENT_PHONE,
    CLIENT_ADRESS,
    MANDOOB_CODE,
    MANDOOB_NAME,
    MANDOOB_PERCENT,
    DESCRIPTION,
    USER_CREATE,
    QTY,
    UNIT_NAME,
    UNIT_QTY,
    STORE_CODE,
    STORE_NAME,
    WAJBA_CODE,
    WAJBA_NAME,
    WAJBA_BALANCE,
    CURRANCY_CODE,
    CURRANCY_EQUAL,
    COST,
    ISNULL(NET_TOTAL - ((TOTAL_DISCOUNT / NULLIF(TOTAL_SALES, 0)) * NET_TOTAL), 0) / QTY AS PRICE,
    TOTAL,
    DISCOUNT_PERCENT_ITEM,
    DISCOUNT_AMOUNT_ITEM,
    TOTAL_COST,
    ISNULL(NET_TOTAL - ((TOTAL_DISCOUNT / NULLIF(TOTAL_SALES, 0)) * NET_TOTAL), 0) AS NET_TOTAL,
    ISNULL(NET_TOTAL - ((TOTAL_DISCOUNT / NULLIF(TOTAL_SALES, 0)) * NET_TOTAL), 0) - TOTAL_COST AS ARBAH_ITEM,
    C_DATE,
    ACTIVE,
    IVC_CODE,
    IVC_NAME,
    ITEM_CODE,
    ITEM_NAME,
    ITEM_SIGN,
    CATEGORY_CODE,
    CATEGORY_NAME,
    TYPE_CODE,
    TYPE_NAME,
    PRICE_BUY,
    PRICE_COST,
    AVG_BUY,
    ITEM_NOTE,
    IMG_URL,
    ITEM_NAME_EN,
    ITEM_NOTE_EN,
    TIME_USE,
    TOTAL_DISCOUNT,
    TOTAL_SALES,
    (ISNULL(TOTAL_DISCOUNT / NULLIF(TOTAL_SALES, 0), 0) * NET_TOTAL) AS DISCOUNT_ITEM_AFTER,
    QTY_FREE,
    TOTAL_QTY,
    KIND_NAME
FROM
    dbo.V_SALES_DETAILS_AFTER
' 
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEMS_BALANCE_MIN]
AS
SELECT
    I.ITEM_CODE,
    SUM(ISNULL(CAST(SB.BALANCE_M AS decimal(18,0)), 0)) AS BALANCE,
    1 AS UNIT_CODE,
    I.CATEGORY_CODE,
    I.QTY_MIN,
    I.KIND_NAME
FROM
    dbo.T_ITEMS I
    LEFT JOIN dbo.T_STORE_BOX SB ON I.ITEM_CODE = SB.ITEM_CODE AND SB.ACTIVE = 1
    LEFT JOIN dbo.T_STORE_TYPE ST ON SB.STORE_CODE = ST.STORE_CODE
WHERE
    I.ACTIVE = 1
    AND ST.IS_USED = 1
GROUP BY
    I.ITEM_CODE,
    I.CATEGORY_CODE,
    I.QTY_MIN,
    I.KIND_NAME
' 
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN_PHARMA]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN_PHARMA]'))
EXEC dbo.sp_executesql @statement = N'
 CREATE VIEW [dbo].[V_ITEMS_BALANCE_MIN_PHARMA]
AS
SELECT
    I.ITEM_CODE,
    I.TYPE_CODE,
    ISNULL(BM.BALANCE, 0) AS BALANCE_PHARMA,
    1 AS UNIT_CODE,
    I.UNIT_NAME,
    I.RAF_NAME,
    I.SELL AS SELL1,
    I.SELL2,
    I.UNIT2_NAME,
    I.UNIT2_QTY,
    I.ITEM_BARCODE,
    I.ITEM_NAME,
    -- الكمية بوحدة القطعة (الصغرى)
    IIF(ISNULL(BM.BALANCE, 0) < 0,
        ISNULL(BM.BALANCE, 0),
        IIF(I.UNIT2_QTY = 1,
            ISNULL(BM.BALANCE, 0),
            ISNULL(BM.BALANCE, 0) - (FLOOR(ISNULL(BM.BALANCE, 0) / I.UNIT2_QTY) * I.UNIT2_QTY)
        )
    ) AS BALANCE_U1,
    -- الكمية بوحدة العلبة (الكبرى)
    IIF(ISNULL(BM.BALANCE, 0) < 0,
        0,
        IIF(I.UNIT2_QTY = 1,
            0,
            FLOOR(ISNULL(BM.BALANCE, 0) / I.UNIT2_QTY)
        )
    ) AS BALANCE_U2,
    -- النص النهائي لعرض الرصيد الدوائي
    IIF(I.UNIT2_QTY = 1,
        CAST(ISNULL(BM.BALANCE, 0) AS VARCHAR(MAX)) + N'' '' + I.UNIT_NAME,
        CAST(IIF(ISNULL(BM.BALANCE, 0) < 0, 0, FLOOR(ISNULL(BM.BALANCE, 0) / I.UNIT2_QTY)) AS VARCHAR(MAX)) + N'' '' + I.UNIT2_NAME +
        IIF(ISNULL(BM.BALANCE, 0) < 0, N'' || '', N'' + '') +
        CAST(IIF(ISNULL(BM.BALANCE, 0) < 0, ISNULL(BM.BALANCE, 0), ISNULL(BM.BALANCE, 0) - (FLOOR(ISNULL(BM.BALANCE, 0) / I.UNIT2_QTY) * I.UNIT2_QTY)) AS VARCHAR(MAX)) + N'' '' + I.UNIT_NAME
    ) AS BALANCE,
    I.EXPIRED_DAY,
    I.EXPIRED_DATE,
    I.EXPIRED_WARRNING,
    IIF(I.ITEM_BARCODE = N'''', I.ITEM_NAME, I.ITEM_BARCODE + N'' : '' + I.ITEM_NAME) AS FULL_NAME,
    I.IS_HIDE,
    I.COST AS PRICE_BUY,
    I.COST AS PRICE_COST,
    I.COST AS PRICE_AVG_COST,
    I.SELL AS PRICE_SALE_1,
    I.SELL_G AS PRICE_SALE_2,
    I.SELL_W AS PRICE_SALE_3,
    I.SELL_CNY AS PRICE_SALE_CUR,
    I.CATEGORY_CODE,
    I.QTY_MIN,
    I.IMG_URL,
    I.KIND_NAME,
    I.ITEM_NOTE
FROM dbo.T_ITEMS AS I
    LEFT JOIN dbo.V_ITEMS_BALANCE_MIN AS BM ON I.ITEM_CODE = BM.ITEM_CODE
WHERE
    I.ACTIVE = 1
    AND I.ITEM_CODE <> 0

' 
GO
/****** Object:  View [dbo].[V_SALES_ITEM_TRANS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_ITEM_TRANS]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_ITEM_TRANS]
AS
SELECT     dbo.T_SALES_DETAILS.ITEM_CODE, dbo.T_SALES_DETAILS.ITEM_NAME, dbo.V_ITEMS_BALANCE_MIN_PHARMA.ITEM_BARCODE, dbo.V_ITEMS_BALANCE_MIN_PHARMA.BALANCE_PHARMA AS BALANCE
FROM        dbo.V_ITEMS_BALANCE_MIN_PHARMA RIGHT OUTER JOIN
                  dbo.T_SALES_DETAILS ON dbo.V_ITEMS_BALANCE_MIN_PHARMA.ITEM_CODE = dbo.T_SALES_DETAILS.ITEM_CODE
WHERE     (LEN(dbo.V_ITEMS_BALANCE_MIN_PHARMA.ITEM_BARCODE) >= 5)
GROUP BY dbo.T_SALES_DETAILS.ITEM_CODE, dbo.T_SALES_DETAILS.ITEM_NAME, dbo.V_ITEMS_BALANCE_MIN_PHARMA.BALANCE_PHARMA, dbo.T_SALES_DETAILS.IS_TRANS, dbo.V_ITEMS_BALANCE_MIN_PHARMA.ITEM_BARCODE
HAVING     (dbo.T_SALES_DETAILS.IS_TRANS = 0)
' 
GO
/****** Object:  View [dbo].[V_JOINT_SUBSCRIPTION]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_JOINT_SUBSCRIPTION]'))
EXEC dbo.sp_executesql @statement = N'

CREATE VIEW [dbo].[V_JOINT_SUBSCRIPTION]
AS
SELECT     T_JOINT_SUBSCRIPTION_1.T_ID, T_JOINT_SUBSCRIPTION_1.D_DATE, T_JOINT_SUBSCRIPTION_1.USER_CODE, ISNULL
                      ((SELECT     DATEADD(DAY, - 1, MIN(START_DATE)) AS Expr1
                        FROM        dbo.T_JOINT_SUBSCRIPTION
                        WHERE     (JOINT_CODE = dbo.T_JOINT.JOINT_CODE) AND (IS_FINISH = 0)), DATEADD(DAY, - 1, GETDATE())) AS START_DATE, ISNULL
                      ((SELECT     MAX(END_DATE) AS Expr1
                        FROM        dbo.T_JOINT_SUBSCRIPTION AS T_JOINT_SUBSCRIPTION_2
                        WHERE     (JOINT_CODE = dbo.T_JOINT.JOINT_CODE) AND (IS_FINISH = 0)), DATEADD(DAY, - 1, GETDATE())) AS END_DATE, T_JOINT_SUBSCRIPTION_1.SUBSCRIPTION_CODE, dbo.T_SUBSCRIPTION.SUBSCRIPTION_NAME, dbo.T_SUBSCRIPTION.DAYS, 
                  dbo.T_SUBSCRIPTION.DAY_TYPE_CODE, T_JOINT_SUBSCRIPTION_1.AMO, T_JOINT_SUBSCRIPTION_1.CASH, T_JOINT_SUBSCRIPTION_1.REMAIN, T_JOINT_SUBSCRIPTION_1.IS_FINISH, T_JOINT_SUBSCRIPTION_1.JOINT_CODE, dbo.T_JOINT.JOINT_NAME, 
                  dbo.T_JOINT.JOINT_PHONE, dbo.T_JOINT.JOINT_ADDRESS, dbo.T_JOINT.ACCOUNT_CODE, dbo.T_JOINT.JOINT_CARD, dbo.T_JOINT.GENDER, dbo.T_JOINT.LENGHT, dbo.T_JOINT.WEIGHT, dbo.T_JOINT.IMG_PATH, dbo.T_JOINT.IMG_64, dbo.T_JOINT.USER_CREATE, 
                  dbo.T_JOINT.MAX_T_ID, dbo.T_JOINT_GATE.SN, dbo.T_JOINT_GATE.T_ID_GATE, dbo.T_JOINT_GATE.IS_SEND_GATE, dbo.T_JOINT_GATE.IS_SEND_JOINT, dbo.T_JOINT.NOTE, T_JOINT_SUBSCRIPTION_1.IS_PAUSE, T_JOINT_SUBSCRIPTION_1.DAY_REMAIN, 
                  dbo.T_JOINT.IMG_64_SHOW, dbo.T_JOINT.IMG_PATH_SHOW
FROM        dbo.T_JOINT_SUBSCRIPTION AS T_JOINT_SUBSCRIPTION_1 INNER JOIN
                  dbo.T_JOINT ON T_JOINT_SUBSCRIPTION_1.JOINT_CODE = dbo.T_JOINT.JOINT_CODE LEFT OUTER JOIN
                  dbo.T_JOINT_GATE ON T_JOINT_SUBSCRIPTION_1.T_ID = dbo.T_JOINT_GATE.T_ID_SUB LEFT OUTER JOIN
                  dbo.T_SUBSCRIPTION ON T_JOINT_SUBSCRIPTION_1.SUBSCRIPTION_CODE = dbo.T_SUBSCRIPTION.SUBSCRIPTION_CODE


' 
GO
/****** Object:  View [dbo].[V_JOINT_COURSES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_JOINT_COURSES]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_JOINT_COURSES]
AS
SELECT     dbo.T_JOINT_COURSES.JOINT_CODE, dbo.V_JOINT_SUBSCRIPTION.START_DATE, dbo.V_JOINT_SUBSCRIPTION.END_DATE, dbo.V_JOINT_SUBSCRIPTION.JOINT_NAME, dbo.V_JOINT_SUBSCRIPTION.JOINT_PHONE, dbo.V_JOINT_SUBSCRIPTION.GENDER, 
                  dbo.V_JOINT_SUBSCRIPTION.LENGHT, dbo.V_JOINT_SUBSCRIPTION.WEIGHT, dbo.T_JOINT_COURSES.D1_1, dbo.T_JOINT_COURSES.D1_2, dbo.T_JOINT_COURSES.D1_3, dbo.T_JOINT_COURSES.D1_4, dbo.T_JOINT_COURSES.D1_5, dbo.T_JOINT_COURSES.D1_6, 
                  dbo.T_JOINT_COURSES.D1_7, dbo.T_JOINT_COURSES.D1_8, dbo.T_JOINT_COURSES.D2_1, dbo.T_JOINT_COURSES.D2_2, dbo.T_JOINT_COURSES.D2_3, dbo.T_JOINT_COURSES.D2_4, dbo.T_JOINT_COURSES.D2_5, dbo.T_JOINT_COURSES.D2_6, dbo.T_JOINT_COURSES.D2_7, 
                  dbo.T_JOINT_COURSES.D2_8, dbo.T_JOINT_COURSES.D3_1, dbo.T_JOINT_COURSES.D3_2, dbo.T_JOINT_COURSES.D3_3, dbo.T_JOINT_COURSES.D3_4, dbo.T_JOINT_COURSES.D3_5, dbo.T_JOINT_COURSES.D3_6, dbo.T_JOINT_COURSES.D3_7, dbo.T_JOINT_COURSES.D3_8
FROM        dbo.T_JOINT_COURSES INNER JOIN
                  dbo.V_JOINT_SUBSCRIPTION ON dbo.T_JOINT_COURSES.JOINT_CODE = dbo.V_JOINT_SUBSCRIPTION.JOINT_CODE

' 
GO
/****** Object:  View [dbo].[V_ACC3]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC3]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ACC3]
AS
WITH BoxBalances AS (
    SELECT 
        ACCOUNT_CODE,
        SUM(CASE WHEN ACTIVE = 1 THEN DEBIT ELSE 0 END) - SUM(CASE WHEN ACTIVE = 1 THEN CREDIT ELSE 0 END) AS BALANCE,
        SUM(CASE WHEN ACTIVE = 1 THEN DEBIT_IQ ELSE 0 END) - SUM(CASE WHEN ACTIVE = 1 THEN CREDIT_IQ ELSE 0 END) AS BALANCE_IQ,
        SUM(CASE WHEN ACTIVE = 1 THEN DEBIT_CUR ELSE 0 END) - SUM(CASE WHEN ACTIVE = 1 THEN CREDIT_CUR ELSE 0 END) AS BALANCE_CUR
    FROM dbo.T_BOX
    WHERE ACTIVE = 1
    GROUP BY ACCOUNT_CODE
)
SELECT
    CAST(A.ACCOUNT_CODE AS VARCHAR(MAX)) AS ACCOUNT_CODE,
    A.ACCOUNT_NAME,
    ISNULL(B.BALANCE, 0) AS BALANCE,
    ISNULL(B.BALANCE_IQ, 0) AS BALANCE_IQ,
    ISNULL(B.BALANCE_CUR, 0) AS BALANCE_CUR,
    A.ACCOUNT_PARENT,
    A.ACCOUNT_LEVEL,
    A.SECURETY_CODE
FROM dbo.T_ACCOUNTS AS A
    LEFT JOIN BoxBalances AS B ON A.ACCOUNT_CODE = B.ACCOUNT_CODE
WHERE
    A.ACCOUNT_ACTIVE = 1
    AND A.ACCOUNT_LEVEL = 3
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_ACCOUNT3_APPLICATION]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACCOUNT3_APPLICATION]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ACCOUNT3_APPLICATION]
AS
SELECT
    ACCOUNT_CODE,
    ACCOUNT_NAME,
    ACCOUNT_PARENT,
    ACCOUNT_LEVEL,
    BALANCE,
    BALANCE_IQ,
    BALANCE_CUR,
    SECURETY_CODE
FROM dbo.V_ACC3
WHERE ACCOUNT_PARENT = 21
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_A_ERROR_T_STORE_BOX_SALES_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_A_ERROR_T_STORE_BOX_SALES_DETAILS]'))
EXEC dbo.sp_executesql @statement = N'

CREATE VIEW [dbo].[V_A_ERROR_T_STORE_BOX_SALES_DETAILS]
AS
(SELECT BILL_NUMBER,QTY,ITEM_CODE  FROM V_SALES_DETAILS  where ITEM_CODE>0 and IVC_CODE<>10
EXCEPT
SELECT BILL_NUMBER,ST_OUT,ITEM_CODE  FROM T_STORE_BOX WHERE   B_CODE=2 AND ITEM_CODE>0 AND ACTIVE=1)


UNION ALL

(SELECT BILL_NUMBER,ST_OUT,ITEM_CODE  FROM T_STORE_BOX WHERE   B_CODE=2 AND ITEM_CODE>0  AND ACTIVE=1


EXCEPT

SELECT BILL_NUMBER,QTY,ITEM_CODE  FROM V_SALES_DETAILS where ITEM_CODE>0 and IVC_CODE<>10 )




' 
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_PRO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_PRO]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_DETAILS_PRO]
AS
SELECT
    S.BILL_NUMBER,
    S.BILL_INVOICE,
    S.BILL_DATE,
    S.CLIENT_CODE,
    S.CLIENT_NAME,
    S.CLIENT_PHONE,
    S.CLIENT_ADRESS,
    S.MANDOOB_CODE,
    M.MANDOOB_NAME,
    M.MANDOOB_PERCENT,
    S.DESCRIPTION,
    S.USER_CREATE,
    SD.QTY,
    SD.UNIT_NAME,
    SD.UNIT_QTY,
    SD.STORE_CODE,
    ST.STORE_NAME,
    SD.CURRANCY_CODE,
    SD.CURRANCY_EQUAL,
    SD.COST / NULLIF(SD.CURRANCY_EQUAL, 0) AS COST,
    SD.PRICE / NULLIF(SD.CURRANCY_EQUAL, 0) AS PRICE,
    SD.TOTAL / NULLIF(SD.CURRANCY_EQUAL, 0) AS TOTAL,
    SD.DISCOUNT_PERCENT_ITEM,
    SD.DISCOUNT_AMOUNT_ITEM / NULLIF(SD.CURRANCY_EQUAL, 0) AS DISCOUNT_AMOUNT_ITEM,
    SD.TAX_PERCENT_ITEM,
    SD.TAX_AMO_ITEM / NULLIF(SD.CURRANCY_EQUAL, 0) AS TAX_AMO_ITEM,
    SD.MANDOOB_PERCENT_ITEM,
    SD.MANDOOB_AMO_ITEM / NULLIF(SD.CURRANCY_EQUAL, 0) AS MANDOOB_AMO_ITEM,
    SD.TOTAL_TAX_ITEM / NULLIF(SD.CURRANCY_EQUAL, 0) AS TOTAL_TAX_ITEM,
    SD.TOTAL_MANDOOB_ITEM / NULLIF(SD.CURRANCY_EQUAL, 0) AS TOTAL_MANDOOB_ITEM,
    SD.TOTAL_COST / NULLIF(SD.CURRANCY_EQUAL, 0) AS TOTAL_COST,
    SD.NET_TOTAL / NULLIF(SD.CURRANCY_EQUAL, 0) AS NET_TOTAL,
    SD.ARBAH_ITEM / NULLIF(SD.CURRANCY_EQUAL, 0) AS ARBAH_ITEM,
    SD.C_DATE,
    S.ACTIVE,
    S.IVC_CODE,
    IT.IVC_NAME,
    SD.ITEM_CODE,
    SD.ITEM_NAME,
    I.ITEM_BARCODE AS ITEM_SIGN,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    I.TYPE_CODE,
    ITY.TYPE_NAME,
    I.ITEM_NOTE,
    SD.T_ID,
    SD.BILL_BRANCH,
    SD.TOTAL_DISCOUNT / NULLIF(SD.CURRANCY_EQUAL, 0) AS TOTAL_DISCOUNT,
    SD.ITEM_NOTE_SALES,
    SD.BILL_BUY,
    SD.QTY_FREE,
    SD.TOTAL_QTY,
    SD.TOTAL_POINTS,
    I.KIND_NAME
FROM
    dbo.T_SALES S
    INNER JOIN dbo.T_SALES_DETAILS SD ON S.BILL_NUMBER = SD.BILL_NUMBER
    LEFT JOIN dbo.T_ITEMS I ON SD.ITEM_CODE = I.ITEM_CODE
    LEFT JOIN dbo.T_IVC_TYPE IT ON S.IVC_CODE = IT.IVC_CODE
    LEFT JOIN dbo.T_MANDOOB M ON S.MANDOOB_CODE = M.MANDOOB_CODE
    LEFT JOIN dbo.T_CURRANNCY CUR ON SD.CURRANCY_CODE = CUR.CURRANCY_CODE
    LEFT JOIN dbo.T_STORE_TYPE ST ON SD.STORE_CODE = ST.STORE_CODE
    LEFT JOIN dbo.T_ITEM_TYPE ITY ON I.TYPE_CODE = ITY.TYPE_CODE
    LEFT JOIN dbo.T_ITEM_CATEGORY IC ON I.CATEGORY_CODE = IC.CATEGORY_CODE
WHERE
    S.ACTIVE = 1
    AND S.IVC_CODE < 10
' 
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_LOSSER]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_LOSSER]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_DETAILS_LOSSER]
AS
SELECT
    ITEM_CODE,
    ITEM_NAME,
    ITEM_SIGN,
    CLIENT_CODE,
    CLIENT_NAME,
    CATEGORY_CODE,
    CATEGORY_NAME,
    KIND_NAME,
    SUM(QTY) AS QTY,
    UNIT_NAME,
    SUM(TOTAL_COST) AS TOTAL_COST,
    SUM(NET_TOTAL) AS NET_TOTAL,
    SUM(ARBAH_ITEM) AS ARBAH_ITEM,
    BILL_BRANCH,
    BILL_NUMBER,
    BILL_BUY,
    USER_CREATE,
    UNIT_QTY,
    BILL_DATE,
    DESCRIPTION,
    COST,
    PRICE,
    TOTAL,
    DISCOUNT_PERCENT_ITEM,
    STORE_CODE,
    STORE_NAME,
    DISCOUNT_AMOUNT_ITEM,
    TOTAL_DISCOUNT,
    SUM(QTY_FREE) AS QTY_FREE,
    SUM(TOTAL_QTY) AS TOTAL_QTY
FROM
    dbo.V_SALES_DETAILS_PRO
WHERE
    ARBAH_ITEM < 0
    AND QTY > 0
GROUP BY
    ITEM_CODE,
    ITEM_NAME,
    ITEM_SIGN,
    UNIT_NAME,
    CLIENT_CODE,
    CLIENT_NAME,
    CATEGORY_CODE,
    CATEGORY_NAME,
    KIND_NAME,
    BILL_BRANCH,
    BILL_NUMBER,
    BILL_BUY,
    USER_CREATE,
    UNIT_QTY,
    BILL_DATE,
    DESCRIPTION,
    COST,
    PRICE,
    TOTAL,
    DISCOUNT_PERCENT_ITEM,
    DISCOUNT_AMOUNT_ITEM,
    TOTAL_DISCOUNT,
    STORE_CODE,
    STORE_NAME
' 
GO
/****** Object:  View [dbo].[V_BOX]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BOX]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_BOX]
AS
SELECT        TOP (1000000000) dbo.T_BOX.T_ID_BOX, dbo.T_BOX.BILL_BRANCH, dbo.T_BOX.BILL_NUMBER, dbo.T_BOX.BILL_STR, dbo.T_BOX.FULL_BILL, dbo.T_BOX.BILL_DATE, dbo.T_BOX.BILL_TIME, dbo.T_BOX.MOVE_CODE, 
                         dbo.T_BOX.B_CODE, dbo.T_BILL_TYPE.B_NAME, dbo.T_BILL_TYPE.B_SIGN, dbo.T_BILL_TYPE.B_COLOR, dbo.T_BOX.BRANCH_CODE, dbo.T_BRANCH.BRANCH_NAME, dbo.T_BOX.ACCOUNT_CODE, 
                         dbo.T_ACCOUNTS.ACCOUNT_NAME, dbo.T_ACCOUNTS.ACCOUNT_FULL_NAME, dbo.T_ACCOUNTS.ACCOUNT_PARENT, dbo.T_BOX.ACCOUNT_DESCRIPTION, dbo.T_BOX.DEBIT, dbo.T_BOX.CREDIT, dbo.T_BOX.DEBIT_IQ, 
                         dbo.T_BOX.CREDIT_IQ, dbo.T_BOX.CURRANCY_CODE, dbo.T_BOX.CURRANCY_EQUAL, dbo.T_BOX.DEBIT_CUR, dbo.T_BOX.CREDIT_CUR, dbo.T_BOX.DESCRIPTION, dbo.T_BOX.USER_CODE, dbo.T_BOX.C_DATE, 
                         dbo.T_BOX.ACTIVE, dbo.T_BOX.GUIDS, dbo.T_MOVE.MOVE_NAME, dbo.T_BOX.BILL_RELATION, dbo.T_BOX.B_RELATION, dbo.T_BOX.DATE_RELATION, dbo.T_BOX.FLAG_RELATION, dbo.T_BOX.DEAL_CODE, 
                         dbo.T_DEAL.DEAL_NAME, dbo.T_BOX.CHECKED, dbo.T_USERS.USER_NAME, dbo.T_CURRANNCY.CURRANCY_NAME, dbo.T_CLIENT.MANDOOB_CODE, dbo.T_MANDOOB.MANDOOB_NAME, 
                         dbo.T_CLIENT.CLIENT_PHONE_SMS, dbo.T_CLIENT.CLIENT_REGION
FROM            dbo.T_BOX LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.T_BOX.ACCOUNT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.T_BOX.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE LEFT OUTER JOIN
                         dbo.T_USERS ON dbo.T_BOX.USER_CODE = dbo.T_USERS.USER_CODE LEFT OUTER JOIN
                         dbo.T_DEAL ON dbo.T_BOX.DEAL_CODE = dbo.T_DEAL.DEAL_CODE LEFT OUTER JOIN
                         dbo.T_MOVE ON dbo.T_BOX.MOVE_CODE = dbo.T_MOVE.MOVE_CODE LEFT OUTER JOIN
                         dbo.T_ACCOUNTS ON dbo.T_BOX.ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.T_BRANCH ON dbo.T_BOX.BRANCH_CODE = dbo.T_BRANCH.BRANCH_CODE LEFT OUTER JOIN
                         dbo.T_BILL_TYPE ON dbo.T_BOX.B_CODE = dbo.T_BILL_TYPE.B_CODE LEFT OUTER JOIN
                         dbo.T_MANDOOB ON dbo.T_CLIENT.MANDOOB_CODE = dbo.T_MANDOOB.MANDOOB_CODE
WHERE        (dbo.T_BOX.ACTIVE = 1)
ORDER BY dbo.T_BOX.T_ID_BOX
' 
GO
/****** Object:  View [dbo].[V_BOX_ERADAT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BOX_ERADAT]'))
EXEC dbo.sp_executesql @statement = N'


CREATE VIEW [dbo].[V_BOX_ERADAT]
AS
SELECT        TOP(1000000000)  T_ID_BOX, BILL_BRANCH, BILL_NUMBER, BILL_STR, FULL_BILL, BILL_DATE, BILL_TIME, MOVE_CODE, B_CODE, B_NAME, B_SIGN, B_COLOR, BRANCH_CODE, BRANCH_NAME, ACCOUNT_CODE, ACCOUNT_NAME, 
                         ACCOUNT_FULL_NAME, ACCOUNT_PARENT, ACCOUNT_DESCRIPTION, DEBIT, CREDIT, DEBIT_IQ, CREDIT_IQ, CURRANCY_CODE, CURRANCY_EQUAL, DEBIT_CUR, CREDIT_CUR, DESCRIPTION, USER_CODE, USER_NAME, 
                         C_DATE, ACTIVE, GUIDS,
						CASE
						 WHEN B_CODE=5 THEN
                             (SELECT        ISNULL(N''من حـ /'' + FROM_ACC + N'' - الى حـ /'' + TO_ACC, N'' '') AS Expr1
                                FROM            dbo.T_SANAD
                                WHERE        (BILL_BRANCH LIKE dbo.V_BOX.BILL_BRANCH) AND (dbo.V_BOX.B_CODE = 5) AND ( ACCOUNT_CODE=dbo.V_BOX.ACCOUNT_CODE)) 
						 WHEN B_CODE=15 THEN
                             (SELECT        ISNULL(N''من حـ /'' + FROM_ACC + N'' - الى حـ /'' + TO_ACC, N'' '') AS Expr1
                                FROM            dbo.T_SANAD_CNY
                                WHERE        (BILL_BRANCH LIKE dbo.V_BOX.BILL_BRANCH) AND (dbo.V_BOX.B_CODE = 15) AND ( ACCOUNT_CODE=dbo.V_BOX.ACCOUNT_CODE) ) 
								 WHEN B_CODE=28 THEN
                             (SELECT        ISNULL(N''من حـ /'' + FROM_ACC + N'' - الى حـ /'' + TO_ACC, N'' '') AS Expr1
                                FROM            dbo.T_SANAD_HAWALA
                                WHERE        (BILL_BRANCH LIKE dbo.V_BOX.BILL_BRANCH) AND (dbo.V_BOX.B_CODE = 28)AND ( ACCOUNT_CODE=dbo.V_BOX.ACCOUNT_CODE)) 
						 WHEN B_CODE=7 THEN
                             (SELECT      TOP(1)  ISNULL(N''من حـ /'' + N''سند قيد متعدد'' + N'' - الى حـ /'' + ACCOUNT_NAME, N'' '') AS Expr1
                                FROM            dbo.T_SANAD_KAYD_DETAILS
                                WHERE        (BILL_BRANCH LIKE dbo.V_BOX.BILL_BRANCH) AND (dbo.V_BOX.B_CODE = 7) AND ( ACCOUNT_CODE=dbo.V_BOX.ACCOUNT_CODE)) 
								END AS FROM_TO_ACC
								, MOVE_NAME
FROM            dbo.V_BOX
WHERE        (ACCOUNT_PARENT = 4)
ORDER BY T_ID_BOX



' 
GO
/****** Object:  View [dbo].[V_SALES_ITEM_MANDOOB]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_ITEM_MANDOOB]'))
EXEC dbo.sp_executesql @statement = N'



CREATE VIEW [dbo].[V_SALES_ITEM_MANDOOB]
AS
SELECT     dbo.V_SALES_DETAILS.MANDOOB_CODE_DETAILS AS MANDOOB_CODE , dbo.V_SALES_DETAILS.MANDOOB_NAME_DETAILS AS MANDOOB_NAME,dbo.V_SALES_DETAILS.UNIT_NAME,dbo.V_SALES_DETAILS.UNIT_QTY, SUM(dbo.V_SALES_DETAILS.QTY) AS QTY, SUM(dbo.V_SALES_DETAILS.TOTAL) AS TOTAL, SUM(dbo.V_SALES_DETAILS.TOTAL_COST) AS TOTAL_COST, SUM(dbo.V_SALES_DETAILS.NET_TOTAL) 
                  AS NET_TOTAL, SUM(dbo.V_SALES_DETAILS.ARBAH_ITEM) AS ARBAH_ITEM, dbo.V_SALES_DETAILS.ITEM_CODE, dbo.V_SALES_DETAILS.ITEM_NAME, dbo.V_SALES_DETAILS.ITEM_SIGN, dbo.V_SALES_DETAILS.CATEGORY_CODE, dbo.V_SALES_DETAILS.CATEGORY_NAME,  dbo.V_SALES_DETAILS.KIND_NAME, 
                  ISNULL(dbo.T_ITEMS_MANDOOB.MANDOOB_PERCENT, 0) AS MANDOOB_PERCENT, ISNULL(dbo.T_ITEMS_MANDOOB.MANDOOB_AMO, 0) AS MANDOOB_AMO
, SUM(dbo.V_SALES_DETAILS.QTY_FREE) AS QTY_FREE, SUM(dbo.V_SALES_DETAILS.TOTAL_QTY) AS TOTAL_QTY
				  
FROM        dbo.V_SALES_DETAILS LEFT OUTER JOIN
                  dbo.T_ITEMS_MANDOOB ON dbo.V_SALES_DETAILS.MANDOOB_CODE = dbo.T_ITEMS_MANDOOB.MANDOOB_CODE AND dbo.V_SALES_DETAILS.ITEM_CODE = dbo.T_ITEMS_MANDOOB.ITEM_CODE
				 
GROUP BY dbo.V_SALES_DETAILS.MANDOOB_CODE_DETAILS, dbo.V_SALES_DETAILS.MANDOOB_NAME_DETAILS,dbo.V_SALES_DETAILS.UNIT_NAME,dbo.V_SALES_DETAILS.UNIT_QTY, dbo.V_SALES_DETAILS.ITEM_CODE, dbo.V_SALES_DETAILS.ITEM_NAME, dbo.V_SALES_DETAILS.ITEM_SIGN, dbo.V_SALES_DETAILS.CATEGORY_CODE, dbo.V_SALES_DETAILS.CATEGORY_NAME,  dbo.V_SALES_DETAILS.KIND_NAME, 
                  ISNULL(dbo.T_ITEMS_MANDOOB.MANDOOB_PERCENT, 0), ISNULL(dbo.T_ITEMS_MANDOOB.MANDOOB_AMO, 0)
 
   
' 
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_ARBAH]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_ARBAH]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_DETAILS_ARBAH]
AS
SELECT
    ITEM_CODE,
    ITEM_NAME,
    ITEM_SIGN,
    CLIENT_CODE,
    CLIENT_NAME,
    CATEGORY_CODE,
    CATEGORY_NAME,
    KIND_NAME,
    SUM(QTY) AS QTY,
    UNIT_NAME,
    SUM(TOTAL_COST) AS TOTAL_COST,
    SUM(NET_TOTAL) AS NET_TOTAL,
    SUM(ARBAH_ITEM) AS ARBAH_ITEM,
    BILL_BRANCH,
    BILL_NUMBER,
    BILL_BUY,
    USER_CREATE,
    UNIT_QTY,
    BILL_DATE,
    DESCRIPTION,
    COST,
    PRICE,
    TOTAL,
    DISCOUNT_PERCENT_ITEM,
    STORE_CODE,
    STORE_NAME,
    DISCOUNT_AMOUNT_ITEM,
    TOTAL_DISCOUNT,
    SUM(QTY_FREE) AS QTY_FREE,
    SUM(TOTAL_QTY) AS TOTAL_QTY
FROM
    dbo.V_SALES_DETAILS_PRO
WHERE
    ARBAH_ITEM >= 0 OR QTY < 0
GROUP BY
    ITEM_CODE,
    ITEM_NAME,
    ITEM_SIGN,
    UNIT_NAME,
    CLIENT_CODE,
    CLIENT_NAME,
    CATEGORY_CODE,
    CATEGORY_NAME,
    BILL_BRANCH,
    BILL_NUMBER,
    BILL_BUY,
    USER_CREATE,
    UNIT_QTY,
    BILL_DATE,
    DESCRIPTION,
    COST,
    PRICE,
    TOTAL,
    DISCOUNT_PERCENT_ITEM,
    DISCOUNT_AMOUNT_ITEM,
    TOTAL_DISCOUNT,
    STORE_CODE,
    STORE_NAME,
    KIND_NAME
' 
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_DESCREPTION]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN_PHARMA_DESCREPTION]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_DESCREPTION]
AS
SELECT
    T.ITEM_CODE,
    T.TYPE_CODE,
    ISNULL(V.BALANCE, 0) AS BALANCE_PHARMA,
    1 AS UNIT_CODE,
    T.UNIT_NAME,
    T.RAF_NAME,
    T.SELL AS SELL1,
    T.SELL2,
    T.UNIT2_NAME,
    T.UNIT2_QTY,
    T.ITEM_BARCODE,
    T.ITEM_NAME,
    -- الرصيد بوحدة 1
    CASE 
        WHEN ISNULL(V.BALANCE, 0) < 0 THEN ISNULL(V.BALANCE, 0)
        WHEN T.UNIT2_QTY = 1 THEN ISNULL(V.BALANCE, 0)
        ELSE ISNULL(V.BALANCE, 0) - (FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY) * T.UNIT2_QTY)
    END AS BALANCE_U1,
    -- الرصيد بوحدة 2
    CASE 
        WHEN ISNULL(V.BALANCE, 0) < 0 THEN 0
        WHEN T.UNIT2_QTY = 1 THEN 0
        ELSE FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY)
    END AS BALANCE_U2,
    -- الرصيد النصي
    CASE 
        WHEN T.UNIT2_QTY = 1 
            THEN CAST(ISNULL(V.BALANCE, 0) AS varchar(20)) + N'' '' + T.UNIT_NAME
        ELSE
            CAST(
                CASE 
                    WHEN ISNULL(V.BALANCE, 0) < 0 THEN 0
                    ELSE FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY)
                END AS varchar(20)
            ) + N'' '' + T.UNIT2_NAME +
            CASE 
                WHEN ISNULL(V.BALANCE, 0) < 0 THEN N'' || ''
                ELSE N'' + ''
            END +
            CAST(
                CASE 
                    WHEN ISNULL(V.BALANCE, 0) < 0 THEN ISNULL(V.BALANCE, 0)
                    ELSE ISNULL(V.BALANCE, 0) - (FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY) * T.UNIT2_QTY)
                END AS varchar(20)
            ) + N'' '' + T.UNIT_NAME
    END AS BALANCE,
    -- تواريخ الصلاحية والتحذير
    T.EXPIRED_DAY,
    T.EXPIRED_DATE,
    T.EXPIRED_WARRNING,
    -- اسم كامل (باركود:اسم)
    CASE 
        WHEN T.ITEM_BARCODE = N'''' THEN T.ITEM_NAME
        ELSE T.ITEM_BARCODE + N'' : '' + T.ITEM_NAME
    END AS FULL_NAME,
    -- الأعمدة الإضافية
    T.IS_HIDE,
    T.COST AS PRICE_BUY,
    T.COST AS PRICE_COST,
    T.COST AS PRICE_AVG_COST,
    T.SELL AS PRICE_SALE_1,
    T.SELL_G AS PRICE_SALE_2,
    T.SELL_W AS PRICE_SALE_3,
    T.SELL_CNY AS PRICE_SALE_CUR,
    T.CATEGORY_CODE,
    T.QTY_MIN,
    T.IMG_URL,
    T.KIND_NAME,
    T.ITEM_NOTE,
    T.COMPANY_CREATE
FROM 
    dbo.T_ITEMS T
    LEFT JOIN dbo.V_ITEMS_BALANCE_MIN V ON T.ITEM_CODE = V.ITEM_CODE
WHERE 
    T.ACTIVE = 1 
    AND T.ITEM_CODE <> 0
' 
GO
/****** Object:  View [dbo].[V_STORE_BOX]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX]'))
EXEC dbo.sp_executesql @statement = N'

CREATE VIEW [dbo].[V_STORE_BOX]
AS
SELECT        TOP (1000000000) dbo.T_ITEMS.ITEM_CODE, dbo.T_ITEMS.ITEM_BARCODE, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.TYPE_CODE, dbo.T_ITEM_UNIT.UNIT_CODE, dbo.T_ITEM_UNIT.UNIT_QTY, dbo.T_ITEMS.QTY_MIN, 
                         dbo.T_ITEM_UNIT.UNIT_NAME, SUM(ISNULL(dbo.T_STORE_BOX.BALANCE_M, 0)) / dbo.T_ITEM_UNIT.UNIT_QTY AS BALANCE, dbo.T_ITEM_UNIT.DF_SALE, dbo.T_ITEM_UNIT.DF_STORE, dbo.T_ITEM_UNIT.DF_BUY, 
                         iif(dbo.T_ITEMS.ITEM_BARCODE = N'''', dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.ITEM_BARCODE + '' : '' + dbo.T_ITEMS.ITEM_NAME) AS FULL_NAME, dbo.T_ITEM_UNIT.PRICE_BUY, dbo.T_ITEM_UNIT.PRICE_COST, 
                         dbo.T_ITEM_UNIT.PRICE_SALE_1, dbo.T_ITEM_UNIT.PRICE_SALE_2, dbo.T_ITEM_UNIT.PRICE_SALE_3, dbo.T_ITEM_UNIT.PRICE_AVG_COST, dbo.T_ITEM_UNIT.PRICE_SALE_CUR, dbo.T_ITEMS.CATEGORY_CODE, 
                         dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_STORE_TYPE.IS_USED, dbo.T_ITEMS.SHOW_MENU, dbo.T_ITEM_CATEGORY.SHOW_MENU AS SHOW_MENU_CAT, dbo.T_ITEMS.TIME_USE, dbo.T_ITEMS.RAF_NAME
, dbo.T_ITEMS.IS_HIDE, dbo.T_ITEMS.KIND_NAME
FROM            dbo.T_ITEMS INNER JOIN
                         dbo.T_ITEM_UNIT ON dbo.T_ITEMS.ITEM_CODE = dbo.T_ITEM_UNIT.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_STORE_BOX ON dbo.T_ITEMS.ITEM_CODE = dbo.T_STORE_BOX.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_STORE_TYPE ON dbo.T_STORE_BOX.STORE_CODE = dbo.T_STORE_TYPE.STORE_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE
WHERE        (dbo.T_ITEM_UNIT.ON_OFF = 1 AND dbo.T_STORE_BOX.STORE_CODE <> - 1 AND dbo.T_STORE_TYPE.IS_USED = 1)
GROUP BY dbo.T_ITEMS.ITEM_CODE, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEM_UNIT.UNIT_CODE, dbo.T_ITEM_UNIT.UNIT_NAME, dbo.T_ITEM_UNIT.UNIT_QTY, dbo.T_ITEM_UNIT.DF_BUY, dbo.T_ITEM_UNIT.ON_OFF, 
                         dbo.T_ITEMS.ITEM_BARCODE, dbo.T_ITEM_UNIT.DF_SALE, dbo.T_ITEM_UNIT.DF_STORE, dbo.T_ITEMS.ACTIVE, dbo.T_ITEMS.TYPE_CODE, dbo.T_STORE_BOX.ACTIVE, dbo.T_ITEM_UNIT.PRICE_BUY, 
                         dbo.T_ITEM_UNIT.PRICE_COST, dbo.T_ITEM_UNIT.PRICE_SALE_1, dbo.T_ITEM_UNIT.PRICE_SALE_2, dbo.T_ITEM_UNIT.PRICE_SALE_3, dbo.T_ITEM_UNIT.PRICE_AVG_COST, dbo.T_ITEM_UNIT.PRICE_SALE_CUR, 
                         dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_STORE_TYPE.IS_USED, dbo.T_ITEMS.SHOW_MENU, dbo.T_ITEM_CATEGORY.SHOW_MENU, dbo.T_ITEMS.QTY_MIN, 
                         dbo.T_ITEMS.TIME_USE, dbo.T_ITEMS.RAF_NAME, dbo.T_ITEMS.IS_HIDE, dbo.T_ITEMS.KIND_NAME
HAVING        (dbo.T_ITEMS.ACTIVE = 1) AND dbo.T_STORE_BOX.ACTIVE = 1
ORDER BY dbo.T_ITEMS.ITEM_CODE


' 
GO
/****** Object:  View [dbo].[V_STORE_BOX_QTYMIN]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_QTYMIN]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_STORE_BOX_QTYMIN]
AS
SELECT
    SB.ITEM_CODE,
    SB.ITEM_BARCODE,
    SB.ITEM_NAME,
    SB.CATEGORY_CODE,
    SB.CATEGORY_NAME,
    SB.KIND_NAME,
    SB.UNIT_CODE,
    SB.UNIT_QTY,
    SB.UNIT_NAME,
    SB.BALANCE,
    SB.DF_STORE,
    TI.QTY_MIN
FROM dbo.V_STORE_BOX AS SB
    LEFT JOIN dbo.T_ITEMS AS TI ON SB.ITEM_CODE = TI.ITEM_CODE
WHERE
    SB.DF_STORE = 1
    AND TI.QTY_MIN > SB.BALANCE
    AND SB.TYPE_CODE <> 5
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_ITEMS_ON]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_ON]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEMS_ON]
AS
SELECT
    T.ITEM_CODE,
    T.ITEM_NAME,
    T.CATEGORY_CODE,
    C.CATEGORY_NAME,
    T.TYPE_CODE,
    TY.TYPE_NAME,
    T.COST,
    T.SELL,
    T.ACTIVE,
    T.SORT,
    T.PRINTER_ID,
    T.ITEM_BARCODE,
    T.ON2_OFF2,
    T.UNIT2_NAME,
    T.UNIT2_QTY,
    T.SELL2,
    T.SELL_CNY,
    T.SELL2_CNY,
    T.DF_SALE,
    T.ITEM_NOTE,
    T.IMG_URL,
    T.ITEM_NAME_EN,
    T.ITEM_NOTE_EN,
    T.TIME_USE,
    T.IS_STORE,
    T.QTY_MIN,
    T.SHOW_MENU,
    T.SELL_G,
    T.SELL_W,
    T.SELL2_G,
    T.SELL2_W,
    T.CLIENT_NAME_BEST,
    T.RAF_NAME,
    T.IS_TRANS,
    T.IS_DISCOUNT,
    T.MAIN_ITEM_CODE,
    T.DISC_AMO,
    T.DISC_PERCENT,
    T.IS_FEATURE,
    T.ITEM_PARENT,
    T.ITEM_SUB_PARENT,
    T.LEVEL_SUB,
    T.AREA_M2,
    T.WIDTH_CM,
    T.LENGTH_CM,
    T.COMPANY_CREATE,
    T.EFFECTIVE_MATERIAL,
    T.IS_HIDE,
    T.SERVER_ITEM_CODE,
    T.SERVER_BRANCH,
    T.IS_SERIAL,
    T.IS_NEW_BUY,
    T.KIND_NAME
FROM
    dbo.T_ITEMS T
    LEFT JOIN dbo.T_ITEM_CATEGORY C ON T.CATEGORY_CODE = C.CATEGORY_CODE
    LEFT JOIN dbo.T_ITEM_TYPE TY ON T.TYPE_CODE = TY.TYPE_CODE
WHERE
    T.ACTIVE = 1
    AND T.IS_STORE = 1
    AND T.IS_HIDE = 0
' 
GO
/****** Object:  View [dbo].[V_ITEM_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_BARCODE]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEM_BARCODE]
AS
SELECT
    B.T_ID,
    B.ITEM_CODE,
    V.ITEM_NAME,
    V.CATEGORY_CODE,
    V.CATEGORY_NAME,
    V.TYPE_CODE,
    V.TYPE_NAME,
    V.COST,
    V.SELL,
    V.ACTIVE,
    V.SORT,
    V.PRINTER_ID,
    B.TYPE_VAL,
    B.ITEM_BARCODE,
    V.ITEM_BARCODE AS ITEM_BARCODE_MAIN,
    B.UNIT_CODE,
    B.UNIT_NAME,
    V.ON2_OFF2,
    V.UNIT2_NAME,
    V.UNIT2_QTY,
    V.SELL2,
    V.SELL_CNY,
    V.SELL2_CNY,
    V.DF_SALE,
    V.ITEM_NOTE,
    V.IMG_URL,
    V.ITEM_NAME_EN,
    V.ITEM_NOTE_EN,
    V.TIME_USE,
    V.IS_STORE,
    V.QTY_MIN,
    V.SHOW_MENU,
    V.SELL_G,
    V.SELL_W,
    V.SELL2_G,
    V.SELL2_W,
    V.CLIENT_NAME_BEST,
    V.RAF_NAME,
    V.IS_HIDE,
    V.SERVER_ITEM_CODE,
    V.SERVER_BRANCH,
    V.IS_SERIAL,
    V.KIND_NAME
FROM dbo.T_ITEM_BARCODE AS B
    INNER JOIN dbo.V_ITEMS_ON AS V ON B.ITEM_CODE = V.ITEM_CODE
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_CLIENT_REGION]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_CLIENT_REGION]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_DETAILS_CLIENT_REGION]
AS
SELECT
    VS.CLIENT_CODE,
    C.CLIENT_NAME,
    C.CLIENT_FULL_PHONE,
    C.CLIENT_ADDRESS,
    SUM(VS.TOTAL_SALES) AS TOTAL,
    SUM(VS.TOTAL_DISCOUNT) AS DISCOUNT_AMOUNT_ITEM,
    SUM(VS.TOTAL_COST) AS TOTAL_COST,
    SUM(VS.NET_SALES) AS NET_TOTAL,
    C.CLIENT_REGION,
    C.CLIENT_BUSINESS,
    VS.BILL_DATE,
    SUM(VS.TOTAL_ARBAH) AS TOTAL_ARBAH
FROM
    dbo.V_SALES VS
    LEFT JOIN dbo.T_CLIENT C ON VS.CLIENT_CODE = C.CLIENT_CODE
GROUP BY
    VS.CLIENT_CODE,
    C.CLIENT_NAME,
    C.CLIENT_FULL_PHONE,
    C.CLIENT_ADDRESS,
    C.CLIENT_REGION,
    C.CLIENT_BUSINESS,
    VS.BILL_DATE
' 
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_APP]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_APP]'))
EXEC dbo.sp_executesql @statement = N'


CREATE VIEW [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_APP]
AS
SELECT        MAX(T_ID) AS T_ID, BILL_BRANCH, BILL_NUMBER, ITEM_CODE, ITEM_NAME, KIND_NAME, SUM(QTY) AS QTY, UNIT_QTY, UNIT_NAME, MIN(EXP_DATE) AS EXP_DATE, MAX(PRICE_BUY) AS PRICE_BUY, CURRANCY_EQUAL, MAX(PRICE) 
                         AS PRICE, MAX(TOTAL) AS TOTAL, MAX(COST) AS COST, MAX(TOTAL_COST) AS TOTAL_COST, MAX(DISTINCT QTY_SALES) AS QTY_SALES, MAX(DISTINCT REMAIN_BUY) AS REMAIN_BUY, MAX(DISTINCT REMAIN_BUY_MIN) 
                         AS REMAIN_BUY_MIN
FROM            dbo.V_BUY_DETAILS_EXPIRED_REMAIN
WHERE REMAIN_BUY_MIN>0
GROUP BY BILL_BRANCH, BILL_NUMBER, ITEM_CODE, ITEM_NAME, UNIT_QTY, UNIT_NAME, CURRANCY_EQUAL,KIND_NAME



' 
GO
/****** Object:  View [dbo].[V_ITEM_UNIT_FORM_INFO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_UNIT_FORM_INFO]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEM_UNIT_FORM_INFO]
AS
SELECT
    T.ITEM_CODE,
    T.ITEM_NAME,
    ISNULL(MAX(V.BILL_DATE), DATEADD(DAY, 1, GETDATE())) AS LAST_SALE,
    DATEDIFF(DAY, ISNULL(MAX(V.BILL_DATE), DATEADD(DAY, 1, GETDATE())), GETDATE()) AS LAST_DIFF,
    CAST(
        CAST(
            ISNULL(
                (ISNULL(SUM(V.QTY * V.UNIT_QTY), 0) 
                 / NULLIF(SUM(SUM(V.QTY * V.UNIT_QTY)) OVER (PARTITION BY V.ACTIVE), 0)
                ), 0
            ) * 100 AS DECIMAL(18, 1)
        ) AS NVARCHAR(MAX)
    ) + N'' % '' AS SELL_PERCENT,
    ISNULL(SUM(V.QTY * V.UNIT_QTY), 0) AS QTY_SELL_PERCENT,
    ISNULL(CAST(MAX(V.PRICE) AS NVARCHAR(MAX)), 0) AS MAX_SELL,
    0 AS QTY_MAX_SELL, -- قيمة Placeholder يمكنك تعديلها لاحقًا
    ISNULL(CAST(MIN(V.PRICE) AS NVARCHAR(MAX)), 0) AS MIN_SELL,
    0 AS QTY_MIN_SELL, -- قيمة Placeholder يمكنك تعديلها لاحقًا
    ISNULL(T.UNIT2_NAME, (SELECT UNIT_NAME FROM T_ITEM_UNIT WHERE ITEM_CODE = T.ITEM_CODE AND UNIT_CODE = 1)) AS UUNIT_NAME,
    ISNULL(T.UNIT2_QTY, 1) AS UNIT_QTY
FROM dbo.T_ITEMS AS T
    LEFT JOIN dbo.V_SALES_DETAILS AS V ON T.ITEM_CODE = V.ITEM_CODE
WHERE
    T.ACTIVE = 1
GROUP BY
    T.ITEM_CODE,
    T.ITEM_NAME,
    T.UNIT2_NAME,
    T.UNIT2_QTY,
    V.ACTIVE
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN_STORE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN_STORE]'))
EXEC dbo.sp_executesql @statement = N'
 

CREATE VIEW [dbo].[V_ITEMS_BALANCE_MIN_STORE]
AS
SELECT
    I.ITEM_CODE,
    SUM(CAST(ISNULL(SB.BALANCE_M, 0) AS decimal(18, 0))) AS BALANCE,
    1 AS UNIT_CODE,
    I.CATEGORY_CODE,
    I.QTY_MIN,
    SB.STORE_CODE,
    ST.STORE_NAME,
    I.KIND_NAME
FROM
    dbo.T_ITEMS I
    INNER JOIN dbo.T_STORE_BOX SB 
        ON I.ITEM_CODE = SB.ITEM_CODE 
        AND SB.ACTIVE = 1
    INNER JOIN dbo.T_STORE_TYPE ST 
        ON SB.STORE_CODE = ST.STORE_CODE 
        AND ST.IS_USED = 1
WHERE
    I.ACTIVE = 1
GROUP BY
    I.ITEM_CODE,
    I.CATEGORY_CODE,
    I.QTY_MIN,
    SB.STORE_CODE,
    ST.STORE_NAME,
    I.KIND_NAME;
' 
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_GSTORE_MS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN_PHARMA_GSTORE_MS]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_GSTORE_MS]
AS
SELECT
    T.ITEM_CODE,
    T.TYPE_CODE,
    ISNULL(V.BALANCE, 0) AS BALANCE_PHARMA,
    1 AS UNIT_CODE,
    T.UNIT_NAME,
    T.RAF_NAME,
    T.SELL AS SELL1,
    T.SELL2,
    T.UNIT2_NAME,
    T.UNIT2_QTY,
    T.ITEM_BARCODE,
    T.ITEM_NAME,
    -- الرصيد بوحدة 1
    CASE 
        WHEN ISNULL(V.BALANCE, 0) < 0 THEN ISNULL(V.BALANCE, 0)
        WHEN T.UNIT2_QTY = 1 THEN ISNULL(V.BALANCE, 0)
        ELSE ISNULL(V.BALANCE, 0) - (FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY) * T.UNIT2_QTY)
    END AS BALANCE_U1,
    -- الرصيد بوحدة 2
    CASE 
        WHEN ISNULL(V.BALANCE, 0) < 0 THEN 0
        WHEN T.UNIT2_QTY = 1 THEN 0
        ELSE FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY)
    END AS BALANCE_U2,
    -- الرصيد بالنص
    CASE 
        WHEN T.UNIT2_QTY = 1 
            THEN CAST(ISNULL(V.BALANCE, 0) AS varchar(20)) + N'' '' + T.UNIT_NAME
        ELSE
            CAST(
                CASE 
                    WHEN ISNULL(V.BALANCE, 0) < 0 THEN 0
                    ELSE FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY)
                END AS varchar(20)
            ) + N'' '' + T.UNIT2_NAME +
            CASE 
                WHEN ISNULL(V.BALANCE, 0) < 0 THEN N'' || ''
                ELSE N'' + ''
            END +
            CAST(
                CASE 
                    WHEN ISNULL(V.BALANCE, 0) < 0 THEN ISNULL(V.BALANCE, 0)
                    ELSE ISNULL(V.BALANCE, 0) - (FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY) * T.UNIT2_QTY)
                END AS varchar(20)
            ) + N'' '' + T.UNIT_NAME
    END AS BALANCE,
    T.EXPIRED_DAY,
    T.EXPIRED_DATE,
    T.EXPIRED_WARRNING,
    -- الاسم الكامل (باركود : اسم)
    CASE 
        WHEN T.ITEM_BARCODE = N'''' THEN T.ITEM_NAME
        ELSE T.ITEM_BARCODE + N'' : '' + T.ITEM_NAME
    END AS FULL_NAME,
    T.IS_HIDE,
    T.COST AS PRICE_BUY,
    T.COST AS PRICE_COST,
    T.COST AS PRICE_AVG_COST,
    T.SELL AS PRICE_SALE_1,
    T.SELL_G AS PRICE_SALE_2,
    T.SELL_W AS PRICE_SALE_3,
    T.SELL_CNY AS PRICE_SALE_CUR,
    T.CATEGORY_CODE,
    T.QTY_MIN,
    T.IMG_URL,
    V.STORE_CODE,
    V.STORE_NAME,
    T.KIND_NAME,
    T.ITEM_NOTE,
    T.SORT,
    T.ON2_OFF2,
    T.IS_DISCOUNT
FROM 
    dbo.T_ITEMS T
    LEFT JOIN dbo.V_ITEMS_BALANCE_MIN_STORE V ON T.ITEM_CODE = V.ITEM_CODE
WHERE 
    T.ACTIVE = 1 
    AND T.ITEM_CODE <> 0
' 
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_CLIENT_DIFF]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_CLIENT_DIFF]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_DETAILS_CLIENT_DIFF]
AS

WITH LAST_SALE AS (
    SELECT CLIENT_CODE, MAX(BILL_DATE) AS LAST_DATE
    FROM dbo.T_SALES
    GROUP BY CLIENT_CODE
),
DIFF_SALE AS (
    SELECT CLIENT_CODE, DATEDIFF(DAY, MAX(BILL_DATE), GETDATE()) AS DIFF
    FROM dbo.V_SALES
    GROUP BY CLIENT_CODE
)
SELECT
    C.CLIENT_CODE,
    C.CLIENT_NAME,
    C.CLIENT_TYPE,
    CT.C_TYPE_NAME,
    C.MANDOOB_CODE,
    M.MANDOOB_NAME,
    C.CLIENT_PHONE,
    C.CLIENT_PHONE_SMS,
    C.CLIENT_FULL_PHONE,
    C.CLIENT_REGION,
    C.CLIENT_ADDRESS,
    C.CLIENT_BUSINESS,
    LS.LAST_DATE,
    DS.DIFF
FROM dbo.T_CLIENT C
    LEFT JOIN dbo.T_CLIENT_TYPE CT ON C.CLIENT_TYPE = CT.C_TYPE_CODE
    LEFT JOIN dbo.T_MANDOOB M ON C.MANDOOB_CODE = M.MANDOOB_CODE
    LEFT JOIN LAST_SALE LS ON C.CLIENT_CODE = LS.CLIENT_CODE
    LEFT JOIN DIFF_SALE DS ON C.CLIENT_CODE = DS.CLIENT_CODE
WHERE
    C.CLIENT_ACTIVE = 1
    AND (C.CLIENT_TYPE = 1 OR C.CLIENT_TYPE = 3)
' 
GO
/****** Object:  View [dbo].[V_ITEM_UNIT_FORM_INFO_TEST]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_UNIT_FORM_INFO_TEST]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEM_UNIT_FORM_INFO_TEST]
AS
WITH SELL_DATA AS (
    SELECT
        ITEM_CODE,
        MAX(BILL_DATE) AS LAST_SALE,
        SUM(QTY * UNIT_QTY) AS QTY_SELL_PERCENT,
        MAX(PRICE) AS MAX_SELL,
        MIN(PRICE) AS MIN_SELL
    FROM dbo.V_SALES_DETAILS
    GROUP BY ITEM_CODE
),
SELL_TOTAL AS (
    SELECT SUM(QTY_SELL_PERCENT) AS TOTAL_SELL
    FROM SELL_DATA
)
SELECT
    I.ITEM_CODE,
    I.ITEM_NAME,
    ISNULL(SD.LAST_SALE, DATEADD(DAY, 1, GETDATE())) AS LAST_SALE,
    DATEDIFF(DAY, ISNULL(SD.LAST_SALE, DATEADD(DAY, 1, GETDATE())), GETDATE()) AS LAST_DIFF,
    CAST(
        CAST(
            ISNULL(SD.QTY_SELL_PERCENT, 0) * 100.0 / NULLIF(ST.TOTAL_SELL, 0)
        AS DECIMAL(18, 1)) AS NVARCHAR(MAX)
    ) + N'' % '' AS SELL_PERCENT,
    ISNULL(SD.QTY_SELL_PERCENT, 0) AS QTY_SELL_PERCENT,
    ISNULL(CAST(SD.MAX_SELL AS NVARCHAR(MAX)), 0) AS MAX_SELL,
    ISNULL(QM.QTY_MAX_SELL, 0) AS QTY_MAX_SELL,
    ISNULL(CAST(SD.MIN_SELL AS NVARCHAR(MAX)), 0) AS MIN_SELL,
    ISNULL(QN.QTY_MIN_SELL, 0) AS QTY_MIN_SELL,
    ISNULL(I.UNIT2_NAME, (SELECT UNIT_NAME FROM T_ITEM_UNIT WHERE ITEM_CODE = I.ITEM_CODE AND UNIT_CODE = 1)) AS UUNIT_NAME,
    ISNULL(I.UNIT2_QTY, 1) AS UNIT_QTY
FROM dbo.T_ITEMS AS I
    LEFT JOIN SELL_DATA AS SD ON I.ITEM_CODE = SD.ITEM_CODE
    CROSS JOIN SELL_TOTAL AS ST
    OUTER APPLY (
        SELECT SUM(QTY * UNIT_QTY) AS QTY_MAX_SELL
        FROM dbo.V_SALES_DETAILS
        WHERE ITEM_CODE = I.ITEM_CODE AND PRICE = SD.MAX_SELL
    ) QM
    OUTER APPLY (
        SELECT SUM(QTY * UNIT_QTY) AS QTY_MIN_SELL
        FROM dbo.V_SALES_DETAILS
        WHERE ITEM_CODE = I.ITEM_CODE AND PRICE = SD.MIN_SELL
    ) QN
WHERE I.ACTIVE = 1
' 
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_GSTORE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN_PHARMA_GSTORE]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_GSTORE]
AS
SELECT
    T.ITEM_CODE,
    T.TYPE_CODE,
    ISNULL(V.BALANCE, 0) AS BALANCE_PHARMA,
    1 AS UNIT_CODE,
    T.UNIT_NAME,
    T.RAF_NAME,
    T.SELL AS SELL1,
    T.SELL2,
    T.UNIT2_NAME,
    T.UNIT2_QTY,
    T.ITEM_BARCODE,
    T.ITEM_NAME,
    -- الرصيد بوحدة 1
    CASE 
        WHEN ISNULL(V.BALANCE, 0) < 0 THEN ISNULL(V.BALANCE, 0)
        WHEN T.UNIT2_QTY = 1 THEN ISNULL(V.BALANCE, 0)
        ELSE ISNULL(V.BALANCE, 0) - (FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY) * T.UNIT2_QTY)
    END AS BALANCE_U1,
    -- الرصيد بوحدة 2
    CASE 
        WHEN ISNULL(V.BALANCE, 0) < 0 THEN 0
        WHEN T.UNIT2_QTY = 1 THEN 0
        ELSE FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY)
    END AS BALANCE_U2,
    -- الرصيد بالنص
    CASE 
        WHEN T.UNIT2_QTY = 1 
            THEN CAST(ISNULL(V.BALANCE, 0) AS varchar(20)) + N'' '' + T.UNIT_NAME
        ELSE
            CAST(
                CASE 
                    WHEN ISNULL(V.BALANCE, 0) < 0 THEN 0
                    ELSE FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY)
                END AS varchar(20)
            ) + N'' '' + T.UNIT2_NAME +
            CASE 
                WHEN ISNULL(V.BALANCE, 0) < 0 THEN N'' || ''
                ELSE N'' + ''
            END +
            CAST(
                CASE 
                    WHEN ISNULL(V.BALANCE, 0) < 0 THEN ISNULL(V.BALANCE, 0)
                    ELSE ISNULL(V.BALANCE, 0) - (FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY) * T.UNIT2_QTY)
                END AS varchar(20)
            ) + N'' '' + T.UNIT_NAME
    END AS BALANCE,
    T.EXPIRED_DAY,
    T.EXPIRED_DATE,
    T.EXPIRED_WARRNING,
    -- اسم كامل (باركود:اسم)
    CASE 
        WHEN T.ITEM_BARCODE = N'''' THEN T.ITEM_NAME
        ELSE T.ITEM_BARCODE + N'' : '' + T.ITEM_NAME
    END AS FULL_NAME,
    T.IS_HIDE,
    T.COST AS PRICE_BUY,
    T.COST AS PRICE_COST,
    T.COST AS PRICE_AVG_COST,
    T.SELL AS PRICE_SALE_1,
    T.SELL_G AS PRICE_SALE_2,
    T.SELL_W AS PRICE_SALE_3,
    T.SELL_CNY AS PRICE_SALE_CUR,
    T.CATEGORY_CODE,
    T.QTY_MIN,
    T.IMG_URL,
    V.STORE_CODE,
    V.STORE_NAME,
    T.KIND_NAME,
    T.ITEM_NOTE,
    T.SORT
FROM 
    dbo.T_ITEMS T
    LEFT JOIN dbo.V_ITEMS_BALANCE_MIN_STORE V ON T.ITEM_CODE = V.ITEM_CODE
WHERE 
    T.ACTIVE = 1 
    AND T.ITEM_CODE <> 0
' 
GO
/****** Object:  View [dbo].[V_BUY_EXPENSES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_EXPENSES]'))
EXEC dbo.sp_executesql @statement = N'




CREATE VIEW [dbo].[V_BUY_EXPENSES]
AS
SELECT        dbo.T_BUY_EXPENSES.BILL_BRANCH, dbo.T_BUY_EXPENSES.BILL_NUMBER, dbo.T_BUY_EXPENSES.BILL_DATE, dbo.T_BUY_EXPENSES.BILL_TIME, dbo.T_BUY_EXPENSES.ACCOUNT_CODE, 
                         dbo.T_ACCOUNTS.ACCOUNT_NAME, dbo.T_BUY_EXPENSES.EXP_CUR, dbo.T_BUY_EXPENSES.CURRANCY_CODE, dbo.T_BUY_EXPENSES.CURRANCY_EQUAL, dbo.T_BUY_EXPENSES.TOT_EXP, 
                         dbo.T_BUY_EXPENSES.NOTE, dbo.T_BUY_EXPENSES.USER_C, dbo.T_BUY_EXPENSES.C_DATE, dbo.T_BUY_EXPENSES.BILL_BUY
FROM            dbo.T_BUY_EXPENSES LEFT OUTER JOIN
                         dbo.T_ACCOUNTS ON dbo.T_BUY_EXPENSES.ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE








' 
GO
/****** Object:  View [dbo].[V_A_ERROR_BUY_EXPENSES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_A_ERROR_BUY_EXPENSES]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_A_ERROR_BUY_EXPENSES]
AS
SELECT        dbo.V_BUY.BILL_BRANCH, dbo.V_BUY.BILL_NUMBER, dbo.V_BUY.BILL_DATE, dbo.V_BUY.TOTAL_EXPENSES, ISNULL(SUM(dbo.V_BUY_EXPENSES.TOT_EXP), 0) AS TOT_EXP
FROM            dbo.V_BUY LEFT OUTER JOIN
                         dbo.V_BUY_EXPENSES ON dbo.V_BUY.BILL_NUMBER = dbo.V_BUY_EXPENSES.BILL_BUY
GROUP BY dbo.V_BUY.BILL_BRANCH, dbo.V_BUY.BILL_NUMBER, dbo.V_BUY.BILL_DATE, dbo.V_BUY.TOTAL_EXPENSES
HAVING        (dbo.V_BUY.TOTAL_EXPENSES - ISNULL(SUM(dbo.V_BUY_EXPENSES.TOT_EXP), 0) <> 0)
' 
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_ITEMS]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_DETAILS_ITEMS]
AS
SELECT
    BILL_DATE,
    ITEM_CODE,
    ITEM_NAME,
    ITEM_SIGN,
    CATEGORY_CODE,
    CATEGORY_NAME,
    KIND_NAME,
    TYPE_CODE,
    TYPE_NAME,
    QTY,
    UNIT_NAME,
    TOTAL,
    DISCOUNT_AMOUNT_ITEM,
    TOTAL_COST,
    NET_TOTAL,
    ARBAH_ITEM
FROM
    dbo.V_SALES_DETAILS
' 
GO
/****** Object:  View [dbo].[V_ITEM_LAST_DATE_DIFF]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_LAST_DATE_DIFF]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEM_LAST_DATE_DIFF]
AS
SELECT
    SB.ITEM_CODE,
    SB.SHOW_MENU,
    SB.ITEM_BARCODE AS ITEM_SIGN,
    SB.ITEM_NAME,
    SB.TYPE_CODE,
    SB.UNIT_CODE,
    SB.UNIT_QTY,
    SB.UNIT_NAME,
    SB.BALANCE,
    SB.DF_SALE,
    SB.DF_STORE,
    SB.DF_BUY,
    SB.FULL_NAME,
    SB.PRICE_BUY,
    SB.PRICE_COST,
    SB.PRICE_SALE_1,
    SB.PRICE_SALE_2,
    SB.PRICE_SALE_3,
    SB.PRICE_AVG_COST,
    SB.PRICE_SALE_CUR,
    SB.CATEGORY_CODE,
    SB.CATEGORY_NAME,
    -- آخر تاريخ بيع
    (SELECT ISNULL(MAX(BILL_DATE), DATEADD(DAY, 1, GETDATE()))
     FROM dbo.V_SALES_DETAILS
     WHERE ITEM_CODE = SB.ITEM_CODE) AS LAST_SALE,
    -- الفرق بالأيام
    (SELECT DATEDIFF(DAY, ISNULL(MAX(BILL_DATE), DATEADD(DAY, 1, GETDATE())), GETDATE())
     FROM dbo.V_SALES_DETAILS
     WHERE ITEM_CODE = SB.ITEM_CODE) AS LAST_DIFF,
    SB.IS_USED,
    SB.SHOW_MENU_CAT,
    SB.TIME_USE,
    SB.QTY_MIN
FROM dbo.V_STORE_BOX AS SB
WHERE
    SB.DF_STORE = 1
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_ITEM_APPLICATION_LIVE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_APPLICATION_LIVE]'))
EXEC dbo.sp_executesql @statement = N'






CREATE VIEW [dbo].[V_ITEM_APPLICATION_LIVE]
AS
SELECT        TOP (1000000000) dbo.T_ITEMS.ITEM_CODE, dbo.T_ITEMS.TIME_USE, dbo.T_ITEMS.IS_TRANS,
                             (SELECT        TOP (1) ISNULL(ITEM_BARCODE, dbo.T_ITEMS.ITEM_BARCODE)
                                FROM            T_ITEM_BARCODE
                                WHERE        ITEM_CODE = dbo.T_ITEMS.ITEM_CODE AND UNIT_CODE = dbo.T_ITEM_UNIT.UNIT_CODE) AS ITEM_BARCODE, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.TYPE_CODE, dbo.T_ITEM_UNIT.UNIT_CODE, 
                         dbo.T_ITEM_UNIT.UNIT_QTY, dbo.T_ITEM_UNIT.UNIT_NAME, ISNULL(dbo.V_ITEMS_BALANCE_MIN.BALANCE,0) AS BALANCE, dbo.T_ITEM_UNIT.DF_SALE, dbo.T_ITEM_UNIT.DF_STORE, 
                         dbo.T_ITEM_UNIT.DF_BUY, iif(dbo.T_ITEMS.ITEM_BARCODE = N'''', dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.ITEM_BARCODE + '' : '' + dbo.T_ITEMS.ITEM_NAME) AS FULL_NAME, dbo.T_ITEM_UNIT.PRICE_BUY, 
                         dbo.T_ITEM_UNIT.PRICE_COST, dbo.T_ITEM_UNIT.PRICE_SALE_1, dbo.T_ITEM_UNIT.PRICE_SALE_2, dbo.T_ITEM_UNIT.PRICE_SALE_3, dbo.T_ITEM_UNIT.PRICE_AVG_COST, dbo.T_ITEM_UNIT.PRICE_SALE_CUR, 
                         dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_ITEMS.ITEM_NAME_EN, 
                         dbo.T_ITEMS.ITEM_NOTE, dbo.T_ITEMS.ITEM_NOTE_EN, dbo.T_ITEMS.IMG_URL, dbo.T_ITEM_CATEGORY.CATEGORY_NAME_EN, dbo.T_ITEM_CATEGORY.CATEGORY_IMAGE_PATH, dbo.T_ITEMS.RAF_NAME, dbo.T_ITEMS.IS_DISCOUNT, dbo.T_ITEMS.MAIN_ITEM_CODE, dbo.T_ITEMS.IS_FEATURE, dbo.T_ITEMS.DISC_PERCENT, dbo.T_ITEMS.DISC_AMO
						  ,[ITEM_PARENT]   ,[ITEM_SUB_PARENT]  ,[LEVEL_SUB] ,[AREA_M2]  ,[WIDTH_CM] ,[LENGTH_CM] ,[COMPANY_CREATE],[EFFECTIVE_MATERIAL], dbo.T_ITEMS.KIND_NAME
						
FROM            dbo.T_ITEMS INNER JOIN
                         dbo.T_ITEM_UNIT ON dbo.T_ITEMS.ITEM_CODE = dbo.T_ITEM_UNIT.ITEM_CODE LEFT OUTER JOIN
                         dbo.V_ITEMS_BALANCE_MIN ON dbo.T_ITEMS.ITEM_CODE = dbo.V_ITEMS_BALANCE_MIN.ITEM_CODE LEFT OUTER JOIN
                       
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE
WHERE        (dbo.T_ITEM_UNIT.ON_OFF = 1)  AND dbo.T_ITEM_CATEGORY.SHOW_MENU = 1 AND dbo.T_ITEMS.SHOW_MENU = 1
GROUP BY dbo.T_ITEMS.ITEM_CODE, dbo.T_ITEMS.TIME_USE, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEM_UNIT.UNIT_CODE, dbo.T_ITEM_UNIT.UNIT_NAME, dbo.T_ITEM_UNIT.UNIT_QTY, dbo.T_ITEM_UNIT.DF_BUY, 
                         dbo.T_ITEM_UNIT.ON_OFF, dbo.T_ITEMS.ITEM_BARCODE, dbo.T_ITEM_UNIT.DF_SALE, dbo.T_ITEM_UNIT.DF_STORE, dbo.T_ITEMS.ACTIVE, dbo.T_ITEMS.TYPE_CODE, 
                         dbo.T_ITEM_UNIT.PRICE_BUY, dbo.T_ITEM_UNIT.PRICE_COST, dbo.T_ITEM_UNIT.PRICE_SALE_1, dbo.T_ITEM_UNIT.PRICE_SALE_2, dbo.T_ITEM_UNIT.PRICE_SALE_3, dbo.T_ITEM_UNIT.PRICE_AVG_COST, 
                         dbo.T_ITEM_UNIT.PRICE_SALE_CUR, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME,  
                         dbo.T_ITEMS.ITEM_NAME_EN, dbo.T_ITEMS.ITEM_NOTE, dbo.T_ITEMS.ITEM_NOTE_EN, dbo.T_ITEMS.IMG_URL, dbo.T_ITEM_CATEGORY.CATEGORY_NAME_EN, dbo.T_ITEM_CATEGORY.CATEGORY_IMAGE_PATH, 
                         dbo.T_ITEMS.IS_TRANS,  dbo.T_ITEMS.RAF_NAME, dbo.T_ITEMS.IS_DISCOUNT, dbo.T_ITEMS.MAIN_ITEM_CODE, dbo.T_ITEMS.IS_FEATURE, dbo.T_ITEMS.DISC_PERCENT, dbo.T_ITEMS.DISC_AMO
						  ,[ITEM_PARENT]   ,[ITEM_SUB_PARENT]  ,[LEVEL_SUB] ,[AREA_M2]  ,[WIDTH_CM] ,[LENGTH_CM] ,[COMPANY_CREATE],[EFFECTIVE_MATERIAL],V_ITEMS_BALANCE_MIN.BALANCE
						  , dbo.T_ITEMS.KIND_NAME
HAVING        (dbo.T_ITEMS.ACTIVE = 1) 
ORDER BY dbo.T_ITEMS.ITEM_CODE







' 
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_ITEMS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_ITEMS]'))
EXEC dbo.sp_executesql @statement = N'







CREATE VIEW [dbo].[V_BUY_DETAILS_ITEMS]
AS
SELECT       BILL_DATE, ITEM_CODE, ITEM_SIGN, ITEM_NAME, CATEGORY_CODE, CATEGORY_NAME,KIND_NAME, SUM(QTY) AS QTY, UNIT_NAME, SUM(TOTAL) AS TOTAL, SUM(TOTAL_EXPENSES) AS TOTAL_EXPENSES, SUM(TOTAL_COST) 
                         AS TOTAL_COST
FROM            dbo.V_BUY_DETAILS
GROUP BY BILL_DATE, ITEM_CODE, ITEM_SIGN, ITEM_NAME, CATEGORY_CODE, CATEGORY_NAME, UNIT_NAME,KIND_NAME











' 
GO
/****** Object:  View [dbo].[V_ITEM_SCALE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_SCALE]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEM_SCALE]
AS
SELECT
    VI.ITEM_CODE,
    VI.ITEM_NAME,
    VI.SELL,
    VI.ITEM_BARCODE,
    VI.SORT,
    VI.PRINTER_ID,
    P.PRINTER_NAME,
    P.DEVICE_NAME,
    P.IS_SCALE,
    VI.CATEGORY_CODE,
    VI.CATEGORY_NAME
FROM dbo.V_ITEMS_ON AS VI
    LEFT JOIN dbo.T_PRINTER AS P ON VI.PRINTER_ID = P.T_ID
WHERE
    VI.TYPE_CODE = 4
    AND LEN(VI.ITEM_BARCODE) = 5
' 
GO
/****** Object:  View [dbo].[V_ITEM_AVG_COST_BUY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_AVG_COST_BUY]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEM_AVG_COST_BUY]
AS
SELECT
    I.ITEM_CODE,
    I.ITEM_NAME,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    I.KIND_NAME,
    I.TYPE_CODE,
    ITYPE.TYPE_NAME,
    IU.UNIT_CODE,
    IU.UNIT_NAME,
    IU.UNIT_QTY,
    IU.PRICE_BUY,
    IU.PRICE_COST,
    IU.PRICE_SALE_1,
    IU.PRICE_SALE_2,
    IU.PRICE_SALE_3,
    IU.PRICE_AVG_COST,
    IU.PRICE_SALE_CUR,
    ISNULL(AVG_BUY.AVG_BUY, 0) * IU.UNIT_QTY AS AVG_BUY
FROM dbo.T_ITEMS AS I
    LEFT JOIN dbo.T_ITEM_TYPE AS ITYPE ON I.TYPE_CODE = ITYPE.TYPE_CODE
    LEFT JOIN dbo.T_ITEM_CATEGORY AS IC ON I.CATEGORY_CODE = IC.CATEGORY_CODE
    LEFT JOIN dbo.T_ITEM_UNIT AS IU ON I.ITEM_CODE = IU.ITEM_CODE
    LEFT JOIN (
        SELECT
            ITEM_CODE,
            ISNULL(SUM(TOTAL_COST) / NULLIF(SUM(IIF(QTY = 0, NULL, QTY) * UNIT_QTY), 0), 0) AS AVG_BUY
        FROM dbo.T_BUY_DETAILS
        WHERE
            ((BILL_NUMBER = 0 AND ACTIVE = 0) OR (BILL_NUMBER <> 0 AND ACTIVE = 1))
        GROUP BY ITEM_CODE
    ) AS AVG_BUY ON I.ITEM_CODE = AVG_BUY.ITEM_CODE
' 
GO
/****** Object:  View [dbo].[V_ITEM_BARCODE_2]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_BARCODE_2]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEM_BARCODE_2]
AS
SELECT
    I.ITEM_CODE,
    I.ITEM_BARCODE AS ITEM_BARCODE_MAIN,
    I.ITEM_NAME,
    IU.UNIT_NAME,
    IU.UNIT_CODE,
    IB.ITEM_BARCODE,
    IU.DF_SALE,
    IU.DF_BUY,
    IU.DF_STORE,
    IU.UNIT_QTY,
    IU.PRICE_BUY,
    IU.PRICE_COST,
    IU.PRICE_SALE_1,
    IU.PRICE_SALE_2,
    IU.PRICE_SALE_3,
    IU.PRICE_AVG_COST,
    VAVG.AVG_BUY,
    I.IMG_URL,
    I.ITEM_NOTE,
    I.CLIENT_NAME_BEST,
    I.RAF_NAME,
    I.IS_DISCOUNT,
    IU.ON_OFF,
    I.IS_HIDE,
    I.SERVER_ITEM_CODE,
    I.SERVER_BRANCH,
    I.IS_SERIAL,
    I.KIND_NAME
FROM dbo.T_ITEMS AS I
    INNER JOIN dbo.T_ITEM_UNIT AS IU ON I.ITEM_CODE = IU.ITEM_CODE
    LEFT JOIN dbo.T_ITEM_BARCODE AS IB ON IB.ITEM_CODE = IU.ITEM_CODE AND IB.UNIT_CODE = IU.UNIT_CODE
    LEFT JOIN dbo.V_ITEM_AVG_COST_BUY AS VAVG ON IU.ITEM_CODE = VAVG.ITEM_CODE AND IU.UNIT_CODE = VAVG.UNIT_CODE
WHERE
    I.ACTIVE = 1
    AND IU.ON_OFF = 1
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_STORE_BOX_STORE_AVG_ON]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_STORE_AVG_ON]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_STORE_BOX_STORE_AVG_ON]
AS
SELECT
    I.ITEM_CODE,
    I.ITEM_BARCODE,
    I.ITEM_NAME,
    I.TYPE_CODE,
    IU.UNIT_CODE,
    IU.UNIT_QTY,
    IU.UNIT_NAME,
    SUM(ISNULL(SB.BALANCE_M, 0)) / IU.UNIT_QTY AS BALANCE,
    IU.DF_SALE,
    IU.DF_STORE,
    IU.DF_BUY,
    IU.PRICE_BUY,
    IU.PRICE_COST,
    VAVG.AVG_BUY,
    IU.PRICE_SALE_1,
    IU.PRICE_SALE_2,
    IU.PRICE_SALE_3,
    IU.PRICE_AVG_COST,
    IU.PRICE_SALE_CUR,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    SB.STORE_CODE,
    ST.STORE_NAME,
    ST.IS_USED,
    SUM(ISNULL(SB.BALANCE_M, 0)) / IU.UNIT_QTY * IU.PRICE_BUY AS BALANCE_PRICE_BUY,
    SUM(ISNULL(SB.BALANCE_M, 0)) / IU.UNIT_QTY * IU.PRICE_COST AS BALANCE_PRICE_COST,
    SUM(ISNULL(SB.BALANCE_M, 0)) / IU.UNIT_QTY * VAVG.AVG_BUY AS BALANCE_AVG_BUY,
    I.KIND_NAME
FROM dbo.T_ITEMS AS I
    INNER JOIN dbo.T_ITEM_UNIT AS IU ON I.ITEM_CODE = IU.ITEM_CODE
    INNER JOIN dbo.V_ITEM_AVG_COST_BUY_MIN_UNIT AS VAVG ON I.ITEM_CODE = VAVG.ITEM_CODE AND IU.UNIT_CODE = VAVG.UNIT_CODE
    LEFT JOIN dbo.T_STORE_BOX AS SB ON I.ITEM_CODE = SB.ITEM_CODE AND IU.UNIT_CODE = SB.UNIT_CODE
    LEFT JOIN dbo.T_STORE_TYPE AS ST ON SB.STORE_CODE = ST.STORE_CODE
    LEFT JOIN dbo.T_ITEM_CATEGORY AS IC ON I.CATEGORY_CODE = IC.CATEGORY_CODE
WHERE
    IU.ON_OFF = 1
    AND I.ACTIVE = 1
    AND ISNULL(SB.ACTIVE, 1) = 1
    AND ST.IS_USED = 1
    AND IU.UNIT_CODE = 1
GROUP BY
    I.ITEM_CODE,
    I.ITEM_BARCODE,
    I.ITEM_NAME,
    I.TYPE_CODE,
    IU.UNIT_CODE,
    IU.UNIT_QTY,
    IU.UNIT_NAME,
    IU.DF_SALE,
    IU.DF_STORE,
    IU.DF_BUY,
    IU.PRICE_BUY,
    IU.PRICE_COST,
    VAVG.AVG_BUY,
    IU.PRICE_SALE_1,
    IU.PRICE_SALE_2,
    IU.PRICE_SALE_3,
    IU.PRICE_AVG_COST,
    IU.PRICE_SALE_CUR,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    SB.STORE_CODE,
    ST.STORE_NAME,
    ST.IS_USED,
    I.KIND_NAME
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_1111]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_1111]'))
EXEC dbo.sp_executesql @statement = N'



CREATE VIEW [dbo].[V_1111]
AS
SELECT        dbo.T_ITEMS.ITEM_CODE, dbo.T_ITEMS.ITEM_BARCODE AS ITEM_BARCODE_MAIN, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEM_UNIT.UNIT_NAME, dbo.T_ITEM_UNIT.UNIT_CODE, dbo.T_ITEM_BARCODE.ITEM_BARCODE, 
                         dbo.T_ITEM_UNIT.DF_SALE, dbo.T_ITEM_UNIT.DF_BUY, dbo.T_ITEM_UNIT.DF_STORE, dbo.T_ITEM_UNIT.UNIT_QTY, dbo.T_ITEM_UNIT.PRICE_BUY, dbo.T_ITEM_UNIT.PRICE_COST, dbo.T_ITEM_UNIT.PRICE_SALE_1, 
                         dbo.T_ITEM_UNIT.PRICE_SALE_2, dbo.T_ITEM_UNIT.PRICE_SALE_3, dbo.T_ITEM_UNIT.PRICE_AVG_COST, dbo.V_ITEM_AVG_COST_BUY.AVG_BUY, dbo.T_ITEMS.IMG_URL, dbo.T_ITEMS.ITEM_NOTE
FROM            dbo.T_ITEM_BARCODE RIGHT OUTER JOIN
                         dbo.T_ITEM_UNIT ON dbo.T_ITEM_BARCODE.UNIT_CODE = dbo.T_ITEM_UNIT.UNIT_CODE AND dbo.T_ITEM_BARCODE.ITEM_CODE = dbo.T_ITEM_UNIT.ITEM_CODE RIGHT OUTER JOIN
                         dbo.T_ITEMS ON dbo.T_ITEM_UNIT.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                         dbo.V_ITEM_AVG_COST_BUY ON dbo.T_ITEM_UNIT.ITEM_CODE = dbo.V_ITEM_AVG_COST_BUY.ITEM_CODE AND dbo.T_ITEM_UNIT.UNIT_CODE = dbo.V_ITEM_AVG_COST_BUY.UNIT_CODE
WHERE        (dbo.T_ITEMS.ACTIVE = 1)






' 
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_MATERIAL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN_PHARMA_MATERIAL]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_MATERIAL]
AS
SELECT
    T.ITEM_CODE,
    T.TYPE_CODE,
    ISNULL(V.BALANCE, 0) AS BALANCE_PHARMA,
    1 AS UNIT_CODE,
    T.UNIT_NAME,
    T.RAF_NAME,
    T.SELL AS SELL1,
    T.SELL2,
    T.UNIT2_NAME,
    T.UNIT2_QTY,
    T.ITEM_BARCODE,
    T.ITEM_NAME,
    -- الرصيد بوحدة 1
    CASE 
        WHEN ISNULL(V.BALANCE, 0) < 0 THEN ISNULL(V.BALANCE, 0)
        WHEN T.UNIT2_QTY = 1 THEN ISNULL(V.BALANCE, 0)
        ELSE ISNULL(V.BALANCE, 0) - (FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY) * T.UNIT2_QTY)
    END AS BALANCE_U1,
    -- الرصيد بوحدة 2
    CASE 
        WHEN ISNULL(V.BALANCE, 0) < 0 THEN 0
        WHEN T.UNIT2_QTY = 1 THEN 0
        ELSE FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY)
    END AS BALANCE_U2,
    -- الرصيد بالنص
    CASE 
        WHEN T.UNIT2_QTY = 1 
            THEN CAST(ISNULL(V.BALANCE, 0) AS varchar(20)) + N'' '' + T.UNIT_NAME
        ELSE
            CAST(
                CASE 
                    WHEN ISNULL(V.BALANCE, 0) < 0 THEN 0
                    ELSE FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY)
                END AS varchar(20)
            ) + N'' '' + T.UNIT2_NAME +
            CASE 
                WHEN ISNULL(V.BALANCE, 0) < 0 THEN N'' || ''
                ELSE N'' + ''
            END +
            CAST(
                CASE 
                    WHEN ISNULL(V.BALANCE, 0) < 0 THEN ISNULL(V.BALANCE, 0)
                    ELSE ISNULL(V.BALANCE, 0) - (FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY) * T.UNIT2_QTY)
                END AS varchar(20)
            ) + N'' '' + T.UNIT_NAME
    END AS BALANCE,
    M.EFFECTIVE_MATERIAL,
    ME.EFFECTIVE_MATERIAL_ID,
    T.EXPIRED_DAY,
    T.EXPIRED_DATE,
    T.EXPIRED_WARRNING,
    -- الاسم الكامل (باركود : اسم)
    CASE 
        WHEN T.ITEM_BARCODE = N'''' THEN T.ITEM_NAME
        ELSE T.ITEM_BARCODE + N'' : '' + T.ITEM_NAME
    END AS FULL_NAME,
    T.IS_HIDE,
    T.COST AS PRICE_BUY,
    T.COST AS PRICE_COST,
    T.COST AS PRICE_AVG_COST,
    T.SELL AS PRICE_SALE_1,
    T.SELL_G AS PRICE_SALE_2,
    T.SELL_W AS PRICE_SALE_3,
    T.SELL_CNY AS PRICE_SALE_CUR,
    T.CATEGORY_CODE,
    T.KIND_NAME,
    T.ITEM_NOTE
FROM
    dbo.T_ITEMS T
    LEFT JOIN dbo.V_ITEMS_BALANCE_MIN V ON T.ITEM_CODE = V.ITEM_CODE
    LEFT JOIN dbo.T_ITEM_MATERIAL_EFFECTIVE ME ON T.ITEM_CODE = ME.ITEM_CODE
    LEFT JOIN dbo.T_ITEM_MATERIAL M ON ME.EFFECTIVE_MATERIAL_ID = M.T_ID
WHERE
    T.ACTIVE = 1
    AND T.ITEM_CODE > 0
' 
GO
/****** Object:  View [dbo].[1111]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[1111]'))
EXEC dbo.sp_executesql @statement = N'



CREATE VIEW [dbo].[1111]
AS
SELECT        dbo.T_ITEMS.ITEM_CODE, dbo.T_ITEMS.ITEM_BARCODE AS ITEM_BARCODE_MAIN, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEM_UNIT.UNIT_NAME, dbo.T_ITEM_UNIT.UNIT_CODE, dbo.T_ITEM_BARCODE.ITEM_BARCODE, 
                         dbo.T_ITEM_UNIT.DF_SALE, dbo.T_ITEM_UNIT.DF_BUY, dbo.T_ITEM_UNIT.DF_STORE, dbo.T_ITEM_UNIT.UNIT_QTY, dbo.T_ITEM_UNIT.PRICE_BUY, dbo.T_ITEM_UNIT.PRICE_COST, dbo.T_ITEM_UNIT.PRICE_SALE_1, 
                         dbo.T_ITEM_UNIT.PRICE_SALE_2, dbo.T_ITEM_UNIT.PRICE_SALE_3, dbo.T_ITEM_UNIT.PRICE_AVG_COST, dbo.V_ITEM_AVG_COST_BUY.AVG_BUY, dbo.T_ITEMS.IMG_URL, dbo.T_ITEMS.ITEM_NOTE
FROM            dbo.T_ITEM_BARCODE RIGHT OUTER JOIN
                         dbo.T_ITEM_UNIT ON dbo.T_ITEM_BARCODE.UNIT_CODE = dbo.T_ITEM_UNIT.UNIT_CODE AND dbo.T_ITEM_BARCODE.ITEM_CODE = dbo.T_ITEM_UNIT.ITEM_CODE RIGHT OUTER JOIN
                         dbo.T_ITEMS ON dbo.T_ITEM_UNIT.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                         dbo.V_ITEM_AVG_COST_BUY ON dbo.T_ITEM_UNIT.ITEM_CODE = dbo.V_ITEM_AVG_COST_BUY.ITEM_CODE AND dbo.T_ITEM_UNIT.UNIT_CODE = dbo.V_ITEM_AVG_COST_BUY.UNIT_CODE
WHERE        (dbo.T_ITEMS.ACTIVE = 1)






' 
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_AFTER_DISCOUNT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_AFTER_DISCOUNT]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_DETAILS_AFTER_DISCOUNT]
AS
SELECT
    BILL_BRANCH,
    BILL_NUMBER,
    BILL_STR,
    BILL_INVOICE,
    BILL_DATE,
    CLIENT_CODE,
    CLIENT_NAME,
    CLIENT_PHONE,
    CLIENT_ADRESS,
    MANDOOB_CODE,
    MANDOOB_NAME,
    MANDOOB_PERCENT,
    DESCRIPTION,
    USER_CREATE,
    QTY,
    UNIT_NAME,
    UNIT_QTY,
    STORE_CODE,
    STORE_NAME,
    WAJBA_CODE,
    WAJBA_NAME,
    WAJBA_BALANCE,
    CURRANCY_CODE,
    CURRANCY_EQUAL,
    COST,
    ISNULL(NET_TOTAL - ((TOTAL_DISCOUNT / NULLIF(TOTAL_SALES, 0)) * NET_TOTAL), 0) / QTY AS PRICE,
    TOTAL,
    DISCOUNT_PERCENT_ITEM,
    DISCOUNT_AMOUNT_ITEM,
    TOTAL_COST,
    ISNULL(NET_TOTAL - ((TOTAL_DISCOUNT / NULLIF(TOTAL_SALES, 0)) * NET_TOTAL), 0) AS NET_TOTAL,
    ISNULL(NET_TOTAL - ((TOTAL_DISCOUNT / NULLIF(TOTAL_SALES, 0)) * NET_TOTAL), 0) - TOTAL_COST AS ARBAH_ITEM,
    C_DATE,
    ACTIVE,
    IVC_CODE,
    IVC_NAME,
    ITEM_CODE,
    ITEM_NAME,
    ITEM_SIGN,
    CATEGORY_CODE,
    CATEGORY_NAME,
    TYPE_CODE,
    TYPE_NAME,
    PRICE_BUY,
    PRICE_COST,
    AVG_BUY,
    ITEM_NOTE,
    IMG_URL,
    ITEM_NAME_EN,
    ITEM_NOTE_EN,
    TIME_USE,
    TOTAL_DISCOUNT,
    TOTAL_SALES,
    (ISNULL(TOTAL_DISCOUNT / NULLIF(TOTAL_SALES, 0), 0) * NET_TOTAL) AS DISCOUNT_ITEM_AFTER,
    QTY_FREE,
    TOTAL_QTY,
    KIND_NAME
FROM
    dbo.V_SALES_DETAILS_AFTER
' 
GO
/****** Object:  View [dbo].[V_A_CHECK_SALES_11]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_A_CHECK_SALES_11]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_A_CHECK_SALES_11]
AS
SELECT        BILL_BRANCH, BILL_NUMBER, SUM(TOTAL_COST) AS TOTAL_COST_D, SUM(NET_TOTAL) AS NET_TOTAL_D
FROM            dbo.V_SALES_DETAILS
GROUP BY BILL_BRANCH, BILL_NUMBER

' 
GO
/****** Object:  View [dbo].[V_SALES_INVOICE_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_INVOICE_DETAILS]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_INVOICE_DETAILS]
AS
SELECT
    CONVERT(NVARCHAR(12), S.BILL_NUMBER) AS BILL_STR,
    S.BILL_INVOICE,
    S.BILL_DATE,
    S.CLIENT_CODE,
    S.CLIENT_NAME,
    S.CLIENT_PHONE,
    S.CLIENT_ADRESS,
    S.MANDOOB_CODE,
    M.MANDOOB_NAME,
    M.MANDOOB_PERCENT,
    S.DESCRIPTION,
    S.USER_CREATE,
    SUM(SD.QTY) AS QTY,
    SD.UNIT_NAME,
    SD.UNIT_QTY,
    SD.STORE_CODE,
    ST.STORE_NAME,
    SD.WAJBA_CODE,
    SD.WAJBA_NAME,
    SD.CURRANCY_CODE,
    SD.CURRANCY_EQUAL,
    SUM(SD.COST) AS COST,
    IIF(SUM(SD.QTY)=0, 0, SUM(SD.TOTAL) / SUM(SD.QTY)) AS PRICE,
    SUM(SD.TOTAL) AS TOTAL,
    SUM(SD.DISCOUNT_PERCENT_ITEM) AS DISCOUNT_PERCENT_ITEM,
    SUM(SD.DISCOUNT_AMOUNT_ITEM) AS DISCOUNT_AMOUNT_ITEM,
    SUM(SD.TOTAL_COST) AS TOTAL_COST,
    SUM(SD.NET_TOTAL) AS NET_TOTAL,
    SUM(SD.ARBAH_ITEM) AS ARBAH_ITEM,
    MAX(SD.C_DATE) AS C_DATE,
    S.ACTIVE,
    S.IVC_CODE,
    IT.IVC_NAME,
    SD.ITEM_CODE,
    SD.ITEM_NAME,
    I.ITEM_BARCODE AS ITEM_SIGN,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    I.TYPE_CODE,
    ITY.TYPE_NAME,
    SD.T_ID,
    SD.BILL_BRANCH,
    S.BILL_NUMBER,
    I.ITEM_NOTE,
    SD.ITEM_NOTE_SALES,
    I.RAF_NAME,
    I.CLIENT_NAME_BEST,
    SD.DISCOUNT_TYPE,
    SD.USER_CUT,
    SD.USER_PREPARE,
    SD.IS_PRINT,
    SD.NOTE_PRINT,
    SUM(SD.TOTAL_DISCOUNT) AS TOTAL_DISCOUNT,
    SD.TAX_PERCENT_ITEM,
    SUM(SD.TAX_AMO_ITEM) AS TAX_AMO_ITEM,
    SD.MANDOOB_PERCENT_ITEM,
    SUM(SD.MANDOOB_AMO_ITEM) AS MANDOOB_AMO_ITEM,
    SUM(SD.TOTAL_TAX_ITEM) AS TOTAL_TAX_ITEM,
    SUM(SD.TOTAL_MANDOOB_ITEM) AS TOTAL_MANDOOB_ITEM,
    (SELECT TOP (1) EXP_DATE
     FROM dbo.T_BUY_DETAILS
     WHERE ITEM_CODE = SD.ITEM_CODE AND BILL_NUMBER = SD.BILL_BUY) AS EXP_DATE,
    S.QR_DATA,
    I.IMG_URL,
    I.QTY_AKSAT,
    SD.IS_ITEM_AREA,
    SD.WIDTH_CM,
    SD.LENGTH_CM,
    SD.AREA_M2,
    SD.QTY_AREA,
    SD.QTY_XZ,
    SD.UNIT_QTY_XZ,
    SD.QTY_X1,
    SD.UNIT_QTY_X1,
    SD.QTY_XY,
    SD.UNIT_QTY_XY,
    SD.QTY_FREE,
    SD.TOTAL_QTY,
    I.KIND_NAME,
    D.DRIVER_NAME,
    SD.TOTAL_POINTS,
    SD.MANDOOB_CODE AS MANDOOB_CODE_DETAILS,
    SD.MANDOOB_CODE_FINISH,
    S.COL_STR1,
    S.COL_STR2,
    S.COL_STR3,
    S.COL_INT1,
    S.COL_INT2,
    S.COL_INT3,
    SD.NOTE_PRINT_2
FROM
    dbo.T_SALES S
    INNER JOIN dbo.T_SALES_DETAILS SD ON S.BILL_BRANCH = SD.BILL_BRANCH
    LEFT JOIN dbo.T_ITEMS I ON SD.ITEM_CODE = I.ITEM_CODE
    LEFT JOIN dbo.T_IVC_TYPE IT ON S.IVC_CODE = IT.IVC_CODE
    LEFT JOIN dbo.T_MANDOOB M ON S.MANDOOB_CODE = M.MANDOOB_CODE
    LEFT JOIN dbo.T_CURRANNCY CUR ON SD.CURRANCY_CODE = CUR.CURRANCY_CODE
    LEFT JOIN dbo.T_STORE_TYPE ST ON SD.STORE_CODE = ST.STORE_CODE
    LEFT JOIN dbo.T_ITEM_TYPE ITY ON I.TYPE_CODE = ITY.TYPE_CODE
    LEFT JOIN dbo.T_ITEM_CATEGORY IC ON I.CATEGORY_CODE = IC.CATEGORY_CODE
    LEFT JOIN dbo.T_DRIVERS D ON S.DRIVER_CODE = D.DRIVER_CODE
WHERE
    S.ACTIVE = 1
GROUP BY
    S.BILL_NUMBER, CONVERT(NVARCHAR(12), S.BILL_NUMBER), S.BILL_INVOICE, S.BILL_DATE, S.CLIENT_CODE, S.CLIENT_NAME,
    S.CLIENT_PHONE, S.CLIENT_ADRESS, S.MANDOOB_CODE, M.MANDOOB_NAME, M.MANDOOB_PERCENT, S.DESCRIPTION, S.USER_CREATE,
    SD.UNIT_NAME, SD.UNIT_QTY, SD.STORE_CODE, ST.STORE_NAME, SD.WAJBA_CODE, SD.WAJBA_NAME, SD.CURRANCY_CODE,
    SD.CURRANCY_EQUAL, S.IVC_CODE, IT.IVC_NAME, SD.ITEM_CODE, SD.ITEM_NAME, I.ITEM_BARCODE, I.CATEGORY_CODE,
    IC.CATEGORY_NAME, I.TYPE_CODE, ITY.TYPE_NAME, S.ACTIVE, SD.T_ID, SD.BILL_BRANCH, I.ITEM_NOTE, SD.ITEM_NOTE_SALES,
    I.RAF_NAME, I.CLIENT_NAME_BEST, SD.DISCOUNT_TYPE, SD.USER_CUT, SD.USER_PREPARE, SD.NOTE_PRINT, SD.TAX_PERCENT_ITEM,
    SD.MANDOOB_PERCENT_ITEM, SD.IS_PRINT, SD.BILL_BUY, S.QR_DATA, I.IMG_URL, I.QTY_AKSAT, SD.IS_ITEM_AREA,
    SD.WIDTH_CM, SD.LENGTH_CM, SD.AREA_M2, SD.QTY_AREA, SD.QTY_XZ, SD.UNIT_QTY_XZ, SD.QTY_X1, SD.UNIT_QTY_X1,
    SD.QTY_XY, SD.UNIT_QTY_XY, SD.QTY_FREE, SD.TOTAL_QTY, I.KIND_NAME, D.DRIVER_NAME, SD.TOTAL_POINTS,
    SD.MANDOOB_CODE, SD.MANDOOB_CODE_FINISH, S.COL_STR1, S.COL_STR2, S.COL_STR3, S.COL_INT1, S.COL_INT2, S.COL_INT3,
    SD.NOTE_PRINT_2
' 
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_ID_BOX]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_ID_BOX]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_DETAILS_ID_BOX]
AS
SELECT
    BX.T_ID_BOX AS ID_BOX,
    VID.BILL_NUMBER,
    VID.ITEM_CODE,
    VID.ITEM_SIGN,
    VID.ITEM_NAME,
    VID.QTY,
    VID.UNIT_NAME,
    VID.PRICE,
    VID.NET_TOTAL
FROM
    dbo.V_SALES_INVOICE_DETAILS VID
    LEFT JOIN dbo.T_BOX BX
        ON VID.BILL_NUMBER = BX.BILL_NUMBER
        AND BX.B_CODE = 2
        AND VID.CLIENT_CODE = BX.ACCOUNT_CODE
' 
GO
/****** Object:  View [dbo].[V_A_CHECK_SALES_22]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_A_CHECK_SALES_22]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_A_CHECK_SALES_22]
AS
SELECT        TOP (100) PERCENT dbo.V_SALES.BILL_BRANCH, dbo.V_SALES.BILL_NUMBER, dbo.V_SALES.TOTAL_SALES, dbo.V_A_CHECK_SALES_11.NET_TOTAL_D, dbo.V_SALES.TOTAL_COST, 
                         dbo.V_A_CHECK_SALES_11.TOTAL_COST_D, dbo.V_SALES.TOTAL_SALES - dbo.V_A_CHECK_SALES_11.NET_TOTAL_D AS NN_TOTAL, 
                         dbo.V_SALES.TOTAL_COST - dbo.V_A_CHECK_SALES_11.TOTAL_COST_D AS NN_COST
FROM            dbo.V_SALES LEFT OUTER JOIN
                         dbo.V_A_CHECK_SALES_11 ON dbo.V_SALES.BILL_BRANCH = dbo.V_A_CHECK_SALES_11.BILL_BRANCH
WHERE        (dbo.V_SALES.TOTAL_SALES - dbo.V_A_CHECK_SALES_11.NET_TOTAL_D <> 0)
ORDER BY NN_TOTAL DESC

' 
GO
/****** Object:  View [dbo].[VB_BUILDING]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VB_BUILDING]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[VB_BUILDING]
AS
SELECT     dbo.TB_HOUSE.HOUSE_CODE, dbo.TB_HOUSE.HOUSE_NAME, dbo.TB_HOUSE.HOUSE_NO, dbo.TB_HOUSE.HOUSE_TYPE_CODE, dbo.TB_HOUSE_TYPE.HOUSE_TYPE_NAME, dbo.TB_HOUSE.HOUSE_JSON, dbo.TB_HOUSE.CLIENT_CODE, T_CLIENT_1.CLIENT_NAME, 
                  dbo.TB_HOUSE.ZONE_CODE, dbo.TB_ZONE.ZONE_NAME, dbo.TB_HOUSE.BUILDING_CODE, dbo.TB_BUILDING.BUILDING_NAME, dbo.TB_HOUSE.FLOOR_CODE, dbo.TB_FLOOR.FLOOR_NAME, dbo.TB_HOUSE.ACTIVE, dbo.TB_HOUSE.CLIENT_CODE_RENTER, 
                  dbo.T_CLIENT.CLIENT_NAME AS CLIENT_NAME_RENTER, dbo.TB_HOUSE.BILL_NUMBER, dbo.TB_HOUSE.SELL_DATE, dbo.TB_HOUSE.DELIVERY_DATE, dbo.TB_HOUSE.MAINTENANCE_END_DATE, dbo.TB_HOUSE.HOUSE_AREA, dbo.TB_HOUSE.AVG_DEGREE, 
                  dbo.TB_HOUSE.HOUSE_NOTE, dbo.TB_HOUSE.HOUSE_PHONE, dbo.TB_HOUSE.HOUSE_ADRESS, dbo.TB_HOUSE.HOUSE_FROM_SCHOOL
FROM        dbo.TB_HOUSE LEFT OUTER JOIN
                  dbo.T_CLIENT ON dbo.TB_HOUSE.CLIENT_CODE_RENTER = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                  dbo.TB_FLOOR ON dbo.TB_HOUSE.FLOOR_CODE = dbo.TB_FLOOR.FLOOR_CODE LEFT OUTER JOIN
                  dbo.TB_BUILDING ON dbo.TB_HOUSE.BUILDING_CODE = dbo.TB_BUILDING.BUILDING_CODE LEFT OUTER JOIN
                  dbo.TB_ZONE ON dbo.TB_HOUSE.ZONE_CODE = dbo.TB_ZONE.ZONE_CODE LEFT OUTER JOIN
                  dbo.T_CLIENT AS T_CLIENT_1 ON dbo.TB_HOUSE.CLIENT_CODE = T_CLIENT_1.CLIENT_CODE LEFT OUTER JOIN
                  dbo.TB_HOUSE_TYPE ON dbo.TB_HOUSE.HOUSE_TYPE_CODE = dbo.TB_HOUSE_TYPE.HOUSE_TYPE_CODE
WHERE     (dbo.TB_HOUSE.ACTIVE = 1)
' 
GO
/****** Object:  View [dbo].[VB_HOUSE_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VB_HOUSE_CLIENT]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[VB_HOUSE_CLIENT]
AS
SELECT 
    HOUSE_CODE, 
    HOUSE_NAME, 
    HOUSE_NO, 
    HOUSE_TYPE_CODE, 
    HOUSE_TYPE_NAME, 
    HOUSE_JSON, 
    CLIENT_CODE, 
    CLIENT_NAME, 
    ZONE_CODE, 
    ZONE_NAME, 
    BUILDING_CODE, 
    BUILDING_NAME, 
    FLOOR_CODE, 
    FLOOR_NAME, 
    ACTIVE, 
    CLIENT_CODE_RENTER, 
    CLIENT_NAME_RENTER, 
    IIF(HOUSE_TYPE_CODE = 0, CLIENT_CODE_RENTER, CLIENT_CODE) AS CLIENT_CODE_FULL, 
    IIF(HOUSE_TYPE_CODE = 0, CLIENT_NAME_RENTER, CLIENT_NAME) AS CLIENT_NAME_FULL, 
    BILL_NUMBER, 
    SELL_DATE, 
    DELIVERY_DATE, 
    MAINTENANCE_END_DATE, 
    ISNULL(HOUSE_NAME, N'''') + N'' - '' + ISNULL(FLOOR_NAME, N'''') + N'' - '' + ISNULL(BUILDING_NAME, N'''') + N'' - '' + ISNULL(ZONE_NAME, N'''') AS HOUSE_FULL_NAME,
    HOUSE_AREA,
    AVG_DEGREE,
    HOUSE_NOTE,
    HOUSE_PHONE,
    HOUSE_ADRESS,
    HOUSE_FROM_SCHOOL
FROM dbo.VB_BUILDING
' 
GO
/****** Object:  View [dbo].[V_ACC_B]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC_B]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ACC_B]
AS
WITH BOX_SUMS AS (
    SELECT
        ACCOUNT_CODE,
        ISNULL(SUM(B_USA), 0) AS BALANCE,
        ISNULL(SUM(B_IQ), 0) AS BALANCE_IQ,
        ISNULL(SUM(B_CUR), 0) AS BALANCE_CUR
    FROM dbo.T_BOX
    WHERE ACTIVE = 1
    GROUP BY ACCOUNT_CODE
)
SELECT
    CAST(A.ACCOUNT_CODE AS VARCHAR(MAX)) AS ACCOUNT_CODE,
    A.ACCOUNT_NAME,
    ISNULL(BS.BALANCE, 0) AS BALANCE,
    ISNULL(BS.BALANCE_IQ, 0) AS BALANCE_IQ,
    ISNULL(BS.BALANCE_CUR, 0) AS BALANCE_CUR,
    A.ACCOUNT_PARENT,
    A.SECURETY_CODE,
    A.TYPE_ACCOUNT_CODE,
    A.CURRANCY_CODE
FROM dbo.T_ACCOUNTS AS A
    LEFT JOIN BOX_SUMS AS BS ON A.ACCOUNT_CODE = BS.ACCOUNT_CODE
WHERE
    A.ACCOUNT_ACTIVE = 1
    AND A.ACCOUNT_LEVEL = 3
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_ACC_BALANCE_CLIENT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC_BALANCE_CLIENT]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ACC_BALANCE_CLIENT]
AS
SELECT
    C.CLIENT_CODE AS ACCOUNT_CODE,
    C.CLIENT_NAME AS ACCOUNT_NAME,
    C.CLIENT_TYPE AS TYPE_ACCOUNT_CODE,
    C.MANDOOB_CODE,
    M.MANDOOB_NAME,
    C.CLIENT_PHONE,
    C.CLIENT_PHONE_SMS,
    C.CLIENT_FULL_PHONE,
    C.CLIENT_EMAILE,
    C.CLIENT_REGION,
    C.CLIENT_ADDRESS,
    C.CLIENT_BARCODE,
    C.CLIENT_CARD,
    C.CLIENT_NOTE,
    C.CLIENT_PIN_CODE,
    C.DISCOUNT_PERCENT,
    C.SECURETY_CODE,
    C.MAX_DEBIT,
    C.CLIENT_BUSINESS,
    C.CLIENT_ACTIVE,
    V.BALANCE,
    V.BALANCE_IQ,
    V.BALANCE_CUR,
    V.ACCOUNT_PARENT,
    C.TYPE_PRICE_CODE,
    C.LAT,
    C.LNG,
    C.CURRANCY_CODE
FROM dbo.T_CLIENT AS C
    LEFT JOIN dbo.V_ACC_B AS V ON C.CLIENT_CODE = V.ACCOUNT_CODE
    LEFT JOIN dbo.T_MANDOOB AS M ON C.MANDOOB_CODE = M.MANDOOB_CODE
WHERE
    C.CLIENT_ACTIVE = 1
' 
GO
/****** Object:  View [dbo].[VB_SERVICE_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VB_SERVICE_DETAILS]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[VB_SERVICE_DETAILS]
AS
SELECT        dbo.TB_SERVICE_DETAILS.T_ID, dbo.TB_SERVICE_DETAILS.SERVICE_CODE, dbo.TB_SERVICE_DETAILS.SERVICE_NAME, dbo.TB_SERVICE_DETAILS.SERVICE_TYPE_LOOP, dbo.TB_SERVICE_DETAILS.SERVICE_EVERY, 
                         dbo.TB_SERVICE_DETAILS.SERVICE_ACCOUNT_CODE_INCOME, dbo.TB_SERVICE_DETAILS.SERVICE_ACCOUNT_CODE_OUTCOME, dbo.TB_SERVICE_DETAILS.SERVICE_AMO, dbo.TB_SERVICE_DETAILS.SERVICE_NOTE, 
                         dbo.TB_SERVICE_DETAILS.START_DAY, dbo.TB_SERVICE_DETAILS.START_DATE, dbo.TB_SERVICE_DETAILS.NEXT_DATE, dbo.TB_SERVICE_DETAILS.REGENERATED, dbo.TB_SERVICE_DETAILS.HOUSE_CODE, 
                         dbo.VB_HOUSE_CLIENT.HOUSE_NAME, dbo.VB_HOUSE_CLIENT.HOUSE_NO, dbo.VB_HOUSE_CLIENT.HOUSE_TYPE_CODE, dbo.VB_HOUSE_CLIENT.HOUSE_TYPE_NAME, dbo.VB_HOUSE_CLIENT.CLIENT_CODE_FULL, 
                         dbo.VB_HOUSE_CLIENT.CLIENT_NAME_FULL, dbo.VB_HOUSE_CLIENT.HOUSE_FULL_NAME, dbo.VB_HOUSE_CLIENT.ZONE_NAME, dbo.VB_HOUSE_CLIENT.BUILDING_NAME, dbo.VB_HOUSE_CLIENT.FLOOR_NAME
FROM            dbo.TB_SERVICE_DETAILS LEFT OUTER JOIN
                         dbo.VB_HOUSE_CLIENT ON dbo.TB_SERVICE_DETAILS.HOUSE_CODE = dbo.VB_HOUSE_CLIENT.HOUSE_CODE
' 
GO
/****** Object:  View [dbo].[VB_AQED_AYGAR]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VB_AQED_AYGAR]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[VB_AQED_AYGAR]
AS
SELECT        dbo.TB_AQED_AYGAR.T_ID, dbo.TB_AQED_AYGAR.AYGAR_NO, dbo.TB_AQED_AYGAR.AYGAR_DATE, dbo.TB_AQED_AYGAR.HOUSE_CODE, dbo.VB_HOUSE_CLIENT.HOUSE_NAME, dbo.VB_HOUSE_CLIENT.HOUSE_NO, 
                         dbo.VB_HOUSE_CLIENT.HOUSE_TYPE_CODE, dbo.VB_HOUSE_CLIENT.HOUSE_TYPE_NAME, dbo.VB_HOUSE_CLIENT.ZONE_CODE, dbo.VB_HOUSE_CLIENT.ZONE_NAME, dbo.VB_HOUSE_CLIENT.BUILDING_CODE, 
                         dbo.VB_HOUSE_CLIENT.BUILDING_NAME, dbo.VB_HOUSE_CLIENT.FLOOR_CODE, dbo.VB_HOUSE_CLIENT.FLOOR_NAME, dbo.VB_HOUSE_CLIENT.HOUSE_FULL_NAME, dbo.TB_AQED_AYGAR.CLIENT_CODE_SEEL, 
                         T_CLIENT_1.CLIENT_NAME AS CLIENT_NAME_SELL, dbo.TB_AQED_AYGAR.CLIENT_CODE_RENTER, dbo.T_CLIENT.CLIENT_NAME AS CLIENT_NAME_RENTER, dbo.TB_AQED_AYGAR.START_DATE, 
                         dbo.TB_AQED_AYGAR.END_DATE, dbo.TB_AQED_AYGAR.AMO_MONTHLY, dbo.TB_AQED_AYGAR.CURRANCY_CODE, dbo.T_CURRANNCY.CURRANCY_NAME, dbo.TB_AQED_AYGAR.EMOLA_AMO, 
                         dbo.TB_AQED_AYGAR.AYGAR_NOTE
FROM            dbo.T_CLIENT RIGHT OUTER JOIN
                         dbo.T_CLIENT AS T_CLIENT_1 RIGHT OUTER JOIN
                         dbo.TB_AQED_AYGAR ON T_CLIENT_1.CLIENT_CODE = dbo.TB_AQED_AYGAR.CLIENT_CODE_SEEL LEFT OUTER JOIN
                         dbo.VB_HOUSE_CLIENT ON dbo.TB_AQED_AYGAR.HOUSE_CODE = dbo.VB_HOUSE_CLIENT.HOUSE_CODE ON dbo.T_CLIENT.CLIENT_CODE = dbo.TB_AQED_AYGAR.CLIENT_CODE_RENTER LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.TB_AQED_AYGAR.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE
' 
GO
/****** Object:  View [dbo].[V_EMPLOYEE_SALARY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_EMPLOYEE_SALARY]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_EMPLOYEE_SALARY]
AS
SELECT        dbo.T_EMPLOYEE.EMP_CODE, dbo.T_EMPLOYEE.EMP_NAME, dbo.T_EMPLOYEE.EMP_CARD, dbo.T_EMPLOYEE.EMP_SALLARY, dbo.T_EMPLOYEE.PER_DAY, dbo.T_EMPLOYEE.JOB_HOUR, 
                         dbo.T_EMPLOYEE.PRICE_HOUR, dbo.T_EMPLOYEE.PRICE_MINUTE, dbo.T_EMPLOYEE.JOB_FROM, dbo.T_EMPLOYEE.JOB_TO, dbo.T_EMPLOYEE.ACTIVE, dbo.T_EMPLOYEE.ACCOUNT_CODE, 
                         dbo.T_EMPLOYEE.ACCOUNT_CODE_SELFA, dbo.V_ACC_B.ACCOUNT_NAME, dbo.V_ACC_B.BALANCE, dbo.V_ACC_B.BALANCE_IQ, dbo.V_ACC_B.BALANCE_CUR, V_ACC_B_1.ACCOUNT_NAME AS ACCOUNT_NAME_SELFA, 
                         V_ACC_B_1.BALANCE AS BALANCE_SELFA, V_ACC_B_1.BALANCE_IQ AS BALANCE_IQ_SELFA, V_ACC_B_1.BALANCE_CUR AS BALANCE_CUR_SELFA, 0 AS HOUR_ADD, 0 AS CUT_SELFA, 0 AS CASH_SALARY
FROM            dbo.T_EMPLOYEE LEFT OUTER JOIN
                         dbo.V_ACC_B AS V_ACC_B_1 ON dbo.T_EMPLOYEE.ACCOUNT_CODE_SELFA = V_ACC_B_1.ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.V_ACC_B ON dbo.T_EMPLOYEE.ACCOUNT_CODE = dbo.V_ACC_B.ACCOUNT_CODE
WHERE        (dbo.T_EMPLOYEE.ACTIVE = 1)
GROUP BY dbo.T_EMPLOYEE.EMP_CODE, dbo.T_EMPLOYEE.EMP_NAME, dbo.T_EMPLOYEE.EMP_CARD, dbo.T_EMPLOYEE.EMP_SALLARY, dbo.T_EMPLOYEE.PER_DAY, dbo.T_EMPLOYEE.JOB_HOUR, dbo.T_EMPLOYEE.ACTIVE, 
                         dbo.T_EMPLOYEE.PRICE_HOUR, dbo.T_EMPLOYEE.PRICE_MINUTE, dbo.T_EMPLOYEE.JOB_FROM, dbo.T_EMPLOYEE.JOB_TO, dbo.T_EMPLOYEE.ACCOUNT_CODE, dbo.T_EMPLOYEE.ACCOUNT_CODE_SELFA, 
                         dbo.V_ACC_B.ACCOUNT_NAME, dbo.V_ACC_B.BALANCE, dbo.V_ACC_B.BALANCE_IQ, dbo.V_ACC_B.BALANCE_CUR, V_ACC_B_1.ACCOUNT_NAME, V_ACC_B_1.BALANCE, V_ACC_B_1.BALANCE_IQ, V_ACC_B_1.BALANCE_CUR

' 
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_ALSADY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN_PHARMA_ALSADY]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_ALSADY]
AS
SELECT
    T.ITEM_CODE,
    T.TYPE_CODE,
    ISNULL(V.BALANCE, 0) AS BALANCE_PHARMA,
    1 AS UNIT_CODE,
    T.UNIT_NAME,
    T.RAF_NAME,
    T.SELL AS SELL1,
    T.SELL2,
    T.UNIT2_NAME,
    T.UNIT2_QTY,
    T.ITEM_BARCODE,
    T.ITEM_NAME,
    -- الرصيد بوحدة 1
    CASE 
        WHEN ISNULL(V.BALANCE, 0) < 0 THEN ISNULL(V.BALANCE, 0)
        WHEN T.UNIT2_QTY = 1 THEN ISNULL(V.BALANCE, 0)
        ELSE ISNULL(V.BALANCE, 0) - (FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY) * T.UNIT2_QTY)
    END AS BALANCE_U1,
    -- الرصيد بوحدة 2
    CASE 
        WHEN ISNULL(V.BALANCE, 0) < 0 THEN 0
        WHEN T.UNIT2_QTY = 1 THEN 0
        ELSE FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY)
    END AS BALANCE_U2,
    -- الرصيد النصي
    CASE 
        WHEN T.UNIT2_QTY = 1 
            THEN CAST(ISNULL(V.BALANCE, 0) AS varchar(20)) + N'' '' + T.UNIT_NAME
        ELSE
            CAST(
                CASE 
                    WHEN ISNULL(V.BALANCE, 0) < 0 THEN 0
                    ELSE FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY)
                END AS varchar(20)
            ) + N'' '' + T.UNIT2_NAME +
            CASE 
                WHEN ISNULL(V.BALANCE, 0) < 0 THEN N'' || ''
                ELSE N'' + ''
            END +
            CAST(
                CASE 
                    WHEN ISNULL(V.BALANCE, 0) < 0 THEN ISNULL(V.BALANCE, 0)
                    ELSE ISNULL(V.BALANCE, 0) - (FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY) * T.UNIT2_QTY)
                END AS varchar(20)
            ) + N'' '' + T.UNIT_NAME
    END AS BALANCE,
    -- تواريخ وانذارات الصلاحية
    T.EXPIRED_DAY,
    T.EXPIRED_DATE,
    T.EXPIRED_WARRNING,
    -- اسم كامل (باركود:اسم)
    CASE 
        WHEN T.ITEM_BARCODE = N'''' THEN T.ITEM_NAME
        ELSE T.ITEM_BARCODE + N'' : '' + T.ITEM_NAME
    END AS FULL_NAME,
    -- الباقي
    T.IS_HIDE,
    T.COST AS PRICE_BUY,
    T.COST AS PRICE_COST,
    T.COST AS PRICE_AVG_COST,
    T.SELL AS PRICE_SALE_1,
    T.SELL_G AS PRICE_SALE_2,
    T.SELL_W AS PRICE_SALE_3,
    T.SELL_CNY AS PRICE_SALE_CUR,
    T.CATEGORY_CODE,
    T.QTY_MIN,
    T.IMG_URL,
    T.IS_DISCOUNT,
    T.ITEM_NOTE,
    T.KIND_NAME,
    T.ON2_OFF2,
    C.SHOW_MENU AS SHOW_CATEGORY_ITEM
FROM 
    dbo.T_ITEMS T
    LEFT JOIN dbo.V_ITEMS_BALANCE_MIN V ON T.ITEM_CODE = V.ITEM_CODE
    LEFT JOIN dbo.T_ITEM_CATEGORY C ON T.CATEGORY_CODE = C.CATEGORY_CODE
WHERE 
    T.ACTIVE = 1 AND T.ITEM_CODE > 0
' 
GO
/****** Object:  View [dbo].[V_ITEM_BALANCE_PHARMA]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_BALANCE_PHARMA]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEM_BALANCE_PHARMA]
AS
SELECT
    SB.ITEM_CODE,
    SB.ITEM_BARCODE,
    SB.ITEM_NAME,
    CASE
        WHEN SB.ITEM_BARCODE = N'''' THEN SB.ITEM_NAME
        ELSE SB.ITEM_BARCODE + N'' : '' + SB.ITEM_NAME
    END AS FULL_NAME,
    SB.CATEGORY_CODE,
    SB.CATEGORY_NAME,
    SB.KIND_NAME,
    SB.UNIT_CODE,
    SB.UNIT_QTY,
    SB.UNIT_NAME,
    SB.BALANCE,
    SB.DF_STORE,
    TI.QTY_MIN,
    TI.UNIT2_NAME,
    TI.UNIT2_QTY,
    TI.SELL AS SELL1,
    TI.SELL2,
    IIF(TI.UNIT2_QTY = 1, SB.BALANCE, SB.BALANCE - (FLOOR(SB.BALANCE / TI.UNIT2_QTY) * TI.UNIT2_QTY)) AS BALANCE_U1,
    IIF(TI.UNIT2_QTY = 1, 0, FLOOR(SB.BALANCE / TI.UNIT2_QTY)) AS BALANCE_U2,
    IIF(
        TI.UNIT2_QTY = 1,
        CAST(SB.BALANCE AS VARCHAR(MAX)) + N'' '' + SB.UNIT_NAME,
        CAST(FLOOR(SB.BALANCE / TI.UNIT2_QTY) AS VARCHAR(MAX)) + N'' '' + TI.UNIT2_NAME + N'' + '' +
        CAST(SB.BALANCE - (FLOOR(SB.BALANCE / TI.UNIT2_QTY) * TI.UNIT2_QTY) AS VARCHAR(MAX)) + N'' '' + SB.UNIT_NAME
    ) AS BALANCE_PHARMA
FROM dbo.V_STORE_BOX AS SB
    LEFT JOIN dbo.T_ITEMS AS TI ON SB.ITEM_CODE = TI.ITEM_CODE
WHERE
    SB.DF_STORE = 1
    AND SB.TYPE_CODE <> 5
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_ITEM_BALANCE_PHARMA_MATERIAL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_BALANCE_PHARMA_MATERIAL]'))
EXEC dbo.sp_executesql @statement = N'

CREATE VIEW [dbo].[V_ITEM_BALANCE_PHARMA_MATERIAL]
AS
SELECT        dbo.V_ITEM_BALANCE_PHARMA.ITEM_CODE, dbo.V_ITEM_BALANCE_PHARMA.ITEM_BARCODE, dbo.V_ITEM_BALANCE_PHARMA.ITEM_NAME, dbo.V_ITEM_BALANCE_PHARMA.CATEGORY_CODE, 
                         dbo.V_ITEM_BALANCE_PHARMA.CATEGORY_NAME, dbo.V_ITEM_BALANCE_PHARMA.UNIT_CODE, dbo.V_ITEM_BALANCE_PHARMA.UNIT_QTY, dbo.V_ITEM_BALANCE_PHARMA.UNIT_NAME, 
                         dbo.V_ITEM_BALANCE_PHARMA.BALANCE, dbo.V_ITEM_BALANCE_PHARMA.DF_STORE, dbo.V_ITEM_BALANCE_PHARMA.QTY_MIN, dbo.V_ITEM_BALANCE_PHARMA.UNIT2_NAME, 
                         dbo.V_ITEM_BALANCE_PHARMA.UNIT2_QTY, dbo.V_ITEM_BALANCE_PHARMA.SELL1, dbo.V_ITEM_BALANCE_PHARMA.SELL2, dbo.V_ITEM_BALANCE_PHARMA.BALANCE_U1, dbo.V_ITEM_BALANCE_PHARMA.BALANCE_U2, 
                         dbo.V_ITEM_BALANCE_PHARMA.BALANCE_PHARMA, dbo.T_ITEM_MATERIAL.EFFECTIVE_MATERIAL, dbo.T_ITEM_MATERIAL_EFFECTIVE.EFFECTIVE_MATERIAL_ID
FROM            dbo.V_ITEM_BALANCE_PHARMA LEFT OUTER JOIN
                         dbo.T_ITEM_MATERIAL_EFFECTIVE ON dbo.V_ITEM_BALANCE_PHARMA.ITEM_CODE = dbo.T_ITEM_MATERIAL_EFFECTIVE.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_MATERIAL ON dbo.T_ITEM_MATERIAL_EFFECTIVE.EFFECTIVE_MATERIAL_ID = dbo.T_ITEM_MATERIAL.T_ID


' 
GO
/****** Object:  View [dbo].[V_ITEMS_ON_MENU]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_ON_MENU]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEMS_ON_MENU]
AS
SELECT
    T.ITEM_CODE,
    T.ITEM_NAME,
    T.CATEGORY_CODE,
    C.CATEGORY_NAME,
    T.TYPE_CODE,
    TY.TYPE_NAME,
    T.COST,
    T.SELL,
    T.ACTIVE,
    T.SORT,
    T.PRINTER_ID,
    T.ITEM_BARCODE,
    T.ON2_OFF2,
    T.UNIT2_NAME,
    T.UNIT2_QTY,
    T.SELL2,
    T.SELL_CNY,
    T.SELL2_CNY,
    T.DF_SALE,
    T.ITEM_NOTE,
    T.IMG_URL,
    T.ITEM_NAME_EN,
    T.ITEM_NOTE_EN,
    T.TIME_USE,
    T.IS_STORE,
    T.QTY_MIN,
    T.SHOW_MENU,
    T.SELL_G,
    T.SELL_W,
    T.SELL2_G,
    T.SELL2_W,
    T.IMAGE,
    T.CLIENT_NAME_BEST,
    T.RAF_NAME,
    T.ITEM_PARENT,
    T.ITEM_SUB_PARENT,
    T.LEVEL_SUB,
    T.AREA_M2,
    T.WIDTH_CM,
    T.LENGTH_CM,
    T.COMPANY_CREATE,
    T.EFFECTIVE_MATERIAL,
    T.IS_HIDE,
    T.SERVER_ITEM_CODE,
    T.SERVER_BRANCH,
    T.IS_SERIAL,
    T.KIND_NAME
FROM
    dbo.T_ITEMS T
    LEFT JOIN dbo.T_ITEM_CATEGORY C ON T.CATEGORY_CODE = C.CATEGORY_CODE
    LEFT JOIN dbo.T_ITEM_TYPE TY ON T.TYPE_CODE = TY.TYPE_CODE
WHERE
    T.ACTIVE = 1
    AND T.IS_STORE = 1
    AND T.SHOW_MENU = 1
' 
GO
/****** Object:  View [dbo].[V_CATEGORY_ON_MENU]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_CATEGORY_ON_MENU]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_CATEGORY_ON_MENU]
AS
SELECT        CATEGORY_CODE, CATEGORY_NAME
FROM            dbo.V_ITEMS_ON_MENU
GROUP BY CATEGORY_CODE, CATEGORY_NAME

' 
GO
/****** Object:  View [dbo].[V_STORE_BOX_STORE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_STORE]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_STORE_BOX_STORE]
AS
SELECT 
    I.ITEM_CODE,
    I.ITEM_BARCODE,
    I.ITEM_NAME,
    I.TYPE_CODE,
    IU.UNIT_CODE,
    IU.UNIT_QTY,
    IU.UNIT_NAME,
    SUM(ISNULL(SB.BALANCE_M, 0)) / IU.UNIT_QTY AS BALANCE,
    IU.DF_SALE,
    IU.DF_STORE,
    IU.DF_BUY,
    CASE 
        WHEN I.ITEM_BARCODE = N'''' THEN I.ITEM_NAME 
        ELSE I.ITEM_BARCODE + '' : '' + I.ITEM_NAME 
    END AS FULL_NAME,
    IU.PRICE_BUY,
    IU.PRICE_COST,
    IU.PRICE_SALE_1,
    IU.PRICE_SALE_2,
    IU.PRICE_SALE_3,
    IU.PRICE_AVG_COST,
    IU.PRICE_SALE_CUR,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    SB.STORE_CODE,
    ST.STORE_NAME,
    ST.IS_USED,
    I.IS_HIDE,
    I.RAF_NAME,
    I.KIND_NAME
FROM 
    dbo.T_ITEMS I
    INNER JOIN dbo.T_ITEM_UNIT IU ON I.ITEM_CODE = IU.ITEM_CODE
    LEFT JOIN dbo.T_STORE_BOX SB ON I.ITEM_CODE = SB.ITEM_CODE
    LEFT JOIN dbo.T_STORE_TYPE ST ON SB.STORE_CODE = ST.STORE_CODE
    LEFT JOIN dbo.T_ITEM_CATEGORY IC ON I.CATEGORY_CODE = IC.CATEGORY_CODE
WHERE 
    IU.ON_OFF = 1 AND 
    ST.IS_USED = 1 AND 
    I.ACTIVE = 1 AND 
    SB.ACTIVE = 1
GROUP BY 
    I.ITEM_CODE,
    I.ITEM_NAME,
    IU.UNIT_CODE,
    IU.UNIT_NAME,
    IU.UNIT_QTY,
    IU.DF_BUY,
    IU.ON_OFF,
    I.ITEM_BARCODE,
    IU.DF_SALE,
    IU.DF_STORE,
    I.ACTIVE,
    I.TYPE_CODE,
    SB.ACTIVE,
    IU.PRICE_BUY,
    IU.PRICE_COST,
    IU.PRICE_SALE_1,
    IU.PRICE_SALE_2,
    IU.PRICE_SALE_3,
    IU.PRICE_AVG_COST,
    IU.PRICE_SALE_CUR,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    SB.STORE_CODE,
    ST.STORE_NAME,
    ST.IS_USED,
    I.IS_HIDE,
    I.RAF_NAME,
    I.KIND_NAME
 ' 
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_STORE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN_PHARMA_STORE]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_STORE]
AS
SELECT
    T.ITEM_CODE,
    T.TYPE_CODE,
    ISNULL(V.BALANCE, 0) AS BALANCE_PHARMA,
    1 AS UNIT_CODE,
    T.UNIT_NAME,
    T.RAF_NAME,
    T.SELL AS SELL1,
    T.SELL2,
    T.UNIT2_NAME,
    T.UNIT2_QTY,
    T.ITEM_BARCODE,
    T.ITEM_NAME,
    -- الرصيد بوحدة 1
    CASE 
        WHEN T.UNIT2_QTY = 1 THEN ISNULL(V.BALANCE, 0)
        ELSE ISNULL(V.BALANCE, 0) - (FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY) * T.UNIT2_QTY)
    END AS BALANCE_U1,
    -- الرصيد بوحدة 2
    CASE 
        WHEN T.UNIT2_QTY = 1 THEN 0
        ELSE FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY)
    END AS BALANCE_U2,
    -- الرصيد بالنص
    CASE 
        WHEN T.UNIT2_QTY = 1 
            THEN CAST(ISNULL(V.BALANCE, 0) AS varchar(20)) + N'' '' + T.UNIT_NAME
        ELSE
            CAST(FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY) AS varchar(20)) + N'' '' + T.UNIT2_NAME + N'' + '' +
            CAST(ISNULL(V.BALANCE, 0) - (FLOOR(ISNULL(V.BALANCE, 0) / T.UNIT2_QTY) * T.UNIT2_QTY) AS varchar(20)) + N'' '' + T.UNIT_NAME
    END AS BALANCE,
    T.EXPIRED_DAY,
    T.EXPIRED_DATE,
    T.EXPIRED_WARRNING,
    -- الاسم الكامل (باركود : اسم)
    CASE 
        WHEN T.ITEM_BARCODE = N'''' THEN T.ITEM_NAME
        ELSE T.ITEM_BARCODE + N'' : '' + T.ITEM_NAME
    END AS FULL_NAME,
    T.IS_HIDE,
    T.COST AS PRICE_BUY,
    T.COST AS PRICE_COST,
    T.COST AS PRICE_AVG_COST,
    T.SELL AS PRICE_SALE_1,
    T.SELL_G AS PRICE_SALE_2,
    T.SELL_W AS PRICE_SALE_3,
    T.SELL_CNY AS PRICE_SALE_CUR,
    T.CATEGORY_CODE,
    V.STORE_CODE,
    V.STORE_NAME,
    T.QTY_MIN,
    T.KIND_NAME,
    T.ITEM_NOTE
FROM 
    dbo.T_ITEMS T
    LEFT JOIN dbo.V_STORE_BOX_STORE V ON T.ITEM_CODE = V.ITEM_CODE
WHERE 
    T.ACTIVE = 1
    AND T.ITEM_CODE <> 0
' 
GO
/****** Object:  View [dbo].[V_BOX_EXPENSES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BOX_EXPENSES]'))
EXEC dbo.sp_executesql @statement = N'

CREATE VIEW [dbo].[V_BOX_EXPENSES]
AS
SELECT        TOP(1000000000)  T_ID_BOX, BILL_BRANCH, BILL_NUMBER, BILL_STR, FULL_BILL, BILL_DATE, BILL_TIME, MOVE_CODE, B_CODE, B_NAME, B_SIGN, B_COLOR, BRANCH_CODE, BRANCH_NAME, ACCOUNT_CODE, ACCOUNT_NAME, 
                         ACCOUNT_FULL_NAME, ACCOUNT_PARENT, ACCOUNT_DESCRIPTION, DEBIT, CREDIT, DEBIT_IQ, CREDIT_IQ, CURRANCY_CODE, CURRANCY_EQUAL, DEBIT_CUR, CREDIT_CUR, DESCRIPTION, USER_CODE, USER_NAME, 
                         C_DATE, ACTIVE, GUIDS,
						CASE
						 WHEN B_CODE=5 THEN
                             (SELECT        ISNULL(N''من حـ /'' + FROM_ACC + N'' - الى حـ /'' + TO_ACC, N'' '') AS Expr1
                                FROM            dbo.T_SANAD
                                WHERE        (BILL_BRANCH LIKE dbo.V_BOX.BILL_BRANCH) AND (dbo.V_BOX.B_CODE = 5) AND ( ACCOUNT_CODE=dbo.V_BOX.ACCOUNT_CODE)) 
						 WHEN B_CODE=15 THEN
                             (SELECT        ISNULL(N''من حـ /'' + FROM_ACC + N'' - الى حـ /'' + TO_ACC, N'' '') AS Expr1
                                FROM            dbo.T_SANAD_CNY
                                WHERE        (BILL_BRANCH LIKE dbo.V_BOX.BILL_BRANCH) AND (dbo.V_BOX.B_CODE = 15) AND ( ACCOUNT_CODE=dbo.V_BOX.ACCOUNT_CODE) ) 
								 WHEN B_CODE=28 THEN
                             (SELECT        ISNULL(N''من حـ /'' + FROM_ACC + N'' - الى حـ /'' + TO_ACC, N'' '') AS Expr1
                                FROM            dbo.T_SANAD_HAWALA
                                WHERE        (BILL_BRANCH LIKE dbo.V_BOX.BILL_BRANCH) AND (dbo.V_BOX.B_CODE = 28)AND ( ACCOUNT_CODE=dbo.V_BOX.ACCOUNT_CODE)) 
						 WHEN B_CODE=7 THEN
                             (SELECT      TOP(1)  ISNULL(N''من حـ /'' + N''سند قيد متعدد'' + N'' - الى حـ /'' + ACCOUNT_NAME, N'' '') AS Expr1
                                FROM            dbo.T_SANAD_KAYD_DETAILS
                                WHERE        (BILL_BRANCH LIKE dbo.V_BOX.BILL_BRANCH) AND (dbo.V_BOX.B_CODE = 7) AND ( ACCOUNT_CODE=dbo.V_BOX.ACCOUNT_CODE)) 
								END AS FROM_TO_ACC
								, MOVE_NAME
FROM            dbo.V_BOX
WHERE        (ACCOUNT_PARENT = 3)
ORDER BY T_ID_BOX


' 
GO
/****** Object:  View [dbo].[V_A_ERROR_SALES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_A_ERROR_SALES]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_A_ERROR_SALES]
AS
SELECT        dbo.V_SALES.TOTAL_SALES AS SALES, SUM(dbo.V_SALES_DETAILS.TOTAL) AS DETAILS, dbo.V_SALES.BILL_BRANCH, dbo.V_SALES.TOTAL_SALES - SUM(dbo.V_SALES_DETAILS.TOTAL) AS REMAIN
FROM            dbo.V_SALES LEFT OUTER JOIN
                         dbo.V_SALES_DETAILS ON dbo.V_SALES.BILL_BRANCH = dbo.V_SALES_DETAILS.BILL_BRANCH
GROUP BY dbo.V_SALES.BILL_BRANCH, dbo.V_SALES.TOTAL_SALES
HAVING        (dbo.V_SALES.TOTAL_SALES - SUM(dbo.V_SALES_DETAILS.TOTAL) <> 0)

' 
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_WAJBA]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_WAJBA]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_WAJBA]
AS
SELECT -999999 AS ITEM_CODE ,-999999 AS BILL_NUMBER,N''0'' AS BILL_BRANCH,''2021-01-01'' AS BILL_DATE,N''غير محدد'' AS CLIENT_NAME,0 AS REMAIN_BUY,N'''' AS UNIT_NAME,1 AS UNIT_QTY,CAST(GETDATE() AS DATE)  AS EXP_DATE,0 AS QTY_BUY,0 AS QTY_SALES,0 AS SELL1,0 AS SELL2,0 AS REMAIN_BUY_MIN,0 AS COST
UNION ALL
SELECT ITEM_CODE,BILL_NUMBER,BILL_BRANCH,BILL_DATE,CLIENT_NAME,REMAIN_BUY,UNIT_NAME,UNIT_QTY,CAST([EXP_DATE] AS DATE) AS EXP_DATE,QTY AS QTY_BUY,QTY_SALES,SELL1,SELL2,REMAIN_BUY_MIN,COST
FROM V_BUY_DETAILS_EXPIRED_REMAIN

GROUP BY ITEM_CODE,BILL_NUMBER,BILL_BRANCH,BILL_DATE,CLIENT_NAME,REMAIN_BUY,UNIT_NAME,UNIT_QTY,EXP_DATE,QTY,QTY_SALES,SELL1,SELL2,REMAIN_BUY_MIN,COST


' 
GO
/****** Object:  View [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_BALANCE_MIN_PHARMA_BARCODE]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_ITEMS_BALANCE_MIN_PHARMA_BARCODE]
AS
SELECT
    I.ITEM_CODE,
    I.TYPE_CODE,
    ISNULL(BM.BALANCE, 0) AS BALANCE_PHARMA,
    1 AS UNIT_CODE,
    I.UNIT_NAME,
    I.RAF_NAME,
    I.SELL AS SELL1,
    I.SELL2,
    I.UNIT2_NAME,
    I.UNIT2_QTY,
    IB.ITEM_BARCODE,         -- باركود الوحدة
    IB.UNIT_CODE AS BARCODE_UNIT_CODE,
    IB.UNIT_NAME AS BARCODE_UNIT_NAME,
    I.ITEM_NAME,
    -- الكمية بوحدة القطعة (الصغرى)
    IIF(ISNULL(BM.BALANCE, 0) < 0,
        ISNULL(BM.BALANCE, 0),
        IIF(I.UNIT2_QTY = 1,
            ISNULL(BM.BALANCE, 0),
            ISNULL(BM.BALANCE, 0) - (FLOOR(ISNULL(BM.BALANCE, 0) / I.UNIT2_QTY) * I.UNIT2_QTY)
        )
    ) AS BALANCE_U1,
    -- الكمية بوحدة العلبة (الكبرى)
    IIF(ISNULL(BM.BALANCE, 0) < 0,
        0,
        IIF(I.UNIT2_QTY = 1,
            0,
            FLOOR(ISNULL(BM.BALANCE, 0) / I.UNIT2_QTY)
        )
    ) AS BALANCE_U2,
    -- النص النهائي لعرض الرصيد الدوائي
    IIF(I.UNIT2_QTY = 1,
        CAST(ISNULL(BM.BALANCE, 0) AS VARCHAR(MAX)) + N'' '' + I.UNIT_NAME,
        CAST(IIF(ISNULL(BM.BALANCE, 0) < 0, 0, FLOOR(ISNULL(BM.BALANCE, 0) / I.UNIT2_QTY)) AS VARCHAR(MAX)) + N'' '' + I.UNIT2_NAME +
        IIF(ISNULL(BM.BALANCE, 0) < 0, N'' || '', N'' + '') +
        CAST(IIF(ISNULL(BM.BALANCE, 0) < 0, ISNULL(BM.BALANCE, 0), ISNULL(BM.BALANCE, 0) - (FLOOR(ISNULL(BM.BALANCE, 0) / I.UNIT2_QTY) * I.UNIT2_QTY)) AS VARCHAR(MAX)) + N'' '' + I.UNIT_NAME
    ) AS BALANCE,
    I.EXPIRED_DAY,
    I.EXPIRED_DATE,
    I.EXPIRED_WARRNING,
    IIF(I.ITEM_BARCODE = N'''', I.ITEM_NAME, IB.ITEM_BARCODE + N'' : '' + I.ITEM_NAME) AS FULL_NAME,
    I.IS_HIDE,
    I.COST AS PRICE_BUY,
    I.COST AS PRICE_COST,
    I.COST AS PRICE_AVG_COST,
    I.SELL AS PRICE_SALE_1,
    I.SELL_G AS PRICE_SALE_2,
    I.SELL_W AS PRICE_SALE_3,
    I.SELL_CNY AS PRICE_SALE_CUR,
    I.CATEGORY_CODE,
    I.QTY_MIN,
    I.IMG_URL,
    I.KIND_NAME,
    I.ITEM_NOTE
FROM dbo.T_ITEMS AS I
    LEFT JOIN dbo.V_ITEMS_BALANCE_MIN AS BM ON I.ITEM_CODE = BM.ITEM_CODE
    LEFT JOIN dbo.T_ITEM_BARCODE AS IB ON I.ITEM_CODE = IB.ITEM_CODE
WHERE
    I.ACTIVE = 1
    AND I.ITEM_CODE <> 0
' 
GO
/****** Object:  View [dbo].[AA_CHECK_COUNT_DETAILS_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[AA_CHECK_COUNT_DETAILS_TEMP]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[AA_CHECK_COUNT_DETAILS_TEMP]
AS
SELECT        TOP (100) PERCENT dbo.T_SALES.BILL_NUMBER, dbo.T_SALES.BILL_DATE, COUNT(dbo.T_SALES_DETAILS.T_ID) AS DETAILS, COUNT(dbo.T_SALES_TEMP.T_ID) AS TEMP, COUNT(dbo.T_SALES_DETAILS.T_ID) 
                         - COUNT(dbo.T_SALES_TEMP.T_ID) AS EQUAL, dbo.T_SALES.OFFER_CODE
FROM            dbo.T_SALES LEFT OUTER JOIN
                         dbo.T_SALES_TEMP ON dbo.T_SALES.BILL_BRANCH = dbo.T_SALES_TEMP.BILL_BRANCH LEFT OUTER JOIN
                         dbo.T_SALES_DETAILS ON dbo.T_SALES.BILL_BRANCH = dbo.T_SALES_DETAILS.BILL_BRANCH
WHERE        (dbo.T_SALES.OFFER_CODE = 77)
GROUP BY dbo.T_SALES.BILL_NUMBER, dbo.T_SALES.BILL_DATE, dbo.T_SALES.OFFER_CODE
HAVING        (COUNT(dbo.T_SALES_TEMP.T_ID) = 0)
ORDER BY EQUAL, TEMP DESC
' 
GO
/****** Object:  View [dbo].[V_1111_ERROR_EXP_BUY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_1111_ERROR_EXP_BUY]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_1111_ERROR_EXP_BUY]
AS
SELECT        dbo.T_BUY.BILL_NUMBER, dbo.T_BUY.BILL_DATE, SUM(dbo.T_BUY_EXPENSES.TOT_EXP) AS Expr1, dbo.T_BUY.TOTAL_EXPENSES, dbo.T_BUY.NET_BUY, dbo.T_BUY.TOTAL_COST
FROM            dbo.T_BUY LEFT OUTER JOIN
                         dbo.T_BUY_EXPENSES ON dbo.T_BUY.BILL_NUMBER = dbo.T_BUY_EXPENSES.BILL_BUY
GROUP BY dbo.T_BUY.BILL_NUMBER, dbo.T_BUY.BILL_DATE, dbo.T_BUY.TOTAL_EXPENSES, dbo.T_BUY.NET_BUY, dbo.T_BUY.TOTAL_COST
HAVING        CAST((dbo.T_BUY.TOTAL_EXPENSES - SUM(dbo.T_BUY_EXPENSES.TOT_EXP)) AS int)<>0

' 
GO
/****** Object:  View [dbo].[V_ACC_B_CLIENTS_ONLY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC_B_CLIENTS_ONLY]'))
EXEC dbo.sp_executesql @statement = N'
CREATE  VIEW [dbo].[V_ACC_B_CLIENTS_ONLY]
AS
WITH BOX_SUMS AS (
    SELECT
        ACCOUNT_CODE,
        SUM(B_USA) AS BALANCE,
        SUM(B_IQ) AS BALANCE_IQ,
        SUM(B_CUR) AS BALANCE_CUR
    FROM dbo.T_BOX
    WHERE ACTIVE = 1
    GROUP BY ACCOUNT_CODE
)
SELECT
     CAST(A.ACCOUNT_CODE AS VARCHAR(MAX)) AS ACCOUNT_CODE,
    A.ACCOUNT_NAME,
	A.SECURETY_CODE,
    ISNULL(BS.BALANCE, 0) AS BALANCE,
    ISNULL(BS.BALANCE_IQ, 0) AS BALANCE_IQ,
    ISNULL(BS.BALANCE_CUR, 0) AS BALANCE_CUR
FROM dbo.T_ACCOUNTS AS A
LEFT JOIN BOX_SUMS AS BS ON A.ACCOUNT_CODE = BS.ACCOUNT_CODE
WHERE
    A.ACCOUNT_ACTIVE = 1
    AND A.ACCOUNT_LEVEL = 3
    AND A.TYPE_ACCOUNT_CODE IN (1, 3)      -- فقط العملاء
    AND A.ACCOUNT_PARENT = 21  
' 
GO
/****** Object:  View [dbo].[V_ACC2]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC2]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ACC2]
AS
WITH BOX_SUMS AS (
    SELECT
        ACCOUNT_CODE,
        ISNULL(SUM(DEBIT) - SUM(CREDIT), 0) AS BALANCE,
        ISNULL(SUM(DEBIT_IQ) - SUM(CREDIT_IQ), 0) AS BALANCE_IQ,
        ISNULL(SUM(DEBIT_CUR) - SUM(CREDIT_CUR), 0) AS BALANCE_CUR
    FROM dbo.T_BOX
    WHERE ACTIVE = 1
    GROUP BY ACCOUNT_CODE
)
SELECT
    CAST(C.CLIENT_CODE AS VARCHAR(MAX)) AS ACCOUNT_CODE,
    C.CLIENT_NAME AS ACCOUNT_NAME,
    ISNULL(BS.BALANCE, 0) AS BALANCE,
    ISNULL(BS.BALANCE_IQ, 0) AS BALANCE_IQ,
    ISNULL(BS.BALANCE_CUR, 0) AS BALANCE_CUR,
    C.SECURETY_CODE,
    C.CLIENT_TYPE
FROM dbo.T_CLIENT AS C
    LEFT JOIN BOX_SUMS AS BS ON C.CLIENT_CODE = BS.ACCOUNT_CODE
WHERE
    C.CLIENT_ACTIVE = 1
' 
GO
/****** Object:  View [dbo].[V_ACC2_OLD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC2_OLD]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ACC2_OLD]
AS
WITH BOX_SUMS AS (
    SELECT
        ACCOUNT_CODE,
        ISNULL(SUM(DEBIT) - SUM(CREDIT), 0) AS BALANCE,
        ISNULL(SUM(DEBIT_IQ) - SUM(CREDIT_IQ), 0) AS BALANCE_IQ,
        ISNULL(SUM(DEBIT_CUR) - SUM(CREDIT_CUR), 0) AS BALANCE_CUR
    FROM dbo.T_BOX
    WHERE ACTIVE = 1
    GROUP BY ACCOUNT_CODE
)
SELECT
    CAST(C.CLIENT_CODE AS VARCHAR(MAX)) AS ACCOUNT_CODE,
    C.CLIENT_NAME AS ACCOUNT_NAME,
    ISNULL(BS.BALANCE, 0) AS BALANCE,
    ISNULL(BS.BALANCE_IQ, 0) AS BALANCE_IQ,
    ISNULL(BS.BALANCE_CUR, 0) AS BALANCE_CUR,
    C.SECURETY_CODE,
    C.CLIENT_TYPE
FROM dbo.T_CLIENT AS C
    LEFT JOIN BOX_SUMS AS BS ON C.CLIENT_CODE = BS.ACCOUNT_CODE
WHERE
    C.CLIENT_ACTIVE = 1
' 
GO
/****** Object:  View [dbo].[V_ACC3_OLD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC3_OLD]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ACC3_OLD]
AS
WITH BOX_SUMS AS (
    SELECT
        ACCOUNT_CODE,
        ISNULL(SUM(DEBIT) - SUM(CREDIT), 0) AS BALANCE,
        ISNULL(SUM(DEBIT_IQ) - SUM(CREDIT_IQ), 0) AS BALANCE_IQ,
        ISNULL(SUM(DEBIT_CUR) - SUM(CREDIT_CUR), 0) AS BALANCE_CUR
    FROM dbo.T_BOX
    WHERE ACTIVE = 1
    GROUP BY ACCOUNT_CODE
)
SELECT
    CAST(A.ACCOUNT_CODE AS VARCHAR(MAX)) AS ACCOUNT_CODE,
    A.ACCOUNT_NAME,
    ISNULL(BS.BALANCE, 0) AS BALANCE,
    ISNULL(BS.BALANCE_IQ, 0) AS BALANCE_IQ,
    ISNULL(BS.BALANCE_CUR, 0) AS BALANCE_CUR,
    A.ACCOUNT_PARENT,
    A.ACCOUNT_LEVEL,
    A.SECURETY_CODE
FROM dbo.T_ACCOUNTS AS A
    LEFT JOIN BOX_SUMS AS BS ON A.ACCOUNT_CODE = BS.ACCOUNT_CODE
WHERE
    A.ACCOUNT_ACTIVE = 1
    AND A.ACCOUNT_LEVEL = 3
' 
GO
/****** Object:  View [dbo].[V_ACC3_REPORT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC3_REPORT]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ACC3_REPORT]
AS
WITH BOX_SUMS AS (
    SELECT
        ACCOUNT_CODE,
        ISNULL(SUM(DEBIT) - SUM(CREDIT), 0) AS BALANCE,
        ISNULL(SUM(DEBIT_IQ) - SUM(CREDIT_IQ), 0) AS BALANCE_IQ,
        ISNULL(SUM(DEBIT_CUR) - SUM(CREDIT_CUR), 0) AS BALANCE_CUR
    FROM dbo.T_BOX
    WHERE ACTIVE = 1
      AND BILL_DATE <= (SELECT D_DATE FROM dbo.T_DATE_REPORT_DEBIT WHERE ID = 1)
    GROUP BY ACCOUNT_CODE
)
SELECT
    A.ACCOUNT_CODE,
    A.ACCOUNT_NAME,
    ISNULL(BS.BALANCE, 0) AS BALANCE,
    ISNULL(BS.BALANCE_IQ, 0) AS BALANCE_IQ,
    ISNULL(BS.BALANCE_CUR, 0) AS BALANCE_CUR,
    A.ACCOUNT_PARENT,
    A.ACCOUNT_LEVEL,
    A.SECURETY_CODE,
    CL.CLIENT_TYPE,
    CL.CLIENT_PHONE,
    CL.CLIENT_PHONE_SMS,
    CL.CLIENT_FULL_PHONE,
    CL.CLIENT_REGION,
    CL.CLIENT_ADDRESS,
    CL.CLIENT_BARCODE,
    CL.CLIENT_BUSINESS,
    CL.CLIENT_NOTE,
    CL.MAX_DEBIT,
    A.TYPE_ACCOUNT_CODE,
    CL.MANDOOB_CODE,
    M.MANDOOB_NAME,
    CT.C_TYPE_NAME
FROM dbo.T_ACCOUNTS AS A
    LEFT JOIN BOX_SUMS AS BS ON A.ACCOUNT_CODE = BS.ACCOUNT_CODE
    LEFT JOIN dbo.T_CLIENT AS CL ON A.ACCOUNT_CODE = CL.ACCOUNT_CODE
    LEFT JOIN dbo.T_MANDOOB AS M ON CL.MANDOOB_CODE = M.MANDOOB_CODE
    LEFT JOIN dbo.T_CLIENT_TYPE AS CT ON CL.CLIENT_TYPE = CT.C_TYPE_CODE
WHERE
    A.ACCOUNT_ACTIVE = 1
    AND A.ACCOUNT_LEVEL = 3
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_ACC3_REPORT_OLD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC3_REPORT_OLD]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ACC3_REPORT_OLD]
AS
WITH BOX_SUMS AS (
    SELECT
        ACCOUNT_CODE,
        ISNULL(SUM(DEBIT) - SUM(CREDIT), 0) AS BALANCE,
        ISNULL(SUM(DEBIT_IQ) - SUM(CREDIT_IQ), 0) AS BALANCE_IQ,
        ISNULL(SUM(DEBIT_CUR) - SUM(CREDIT_CUR), 0) AS BALANCE_CUR
    FROM dbo.T_BOX
    WHERE ACTIVE = 1
      AND BILL_DATE <= (SELECT D_DATE FROM dbo.T_DATE_REPORT_DEBIT WHERE ID = 1)
    GROUP BY ACCOUNT_CODE
)
SELECT
    A.ACCOUNT_CODE,
    A.ACCOUNT_NAME,
    ISNULL(BS.BALANCE, 0) AS BALANCE,
    ISNULL(BS.BALANCE_IQ, 0) AS BALANCE_IQ,
    ISNULL(BS.BALANCE_CUR, 0) AS BALANCE_CUR,
    A.ACCOUNT_PARENT,
    A.ACCOUNT_LEVEL,
    A.SECURETY_CODE,
    CL.CLIENT_TYPE,
    CL.CLIENT_PHONE,
    CL.CLIENT_PHONE_SMS,
    CL.CLIENT_FULL_PHONE,
    CL.CLIENT_REGION,
    CL.CLIENT_ADDRESS,
    CL.CLIENT_BARCODE,
    CL.CLIENT_BUSINESS,
    CL.CLIENT_NOTE,
    CL.MAX_DEBIT,
    A.TYPE_ACCOUNT_CODE,
    CL.MANDOOB_CODE,
    M.MANDOOB_NAME,
    CT.C_TYPE_NAME
FROM dbo.T_ACCOUNTS AS A
    LEFT JOIN BOX_SUMS AS BS ON A.ACCOUNT_CODE = BS.ACCOUNT_CODE
    LEFT JOIN dbo.T_CLIENT AS CL ON A.ACCOUNT_CODE = CL.ACCOUNT_CODE
    LEFT JOIN dbo.T_MANDOOB AS M ON CL.MANDOOB_CODE = M.MANDOOB_CODE
    LEFT JOIN dbo.T_CLIENT_TYPE AS CT ON CL.CLIENT_TYPE = CT.C_TYPE_CODE
WHERE
    A.ACCOUNT_ACTIVE = 1
    AND A.ACCOUNT_LEVEL = 3
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_ACC4]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACC4]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ACC4]
AS
WITH BOX_SUMS AS (
    SELECT
        ACCOUNT_CODE,
        ISNULL(SUM(DEBIT), 0) AS DEBIT,
        ISNULL(SUM(CREDIT), 0) AS CREDIT,
        (ISNULL(SUM(DEBIT), 0) - ISNULL(SUM(CREDIT), 0)) * -1 AS BALANCE,
        (ISNULL(SUM(DEBIT_IQ), 0) - ISNULL(SUM(CREDIT_IQ), 0)) * -1 AS BALANCE_IQ,
        (ISNULL(SUM(DEBIT_CUR), 0) - ISNULL(SUM(CREDIT_CUR), 0)) * -1 AS BALANCE_CUR
    FROM dbo.T_BOX
    WHERE ACTIVE = 1
    GROUP BY ACCOUNT_CODE
)
SELECT
    CAST(A.ACCOUNT_CODE AS VARCHAR(MAX)) AS ACCOUNT_CODE,
    A.ACCOUNT_NAME,
    ISNULL(BS.DEBIT, 0) AS DEBIT,
    ISNULL(BS.CREDIT, 0) AS CREDIT,
    ISNULL(BS.BALANCE, 0) AS BALANCE,
    ISNULL(BS.BALANCE_IQ, 0) AS BALANCE_IQ,
    ISNULL(BS.BALANCE_CUR, 0) AS BALANCE_CUR,
    A.ACCOUNT_PARENT,
    A.ACCOUNT_LEVEL,
    A.SECURETY_CODE
FROM dbo.T_ACCOUNTS AS A
    LEFT JOIN BOX_SUMS AS BS ON A.ACCOUNT_CODE = BS.ACCOUNT_CODE
WHERE
    A.ACCOUNT_ACTIVE = 1
    AND A.ACCOUNT_LEVEL = 3
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_ACCOUNT3]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACCOUNT3]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ACCOUNT3]
AS
WITH BOX_SUMS AS (
    SELECT
        ACCOUNT_CODE,
        ISNULL(SUM(DEBIT) - SUM(CREDIT), 0) AS BALANCE,
        ISNULL(SUM(DEBIT_IQ) - SUM(CREDIT_IQ), 0) AS BALANCE_IQ,
        ISNULL(SUM(DEBIT_CUR) - SUM(CREDIT_CUR), 0) AS BALANCE_CUR,
        MAX(BRANCH_CODE) AS BRANCH_CODE
    FROM dbo.T_BOX
    WHERE ACTIVE = 1
    GROUP BY ACCOUNT_CODE
)
SELECT
    CAST(A.ACCOUNT_CODE AS VARCHAR(MAX)) AS ACCOUNT_CODE,
    A.ACCOUNT_NAME,
    A.ACCOUNT_FULL_NAME,
    A.ACCOUNT_PARENT,
    A.ACCOUNT_LEVEL,
    ISNULL(BS.BALANCE, 0) AS BALANCE,
    ISNULL(BS.BALANCE_IQ, 0) AS BALANCE_IQ,
    ISNULL(BS.BALANCE_CUR, 0) AS BALANCE_CUR,
    ISNULL(BS.BRANCH_CODE, A.BRANCH_CODE) AS BRANCH_CODE,
    BR.BRANCH_NAME,
    BR.BRANCH_SIGN,
    A.FINAL_CODE,
    A.TYPE_ACCOUNT_CODE,
    AT.TYPE_ACCOUNT_NAME,
    CL.CLIENT_PHONE AS CLIENT_PHONE_SMS,
    CL.CLIENT_PHONE_SMS AS CLIENT_PHONE,
    CL.CLIENT_FULL_PHONE,
    CL.CLIENT_REGION,
    CL.MANDOOB_CODE,
    M.MANDOOB_NAME,
    CL.CLIENT_TYPE,
    CT.C_TYPE_NAME,
    A.SECURETY_CODE,
    CL.CLIENT_BUSINESS
FROM dbo.T_ACCOUNTS AS A
    LEFT JOIN BOX_SUMS AS BS ON A.ACCOUNT_CODE = BS.ACCOUNT_CODE
    LEFT JOIN dbo.T_CLIENT AS CL ON A.ACCOUNT_CODE = CL.ACCOUNT_CODE
    LEFT JOIN dbo.T_BRANCH AS BR ON ISNULL(BS.BRANCH_CODE, A.BRANCH_CODE) = BR.BRANCH_CODE
    LEFT JOIN dbo.T_ACCOUNT_TYPE AS AT ON A.TYPE_ACCOUNT_CODE = AT.TYPE_ACCOUNT_CODE
    LEFT JOIN dbo.T_MANDOOB AS M ON CL.MANDOOB_CODE = M.MANDOOB_CODE
    LEFT JOIN dbo.T_CLIENT_TYPE AS CT ON CL.CLIENT_TYPE = CT.C_TYPE_CODE
WHERE
    A.ACCOUNT_ACTIVE = 1
    AND A.ACCOUNT_LEVEL = 3
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_ACCOUNT3_DATE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACCOUNT3_DATE]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ACCOUNT3_DATE]
AS
WITH BOX_SUMS AS (
    SELECT
        ACCOUNT_CODE,
        ISNULL(SUM(DEBIT) - SUM(CREDIT), 0) AS BALANCE,
        ISNULL(SUM(DEBIT_IQ) - SUM(CREDIT_IQ), 0) AS BALANCE_IQ,
        ISNULL(SUM(DEBIT_CUR) - SUM(CREDIT_CUR), 0) AS BALANCE_CUR,
        MAX(BRANCH_CODE) AS BRANCH_CODE
    FROM dbo.T_BOX
    WHERE ACTIVE = 1
      AND BILL_DATE <= (SELECT D_DATE FROM dbo.T_DATE_ACCOUNT WHERE T_ID = 1)
    GROUP BY ACCOUNT_CODE
)
SELECT
    CAST(A.ACCOUNT_CODE AS VARCHAR(MAX)) AS ACCOUNT_CODE,
    A.ACCOUNT_NAME,
    A.ACCOUNT_FULL_NAME,
    A.ACCOUNT_PARENT,
    A.ACCOUNT_LEVEL,
    ISNULL(BS.BALANCE, 0) AS BALANCE,
    ISNULL(BS.BALANCE_IQ, 0) AS BALANCE_IQ,
    ISNULL(BS.BALANCE_CUR, 0) AS BALANCE_CUR,
    ISNULL(BS.BRANCH_CODE, A.BRANCH_CODE) AS BRANCH_CODE,
    BR.BRANCH_NAME,
    BR.BRANCH_SIGN,
    A.FINAL_CODE,
    A.TYPE_ACCOUNT_CODE,
    AT.TYPE_ACCOUNT_NAME,
    CL.CLIENT_PHONE,
    CL.CLIENT_PHONE_SMS,
    CL.CLIENT_FULL_PHONE,
    CL.CLIENT_REGION,
    CL.MANDOOB_CODE,
    M.MANDOOB_NAME,
    CL.CLIENT_TYPE,
    CT.C_TYPE_NAME,
    A.SECURETY_CODE,
    CL.CLIENT_BUSINESS
FROM dbo.T_ACCOUNTS AS A
    LEFT JOIN BOX_SUMS AS BS ON A.ACCOUNT_CODE = BS.ACCOUNT_CODE
    LEFT JOIN dbo.T_CLIENT AS CL ON A.ACCOUNT_CODE = CL.ACCOUNT_CODE
    LEFT JOIN dbo.T_BRANCH AS BR ON ISNULL(BS.BRANCH_CODE, A.BRANCH_CODE) = BR.BRANCH_CODE
    LEFT JOIN dbo.T_ACCOUNT_TYPE AS AT ON A.TYPE_ACCOUNT_CODE = AT.TYPE_ACCOUNT_CODE
    LEFT JOIN dbo.T_MANDOOB AS M ON CL.MANDOOB_CODE = M.MANDOOB_CODE
    LEFT JOIN dbo.T_CLIENT_TYPE AS CT ON CL.CLIENT_TYPE = CT.C_TYPE_CODE
WHERE
    A.ACCOUNT_ACTIVE = 1
    AND A.ACCOUNT_LEVEL = 3
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_ACCOUNT3_OLD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACCOUNT3_OLD]'))
EXEC dbo.sp_executesql @statement = N'









CREATE VIEW [dbo].[V_ACCOUNT3_OLD]
AS
SELECT       TOP(1000000000)  CAST(dbo.T_ACCOUNTS.ACCOUNT_CODE AS varchar(MAX)) AS ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME, dbo.T_ACCOUNTS.ACCOUNT_FULL_NAME, dbo.T_ACCOUNTS.ACCOUNT_PARENT, 
                         dbo.T_ACCOUNTS.ACCOUNT_LEVEL,
                             (SELECT       ISNULL(SUM(DEBIT) - SUM(CREDIT), 0) AS Expr1
                               FROM             dbo.T_BOX
                               WHERE         (ACTIVE = 1) AND (ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE)) AS BALANCE,
                             (SELECT       ISNULL(SUM(DEBIT_IQ) - SUM(CREDIT_IQ), 0) AS Expr1
                               FROM             dbo.T_BOX AS T_BOX_2
                               WHERE         (ACTIVE = 1) AND (ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE)) AS BALANCE_IQ,
                             (SELECT       ISNULL(SUM(DEBIT_CUR) - SUM(CREDIT_CUR), 0) AS Expr1
                               FROM             dbo.T_BOX AS T_BOX_3
                               WHERE         (ACTIVE = 1) AND (ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE)) AS BALANCE_CUR, ISNULL(T_BOX_1.BRANCH_CODE, dbo.T_ACCOUNTS.BRANCH_CODE) AS BRANCH_CODE, 
                         dbo.T_BRANCH.BRANCH_NAME, dbo.T_BRANCH.BRANCH_SIGN, dbo.T_ACCOUNTS.FINAL_CODE, dbo.T_ACCOUNTS.TYPE_ACCOUNT_CODE, dbo.T_ACCOUNT_TYPE.TYPE_ACCOUNT_NAME, dbo.T_CLIENT.CLIENT_PHONE, 
                         dbo.T_CLIENT.CLIENT_PHONE_SMS, dbo.T_CLIENT.CLIENT_FULL_PHONE, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.MANDOOB_CODE, dbo.T_MANDOOB.MANDOOB_NAME, dbo.T_CLIENT.CLIENT_TYPE, 
                         dbo.T_CLIENT_TYPE.C_TYPE_NAME, dbo.T_ACCOUNTS.SECURETY_CODE, dbo.T_CLIENT.CLIENT_BUSINESS
FROM            dbo.T_ACCOUNTS LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.T_ACCOUNTS.ACCOUNT_CODE = dbo.T_CLIENT.ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.T_BOX AS T_BOX_1 ON dbo.T_ACCOUNTS.ACCOUNT_CODE = T_BOX_1.ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.T_BRANCH ON T_BOX_1.BRANCH_CODE = dbo.T_BRANCH.BRANCH_CODE AND dbo.T_ACCOUNTS.BRANCH_CODE = dbo.T_BRANCH.BRANCH_CODE LEFT OUTER JOIN
                         dbo.T_ACCOUNT_TYPE ON dbo.T_ACCOUNTS.TYPE_ACCOUNT_CODE = dbo.T_ACCOUNT_TYPE.TYPE_ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.T_MANDOOB ON dbo.T_CLIENT.MANDOOB_CODE = dbo.T_MANDOOB.MANDOOB_CODE LEFT OUTER JOIN
                         dbo.T_CLIENT_TYPE ON dbo.T_CLIENT.CLIENT_TYPE = dbo.T_CLIENT_TYPE.C_TYPE_CODE
WHERE        (dbo.T_ACCOUNTS.ACCOUNT_ACTIVE = 1) AND (dbo.T_ACCOUNTS.ACCOUNT_LEVEL = 3)
GROUP BY dbo.T_ACCOUNTS.ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME, dbo.T_ACCOUNTS.ACCOUNT_LEVEL, dbo.T_ACCOUNTS.ACCOUNT_PARENT, dbo.T_ACCOUNTS.ACCOUNT_FULL_NAME, 
                         dbo.T_ACCOUNTS.BRANCH_CODE, T_BOX_1.BRANCH_CODE, dbo.T_BRANCH.BRANCH_NAME, dbo.T_BRANCH.BRANCH_SIGN, dbo.T_ACCOUNTS.FINAL_CODE, dbo.T_ACCOUNTS.TYPE_ACCOUNT_CODE, 
                         dbo.T_ACCOUNT_TYPE.TYPE_ACCOUNT_NAME, dbo.T_CLIENT.CLIENT_PHONE, dbo.T_CLIENT.CLIENT_PHONE_SMS, dbo.T_CLIENT.CLIENT_FULL_PHONE, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.MANDOOB_CODE, 
                         dbo.T_MANDOOB.MANDOOB_NAME, dbo.T_CLIENT.CLIENT_TYPE, dbo.T_CLIENT_TYPE.C_TYPE_NAME, dbo.T_ACCOUNTS.SECURETY_CODE, dbo.T_CLIENT.CLIENT_BUSINESS
ORDER BY CAST(dbo.T_ACCOUNTS.ACCOUNT_CODE AS INT)













' 
GO
/****** Object:  View [dbo].[V_ACCOUNTS_ADD_AMO_17]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACCOUNTS_ADD_AMO_17]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_ACCOUNTS_ADD_AMO_17]
AS
SELECT   TOP (1000000000) dbo.T_BOX.T_ID_BOX, dbo.T_BOX.BILL_DATE, dbo.T_BOX.B_CODE, dbo.T_BOX.BRANCH_CODE, dbo.T_BOX.ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME, 
                         dbo.T_ACCOUNTS.ACCOUNT_PARENT, dbo.T_ACCOUNTS.TYPE_ACCOUNT_CODE, dbo.T_ACCOUNT_TYPE.TYPE_ACCOUNT_NAME, dbo.T_ACCOUNTS.ACCOUNT_ACTIVE, 
                         dbo.T_BOX.B_USA, dbo.T_BOX.B_IQ, dbo.T_BOX.B_CUR, dbo.T_CLIENT.CLIENT_TYPE, dbo.T_CLIENT_TYPE.C_TYPE_NAME, dbo.T_BOX.BILL_BRANCH, dbo.T_BOX.BILL_NUMBER, 
                         dbo.T_BOX.DESCRIPTION
FROM         dbo.T_ACCOUNT_TYPE LEFT OUTER JOIN
                         dbo.T_ACCOUNTS ON dbo.T_ACCOUNT_TYPE.TYPE_ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_PARENT RIGHT OUTER JOIN
                         dbo.T_BOX ON dbo.T_ACCOUNTS.ACCOUNT_CODE = dbo.T_BOX.ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.T_CLIENT LEFT OUTER JOIN
                         dbo.T_CLIENT_TYPE ON dbo.T_CLIENT.CLIENT_TYPE = dbo.T_CLIENT_TYPE.C_TYPE_CODE ON dbo.T_ACCOUNTS.ACCOUNT_CODE = dbo.T_CLIENT.ACCOUNT_CODE
WHERE     (dbo.T_BOX.B_CODE = 17) AND (dbo.T_ACCOUNTS.ACCOUNT_ACTIVE = 1)
ORDER BY dbo.T_BOX.T_ID_BOX

' 
GO
/****** Object:  View [dbo].[V_ACCOUNTS_ADD_AMO_18]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACCOUNTS_ADD_AMO_18]'))
EXEC dbo.sp_executesql @statement = N'

CREATE VIEW [dbo].[V_ACCOUNTS_ADD_AMO_18]
AS
SELECT   TOP (1000000000) dbo.T_BOX.T_ID_BOX, dbo.T_BOX.BILL_DATE, dbo.T_BOX.B_CODE, dbo.T_BOX.BRANCH_CODE, dbo.T_BOX.ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME, 
                         dbo.T_ACCOUNTS.ACCOUNT_PARENT, dbo.T_ACCOUNTS.TYPE_ACCOUNT_CODE, dbo.T_ACCOUNT_TYPE.TYPE_ACCOUNT_NAME, dbo.T_ACCOUNTS.ACCOUNT_ACTIVE, 
                         dbo.T_BOX.B_USA, dbo.T_BOX.B_IQ, dbo.T_BOX.B_CUR, dbo.T_CLIENT.CLIENT_TYPE, dbo.T_CLIENT_TYPE.C_TYPE_NAME, dbo.T_BOX.BILL_BRANCH, dbo.T_BOX.BILL_NUMBER, 
                         dbo.T_BOX.DESCRIPTION
FROM         dbo.T_ACCOUNT_TYPE LEFT OUTER JOIN
                         dbo.T_ACCOUNTS ON dbo.T_ACCOUNT_TYPE.TYPE_ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_PARENT RIGHT OUTER JOIN
                         dbo.T_BOX ON dbo.T_ACCOUNTS.ACCOUNT_CODE = dbo.T_BOX.ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.T_CLIENT LEFT OUTER JOIN
                         dbo.T_CLIENT_TYPE ON dbo.T_CLIENT.CLIENT_TYPE = dbo.T_CLIENT_TYPE.C_TYPE_CODE ON dbo.T_ACCOUNTS.ACCOUNT_CODE = dbo.T_CLIENT.ACCOUNT_CODE
WHERE     (dbo.T_BOX.B_CODE = 18) AND (dbo.T_ACCOUNTS.ACCOUNT_ACTIVE = 1)
ORDER BY dbo.T_BOX.T_ID_BOX


' 
GO
/****** Object:  View [dbo].[V_ACCOUNTS_START_BALANCE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ACCOUNTS_START_BALANCE]'))
EXEC dbo.sp_executesql @statement = N'

CREATE VIEW [dbo].[V_ACCOUNTS_START_BALANCE]
AS
SELECT
    B.T_ID_BOX,
    B.BILL_DATE,
    B.B_CODE,
    B.BRANCH_CODE,
    B.ACCOUNT_CODE,
    A.ACCOUNT_NAME,
    A.ACCOUNT_PARENT,

    -- النوع يتم تحديده حسب الشرط
    COALESCE(TAT_CLIENT.TYPE_ACCOUNT_CODE, TAT_RANGE.TYPE_ACCOUNT_CODE) AS TYPE_ACCOUNT_CODE,
    COALESCE(TAT_CLIENT.TYPE_ACCOUNT_NAME, TAT_RANGE.TYPE_ACCOUNT_NAME) AS TYPE_ACCOUNT_NAME,

    A.ACCOUNT_ACTIVE,
    B.B_USA,
    B.B_IQ,
    B.B_CUR,
    CL.CLIENT_TYPE,
    CT.C_TYPE_NAME
FROM dbo.T_BOX AS B
LEFT JOIN dbo.T_ACCOUNTS AS A ON A.ACCOUNT_CODE = B.ACCOUNT_CODE
LEFT JOIN dbo.T_CLIENT AS CL ON A.ACCOUNT_CODE = CL.ACCOUNT_CODE
LEFT JOIN dbo.T_CLIENT_TYPE AS CT ON CL.CLIENT_TYPE = CT.C_TYPE_CODE

-- إذا ACCOUNT_PARENT = 21 → نجلب النوع الثابت = 21 من T_ACCOUNT_TYPE
OUTER APPLY (
    SELECT TOP 1 *
    FROM dbo.T_ACCOUNT_TYPE AS T
    WHERE A.ACCOUNT_PARENT = 21 AND T.TYPE_ACCOUNT_CODE = 21
) AS TAT_CLIENT

-- أما إذا لم يكن ACCOUNT_PARENT = 21 → نستخدم BETWEEN العادي
OUTER APPLY (
    SELECT TOP 1 *
    FROM dbo.T_ACCOUNT_TYPE AS T
    WHERE A.ACCOUNT_PARENT <> 21 AND A.ACCOUNT_CODE BETWEEN T.FROM_N AND T.TO_N
) AS TAT_RANGE

WHERE
    B.B_CODE = 13
    AND A.ACCOUNT_ACTIVE = 1


' 
GO
/****** Object:  View [dbo].[V_AKSAT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_AKSAT]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_AKSAT]
 
AS
SELECT   
    T_AKSAT.T_ID, 
    T_AKSAT.BILL_BRANCH, 
    T_AKSAT.BILL_NUMBER, 
    T_AKSAT.BILL_DATE, 
    T_AKSAT.ACCOUNT_CODE, 
    T_CLIENT.CLIENT_NAME AS ACCOUNT_NAME, 
    T_CLIENT.CLIENT_FULL_PHONE, 
    T_CLIENT.CLIENT_REGION, 
    T_CLIENT.CLIENT_ADDRESS, 
    T_AKSAT.KAFEL_CODE, 
    T_KAFEL.KAFEL_NAME, 
    T_AKSAT.CURRANCY_CODE, 
    T_CURRANNCY.CURRANCY_NAME, 
    T_AKSAT.TOTAL_INVOICE, 
    T_AKSAT.DATE_DUE, 
    T_AKSAT.AMO_AKSAT, 
    T_AKSAT.AMO_ADD, 
    T_AKSAT.AMO_DISCOUNT, 
    T_AKSAT.AMO_CASH, 
    T_AKSAT.AMO_REMAIN, 
    T_AKSAT.DATE_CASH, 
    T_AKSAT.USER_CODE, 
    T_USERS.USER_NAME, 
    T_AKSAT.BILL_CASH, 
    T_AKSAT.BILL_SMAH, 
    T_AKSAT.NOTE_AKSAT, 
    T_AKSAT.CASH_CODE, 
    T_CASH_STATE.CASH_NAME, 
    T_AKSAT.C_DATE, 
    T_AKSAT.B_CODE, 
    T_BILL_TYPE.B_NAME, 
    ISNULL(T_SALES.NET_SALES, 0) AS NET_SALES
FROM dbo.T_AKSAT
INNER JOIN dbo.T_CLIENT ON T_AKSAT.ACCOUNT_CODE = T_CLIENT.ACCOUNT_CODE 
LEFT JOIN dbo.T_CASH_STATE ON T_AKSAT.CASH_CODE = T_CASH_STATE.CASH_CODE 
LEFT JOIN dbo.T_USERS ON T_AKSAT.USER_CODE = T_USERS.USER_CODE 
LEFT JOIN dbo.T_CURRANNCY ON T_AKSAT.CURRANCY_CODE = T_CURRANNCY.CURRANCY_CODE 
LEFT JOIN dbo.T_KAFEL ON T_AKSAT.KAFEL_CODE = T_KAFEL.KAFEL_CODE 
LEFT JOIN dbo.T_BILL_TYPE ON T_AKSAT.B_CODE = T_BILL_TYPE.B_CODE 
LEFT JOIN dbo.T_SALES ON T_AKSAT.BILL_NUMBER = T_SALES.BILL_NUMBER;

' 
GO
/****** Object:  View [dbo].[V_AKSAT_ITEM]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_AKSAT_ITEM]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_AKSAT_ITEM]
AS
SELECT     dbo.T_AKSAT_ITEMS.T_ID, dbo.T_AKSAT_ITEMS.BILL_NUMBER, dbo.T_AKSAT_ITEMS.BILL_DATE, dbo.T_AKSAT_ITEMS.B_CODE, dbo.T_AKSAT_ITEMS.ACCOUNT_CODE, dbo.T_AKSAT_ITEMS.KAFEL_CODE, dbo.T_KAFEL.KAFEL_NAME, dbo.T_KAFEL.KAFEL_PHONE, 
                  dbo.T_KAFEL.KAFEL_ADDRESS, dbo.T_AKSAT_ITEMS.CURRANCY_CODE, dbo.T_CURRANNCY.CURRANCY_NAME, dbo.T_AKSAT_ITEMS.ITEM_CODE, dbo.T_ITEMS.ITEM_NAME, dbo.T_AKSAT_ITEMS.QTY, dbo.T_AKSAT_ITEMS.PRICE, dbo.T_AKSAT_ITEMS.TOTAL, 
                  dbo.T_AKSAT_ITEMS.NOTE, dbo.T_AKSAT_ITEMS.QTY_AKSAT, dbo.T_AKSAT_ITEMS.TYPE_AKSAT, dbo.T_AKSAT_ITEMS.EVERY, dbo.T_AKSAT_ITEMS.AMO_AKSAT, dbo.T_AKSAT_ITEMS.DATE_DUE, dbo.T_AKSAT_ITEMS.QTY_CASH_ALL, dbo.T_AKSAT_ITEMS.TOTAL_CASH, 
                  dbo.T_AKSAT_ITEMS.TOTAL_REMAIN, dbo.T_AKSAT_ITEMS.START_DATE, dbo.T_AKSAT_ITEMS.LAST_CASH_AMO, dbo.T_AKSAT_ITEMS.LAST_CASH_DATE, dbo.T_AKSAT_ITEMS.C_DATE, dbo.T_AKSAT_ITEMS.IS_FINISH, dbo.T_CLIENT.CLIENT_NAME, dbo.T_CLIENT.CLIENT_TYPE, 
                  dbo.T_CLIENT.MANDOOB_CODE, dbo.T_MANDOOB.MANDOOB_NAME, dbo.T_CLIENT.CLIENT_PHONE, dbo.T_CLIENT.CLIENT_PHONE_SMS, dbo.T_CLIENT.CLIENT_FULL_PHONE, dbo.T_CLIENT.CLIENT_EMAILE, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_ADDRESS, 
                  dbo.T_CLIENT.CLIENT_BARCODE, dbo.T_CLIENT.CLIENT_CARD, dbo.T_CLIENT.CLIENT_NOTE, dbo.T_CLIENT.CLIENT_PIN_CODE, dbo.T_CLIENT.CLIENT_BUSINESS, dbo.T_CLIENT.FAMILY_NAME, dbo.T_CLIENT.OFFICE_NAME, dbo.T_CLIENT.QISM_NAME, 
                  dbo.T_CLIENT.MONTH_WARNING, dbo.T_CLIENT.SALARY_NET, dbo.T_CLIENT.EMOLA_CARD, dbo.T_AKSAT_ITEMS.AMO_CASH_NOW, dbo.T_AKSAT_ITEMS.F_NET_SALARY, dbo.T_AKSAT_ITEMS.F_EMOLA_CARD, dbo.T_AKSAT_ITEMS.F_NET_CASH, 
                  dbo.T_AKSAT_ITEMS.F_NET_RETURN
FROM        dbo.T_AKSAT_ITEMS LEFT OUTER JOIN
                  dbo.T_CLIENT ON dbo.T_AKSAT_ITEMS.ACCOUNT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                  dbo.T_ITEMS ON dbo.T_AKSAT_ITEMS.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                  dbo.T_CURRANNCY ON dbo.T_AKSAT_ITEMS.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE LEFT OUTER JOIN
                  dbo.T_KAFEL ON dbo.T_AKSAT_ITEMS.KAFEL_CODE = dbo.T_KAFEL.KAFEL_CODE LEFT OUTER JOIN
                  dbo.T_MANDOOB ON dbo.T_CLIENT.MANDOOB_CODE = dbo.T_MANDOOB.MANDOOB_CODE

' 
GO
/****** Object:  View [dbo].[V_AKSAT_ITEM_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_AKSAT_ITEM_DETAILS]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_AKSAT_ITEM_DETAILS]
AS
SELECT     dbo.T_AKSAT_ITEMS.T_ID, dbo.T_AKSAT_ITEMS.BILL_NUMBER, dbo.T_AKSAT_ITEMS.BILL_DATE, dbo.T_AKSAT_ITEMS.B_CODE, dbo.T_AKSAT_ITEMS.ACCOUNT_CODE, dbo.T_AKSAT_ITEMS.KAFEL_CODE, dbo.T_KAFEL.KAFEL_NAME, dbo.T_KAFEL.KAFEL_PHONE, 
                  dbo.T_KAFEL.KAFEL_ADDRESS, dbo.T_AKSAT_ITEMS.CURRANCY_CODE, dbo.T_CURRANNCY.CURRANCY_NAME, dbo.T_AKSAT_ITEMS.ITEM_CODE, dbo.T_ITEMS.ITEM_NAME, dbo.T_AKSAT_ITEMS.QTY, dbo.T_AKSAT_ITEMS.PRICE, dbo.T_AKSAT_ITEMS.TOTAL, 
                  dbo.T_AKSAT_ITEMS.NOTE, dbo.T_AKSAT_ITEMS.QTY_AKSAT, dbo.T_AKSAT_ITEMS.TYPE_AKSAT, dbo.T_AKSAT_ITEMS.EVERY, dbo.T_AKSAT_ITEMS.AMO_AKSAT, dbo.T_AKSAT_ITEMS.DATE_DUE, dbo.T_AKSAT_ITEMS.QTY_CASH_ALL, dbo.T_AKSAT_ITEMS.TOTAL_CASH, 
                  dbo.T_AKSAT_ITEMS.TOTAL_REMAIN, dbo.T_AKSAT_ITEMS.START_DATE, dbo.T_AKSAT_ITEMS.LAST_CASH_AMO, dbo.T_AKSAT_ITEMS.LAST_CASH_DATE, dbo.T_AKSAT_ITEMS.C_DATE, dbo.T_AKSAT_ITEMS.IS_FINISH, dbo.T_AKSAT_ITEM_DETAILS.TOTAL_INVOICE, 
                  dbo.T_AKSAT_ITEM_DETAILS.DATE_DUE AS DATE_DUE_ITEM, dbo.T_AKSAT_ITEM_DETAILS.AMO_AKSAT AS AMO_AKSAT_ITEM, dbo.T_AKSAT_ITEM_DETAILS.AMO_ADD, dbo.T_AKSAT_ITEM_DETAILS.AMO_DISCOUNT, dbo.T_AKSAT_ITEM_DETAILS.AMO_CASH, 
                  dbo.T_AKSAT_ITEM_DETAILS.AMO_REMAIN, dbo.T_AKSAT_ITEM_DETAILS.DATE_CASH, dbo.T_AKSAT_ITEM_DETAILS.USER_CODE, dbo.T_AKSAT_ITEM_DETAILS.BILL_CASH, dbo.T_AKSAT_ITEM_DETAILS.BILL_SMAH, dbo.T_AKSAT_ITEM_DETAILS.NOTE_AKSAT, 
                  dbo.T_AKSAT_ITEM_DETAILS.CASH_CODE, dbo.T_CLIENT.CLIENT_NAME, dbo.T_CLIENT.CLIENT_TYPE, dbo.T_CLIENT.MANDOOB_CODE, dbo.T_MANDOOB.MANDOOB_NAME, dbo.T_CLIENT.CLIENT_PHONE, dbo.T_CLIENT.CLIENT_PHONE_SMS, dbo.T_CLIENT.CLIENT_FULL_PHONE, 
                  dbo.T_CLIENT.CLIENT_EMAILE, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_ADDRESS, dbo.T_CLIENT.CLIENT_BARCODE, dbo.T_CLIENT.CLIENT_CARD, dbo.T_CLIENT.CLIENT_NOTE, dbo.T_CLIENT.CLIENT_PIN_CODE, dbo.T_CLIENT.CLIENT_BUSINESS, 
                  dbo.T_CLIENT.FAMILY_NAME, dbo.T_CLIENT.OFFICE_NAME, dbo.T_CLIENT.QISM_NAME, dbo.T_CLIENT.MONTH_WARNING, dbo.T_CLIENT.SALARY_NET, dbo.T_CLIENT.EMOLA_CARD, dbo.T_AKSAT_ITEM_DETAILS.T_ID AS T_ID_DETAILS, dbo.T_AKSAT_ITEMS.AMO_CASH_NOW, 
                  dbo.T_AKSAT_ITEM_DETAILS.BILL_AKSAT, dbo.T_AKSAT_ITEMS.F_NET_SALARY, dbo.T_AKSAT_ITEMS.F_EMOLA_CARD, dbo.T_AKSAT_ITEMS.F_NET_CASH, dbo.T_AKSAT_ITEMS.F_NET_RETURN, dbo.T_USERS.USER_NAME
FROM        dbo.T_AKSAT_ITEMS LEFT OUTER JOIN
                  dbo.T_CLIENT ON dbo.T_AKSAT_ITEMS.ACCOUNT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                  dbo.T_ITEMS ON dbo.T_AKSAT_ITEMS.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                  dbo.T_CURRANNCY ON dbo.T_AKSAT_ITEMS.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE LEFT OUTER JOIN
                  dbo.T_KAFEL ON dbo.T_AKSAT_ITEMS.KAFEL_CODE = dbo.T_KAFEL.KAFEL_CODE LEFT OUTER JOIN
                  dbo.T_AKSAT_ITEM_DETAILS ON dbo.T_AKSAT_ITEMS.T_ID = dbo.T_AKSAT_ITEM_DETAILS.T_ID_ITEM LEFT OUTER JOIN
                  dbo.T_MANDOOB ON dbo.T_CLIENT.MANDOOB_CODE = dbo.T_MANDOOB.MANDOOB_CODE LEFT OUTER JOIN
                  dbo.T_USERS ON dbo.T_AKSAT_ITEM_DETAILS.USER_CODE = dbo.T_USERS.USER_CODE

' 
GO
/****** Object:  View [dbo].[V_APP_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_APP_INVOICE]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_APP_INVOICE]
AS
SELECT        dbo.T_APP_INVOICE.T_ID, dbo.T_APP_INVOICE.D_DATE, dbo.T_APP_INVOICE.D_TIME, dbo.T_APP_INVOICE.INFO, dbo.T_APP_INVOICE.DETAILS, dbo.T_APP_INVOICE.B_CODE, dbo.T_BILL_TYPE.B_NAME, 
                         dbo.T_APP_INVOICE.IS_INSERT, dbo.T_APP_INVOICE.BILL_GIUD, dbo.T_APP_INVOICE.BILL_BRANCH,(select  choose(''2'', Replace(dbo.T_APP_INVOICE.INFO, '';'', '','') ))as CLIENT_NAME
FROM            dbo.T_APP_INVOICE LEFT OUTER JOIN
                         dbo.T_BILL_TYPE ON dbo.T_APP_INVOICE.B_CODE = dbo.T_BILL_TYPE.B_CODE

' 
GO
/****** Object:  View [dbo].[V_BOOKING]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BOOKING]'))
EXEC dbo.sp_executesql @statement = N'

CREATE VIEW [dbo].[V_BOOKING]
AS
 
SELECT 
    dbo.T_BOOKING.BILL_NUMBER, 
    dbo.T_BOOKING.BILL_DATE, 
    dbo.T_BOOKING.BILL_TIME, 
    dbo.T_BOOKING.USER_CREATE, 
    dbo.T_BOOKING.CLIENT_CODE, 
    dbo.T_CLIENT.CLIENT_NAME, 
    dbo.T_BOOKING.CLIENT_PHONE, 
    dbo.T_BOOKING.CLIENT_ADDRESS, 
    dbo.T_BOOKING.DESCRIPTION, 
    dbo.T_BOOKING.TYPE_BOOKING, 
    dbo.T_BOOKING.FROM_BOOKING, 
    dbo.T_BOOKING.BOOKING_CODE, 
    dbo.T_BOOKING_QISM.BOOKING_NAME, 
    dbo.T_BOOKING.DATE_BOOKING, 
    --dbo.T_BOOKING.TIME_BOOKING,
    
    -- ✅ تحويل TIME_BOOKING إلى DATETIME بربطه مع DATE_BOOKING
    CAST(CAST(dbo.T_BOOKING.DATE_BOOKING AS DATETIME) + CAST(dbo.T_BOOKING.TIME_BOOKING AS DATETIME) AS DATETIME) AS TIME_BOOKING,
    
    dbo.T_BOOKING.TOTAL_AMO, 
    dbo.T_BOOKING.AMO_CASH, 
    dbo.T_BOOKING.AMO_REMAIN, 
    dbo.T_BOOKING.C_DATE, 
    dbo.T_BOOKING.C_UPDATE, 
    dbo.T_BOOKING.USER_UPDATE, 
    dbo.T_BOOKING.GUIDS, 
    dbo.T_BOOKING.ACTIVE

FROM dbo.T_BOOKING
LEFT OUTER JOIN dbo.T_CLIENT ON dbo.T_BOOKING.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE 
LEFT OUTER JOIN dbo.T_BOOKING_QISM ON dbo.T_BOOKING.BOOKING_CODE = dbo.T_BOOKING_QISM.BOOKING_CODE


' 
GO
/****** Object:  View [dbo].[V_BRANCH]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BRANCH]'))
EXEC dbo.sp_executesql @statement = N'







CREATE VIEW [dbo].[V_BRANCH]
AS
SELECT        BRANCH_CODE, BRANCH_NAME, BRANCH_SIGN,  HEADER, BODY, 
                         FOOTER, C_DATE, ACTIVE
FROM            dbo.T_BRANCH
WHERE        (ACTIVE = 1)

















' 
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_CORRECT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_CORRECT]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_BUY_DETAILS_CORRECT]
AS
SELECT
    BD.T_ID,
    BD.BILL_BRANCH,
    BD.BILL_NUMBER,
    BD.ITEM_CODE,
    I.ITEM_BARCODE,
    I.ITEM_NAME,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    BD.QTY,
    BD.UNIT_NAME,
    BD.UNIT_QTY,
    BD.STORE_CODE,
    ST.STORE_NAME,
    BD.EXP_DATE,
    BD.PRICE_BUY,
    BD.CURRANCY_EQUAL,
    BD.PRICE,
    BD.TOTAL,
    BD.EXPENSES,
    BD.TOTAL_EXPENSES,
    BD.COST,
    BD.TOTAL_COST,
    BD.C_DATE AS BILL_DATE,
    BD.OFFER_CODE,
    I.KIND_NAME
FROM dbo.T_BUY_DETAILS AS BD
    LEFT JOIN dbo.T_STORE_TYPE AS ST ON BD.STORE_CODE = ST.STORE_CODE
    LEFT JOIN dbo.T_ITEMS AS I ON BD.ITEM_CODE = I.ITEM_CODE
    LEFT JOIN dbo.T_ITEM_CATEGORY AS IC ON I.CATEGORY_CODE = IC.CATEGORY_CODE
WHERE
    BD.BILL_NUMBER < 0
    AND BD.OFFER_CODE <> 11
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_DETAILS_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_DETAILS_TEMP]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_BUY_DETAILS_EXPIRED_REMAIN_DETAILS_TEMP]
AS
SELECT 
    B.ITEM_CODE,
    B.BILL_NUMBER,
    MAX(BU.BILL_DATE) AS BILL_DATE,
    MAX(B.SELL1) AS SELL1,
    MAX(B.SELL2) AS SELL2,
    MAX(B.COST) AS COST,
    MAX(B.EXP_DATE) AS EXP_DATE,
    MAX(B.UNIT_QTY) AS UNIT_QTY,         -- إذا كانت الوحدة ثابتة، ممكن استبدالها بـ MIN
    MAX(B.STORE_CODE) AS STORE_CODE,
    MAX(BU.CLIENT_NAME) AS CLIENT_NAME,

    SUM(B.QTY * B.UNIT_QTY) AS QTY_BUY_MIN,

    -- الكمية المباعة المؤكدة
    ISNULL((
        SELECT SUM(S.QTY * S.UNIT_QTY)
        FROM T_SALES_DETAILS S
        WHERE S.ITEM_CODE = B.ITEM_CODE AND S.BILL_BUY = B.BILL_NUMBER AND S.ACTIVE = 1
    ), 0) AS QTY_SALES,

    -- الكمية المحجوزة مؤقتًا في الفواتير غير المكتملة
    ISNULL((
        SELECT SUM(T.QTY * T.UNIT_QTY)
        FROM T_SALES_TEMP T
        WHERE T.ITEM_CODE = B.ITEM_CODE AND T.BILL_BUY = B.BILL_NUMBER AND T.ACTIVE = 1
    ), 0) AS QTY_TEMP,

    -- الرصيد المتبقي = الشراء - المبيعات - المؤقت (بوحدة الحد الأدنى)
    SUM(B.QTY * B.UNIT_QTY)
    - ISNULL((
        SELECT SUM(S.QTY * S.UNIT_QTY)
        FROM T_SALES_DETAILS S
        WHERE S.ITEM_CODE = B.ITEM_CODE AND S.BILL_BUY = B.BILL_NUMBER AND S.ACTIVE = 1
    ), 0)
    - ISNULL((
        SELECT SUM(T.QTY * T.UNIT_QTY)
        FROM T_SALES_TEMP T
        WHERE T.ITEM_CODE = B.ITEM_CODE AND T.BILL_BUY = B.BILL_NUMBER AND T.ACTIVE = 1
    ), 0) AS REMAIN_BUY_MIN,

    -- الرصيد المتبقي بالوحدة الأصلية (وليس وحدة الحد الأدنى)
    (SUM(B.QTY * B.UNIT_QTY)
    - ISNULL((
        SELECT SUM(S.QTY * S.UNIT_QTY)
        FROM T_SALES_DETAILS S
        WHERE S.ITEM_CODE = B.ITEM_CODE AND S.BILL_BUY = B.BILL_NUMBER AND S.ACTIVE = 1
    ), 0)
    - ISNULL((
        SELECT SUM(T.QTY * T.UNIT_QTY)
        FROM T_SALES_TEMP T
        WHERE T.ITEM_CODE = B.ITEM_CODE AND T.BILL_BUY = B.BILL_NUMBER AND T.ACTIVE = 1
    ), 0)) / MAX(B.UNIT_QTY) AS REMAIN_BUY
FROM T_BUY_DETAILS B
INNER JOIN dbo.T_BUY BU ON B.BILL_NUMBER = BU.BILL_NUMBER
WHERE B.ACTIVE = 1 OR (B.BILL_NUMBER = 0) AND (B.QTY <> 0)
GROUP BY 
    B.ITEM_CODE,
    B.BILL_NUMBER

' 
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_FIRST]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_FIRST]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_BUY_DETAILS_FIRST]
AS
SELECT        TOP (100) PERCENT dbo.T_BUY_DETAILS.T_ID, dbo.T_BUY_DETAILS.BILL_BRANCH, dbo.T_BUY_DETAILS.BILL_NUMBER, dbo.T_BUY_DETAILS.ITEM_CODE, dbo.T_ITEMS.ITEM_BARCODE, dbo.T_ITEMS.ITEM_NAME, 
                         dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_BUY_DETAILS.QTY, dbo.T_BUY_DETAILS.UNIT_NAME, dbo.T_BUY_DETAILS.UNIT_QTY, dbo.T_BUY_DETAILS.STORE_CODE, 
                         dbo.T_STORE_TYPE.STORE_NAME, dbo.T_BUY_DETAILS.EXP_DATE, dbo.T_BUY_DETAILS.PRICE_BUY, dbo.T_BUY_DETAILS.CURRANCY_EQUAL, dbo.T_BUY_DETAILS.PRICE, dbo.T_BUY_DETAILS.TOTAL, 
                         dbo.T_BUY_DETAILS.EXPENSES, dbo.T_BUY_DETAILS.TOTAL_EXPENSES, dbo.T_BUY_DETAILS.COST, dbo.T_BUY_DETAILS.TOTAL_COST, dbo.T_BUY_DETAILS.SELL1, dbo.T_BUY_DETAILS.SELL2
						 , dbo.T_ITEMS.KIND_NAME
FROM            dbo.T_BUY_DETAILS LEFT OUTER JOIN
                         dbo.T_STORE_TYPE ON dbo.T_BUY_DETAILS.STORE_CODE = dbo.T_STORE_TYPE.STORE_CODE LEFT OUTER JOIN
                         dbo.T_ITEMS ON dbo.T_BUY_DETAILS.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE
WHERE        (dbo.T_BUY_DETAILS.BILL_NUMBER = 0)
ORDER BY dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_ITEMS.ITEM_NAME

' 
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_FIRST_AVG]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_FIRST_AVG]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_BUY_DETAILS_FIRST_AVG]
AS
SELECT        TOP (100) PERCENT MAX(dbo.T_BUY_DETAILS.T_ID) AS T_ID, MAX(dbo.T_BUY_DETAILS.BILL_BRANCH) AS BILL_BRANCH, MAX(dbo.T_BUY_DETAILS.BILL_NUMBER) AS BILL_NUMBER, dbo.T_BUY_DETAILS.ITEM_CODE, 
                         dbo.T_ITEMS.ITEM_BARCODE, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, SUM(dbo.T_BUY_DETAILS.QTY) AS QTY, dbo.T_BUY_DETAILS.UNIT_NAME, 
                         dbo.T_BUY_DETAILS.UNIT_QTY, dbo.T_BUY_DETAILS.PRICE_BUY, AVG(dbo.T_BUY_DETAILS.CURRANCY_EQUAL) AS CURRANCY_EQUAL, AVG(dbo.T_BUY_DETAILS.PRICE) AS PRICE, SUM(dbo.T_BUY_DETAILS.TOTAL) 
                         AS TOTAL, SUM(dbo.T_BUY_DETAILS.EXPENSES) AS EXPENSES, SUM(dbo.T_BUY_DETAILS.TOTAL_EXPENSES) AS TOTAL_EXPENSES, AVG(dbo.T_BUY_DETAILS.COST) AS COST, SUM(dbo.T_BUY_DETAILS.TOTAL_COST) 
                         AS TOTAL_COST, AVG(dbo.T_BUY_DETAILS.SELL1) AS SELL1, AVG(dbo.T_BUY_DETAILS.SELL2) AS SELL2
FROM            dbo.T_BUY_DETAILS LEFT OUTER JOIN
                         dbo.T_ITEMS ON dbo.T_BUY_DETAILS.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE
GROUP BY dbo.T_BUY_DETAILS.ITEM_CODE, dbo.T_ITEMS.ITEM_BARCODE, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_BUY_DETAILS.UNIT_NAME, 
                         dbo.T_BUY_DETAILS.UNIT_QTY, dbo.T_BUY_DETAILS.PRICE_BUY
HAVING        (MAX(dbo.T_BUY_DETAILS.BILL_NUMBER) = 0)
ORDER BY dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_ITEMS.ITEM_NAME' 
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_OUT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_OUT]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_BUY_DETAILS_OUT]
AS
SELECT        TOP (100) PERCENT dbo.T_BUY.BILL_BRANCH, dbo.T_BUY.BILL_NUMBER, CONVERT(NVARCHAR(12), dbo.T_BUY.BILL_NUMBER) AS BILL_STR, dbo.T_BUY.BILL_INVOICE, dbo.T_BUY.BILL_DATE, 
                         dbo.T_BUY.USER_CREATE, dbo.T_BUY.CURRANCY_CODE, dbo.T_CURRANNCY.CURRANCY_NAME, dbo.T_BUY.CLIENT_CODE, dbo.T_BUY.CLIENT_NAME, dbo.T_CLIENT.CLIENT_PHONE, dbo.T_CLIENT.CLIENT_PHONE_SMS, 
                         dbo.T_CLIENT.CLIENT_FULL_PHONE, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_ADDRESS, dbo.T_CLIENT.CLIENT_BUSINESS, dbo.T_BUY.DESCRIPTION, dbo.T_BUY.WAJBA_CODE, dbo.T_WAJBA.WAJBA_NAME, 
                         dbo.T_BUY.SECURETY_CODE, dbo.T_BUY_DETAILS.ITEM_CODE, dbo.T_ITEMS.ITEM_BARCODE AS ITEM_SIGN, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, 
                         dbo.T_BUY_DETAILS.QTY, dbo.T_BUY_DETAILS.UNIT_NAME, dbo.T_BUY_DETAILS.UNIT_QTY, dbo.T_BUY_DETAILS.STORE_CODE, dbo.T_STORE_TYPE.STORE_NAME, dbo.T_BUY_DETAILS.EXP_DATE, 
                         dbo.T_BUY_DETAILS.PRICE_BUY, dbo.T_BUY_DETAILS.CURRANCY_EQUAL, dbo.T_BUY_DETAILS.PRICE, dbo.T_BUY_DETAILS.TOTAL, dbo.T_BUY_DETAILS.EXPENSES, dbo.T_BUY_DETAILS.TOTAL_EXPENSES, 
                         dbo.T_BUY_DETAILS.COST, dbo.T_BUY_DETAILS.TOTAL_COST, dbo.T_BUY.IVC_CODE, dbo.T_IVC_TYPE.IVC_NAME, dbo.T_BUY_DETAILS.QTY_IN, dbo.T_BUY_DETAILS.QTY_OUT, dbo.T_BUY_DETAILS.TOTAL_OUT
FROM            dbo.T_BUY INNER JOIN
                         dbo.T_BUY_DETAILS ON dbo.T_BUY.BILL_BRANCH = dbo.T_BUY_DETAILS.BILL_BRANCH LEFT OUTER JOIN
                         dbo.T_IVC_TYPE ON dbo.T_BUY.IVC_CODE = dbo.T_IVC_TYPE.IVC_CODE LEFT OUTER JOIN
                         dbo.T_STORE_TYPE ON dbo.T_BUY_DETAILS.STORE_CODE = dbo.T_STORE_TYPE.STORE_CODE LEFT OUTER JOIN
                         dbo.T_ITEMS ON dbo.T_BUY_DETAILS.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_WAJBA ON dbo.T_BUY.WAJBA_CODE = dbo.T_WAJBA.WAJBA_CODE LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.T_BUY.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.T_BUY.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE
WHERE        (dbo.T_BUY.ACTIVE = 1) AND (dbo.T_BUY.IVC_CODE < 10) AND (dbo.T_BUY_DETAILS.QTY_OUT <> 0)
ORDER BY dbo.T_BUY.BILL_NUMBER

' 
GO
/****** Object:  View [dbo].[V_BUY_DETAILS_RETURN]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_DETAILS_RETURN]'))
EXEC dbo.sp_executesql @statement = N'




CREATE VIEW [dbo].[V_BUY_DETAILS_RETURN]
AS
SELECT        TOP (100) PERCENT dbo.T_BUY_RETURN.BILL_BRANCH, dbo.T_BUY_RETURN.BILL_NUMBER, CONVERT(NVARCHAR(12), dbo.T_BUY_RETURN.BILL_NUMBER) AS BILL_STR, dbo.T_BUY_RETURN.BILL_INVOICE, 
                         dbo.T_BUY_RETURN.BILL_DATE, dbo.T_BUY_RETURN.USER_CREATE, dbo.T_BUY_RETURN.CURRANCY_CODE, dbo.T_CURRANNCY.CURRANCY_NAME, dbo.T_BUY_RETURN.CLIENT_CODE, 
                         dbo.T_BUY_RETURN.CLIENT_NAME, dbo.T_CLIENT.CLIENT_PHONE, dbo.T_CLIENT.CLIENT_PHONE_SMS, dbo.T_CLIENT.CLIENT_FULL_PHONE, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_ADDRESS, 
                         dbo.T_CLIENT.CLIENT_BUSINESS, dbo.T_BUY_RETURN.DESCRIPTION, dbo.T_BUY_RETURN.WAJBA_CODE, dbo.T_WAJBA.WAJBA_NAME, dbo.T_BUY_RETURN.SECURETY_CODE, 
                         dbo.T_BUY_RETURN_DETAILS.ITEM_CODE, dbo.T_ITEMS.ITEM_BARCODE, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_BUY_RETURN_DETAILS.QTY, 
                         dbo.T_BUY_RETURN_DETAILS.UNIT_NAME, dbo.T_BUY_RETURN_DETAILS.UNIT_QTY, dbo.T_BUY_RETURN_DETAILS.STORE_CODE, dbo.T_STORE_TYPE.STORE_NAME, dbo.T_BUY_RETURN_DETAILS.EXP_DATE, 
                         dbo.T_BUY_RETURN_DETAILS.PRICE_BUY, dbo.T_BUY_RETURN_DETAILS.CURRANCY_EQUAL, dbo.T_BUY_RETURN_DETAILS.PRICE, dbo.T_BUY_RETURN_DETAILS.TOTAL, dbo.T_BUY_RETURN_DETAILS.EXPENSES, 
                         dbo.T_BUY_RETURN_DETAILS.TOTAL_EXPENSES, dbo.T_BUY_RETURN_DETAILS.COST, dbo.T_BUY_RETURN_DETAILS.TOTAL_COST, dbo.T_BUY_RETURN.IVC_CODE, dbo.T_IVC_TYPE.IVC_NAME
FROM            dbo.T_BUY_RETURN INNER JOIN
                         dbo.T_BUY_RETURN_DETAILS ON dbo.T_BUY_RETURN.BILL_BRANCH = dbo.T_BUY_RETURN_DETAILS.BILL_BRANCH LEFT OUTER JOIN
                         dbo.T_IVC_TYPE ON dbo.T_BUY_RETURN.IVC_CODE = dbo.T_IVC_TYPE.IVC_CODE LEFT OUTER JOIN
                         dbo.T_STORE_TYPE ON dbo.T_BUY_RETURN_DETAILS.STORE_CODE = dbo.T_STORE_TYPE.STORE_CODE LEFT OUTER JOIN
                         dbo.T_ITEMS ON dbo.T_BUY_RETURN_DETAILS.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_WAJBA ON dbo.T_BUY_RETURN.WAJBA_CODE = dbo.T_WAJBA.WAJBA_CODE LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.T_BUY_RETURN.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.T_BUY_RETURN.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE
WHERE        (dbo.T_BUY_RETURN.ACTIVE = 1) AND (dbo.T_BUY_RETURN.IVC_CODE < 10)
ORDER BY dbo.T_BUY_RETURN.BILL_NUMBER








' 
GO
/****** Object:  View [dbo].[V_BUY_OUT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_BUY_OUT]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_BUY_OUT]
AS
SELECT        TOP (100) PERCENT dbo.T_BUY.BILL_BRANCH, dbo.T_BUY.BILL_NUMBER, dbo.T_BUY.BILL_INVOICE, dbo.T_BUY.BILL_DATE, dbo.T_BUY.CURRANCY_CODE, dbo.T_CURRANNCY.CURRANCY_NAME, 
                         dbo.T_BUY.CURRANCY_EQUAL, dbo.T_BUY.CLIENT_CODE, dbo.T_BUY.CLIENT_NAME, dbo.T_BUY.DESCRIPTION, dbo.T_BUY.USER_CREATE, dbo.T_BUY.SECURETY_CODE, dbo.T_BUY.TOTAL_BUY, 
                         dbo.T_BUY.TOTAL_EXPENSES, dbo.T_BUY.NET_BUY, dbo.T_BUY.TOTAL_COST - dbo.T_BUY.DISCOUNT_AMOUNT AS TOTAL_COST, dbo.T_BUY.IVC_CODE, dbo.T_IVC_TYPE.IVC_NAME, dbo.T_BUY.DAY_CASH, 
                         dbo.T_BUY.DATE_CASH, dbo.T_BUY.TOT_CONV, dbo.T_BUY.ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME, dbo.T_BUY.CASH_USA, dbo.T_BUY.REMAIN_USA, dbo.T_BUY.CASH_IQ, dbo.T_BUY.REMAIN_IQ, 
                         dbo.T_BUY.C_DATE, dbo.T_BUY.C_UPDATE, dbo.T_BUY.USER_UPDATE, dbo.T_BUY.ACTIVE, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_BUSINESS, dbo.T_BUY.WAJBA_CODE, dbo.T_WAJBA.WAJBA_NAME, 
                         dbo.T_BUY.DISCOUNT_PERCENT, dbo.T_BUY.DISCOUNT_AMOUNT, dbo.T_BUY.EXP_CASH, dbo.T_BUY.EXP_PERCENT, dbo.T_BUY.IS_OUT, dbo.T_BUY.OFFER_CODE, dbo.T_BUY.IS_TRANS, dbo.T_BUY.NET_SUPPLIER, 
                         dbo.T_BUY.TOTAL_OUT, dbo.T_BUY.TOTAL_SUPPLIER, dbo.T_BUY.QR_DATA
FROM            dbo.T_BUY LEFT OUTER JOIN
                         dbo.T_WAJBA ON dbo.T_BUY.WAJBA_CODE = dbo.T_WAJBA.WAJBA_CODE LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.T_BUY.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                         dbo.T_ACCOUNTS ON dbo.T_BUY.ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.T_IVC_TYPE ON dbo.T_BUY.IVC_CODE = dbo.T_IVC_TYPE.IVC_CODE LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.T_BUY.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE
WHERE        (dbo.T_BUY.ACTIVE = 1) AND (dbo.T_BUY.IVC_CODE < 10)AND  (dbo.T_BUY.TOTAL_OUT <>0)
ORDER BY dbo.T_BUY.BILL_NUMBER

' 
GO
/****** Object:  View [dbo].[V_CATEGORY_ON]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_CATEGORY_ON]'))
EXEC dbo.sp_executesql @statement = N'




CREATE VIEW [dbo].[V_CATEGORY_ON]
AS
SELECT        TOP (100) PERCENT dbo.T_ITEM_CATEGORY.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, COUNT(dbo.T_ITEMS.ITEM_NAME) AS CC_COUNT, dbo.T_ITEM_CATEGORY.ACTIVE, 
                         dbo.T_ITEM_CATEGORY.CATEGORY_NAME_EN
FROM            dbo.T_ITEM_CATEGORY LEFT OUTER JOIN
                         dbo.T_ITEMS ON dbo.T_ITEM_CATEGORY.CATEGORY_CODE = dbo.T_ITEMS.CATEGORY_CODE
WHERE        (dbo.T_ITEMS.IS_STORE = 1) AND (dbo.T_ITEMS.ACTIVE = 1)
GROUP BY dbo.T_ITEM_CATEGORY.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_ITEM_CATEGORY.ACTIVE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME_EN
HAVING        (dbo.T_ITEM_CATEGORY.ACTIVE = 1)
ORDER BY dbo.T_ITEM_CATEGORY.CATEGORY_NAME








' 
GO
/****** Object:  View [dbo].[V_CLIENT_BALANCE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_CLIENT_BALANCE]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_CLIENT_BALANCE]
AS
WITH BOX_CASH AS (
  
    SELECT
        ACCOUNT_CODE,
        MAX(BILL_DATE) AS LAST_CASH_DATE,
        MAX(T_ID_BOX) AS LAST_ID
    FROM dbo.T_BOX
    WHERE ACTIVE = 1 AND CREDIT_CUR <> 0 AND B_CODE IN (5,7,15,28)
    GROUP BY ACCOUNT_CODE
),
BOX_CASH_AMO AS (

    SELECT
        B.ACCOUNT_CODE,
        SUM(B.DEBIT_CUR + B.CREDIT_CUR) AS LAST_AMO
    FROM dbo.T_BOX B
    INNER JOIN (
        SELECT
            ACCOUNT_CODE,
            MAX(BILL_DATE) AS MAX_BILL_DATE
        FROM dbo.T_BOX
        WHERE ACTIVE = 1 AND CREDIT_CUR <> 0 AND B_CODE IN (5,7,15,28)
        GROUP BY ACCOUNT_CODE
    ) AS M
    ON B.ACCOUNT_CODE = M.ACCOUNT_CODE AND B.BILL_DATE = M.MAX_BILL_DATE
    WHERE B.ACTIVE = 1 AND B.CREDIT_CUR <> 0 AND B.B_CODE IN (5,7,15,28)
    GROUP BY B.ACCOUNT_CODE
)
SELECT
    C.CLIENT_CODE AS ACCOUNT_CODE,
    C.CLIENT_NAME AS ACCOUNT_NAME,
    C.CLIENT_NAME AS ACCOUNT_FULL_NAME,
    21 AS ACCOUNT_PARENT,
    3 AS ACCOUNT_LEVEL,
    SUM(B.B_USA) AS BALANCE,
    SUM(B.B_IQ) AS BALANCE_IQ,
    SUM(B.B_CUR) AS BALANCE_CUR,
    C.CLIENT_PHONE,
    C.CLIENT_PHONE_SMS,
    C.CLIENT_FULL_PHONE,
    C.CLIENT_REGION,
    C.MANDOOB_CODE,
    M.MANDOOB_NAME,
    CT.C_TYPE_NAME,
    C.SECURETY_CODE,
    C.CLIENT_BUSINESS,
    C.CLIENT_TYPE,
    BC.LAST_ID,
    ISNULL(BCA.LAST_AMO, 0) AS LAST_AMO,
    ISNULL(CONVERT(NVARCHAR(10), BC.LAST_CASH_DATE, 120), N''----'') AS LAST_CASH_DATE
FROM dbo.T_CLIENT AS C
    LEFT JOIN dbo.T_BOX AS B ON C.CLIENT_CODE = B.ACCOUNT_CODE AND B.ACTIVE = 1
    LEFT JOIN BOX_CASH AS BC ON C.CLIENT_CODE = BC.ACCOUNT_CODE
    LEFT JOIN BOX_CASH_AMO AS BCA ON C.CLIENT_CODE = BCA.ACCOUNT_CODE
    LEFT JOIN dbo.T_MANDOOB AS M ON C.MANDOOB_CODE = M.MANDOOB_CODE
    LEFT JOIN dbo.T_CLIENT_TYPE AS CT ON C.CLIENT_TYPE = CT.C_TYPE_CODE
WHERE
    B.ACTIVE = 1
GROUP BY
    C.CLIENT_CODE,
    C.CLIENT_NAME,
    C.CLIENT_PHONE,
    C.CLIENT_PHONE_SMS,
    C.CLIENT_FULL_PHONE,
    C.CLIENT_REGION,
    C.MANDOOB_CODE,
    M.MANDOOB_NAME,
    CT.C_TYPE_NAME,
    C.SECURETY_CODE,
    C.CLIENT_BUSINESS,
    C.CLIENT_TYPE,
    BC.LAST_ID,
    BC.LAST_CASH_DATE,
    BCA.LAST_AMO
HAVING SUM(B.B_CUR) > 0

' 
GO
/****** Object:  View [dbo].[V_CLIENT_ON]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_CLIENT_ON]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_CLIENT_ON]
AS
SELECT     dbo.T_CLIENT.CLIENT_CODE, dbo.T_CLIENT.CLIENT_NAME, dbo.T_CLIENT.CLIENT_TYPE, dbo.T_CLIENT.MANDOOB_CODE, dbo.T_MANDOOB.MANDOOB_NAME, dbo.T_MANDOOB.MANDOOB_PERCENT, dbo.T_CLIENT.CLIENT_PHONE, dbo.T_CLIENT.CLIENT_EMAILE, 
                  dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_ADDRESS, dbo.T_CLIENT.CLIENT_BARCODE, dbo.T_CLIENT.CLIENT_CARD, dbo.T_CLIENT.CLIENT_NOTE, dbo.T_CLIENT.CLIENT_BUSINESS, dbo.T_CLIENT.CLIENT_ACTIVE
FROM        dbo.T_CLIENT INNER JOIN
                  dbo.T_MANDOOB ON dbo.T_CLIENT.MANDOOB_CODE = dbo.T_MANDOOB.MANDOOB_CODE
WHERE     (dbo.T_CLIENT.CLIENT_ACTIVE = 1)
' 
GO
/****** Object:  View [dbo].[V_COMPARE_SALES_STOREBOX]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_COMPARE_SALES_STOREBOX]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_COMPARE_SALES_STOREBOX]
AS
SELECT
    ISNULL(a.BILL_NUMBER, b.BILL_NUMBER) AS BILL_NUMBER,
    ISNULL(a.count_in_sales, 0) AS rows_in_sales_details,
    ISNULL(b.count_in_store, 0) AS rows_in_store_box
FROM
    (
        SELECT BILL_NUMBER, COUNT(*) AS count_in_sales
        FROM T_SALES_DETAILS
        GROUP BY BILL_NUMBER
    ) a
FULL OUTER JOIN
    (
        SELECT BILL_NUMBER, COUNT(*) AS count_in_store
        FROM T_STORE_BOX
        WHERE B_CODE = 2
        GROUP BY BILL_NUMBER
    ) b
    ON a.BILL_NUMBER = b.BILL_NUMBER
WHERE
    ISNULL(a.count_in_sales, 0) <> ISNULL(b.count_in_store, 0);

' 
GO
/****** Object:  View [dbo].[V_CONTAINER]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_CONTAINER]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_CONTAINER]
AS
SELECT        dbo.T_CONTAINER.BILL_NUMBER, dbo.T_CONTAINER.BILL_DATE, dbo.T_CONTAINER.BILL_TIME, dbo.T_CONTAINER.OFFER_CODE, dbo.T_CONTAINER.USER_CREATE, dbo.T_CONTAINER.CURRANCY_CODE, 
                         dbo.T_CONTAINER.CURRANCY_EQUAL, dbo.T_CONTAINER.CONTAINER_NO, dbo.T_CONTAINER.CONTAINER_NAME, dbo.T_CONTAINER.DATE_START, dbo.T_CONTAINER.DAY_ARRIVAL, dbo.T_CONTAINER.DATE_ARRIVAL, 
                         dbo.T_CONTAINER.LINK_CHECK, dbo.T_CONTAINER.ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME, dbo.T_CONTAINER.DESCRIPTION, dbo.T_CONTAINER.TOTAL_BOX, dbo.T_CONTAINER.PRICE_M2, 
                         dbo.T_CONTAINER.QTY_M2, dbo.T_CONTAINER.TOTAL, dbo.T_CONTAINER.TOTAL_EXPENSES, dbo.T_CONTAINER.TOTAL_ARBAH, dbo.T_CONTAINER.STATUS, dbo.T_CONTAINER.C_DATE, dbo.T_CONTAINER.C_UPDATE, 
                         dbo.T_CONTAINER.USER_UPDATE, dbo.T_CONTAINER.ACTIVE
FROM            dbo.T_CONTAINER LEFT OUTER JOIN
                         dbo.T_ACCOUNTS ON dbo.T_CONTAINER.ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE
WHERE        (dbo.T_CONTAINER.ACTIVE = 1)
' 
GO
/****** Object:  View [dbo].[V_CONTAINER_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_CONTAINER_DETAILS]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_CONTAINER_DETAILS]
AS
SELECT        dbo.T_CONTAINER_DETAILS.T_ID, dbo.T_CONTAINER_DETAILS.BILL_NUMBER, dbo.T_CONTAINER_DETAILS.BILL_DATE, dbo.T_CONTAINER_DETAILS.USER_CREATE, dbo.T_CONTAINER_DETAILS.CLIENT_CODE, 
                         dbo.T_CLIENT.CLIENT_NAME, dbo.T_CONTAINER_DETAILS.GOODS_TYPE, dbo.T_CONTAINER_DETAILS.DESCRIPTION, dbo.T_CONTAINER_DETAILS.QTY_BOX, dbo.T_CONTAINER_DETAILS.PRICE_M2, 
                         dbo.T_CONTAINER_DETAILS.QTY_M2, dbo.T_CONTAINER_DETAILS.TOTAL, dbo.T_CONTAINER_DETAILS.AMO_OUTSIDE, dbo.T_CONTAINER_DETAILS.CURRANCY_EQUAL, dbo.T_CONTAINER_DETAILS.NET_AMO, 
                         dbo.T_CONTAINER_DETAILS.NET_TOTAL, dbo.T_CONTAINER_DETAILS.EXPENSES, dbo.T_CONTAINER_DETAILS.TOTAL_ARBAH, dbo.T_CONTAINER_DETAILS.TOTAL_CASH, dbo.T_CONTAINER_DETAILS.TOTAL_REMAIN, 
                         dbo.T_CONTAINER_DETAILS.ACTIVE, dbo.T_CONTAINER.LINK_CHECK, dbo.T_CONTAINER.CONTAINER_NO, dbo.T_CONTAINER.CONTAINER_NAME, dbo.T_CLIENT.CLIENT_PHONE, dbo.T_CLIENT.CLIENT_REGION, 
                         dbo.T_CLIENT.CLIENT_ADDRESS
FROM            dbo.T_CONTAINER_DETAILS LEFT OUTER JOIN
                         dbo.T_CONTAINER ON dbo.T_CONTAINER_DETAILS.BILL_NUMBER = dbo.T_CONTAINER.BILL_NUMBER LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.T_CONTAINER_DETAILS.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE
WHERE        (dbo.T_CONTAINER_DETAILS.ACTIVE = 1)

' 
GO
/****** Object:  View [dbo].[V_CONTAINER_EXPENSES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_CONTAINER_EXPENSES]'))
EXEC dbo.sp_executesql @statement = N'





CREATE VIEW [dbo].[V_CONTAINER_EXPENSES]
AS
SELECT        dbo.T_CONTAINER_EXPENSES.BILL_BRANCH, dbo.T_CONTAINER_EXPENSES.BILL_NUMBER, dbo.T_CONTAINER_EXPENSES.BILL_DATE, dbo.T_CONTAINER_EXPENSES.BILL_TIME, dbo.T_CONTAINER_EXPENSES.ACCOUNT_CODE, 
                         dbo.T_ACCOUNTS.ACCOUNT_NAME, dbo.T_CONTAINER_EXPENSES.EXP_CUR, dbo.T_CONTAINER_EXPENSES.CURRANCY_CODE, dbo.T_CONTAINER_EXPENSES.CURRANCY_EQUAL, dbo.T_CONTAINER_EXPENSES.TOT_EXP, 
                         dbo.T_CONTAINER_EXPENSES.NOTE, dbo.T_CONTAINER_EXPENSES.USER_C, dbo.T_CONTAINER_EXPENSES.C_DATE, dbo.T_CONTAINER_EXPENSES.BILL_CONTAINER
FROM            dbo.T_CONTAINER_EXPENSES LEFT OUTER JOIN
                         dbo.T_ACCOUNTS ON dbo.T_CONTAINER_EXPENSES.ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE









' 
GO
/****** Object:  View [dbo].[V_EMP_ENTRY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_EMP_ENTRY]'))
EXEC dbo.sp_executesql @statement = N'






CREATE VIEW [dbo].[V_EMP_ENTRY]
AS
SELECT     TOP(1000000000)   dbo.T_EMP_ENTER.T_ID, dbo.T_EMP_ENTER.COMPANY_NAME, dbo.T_EMP_ENTER.D_DATE, dbo.T_EMP_ENTER.D_TIME, dbo.T_EMP_ENTER.EMP_CODE, dbo.T_EMPLOYEE.EMP_NAME, dbo.T_EMPLOYEE.EMP_SALLARY, 
                         dbo.T_EMPLOYEE.PER_DAY, dbo.T_EMPLOYEE.JOB_HOUR, dbo.T_EMPLOYEE.PRICE_HOUR, dbo.T_EMPLOYEE.PRICE_MINUTE, dbo.T_EMP_ENTER.START_TIME, dbo.T_EMP_ENTER.END_TIME, 
                         dbo.T_EMP_ENTER.TOTAL_MUNIT, dbo.T_EMP_ENTER.TOTAL_HOUR, dbo.T_EMP_ENTER.NOTE, dbo.T_EMP_ENTER.IS_PAID, dbo.T_EMPLOYEE.PRICE_MINUTE * dbo.T_EMP_ENTER.TOTAL_MUNIT AS TOTAL_PRICE
FROM            dbo.T_EMP_ENTER INNER JOIN
                         dbo.T_EMPLOYEE ON dbo.T_EMP_ENTER.EMP_CODE = dbo.T_EMPLOYEE.EMP_CODE

ORDER BY dbo.T_EMP_ENTER.T_ID








' 
GO
/****** Object:  View [dbo].[V_EXPENSES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_EXPENSES]'))
EXEC dbo.sp_executesql @statement = N'





CREATE VIEW [dbo].[V_EXPENSES]
AS
SELECT       dbo.T_EXPENSES.T_ID, dbo.T_EXPENSES.D_DATE, dbo.T_EXPENSES.D_TIME, dbo.T_EXPENSES.EXP_TYPE, dbo.T_EXPENSES.AMO, dbo.T_EXPENSES.NOTE, dbo.T_EXPENSES.USER_CODE, dbo.T_USERS.USER_NAME
FROM            dbo.T_EXPENSES LEFT OUTER JOIN
                         dbo.T_USERS ON dbo.T_EXPENSES.USER_CODE = dbo.T_USERS.USER_CODE









' 
GO
/****** Object:  View [dbo].[V_FACTORY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_FACTORY]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_FACTORY]
AS
SELECT     TOP(1000000000)    dbo.T_FACTORY.BILL_BRANCH, dbo.T_FACTORY.BILL_NUMBER, dbo.T_FACTORY.BILL_INVOICE, dbo.T_FACTORY.BILL_DATE, dbo.T_FACTORY.BILL_BRANCH_BUY, dbo.T_FACTORY.SECURETY_CODE, 
                         dbo.T_FACTORY.OFFER_CODE, dbo.T_FACTORY.ITEM_CODE AS ITEM_CODE_FACTORY, dbo.T_ITEMS.ITEM_NAME AS ITEM_NAME_FACTORY, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, 
                         dbo.T_ITEMS.TYPE_CODE, dbo.T_ITEM_TYPE.TYPE_NAME, dbo.T_FACTORY.QTY, dbo.T_FACTORY.UNIT_NAME, dbo.T_FACTORY.UNIT_QTY, dbo.T_FACTORY.EXP_DATE, dbo.T_FACTORY.PRICE_BUY, 
                         dbo.T_FACTORY.CURRANCY_EQUAL, dbo.T_FACTORY.PRICE, dbo.T_FACTORY.TOTAL, dbo.T_FACTORY.EXPENSES, dbo.T_FACTORY.TOTAL_EXPENSES, dbo.T_FACTORY.COST, dbo.T_FACTORY.TOTAL_COST, 
                         dbo.T_FACTORY.DESCRIPTION, dbo.T_FACTORY.STORE_CODE, dbo.T_STORE_TYPE.STORE_NAME, dbo.T_FACTORY.WAJBA_CODE, dbo.T_WAJBA.WAJBA_NAME, dbo.T_FACTORY.USER_CREATE, dbo.T_FACTORY.C_DATE, 
                         dbo.T_FACTORY.C_UPDATE, dbo.T_FACTORY.USER_UPDATE, dbo.T_FACTORY.ACTIVE, dbo.T_ITEMS.ITEM_BARCODE
FROM            dbo.T_ITEM_TYPE RIGHT OUTER JOIN
                         dbo.T_WAJBA RIGHT OUTER JOIN
                         dbo.T_FACTORY ON dbo.T_WAJBA.WAJBA_CODE = dbo.T_FACTORY.WAJBA_CODE LEFT OUTER JOIN
                         dbo.T_ITEMS ON dbo.T_FACTORY.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE ON dbo.T_ITEM_TYPE.TYPE_CODE = dbo.T_ITEMS.TYPE_CODE LEFT OUTER JOIN
                         dbo.T_STORE_TYPE ON dbo.T_FACTORY.STORE_CODE = dbo.T_STORE_TYPE.STORE_CODE
WHERE        (dbo.T_FACTORY.ACTIVE = 1)
ORDER BY  dbo.T_FACTORY.BILL_NUMBER

' 
GO
/****** Object:  View [dbo].[V_FACTORY_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_FACTORY_DETAILS]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_FACTORY_DETAILS]
AS
SELECT        TOP (1000000000) dbo.T_FACTORY_DETAILS.T_ID, dbo.T_FACTORY_DETAILS.BILL_BRANCH, dbo.T_FACTORY_DETAILS.BILL_NUMBER, dbo.T_FACTORY_DETAILS.ITEM_CODE_FACTORY, 
                         dbo.T_FACTORY_DETAILS.ITEM_CODE, T_ITEMS_1.ITEM_NAME, T_ITEMS_1.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, T_ITEMS_1.TYPE_CODE, dbo.T_ITEM_TYPE.TYPE_NAME, 
                         dbo.T_FACTORY_DETAILS.QTY, dbo.T_FACTORY_DETAILS.UNIT_NAME, dbo.T_FACTORY_DETAILS.UNIT_QTY, dbo.T_FACTORY_DETAILS.QTY_FACTORY, dbo.T_FACTORY_DETAILS.TOT_QTY_MIN, 
                         dbo.T_FACTORY_DETAILS.STORE_CODE, dbo.T_STORE_TYPE.STORE_NAME, dbo.T_FACTORY_DETAILS.PRICE_TYPE, dbo.T_TYPE_PRICE_SELL.TYPE_PRICE_NAME, dbo.T_FACTORY_DETAILS.PRICE, 
                         dbo.T_FACTORY_DETAILS.TOTAL, dbo.T_FACTORY_DETAILS.NOTE, T_ITEMS_1.ITEM_BARCODE, dbo.T_ITEMS.ITEM_NAME AS ITEM_NAME_FACTORY, dbo.T_FACTORY.BILL_DATE
FROM            dbo.T_FACTORY_DETAILS LEFT OUTER JOIN
                         dbo.T_FACTORY ON dbo.T_FACTORY_DETAILS.BILL_BRANCH = dbo.T_FACTORY.BILL_BRANCH LEFT OUTER JOIN
                         dbo.T_ITEMS ON dbo.T_FACTORY_DETAILS.ITEM_CODE_FACTORY = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_TYPE_PRICE_SELL ON dbo.T_FACTORY_DETAILS.PRICE_TYPE = dbo.T_TYPE_PRICE_SELL.TYPE_PRICE_CODE LEFT OUTER JOIN
                         dbo.T_ITEMS AS T_ITEMS_1 ON dbo.T_FACTORY_DETAILS.ITEM_CODE = T_ITEMS_1.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_TYPE ON T_ITEMS_1.TYPE_CODE = dbo.T_ITEM_TYPE.TYPE_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON T_ITEMS_1.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE LEFT OUTER JOIN
                         dbo.T_STORE_TYPE ON dbo.T_FACTORY_DETAILS.STORE_CODE = dbo.T_STORE_TYPE.STORE_CODE
ORDER BY dbo.T_FACTORY_DETAILS.T_ID
' 
GO
/****** Object:  View [dbo].[V_ITEM_APPLICATION_DESCREPTION]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_APPLICATION_DESCREPTION]'))
EXEC dbo.sp_executesql @statement = N'




CREATE VIEW [dbo].[V_ITEM_APPLICATION_DESCREPTION]
AS
SELECT        TOP (1000000000) dbo.T_ITEMS.ITEM_CODE, dbo.T_ITEMS.TIME_USE, dbo.T_ITEMS.IS_TRANS,
                             (SELECT        TOP (1) ISNULL(ITEM_BARCODE, dbo.T_ITEMS.ITEM_BARCODE)
                                FROM            T_ITEM_BARCODE
                                WHERE        ITEM_CODE = dbo.T_ITEMS.ITEM_CODE AND UNIT_CODE = dbo.T_ITEM_UNIT.UNIT_CODE) AS ITEM_BARCODE, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.TYPE_CODE, dbo.T_ITEM_UNIT.UNIT_CODE, 
                         dbo.T_ITEM_UNIT.UNIT_QTY, dbo.T_ITEM_UNIT.UNIT_NAME, SUM(ISNULL(dbo.T_STORE_BOX.BALANCE_M, 0)) / dbo.T_ITEM_UNIT.UNIT_QTY AS BALANCE, dbo.T_ITEM_UNIT.DF_SALE, dbo.T_ITEM_UNIT.DF_STORE, 
                         dbo.T_ITEM_UNIT.DF_BUY, iif(dbo.T_ITEMS.ITEM_BARCODE = N'''', dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.ITEM_BARCODE + '' : '' + dbo.T_ITEMS.ITEM_NAME) AS FULL_NAME, dbo.T_ITEM_UNIT.PRICE_BUY, 
                         dbo.T_ITEM_UNIT.PRICE_COST, dbo.T_ITEM_UNIT.PRICE_SALE_1, dbo.T_ITEM_UNIT.PRICE_SALE_2, dbo.T_ITEM_UNIT.PRICE_SALE_3, dbo.T_ITEM_UNIT.PRICE_AVG_COST, dbo.T_ITEM_UNIT.PRICE_SALE_CUR, 
                         dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_STORE_BOX.STORE_CODE, T_STORE_TYPE.STORE_NAME, T_STORE_TYPE.IS_USED, dbo.T_ITEMS.ITEM_NAME_EN, 
                         dbo.T_ITEMS.ITEM_NOTE, dbo.T_ITEMS.ITEM_NOTE_EN, dbo.T_ITEMS.IMG_URL, dbo.T_ITEM_CATEGORY.CATEGORY_NAME_EN, dbo.T_ITEM_CATEGORY.CATEGORY_IMAGE_PATH, 
                         CAST(dbo.T_ITEMS.ITEM_CODE AS varchar(MAX)) + CAST(dbo.T_ITEM_UNIT.UNIT_CODE AS varchar(MAX)) + CAST(dbo.T_STORE_BOX.STORE_CODE AS varchar(MAX)) AS ID_APPLICATION, dbo.T_ITEMS.RAF_NAME, dbo.T_ITEMS.IS_DISCOUNT, dbo.T_ITEMS.MAIN_ITEM_CODE, dbo.T_ITEMS.IS_FEATURE, dbo.T_ITEMS.DISC_PERCENT, dbo.T_ITEMS.DISC_AMO
						  ,[ITEM_PARENT]   ,[ITEM_SUB_PARENT]  ,[LEVEL_SUB] ,[AREA_M2]  ,[WIDTH_CM] ,[LENGTH_CM] ,[COMPANY_CREATE],[EFFECTIVE_MATERIAL], dbo.T_ITEMS.KIND_NAME
FROM            dbo.T_ITEMS INNER JOIN
                         dbo.T_ITEM_UNIT ON dbo.T_ITEMS.ITEM_CODE = dbo.T_ITEM_UNIT.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_STORE_BOX ON dbo.T_ITEMS.ITEM_CODE = dbo.T_STORE_BOX.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_STORE_TYPE ON dbo.T_STORE_BOX.STORE_CODE = dbo.T_STORE_TYPE.STORE_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE
WHERE        (dbo.T_ITEM_UNIT.ON_OFF = 1) AND T_STORE_TYPE.IS_USED = 1 AND dbo.T_ITEM_CATEGORY.SHOW_MENU = 1 AND dbo.T_ITEMS.SHOW_MENU = 1 AND LEN(dbo.T_ITEMS.ITEM_NOTE) >0
GROUP BY dbo.T_ITEMS.ITEM_CODE, dbo.T_ITEMS.TIME_USE, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEM_UNIT.UNIT_CODE, dbo.T_ITEM_UNIT.UNIT_NAME, dbo.T_ITEM_UNIT.UNIT_QTY, dbo.T_ITEM_UNIT.DF_BUY, 
                         dbo.T_ITEM_UNIT.ON_OFF, dbo.T_ITEMS.ITEM_BARCODE, dbo.T_ITEM_UNIT.DF_SALE, dbo.T_ITEM_UNIT.DF_STORE, dbo.T_ITEMS.ACTIVE, dbo.T_ITEMS.TYPE_CODE, dbo.T_STORE_BOX.ACTIVE, 
                         dbo.T_ITEM_UNIT.PRICE_BUY, dbo.T_ITEM_UNIT.PRICE_COST, dbo.T_ITEM_UNIT.PRICE_SALE_1, dbo.T_ITEM_UNIT.PRICE_SALE_2, dbo.T_ITEM_UNIT.PRICE_SALE_3, dbo.T_ITEM_UNIT.PRICE_AVG_COST, 
                         dbo.T_ITEM_UNIT.PRICE_SALE_CUR, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_STORE_BOX.STORE_CODE, T_STORE_TYPE.STORE_NAME, T_STORE_TYPE.IS_USED, 
                         dbo.T_ITEMS.ITEM_NAME_EN, dbo.T_ITEMS.ITEM_NOTE, dbo.T_ITEMS.ITEM_NOTE_EN, dbo.T_ITEMS.IMG_URL, dbo.T_ITEM_CATEGORY.CATEGORY_NAME_EN, dbo.T_ITEM_CATEGORY.CATEGORY_IMAGE_PATH, 
                         dbo.T_ITEMS.IS_TRANS,  dbo.T_ITEMS.RAF_NAME, dbo.T_ITEMS.IS_DISCOUNT, dbo.T_ITEMS.MAIN_ITEM_CODE, dbo.T_ITEMS.IS_FEATURE, dbo.T_ITEMS.DISC_PERCENT, dbo.T_ITEMS.DISC_AMO
						  ,[ITEM_PARENT]   ,[ITEM_SUB_PARENT]  ,[LEVEL_SUB] ,[AREA_M2]  ,[WIDTH_CM] ,[LENGTH_CM] ,[COMPANY_CREATE],[EFFECTIVE_MATERIAL], dbo.T_ITEMS.KIND_NAME
HAVING        (dbo.T_ITEMS.ACTIVE = 1) AND dbo.T_STORE_BOX.ACTIVE = 1
ORDER BY dbo.T_ITEMS.ITEM_CODE





' 
GO
/****** Object:  View [dbo].[V_ITEM_AVG_COST_BUY_OLD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_AVG_COST_BUY_OLD]'))
EXEC dbo.sp_executesql @statement = N'








CREATE VIEW [dbo].[V_ITEM_AVG_COST_BUY_OLD]
AS
SELECT    TOP(1000000000)    dbo.T_ITEMS.ITEM_CODE, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_ITEMS.KIND_NAME, dbo.T_ITEMS.TYPE_CODE, dbo.T_ITEM_TYPE.TYPE_NAME, dbo.T_ITEM_UNIT.UNIT_CODE, 
                         dbo.T_ITEM_UNIT.UNIT_NAME, dbo.T_ITEM_UNIT.UNIT_QTY, dbo.T_ITEM_UNIT.PRICE_BUY, dbo.T_ITEM_UNIT.PRICE_COST, dbo.T_ITEM_UNIT.PRICE_SALE_1, dbo.T_ITEM_UNIT.PRICE_SALE_2, 
                         dbo.T_ITEM_UNIT.PRICE_SALE_3, dbo.T_ITEM_UNIT.PRICE_AVG_COST, dbo.T_ITEM_UNIT.PRICE_SALE_CUR,
                            ISNULL((SELECT        ISNULL(SUM(TOTAL_COST) / NULLIF(SUM(IIF(QTY = 0, NULL, QTY) * UNIT_QTY),0), 0) AS Expr1
                                FROM            dbo.T_BUY_DETAILS
                                WHERE        (ITEM_CODE = dbo.T_ITEMS.ITEM_CODE) AND ((BILL_NUMBER = 0 AND ACTIVE = 0 )OR
                                                         (BILL_NUMBER <> 0 AND ACTIVE = 1))),0) * dbo.T_ITEM_UNIT.UNIT_QTY AS AVG_BUY

FROM            dbo.T_ITEMS LEFT OUTER JOIN
                         dbo.T_ITEM_TYPE ON dbo.T_ITEMS.TYPE_CODE = dbo.T_ITEM_TYPE.TYPE_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_UNIT ON dbo.T_ITEMS.ITEM_CODE = dbo.T_ITEM_UNIT.ITEM_CODE
GROUP BY dbo.T_ITEMS.ITEM_CODE, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_ITEMS.KIND_NAME, dbo.T_ITEMS.TYPE_CODE, dbo.T_ITEM_TYPE.TYPE_NAME, dbo.T_ITEM_UNIT.UNIT_CODE, 
                         dbo.T_ITEM_UNIT.UNIT_NAME, dbo.T_ITEM_UNIT.UNIT_QTY, dbo.T_ITEM_UNIT.PRICE_BUY, dbo.T_ITEM_UNIT.PRICE_COST, dbo.T_ITEM_UNIT.PRICE_SALE_1, dbo.T_ITEM_UNIT.PRICE_SALE_2, 
                         dbo.T_ITEM_UNIT.PRICE_SALE_3, dbo.T_ITEM_UNIT.PRICE_AVG_COST, dbo.T_ITEM_UNIT.PRICE_SALE_CUR

ORDER BY   dbo.T_ITEMS.ITEM_CODE










' 
GO
/****** Object:  View [dbo].[V_ITEM_BALANCE_WAJBA_FIFO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_BALANCE_WAJBA_FIFO]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEM_BALANCE_WAJBA_FIFO]
AS
SELECT
    I.ITEM_CODE,
    I.ITEM_NAME,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    I.TYPE_CODE,
    ITYPE.TYPE_NAME,
    IU.UNIT_CODE,
    IU.UNIT_NAME,
    IU.UNIT_QTY,
    IU.PRICE_BUY,
    IU.PRICE_COST,
    IU.PRICE_SALE_1,
    IU.PRICE_SALE_2,
    IU.PRICE_SALE_3,
    IU.PRICE_AVG_COST,
    IU.PRICE_SALE_CUR,
    ISNULL(AVG_BUY.AVG_BUY, 0) * IU.UNIT_QTY AS AVG_BUY
FROM dbo.T_ITEMS AS I
    LEFT JOIN dbo.T_ITEM_TYPE AS ITYPE ON I.TYPE_CODE = ITYPE.TYPE_CODE
    LEFT JOIN dbo.T_ITEM_CATEGORY AS IC ON I.CATEGORY_CODE = IC.CATEGORY_CODE
    LEFT JOIN dbo.T_ITEM_UNIT AS IU ON I.ITEM_CODE = IU.ITEM_CODE
    LEFT JOIN (
        SELECT
            ITEM_CODE,
            ISNULL(SUM(TOTAL_COST) / NULLIF(SUM(IIF(QTY = 0, NULL, QTY) * UNIT_QTY), 0), 0) AS AVG_BUY
        FROM dbo.T_BUY_DETAILS
        WHERE
            ((BILL_NUMBER = 0 AND ACTIVE = 0) OR (BILL_NUMBER <> 0 AND ACTIVE = 1))
        GROUP BY ITEM_CODE
    ) AS AVG_BUY ON I.ITEM_CODE = AVG_BUY.ITEM_CODE
WHERE
    IU.UNIT_CODE = 1
' 
GO
/****** Object:  View [dbo].[V_ITEM_BARCODE_222]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_BARCODE_222]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEM_BARCODE_222]
AS
SELECT
    I.ITEM_CODE,
    I.ITEM_BARCODE AS ITEM_BARCODE_MAIN,
    I.ITEM_NAME,
    IU.UNIT_NAME,
    IU.UNIT_CODE,
    IB.ITEM_BARCODE,
    IU.DF_SALE,
    IU.DF_BUY,
    IU.DF_STORE,
    IU.UNIT_QTY,
    IU.PRICE_BUY,
    IU.PRICE_COST,
    IU.PRICE_SALE_1,
    IU.PRICE_SALE_2,
    IU.PRICE_SALE_3,
    IU.PRICE_AVG_COST,
    IU.PRICE_AVG_COST AS AVG_BUY,
    I.IMG_URL,
    I.ITEM_NOTE,
    I.CLIENT_NAME_BEST,
    I.RAF_NAME,
    I.IS_HIDE,
    I.SERVER_ITEM_CODE,
    I.SERVER_BRANCH,
    I.IS_SERIAL,
    I.KIND_NAME
FROM dbo.T_ITEMS AS I
    INNER JOIN dbo.T_ITEM_UNIT AS IU ON I.ITEM_CODE = IU.ITEM_CODE
    LEFT JOIN dbo.T_ITEM_BARCODE AS IB ON IU.ITEM_CODE = IB.ITEM_CODE AND IU.UNIT_CODE = IB.UNIT_CODE
WHERE
    I.ACTIVE = 1
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_ITEM_EFFECTIVE_MATERIAL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_EFFECTIVE_MATERIAL]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEM_EFFECTIVE_MATERIAL]
AS
SELECT
    E.T_ID,
    E.ITEM_CODE,
    I.ITEM_NAME,
    E.EFFECTIVE_MATERIAL_ID,
    M.EFFECTIVE_MATERIAL
FROM dbo.T_ITEM_MATERIAL_EFFECTIVE AS E
    LEFT JOIN dbo.T_ITEM_MATERIAL AS M ON E.EFFECTIVE_MATERIAL_ID = M.T_ID
    LEFT JOIN dbo.T_ITEMS AS I ON E.ITEM_CODE = I.ITEM_CODE
' 
GO
/****** Object:  View [dbo].[V_ITEM_MISWAK_INFO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEM_MISWAK_INFO]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_ITEM_MISWAK_INFO]
AS
SELECT        dbo.T_ITEM_MISWAK_INFO.T_ID, dbo.T_ITEM_MISWAK_INFO.ITEM_CODE, dbo.T_ITEM_MISWAK_INFO.ITEM_NAME, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_ITEMS.KIND_NAME, 
                         dbo.T_ITEM_MISWAK_INFO.QTY, dbo.T_ITEMS.CLIENT_NAME_BEST, dbo.T_ITEM_MISWAK_INFO.ACTIVE, dbo.T_ITEM_MISWAK_INFO.INFO_NOTE, dbo.T_ITEM_MISWAK_INFO.USER_CREATE, dbo.T_ITEMS.COST, 
                         dbo.T_ITEM_MISWAK_INFO.QTY * dbo.T_ITEMS.COST AS TOTAL_COST, dbo.T_ITEM_MISWAK_INFO.USER_UPDATE, dbo.T_ITEM_MISWAK_INFO.C_DATE, dbo.T_ITEM_MISWAK_INFO.C_UPDATE
FROM            dbo.T_ITEM_MISWAK_INFO LEFT OUTER JOIN
                         dbo.T_ITEMS ON dbo.T_ITEM_MISWAK_INFO.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE

' 
GO
/****** Object:  View [dbo].[V_ITEMS_START_BALANCE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_ITEMS_START_BALANCE]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_ITEMS_START_BALANCE]
AS
SELECT
    BD.T_ID,
    BD.BILL_BRANCH,
    BD.BILL_NUMBER,
    BD.ITEM_CODE,
    I.ITEM_BARCODE AS ITEM_SIGN,
    I.ITEM_NAME,
    I.CATEGORY_CODE,
    C.CATEGORY_NAME,
    BD.QTY,
    BD.UNIT_NAME,
    BD.UNIT_QTY,
    BD.STORE_CODE,
    S.STORE_NAME,
    BD.EXP_DATE,
    BD.PRICE_BUY,
    BD.CURRANCY_EQUAL,
    BD.PRICE,
    BD.TOTAL,
    BD.EXPENSES,
    BD.TOTAL_EXPENSES,
    BD.COST,
    BD.TOTAL_COST,
    BD.ACTIVE,
    I.KIND_NAME
FROM
    dbo.T_BUY_DETAILS BD
    LEFT JOIN dbo.T_STORE_TYPE S ON BD.STORE_CODE = S.STORE_CODE
    LEFT JOIN dbo.T_ITEMS I ON BD.ITEM_CODE = I.ITEM_CODE
    LEFT JOIN dbo.T_ITEM_CATEGORY C ON I.CATEGORY_CODE = C.CATEGORY_CODE
WHERE
    BD.BILL_NUMBER = 0
    AND BD.ACTIVE = 0
    AND BD.QTY <> 0
' 
GO
/****** Object:  View [dbo].[V_JOINT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_JOINT]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_JOINT]
AS
SELECT     dbo.T_JOINT.JOINT_CODE, dbo.T_JOINT.JOINT_NAME, dbo.T_JOINT.JOINT_PHONE, dbo.T_JOINT.JOINT_ADDRESS, dbo.T_JOINT.ACCOUNT_CODE, dbo.T_JOINT.JOINT_CARD, dbo.T_JOINT.GENDER, dbo.T_JOINT.LENGHT, dbo.T_JOINT.WEIGHT, dbo.T_JOINT.IMG_PATH, 
                  dbo.T_JOINT.C_DATE, dbo.T_JOINT.USER_CREATE, dbo.T_JOINT.MAX_T_ID, dbo.T_JOINT.ACTIVE, dbo.T_JOINT.NOTE, dbo.T_JOINT_SUBSCRIPTION.D_DATE, dbo.T_JOINT_SUBSCRIPTION.START_DATE, dbo.T_JOINT_SUBSCRIPTION.END_DATE, 
                  dbo.T_JOINT_SUBSCRIPTION.SUBSCRIPTION_CODE, dbo.T_JOINT_SUBSCRIPTION.AMO, dbo.T_JOINT_SUBSCRIPTION.CASH, dbo.T_JOINT_SUBSCRIPTION.REMAIN, dbo.T_JOINT_SUBSCRIPTION.IS_FINISH, dbo.T_SUBSCRIPTION.SUBSCRIPTION_NAME, 
                  dbo.T_SUBSCRIPTION.DAY_TYPE_CODE, dbo.T_AKSAT_TYPE.AKSAT_TYPE_NAME AS DAY_TYPE_NAME, dbo.T_JOINT_SUBSCRIPTION.IS_PAUSE, dbo.T_JOINT_SUBSCRIPTION.DAY_REMAIN, dbo.T_JOINT_SUBSCRIPTION.T_ID
FROM        dbo.T_JOINT LEFT OUTER JOIN
                  dbo.T_JOINT_SUBSCRIPTION ON dbo.T_JOINT.JOINT_CODE = dbo.T_JOINT_SUBSCRIPTION.JOINT_CODE LEFT OUTER JOIN
                  dbo.T_SUBSCRIPTION ON dbo.T_JOINT_SUBSCRIPTION.SUBSCRIPTION_CODE = dbo.T_SUBSCRIPTION.SUBSCRIPTION_CODE LEFT OUTER JOIN
                  dbo.T_AKSAT_TYPE ON dbo.T_SUBSCRIPTION.DAY_TYPE_CODE = dbo.T_AKSAT_TYPE.AKSAT_TYPE_CODE
WHERE     (dbo.T_JOINT_SUBSCRIPTION.IS_FINISH = 0)

' 
GO
/****** Object:  View [dbo].[V_JOINT_REPORT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_JOINT_REPORT]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_JOINT_REPORT]
AS
SELECT     T_JOINT_SUBSCRIPTION_1.T_ID, T_JOINT_SUBSCRIPTION_1.D_DATE, T_JOINT_SUBSCRIPTION_1.USER_CODE, T_JOINT_SUBSCRIPTION_1.START_DATE, T_JOINT_SUBSCRIPTION_1.END_DATE, T_JOINT_SUBSCRIPTION_1.SUBSCRIPTION_CODE, 
                  dbo.T_SUBSCRIPTION.SUBSCRIPTION_NAME, dbo.T_SUBSCRIPTION.DAYS, dbo.T_SUBSCRIPTION.DAY_TYPE_CODE, T_JOINT_SUBSCRIPTION_1.AMO, T_JOINT_SUBSCRIPTION_1.CASH, T_JOINT_SUBSCRIPTION_1.REMAIN, T_JOINT_SUBSCRIPTION_1.IS_FINISH, 
                  T_JOINT_SUBSCRIPTION_1.JOINT_CODE, dbo.T_JOINT.JOINT_NAME, dbo.T_JOINT.JOINT_PHONE, dbo.T_JOINT.JOINT_ADDRESS, dbo.T_JOINT.ACCOUNT_CODE, dbo.T_JOINT.JOINT_CARD, dbo.T_JOINT.GENDER, dbo.T_JOINT.LENGHT, dbo.T_JOINT.WEIGHT, dbo.T_JOINT.IMG_PATH, 
                  dbo.T_JOINT.IMG_64, dbo.T_JOINT.USER_CREATE, dbo.T_JOINT.MAX_T_ID, dbo.T_JOINT.NOTE, dbo.T_SUBSCRIPTION.SUBSCRIPTION_AMO, T_JOINT_SUBSCRIPTION_1.IS_PAUSE, T_JOINT_SUBSCRIPTION_1.DAY_REMAIN, 
                  dbo.T_AKSAT_TYPE.AKSAT_TYPE_NAME AS DAY_TYPE_NAME
FROM        dbo.T_AKSAT_TYPE LEFT OUTER JOIN
                  dbo.T_SUBSCRIPTION ON dbo.T_AKSAT_TYPE.AKSAT_TYPE_CODE = dbo.T_SUBSCRIPTION.DAY_TYPE_CODE RIGHT OUTER JOIN
                  dbo.T_JOINT_SUBSCRIPTION AS T_JOINT_SUBSCRIPTION_1 LEFT OUTER JOIN
                  dbo.T_JOINT ON T_JOINT_SUBSCRIPTION_1.JOINT_CODE = dbo.T_JOINT.JOINT_CODE ON dbo.T_SUBSCRIPTION.SUBSCRIPTION_CODE = T_JOINT_SUBSCRIPTION_1.SUBSCRIPTION_CODE
' 
GO
/****** Object:  View [dbo].[V_JOINT_SHOW]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_JOINT_SHOW]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_JOINT_SHOW]
AS
SELECT     MAX(T_JOINT_SUBSCRIPTION_1.T_ID) AS T_ID, T_JOINT_SUBSCRIPTION_1.JOINT_CODE, dbo.T_JOINT.JOINT_NAME, dbo.T_JOINT.JOINT_PHONE, dbo.T_JOINT.JOINT_ADDRESS, dbo.T_JOINT.ACCOUNT_CODE, dbo.T_JOINT.JOINT_CARD, dbo.T_JOINT.GENDER, dbo.T_JOINT.LENGHT, 
                  dbo.T_JOINT.WEIGHT, dbo.T_JOINT.IMG_PATH, dbo.T_JOINT.MAX_T_ID, ISNULL
                      ((SELECT     DATEADD(DAY, - 1, MIN(START_DATE)) AS Expr1
                        FROM        dbo.T_JOINT_SUBSCRIPTION
                        WHERE     (JOINT_CODE = JOINT_CODE) AND (IS_FINISH = 0)), DATEADD(DAY, - 1, GETDATE())) AS START_DATE, ISNULL
                      ((SELECT     MAX(END_DATE) AS Expr1
                        FROM        dbo.T_JOINT_SUBSCRIPTION AS T_JOINT_SUBSCRIPTION_2
                        WHERE     (JOINT_CODE = T_JOINT_SUBSCRIPTION_1.JOINT_CODE) AND (IS_FINISH = 0)), DATEADD(DAY, - 1, GETDATE())) AS END_DATE, T_JOINT_SUBSCRIPTION_1.SUBSCRIPTION_CODE, dbo.T_SUBSCRIPTION.SUBSCRIPTION_NAME, dbo.T_SUBSCRIPTION.DAY_TYPE_CODE, 
                  dbo.T_AKSAT_TYPE.AKSAT_TYPE_NAME, T_JOINT_SUBSCRIPTION_1.AMO, T_JOINT_SUBSCRIPTION_1.CASH, T_JOINT_SUBSCRIPTION_1.REMAIN, T_JOINT_SUBSCRIPTION_1.IS_FINISH, T_JOINT_SUBSCRIPTION_1.IS_PAUSE, T_JOINT_SUBSCRIPTION_1.DAY_REMAIN
FROM        dbo.T_AKSAT_TYPE LEFT OUTER JOIN
                  dbo.T_SUBSCRIPTION ON dbo.T_AKSAT_TYPE.AKSAT_TYPE_CODE = dbo.T_SUBSCRIPTION.DAY_TYPE_CODE RIGHT OUTER JOIN
                  dbo.T_JOINT_SUBSCRIPTION AS T_JOINT_SUBSCRIPTION_1 ON dbo.T_SUBSCRIPTION.SUBSCRIPTION_CODE = T_JOINT_SUBSCRIPTION_1.SUBSCRIPTION_CODE LEFT OUTER JOIN
                  dbo.T_JOINT ON T_JOINT_SUBSCRIPTION_1.JOINT_CODE = dbo.T_JOINT.JOINT_CODE
GROUP BY T_JOINT_SUBSCRIPTION_1.JOINT_CODE, dbo.T_JOINT.JOINT_NAME, dbo.T_JOINT.JOINT_PHONE, dbo.T_JOINT.JOINT_ADDRESS, dbo.T_JOINT.ACCOUNT_CODE, dbo.T_JOINT.JOINT_CARD, dbo.T_JOINT.GENDER, dbo.T_JOINT.LENGHT, dbo.T_JOINT.WEIGHT, dbo.T_JOINT.IMG_PATH, 
                  dbo.T_JOINT.MAX_T_ID, T_JOINT_SUBSCRIPTION_1.SUBSCRIPTION_CODE, dbo.T_SUBSCRIPTION.SUBSCRIPTION_NAME, dbo.T_SUBSCRIPTION.DAY_TYPE_CODE, dbo.T_AKSAT_TYPE.AKSAT_TYPE_NAME, T_JOINT_SUBSCRIPTION_1.AMO, T_JOINT_SUBSCRIPTION_1.CASH, 
                  T_JOINT_SUBSCRIPTION_1.REMAIN, T_JOINT_SUBSCRIPTION_1.IS_PAUSE, T_JOINT_SUBSCRIPTION_1.IS_FINISH, T_JOINT_SUBSCRIPTION_1.DAY_REMAIN
' 
GO
/****** Object:  View [dbo].[V_JOINT_SUBSCRIPTION_GATE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_JOINT_SUBSCRIPTION_GATE]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_JOINT_SUBSCRIPTION_GATE]
AS
SELECT     T_JOINT_SUBSCRIPTION_1.T_ID, T_JOINT_SUBSCRIPTION_1.D_DATE, T_JOINT_SUBSCRIPTION_1.USER_CODE, ISNULL
                      ((SELECT     DATEADD(DAY, - 1, MIN(START_DATE)) AS Expr1
                        FROM        dbo.T_JOINT_SUBSCRIPTION
                        WHERE     (JOINT_CODE = dbo.T_JOINT.JOINT_CODE) AND (IS_FINISH = 0)), DATEADD(DAY, - 1, GETDATE())) AS START_DATE, ISNULL
                      ((SELECT     MAX(END_DATE) AS Expr1
                        FROM        dbo.T_JOINT_SUBSCRIPTION AS T_JOINT_SUBSCRIPTION_2
                        WHERE     (JOINT_CODE = dbo.T_JOINT.JOINT_CODE) AND (IS_FINISH = 0)), DATEADD(DAY, - 1, GETDATE())) AS END_DATE, T_JOINT_SUBSCRIPTION_1.SUBSCRIPTION_CODE, dbo.T_SUBSCRIPTION.SUBSCRIPTION_NAME, dbo.T_SUBSCRIPTION.DAYS, 
                  dbo.T_SUBSCRIPTION.DAY_TYPE_CODE, T_JOINT_SUBSCRIPTION_1.AMO, T_JOINT_SUBSCRIPTION_1.CASH, T_JOINT_SUBSCRIPTION_1.REMAIN, T_JOINT_SUBSCRIPTION_1.IS_FINISH, T_JOINT_SUBSCRIPTION_1.JOINT_CODE, dbo.T_JOINT.JOINT_NAME, 
                  dbo.T_JOINT.JOINT_PHONE, dbo.T_JOINT.JOINT_ADDRESS, dbo.T_JOINT.ACCOUNT_CODE, dbo.T_JOINT.JOINT_CARD, dbo.T_JOINT.GENDER, dbo.T_JOINT.LENGHT, dbo.T_JOINT.WEIGHT, dbo.T_JOINT.IMG_PATH, dbo.T_JOINT.IMG_64, dbo.T_JOINT.USER_CREATE, 
                  dbo.T_JOINT.MAX_T_ID, dbo.T_JOINT_GATE.SN, dbo.T_JOINT_GATE.T_ID_GATE, dbo.T_JOINT_GATE.IS_SEND_GATE, dbo.T_JOINT_GATE.IS_SEND_JOINT, dbo.T_JOINT.NOTE, T_JOINT_SUBSCRIPTION_1.IS_PAUSE, T_JOINT_SUBSCRIPTION_1.DAY_REMAIN, 
                  dbo.T_JOINT.IMG_64_SHOW, dbo.T_JOINT.IMG_PATH_SHOW, dbo.T_SUBSCRIPTION.GATE_SN
FROM        dbo.T_JOINT_SUBSCRIPTION AS T_JOINT_SUBSCRIPTION_1 INNER JOIN
                  dbo.T_JOINT ON T_JOINT_SUBSCRIPTION_1.JOINT_CODE = dbo.T_JOINT.JOINT_CODE LEFT OUTER JOIN
                  dbo.T_JOINT_GATE ON T_JOINT_SUBSCRIPTION_1.T_ID = dbo.T_JOINT_GATE.T_ID_SUB LEFT OUTER JOIN
                  dbo.T_SUBSCRIPTION ON T_JOINT_SUBSCRIPTION_1.SUBSCRIPTION_CODE = dbo.T_SUBSCRIPTION.SUBSCRIPTION_CODE
WHERE     (T_JOINT_SUBSCRIPTION_1.IS_FINISH = 0)
' 
GO
/****** Object:  View [dbo].[V_MAINTENANCE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_MAINTENANCE]'))
EXEC dbo.sp_executesql @statement = N'


CREATE VIEW [dbo].[V_MAINTENANCE]
AS
SELECT        dbo.T_MAINTANACE.BILL_BRANCH, dbo.T_SALES.BILL_NUMBER, dbo.T_SALES.BILL_DATE, dbo.T_SALES.CLIENT_NAME, dbo.T_SALES.CLIENT_PHONE, dbo.T_SALES.CLIENT_ADRESS, dbo.T_MAINTANACE.IS_IN, 
                         dbo.T_MAINTANACE.DATE_IN, dbo.T_MAINTANACE.USER_IN, dbo.T_MAINTANACE.IS_OUT, dbo.T_MAINTANACE.DATE_OUT, dbo.T_MAINTANACE.USER_OUT, dbo.T_MAINTANACE.SEQ_UNIT, dbo.T_MAINTANACE.DATE_DIFF, 
                         dbo.T_SALES.NET_SALES
FROM            dbo.T_MAINTANACE LEFT OUTER JOIN
                         dbo.T_SALES ON dbo.T_MAINTANACE.BILL_BRANCH = dbo.T_SALES.BILL_BRANCH




' 
GO
/****** Object:  View [dbo].[V_MAINTENANCE_DEVICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_MAINTENANCE_DEVICE]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_MAINTENANCE_DEVICE]
AS
SELECT     dbo.T_MAINTENANCE.BILL_NUMBER, dbo.T_MAINTENANCE.BILL_DATE, dbo.T_MAINTENANCE.BILL_TIME, dbo.T_MAINTENANCE.BILL_SEQ, dbo.T_MAINTENANCE.USER_CREATE, dbo.T_MAINTENANCE.TAG_PROCCESS_CODE, dbo.T_TAG_PROCCESS.TAG_PROCCESS_NAME, 
                  dbo.T_MAINTENANCE.MAINTENANCE_CENTER, dbo.T_MAINTENANCE.AUTHORIZED_CODE, dbo.T_CLIENT.CLIENT_NAME AS AUTHORIZED_NAME, dbo.T_MAINTENANCE.CLIENT_CODE, dbo.T_MAINTENANCE.CLIENT_NAME, dbo.T_MAINTENANCE.CLIENT_PHONE, 
                  dbo.T_MAINTENANCE.CLIENT_REGION, dbo.T_MAINTENANCE.CLIENT_ZONE, dbo.T_MAINTENANCE.CLIENT_ADDRESS, dbo.T_MAINTENANCE.CLIENT_COMPLAINT, dbo.T_MAINTENANCE.AGENT_NAME, dbo.T_MAINTENANCE.BUY_DATE, dbo.T_MAINTENANCE.RECIPIENT_NAME, 
                  dbo.T_MAINTENANCE.RECEIVED_DATE, dbo.T_MAINTENANCE.MALFUNCTION_NOTE, dbo.T_MAINTENANCE.TECHNICAL_NOTE, dbo.T_MAINTENANCE.EVALUATION_CLIENT, dbo.T_MAINTENANCE.MAINTENANCE_NOTE, dbo.T_MAINTENANCE.MAINTENANCE_TYPE_CODE, 
                  dbo.T_MAINTENANCE_TYPE.MAINTENANCE_TYPE_NAME, dbo.T_MAINTENANCE.GUARANTEE_TYPE_CODE, dbo.T_MAINTENANCE_GUARANTEE_TYPE.GUARANTEE_TYPE_NAME, dbo.T_MAINTENANCE.QTY_DEVICE, dbo.T_MAINTENANCE.BILL_SALES, dbo.T_MAINTENANCE.AMO_TOTAL, 
                  dbo.T_MAINTENANCE.AMO_COST_ITEMS, dbo.T_MAINTENANCE.AMO_COMPANY, dbo.T_MAINTENANCE.AMO_AUTHORIZED, dbo.T_MAINTENANCE.AMO_TRANSFARE, dbo.T_MAINTENANCE.AMO_ARBAH, dbo.T_MAINTENANCE.IS_FINISH, dbo.T_MAINTENANCE.ACTIVE, 
                  dbo.T_MAINTENANCE_DEVICE.DEVICE_TYPE, dbo.T_MAINTENANCE_DEVICE.DEVICE_MODEL, dbo.T_MAINTENANCE_DEVICE.DEVICE_SN, dbo.T_MAINTENANCE_DEVICE.DEVICE_C_DATE, dbo.T_MAINTENANCE.USER_UPDATE, dbo.T_MAINTENANCE.AMO_CASH, 
                  dbo.T_MAINTENANCE.AMO_REMAIN, dbo.T_MAINTENANCE.T_ID_ERROR, dbo.T_MAINTENANCE_DEVICE_ERROR.ERROR_CODE, dbo.T_MAINTENANCE_DEVICE_ERROR.ERROR_NOTE_AR, dbo.T_MAINTENANCE_DEVICE_ERROR.ERROR_NOTE_EN
FROM        dbo.T_MAINTENANCE LEFT OUTER JOIN
                  dbo.T_MAINTENANCE_DEVICE_ERROR ON dbo.T_MAINTENANCE.T_ID_ERROR = dbo.T_MAINTENANCE_DEVICE_ERROR.T_ID_ERROR LEFT OUTER JOIN
                  dbo.T_MAINTENANCE_DEVICE ON dbo.T_MAINTENANCE.BILL_NUMBER = dbo.T_MAINTENANCE_DEVICE.BILL_NUMBER LEFT OUTER JOIN
                  dbo.T_MAINTENANCE_GUARANTEE_TYPE ON dbo.T_MAINTENANCE.GUARANTEE_TYPE_CODE = dbo.T_MAINTENANCE_GUARANTEE_TYPE.GUARANTEE_TYPE_CODE LEFT OUTER JOIN
                  dbo.T_MAINTENANCE_TYPE ON dbo.T_MAINTENANCE.MAINTENANCE_TYPE_CODE = dbo.T_MAINTENANCE_TYPE.MAINTENANCE_TYPE_CODE LEFT OUTER JOIN
                  dbo.T_CLIENT ON dbo.T_MAINTENANCE.AUTHORIZED_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                  dbo.T_TAG_PROCCESS ON dbo.T_MAINTENANCE.TAG_PROCCESS_CODE = dbo.T_TAG_PROCCESS.TAG_PROCCESS_CODE
' 
GO
/****** Object:  View [dbo].[V_MAINTENANCE_LIST]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_MAINTENANCE_LIST]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_MAINTENANCE_LIST]
AS
SELECT     dbo.T_MAINTENANCE.BILL_NUMBER, dbo.T_MAINTENANCE.BILL_DATE, dbo.T_MAINTENANCE.BILL_TIME, dbo.T_MAINTENANCE.BILL_SEQ, dbo.T_MAINTENANCE.USER_CREATE, dbo.T_MAINTENANCE.TAG_PROCCESS_CODE, dbo.T_TAG_PROCCESS.TAG_PROCCESS_NAME, 
                  dbo.T_MAINTENANCE.MAINTENANCE_CENTER, dbo.T_MAINTENANCE.AUTHORIZED_CODE, dbo.T_CLIENT.CLIENT_NAME AS AUTHORIZED_NAME, dbo.T_MAINTENANCE.CLIENT_CODE, dbo.T_MAINTENANCE.CLIENT_NAME, dbo.T_MAINTENANCE.CLIENT_PHONE, 
                  dbo.T_MAINTENANCE.CLIENT_REGION, dbo.T_MAINTENANCE.CLIENT_ZONE, dbo.T_MAINTENANCE.CLIENT_ADDRESS, dbo.T_MAINTENANCE.CLIENT_COMPLAINT, dbo.T_MAINTENANCE.AGENT_NAME, dbo.T_MAINTENANCE.BUY_DATE, dbo.T_MAINTENANCE.RECIPIENT_NAME, 
                  dbo.T_MAINTENANCE.RECEIVED_DATE, dbo.T_MAINTENANCE.MALFUNCTION_NOTE, dbo.T_MAINTENANCE.TECHNICAL_NOTE, dbo.T_MAINTENANCE.EVALUATION_CLIENT, dbo.T_MAINTENANCE.MAINTENANCE_NOTE, dbo.T_MAINTENANCE.MAINTENANCE_TYPE_CODE, 
                  dbo.T_MAINTENANCE_TYPE.MAINTENANCE_TYPE_NAME, dbo.T_MAINTENANCE.GUARANTEE_TYPE_CODE, dbo.T_MAINTENANCE_GUARANTEE_TYPE.GUARANTEE_TYPE_NAME, dbo.T_MAINTENANCE.QTY_DEVICE, dbo.T_MAINTENANCE.BILL_SALES, dbo.T_MAINTENANCE.AMO_TOTAL, 
                  dbo.T_MAINTENANCE.AMO_COST_ITEMS, dbo.T_MAINTENANCE.AMO_COMPANY, dbo.T_MAINTENANCE.AMO_AUTHORIZED, dbo.T_MAINTENANCE.AMO_TRANSFARE, dbo.T_MAINTENANCE.AMO_ARBAH, dbo.T_MAINTENANCE.IS_FINISH, dbo.T_MAINTENANCE.ACTIVE
FROM        dbo.T_MAINTENANCE LEFT OUTER JOIN
                  dbo.T_MAINTENANCE_GUARANTEE_TYPE ON dbo.T_MAINTENANCE.GUARANTEE_TYPE_CODE = dbo.T_MAINTENANCE_GUARANTEE_TYPE.GUARANTEE_TYPE_CODE LEFT OUTER JOIN
                  dbo.T_MAINTENANCE_TYPE ON dbo.T_MAINTENANCE.MAINTENANCE_TYPE_CODE = dbo.T_MAINTENANCE_TYPE.MAINTENANCE_TYPE_CODE LEFT OUTER JOIN
                  dbo.T_CLIENT ON dbo.T_MAINTENANCE.AUTHORIZED_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                  dbo.T_TAG_PROCCESS ON dbo.T_MAINTENANCE.TAG_PROCCESS_CODE = dbo.T_TAG_PROCCESS.TAG_PROCCESS_CODE
' 
GO
/****** Object:  View [dbo].[V_MANDOOB_VISITS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_MANDOOB_VISITS]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_MANDOOB_VISITS]
AS
SELECT     dbo.T_MANDOOB_VISITS.T_ID, dbo.T_MANDOOB_VISITS.CLIENT_CODE, dbo.T_CLIENT.CLIENT_NAME, dbo.T_MANDOOB_VISITS.CLIENT_BARCODE, dbo.T_MANDOOB_VISITS.LAT, dbo.T_MANDOOB_VISITS.LNG, dbo.T_MANDOOB_VISITS.USER_CODE, dbo.T_USERS.USER_NAME, 
                  dbo.T_MANDOOB_VISITS.MANDOOB_CODE, dbo.T_MANDOOB.MANDOOB_NAME, dbo.T_MANDOOB_VISITS.D_DATE, dbo.T_MANDOOB_VISITS.D_TIME, dbo.T_MANDOOB_VISITS.NOTE
FROM        dbo.T_MANDOOB_VISITS LEFT OUTER JOIN
                  dbo.T_MANDOOB ON dbo.T_MANDOOB_VISITS.MANDOOB_CODE = dbo.T_MANDOOB.MANDOOB_CODE LEFT OUTER JOIN
                  dbo.T_USERS ON dbo.T_MANDOOB_VISITS.USER_CODE = dbo.T_USERS.USER_CODE LEFT OUTER JOIN
                  dbo.T_CLIENT ON dbo.T_MANDOOB_VISITS.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE
' 
GO
/****** Object:  View [dbo].[V_OFFERS_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_OFFERS_DETAILS]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_OFFERS_DETAILS]
AS
SELECT     dbo.T_OFFERS_DETAILS.T_ID, dbo.T_OFFERS_DETAILS.ITEM_CODE, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_OFFERS_DETAILS.QTY, dbo.T_OFFERS_DETAILS.PRICE, dbo.T_OFFERS_DETAILS.OFFER_CODE, 
                  dbo.T_OFFER.OFFER_NAME, dbo.T_OFFER.AMO, dbo.T_OFFER.TYPE_NAME, dbo.T_OFFER.START_DATE, dbo.T_OFFER.END_DATE, dbo.T_OFFER.DESCRIPTION, dbo.T_OFFER.TYPE_CH_CODE, dbo.T_OFFER.TYPE_PRICE, dbo.T_TYPE_PRICE_SELL.TYPE_PRICE_NAME
FROM        dbo.T_OFFERS_DETAILS LEFT OUTER JOIN
                  dbo.T_OFFER ON dbo.T_OFFERS_DETAILS.OFFER_CODE = dbo.T_OFFER.OFFER_CODE LEFT OUTER JOIN
                  dbo.T_ITEMS ON dbo.T_OFFERS_DETAILS.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                  dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE LEFT OUTER JOIN
                  dbo.T_TYPE_PRICE_SELL ON dbo.T_OFFER.TYPE_PRICE = dbo.T_TYPE_PRICE_SELL.TYPE_PRICE_CODE
' 
GO
/****** Object:  View [dbo].[V_POINT_BALANCE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_POINT_BALANCE]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_POINT_BALANCE]
AS
SELECT     dbo.T_POINTS.ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME, ISNULL(SUM(dbo.T_POINTS.POINT_BALANCE), 0) AS POINT_BALANCE
FROM        dbo.T_POINTS LEFT OUTER JOIN
                  dbo.T_ACCOUNTS ON dbo.T_POINTS.ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE
GROUP BY dbo.T_POINTS.ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME
' 
GO
/****** Object:  View [dbo].[V_PURCHASE_ORDER]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_PURCHASE_ORDER]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_PURCHASE_ORDER]
AS
SELECT        TOP (100) PERCENT dbo.T_PURCHASE_ORDER.BILL_BRANCH, dbo.T_PURCHASE_ORDER.BILL_NUMBER, dbo.T_PURCHASE_ORDER.BILL_INVOICE, dbo.T_PURCHASE_ORDER.BILL_DATE, dbo.T_PURCHASE_ORDER.CURRANCY_CODE, dbo.T_CURRANNCY.CURRANCY_NAME, 
                         dbo.T_PURCHASE_ORDER.CURRANCY_EQUAL, dbo.T_PURCHASE_ORDER.CLIENT_CODE, dbo.T_PURCHASE_ORDER.CLIENT_NAME, dbo.T_PURCHASE_ORDER.DESCRIPTION, dbo.T_PURCHASE_ORDER.USER_CREATE, dbo.T_PURCHASE_ORDER.SECURETY_CODE, dbo.T_PURCHASE_ORDER.TOTAL_BUY, 
                         dbo.T_PURCHASE_ORDER.TOTAL_EXPENSES, dbo.T_PURCHASE_ORDER.NET_BUY, dbo.T_PURCHASE_ORDER.TOTAL_COST - dbo.T_PURCHASE_ORDER.DISCOUNT_AMOUNT AS TOTAL_COST, dbo.T_PURCHASE_ORDER.IVC_CODE, dbo.T_IVC_TYPE.IVC_NAME, dbo.T_PURCHASE_ORDER.DAY_CASH, 
                         dbo.T_PURCHASE_ORDER.DATE_CASH, dbo.T_PURCHASE_ORDER.TOT_CONV, dbo.T_PURCHASE_ORDER.ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME, dbo.T_PURCHASE_ORDER.CASH_USA, dbo.T_PURCHASE_ORDER.REMAIN_USA, dbo.T_PURCHASE_ORDER.CASH_IQ, dbo.T_PURCHASE_ORDER.REMAIN_IQ, 
                         dbo.T_PURCHASE_ORDER.C_DATE, dbo.T_PURCHASE_ORDER.C_UPDATE, dbo.T_PURCHASE_ORDER.USER_UPDATE, dbo.T_PURCHASE_ORDER.ACTIVE, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_BUSINESS, dbo.T_PURCHASE_ORDER.WAJBA_CODE, dbo.T_WAJBA.WAJBA_NAME, 
                         dbo.T_PURCHASE_ORDER.DISCOUNT_PERCENT, dbo.T_PURCHASE_ORDER.DISCOUNT_AMOUNT, dbo.T_PURCHASE_ORDER.EXP_CASH, dbo.T_PURCHASE_ORDER.EXP_PERCENT, dbo.T_PURCHASE_ORDER.IS_OUT, dbo.T_PURCHASE_ORDER.OFFER_CODE, dbo.T_PURCHASE_ORDER.IS_TRANS, dbo.T_PURCHASE_ORDER.NET_SUPPLIER, 
                         dbo.T_PURCHASE_ORDER.TOTAL_OUT, dbo.T_PURCHASE_ORDER.TOTAL_SUPPLIER, dbo.T_PURCHASE_ORDER.QR_DATA
FROM            dbo.T_PURCHASE_ORDER LEFT OUTER JOIN
                         dbo.T_WAJBA ON dbo.T_PURCHASE_ORDER.WAJBA_CODE = dbo.T_WAJBA.WAJBA_CODE LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.T_PURCHASE_ORDER.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                         dbo.T_ACCOUNTS ON dbo.T_PURCHASE_ORDER.ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.T_IVC_TYPE ON dbo.T_PURCHASE_ORDER.IVC_CODE = dbo.T_IVC_TYPE.IVC_CODE LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.T_PURCHASE_ORDER.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE
WHERE        (dbo.T_PURCHASE_ORDER.ACTIVE = 1) AND (dbo.T_PURCHASE_ORDER.IVC_CODE < 10)
ORDER BY dbo.T_PURCHASE_ORDER.BILL_NUMBER

' 
GO
/****** Object:  View [dbo].[V_REPORT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_REPORT]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_REPORT]
AS
SELECT        ID, RPT_NAME, SCREEN_NAME, FOLDER_PATH, RPT_PATH, RPT_FULL_PATH
FROM            dbo.T_REPORT
WHERE        (ID <= 599) AND (LEN(RTRIM(LTRIM(SCREEN_NAME))) > 0)
' 
GO
/****** Object:  View [dbo].[V_SALES_API]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_API]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_API]
AS
SELECT
    S.BILL_BRANCH,
    S.BILL_NUMBER,
    S.BILL_INVOICE,
    S.BILL_DATE,
    S.OFFER_CODE,
    S.CURRANCY_CODE,
    CUR.CURRANCY_NAME,
    S.CURRANCY_EQUAL,
    S.CLIENT_CODE,
    S.CLIENT_NAME,
    S.CLIENT_PHONE,
    S.CLIENT_ADRESS,
    S.MANDOOB_CODE,
    M.MANDOOB_NAME,
    S.DESCRIPTION,
    S.USER_CREATE,
    S.SECURETY_CODE,
    S.TOTAL_SALES / S.CURRANCY_EQUAL AS TOTAL_SALES,
    S.DISCOUNT_ITEMS / S.CURRANCY_EQUAL AS DISCOUNT_ITEMS,
    S.DISCOUNT_PERCENT,
    S.DISCOUNT_AMOUNT / S.CURRANCY_EQUAL AS DISCOUNT_AMOUNT,
    S.TOTAL_DISCOUNT / S.CURRANCY_EQUAL AS TOTAL_DISCOUNT,
    S.NET_SALES / S.CURRANCY_EQUAL AS NET_SALES,
    S.TOTAL_COST / S.CURRANCY_EQUAL AS TOTAL_COST,
    S.TOTAL_ARBAH / S.CURRANCY_EQUAL AS TOTAL_ARBAH,
    S.IVC_CODE,
    IT.IVC_NAME,
    S.DAY_CASH,
    S.DATE_CASH,
    S.TOT_CONV,
    S.ACCOUNT_CODE,
    A.ACCOUNT_NAME,
    S.CASH_USA,
    S.REMAIN_USA,
    S.CASH_IQ,
    S.REMAIN_IQ,
    S.C_DATE,
    S.C_UPDATE,
    S.USER_UPDATE,
    S.ACTIVE,
    CL.CLIENT_REGION,
    CL.CLIENT_BUSINESS,
    DATEDIFF(DAY, S.DATE_CASH, GETDATE()) AS CASH_DIFF,
    M.MANDOOB_PERCENT,
    S.FLAG_CASH,
    S.IS_OUT,
    S.IS_TRANS,
    S.CENTER_CODE,
    S.QR_DATA,
    S.ITEM_ID_PAYMENT,
    S.TAG_PROCCESS_CODE,
    TP.TAG_PROCCESS_NAME,
    S.LINK_ID_PAYMENT,
    S.BILL_RETURN,
    S.BILL_SANAD_CNY,
    S.CNY_IQ,
    S.IS_PREPARE,
    S.DRIVER_CODE,
    S.LAT,
    S.LNG,
    S.STATUS_SHIPING,
    S.MOVE_CODE,
    S.BILL_ORDER,
    S.TOTAL_TAX_ITEM / S.CURRANCY_EQUAL AS TOTAL_TAX_ITEM,
    S.TOTAL_MANDOOB_ITEM / S.CURRANCY_EQUAL AS TOTAL_MANDOOB_ITEM,
    S.TOTAL_ADD_COST / S.CURRANCY_EQUAL AS TOTAL_ADD_COST,
    S.TOTAL_ADD_AMO / S.CURRANCY_EQUAL AS TOTAL_ADD_AMO,
    S.SHIP_CODE,
    S.COST_SHIP,
    S.IS_POINT,
    S.COST_SHIP_CLIENT,
    S.USER_TAG_CODE,
    S.RELATION_BILL_CODE,
    S.RELATION_B_CODE,
    S.REGION_CODE,
    S.COL_INT1,
    S.COL_INT2,
    S.COL_INT3,
    S.COL_STR1,
    S.COL_STR2,
    S.COL_STR3,
    S.IS_PDF,
    S.PATH_PDF,
    S.PATH_PDF_API,
    S.ZONE_CODE,
    Z.ZONE_NAME,
    Z.ZONE_COLOR
FROM
    dbo.T_SALES S
    LEFT JOIN dbo.T_SALES_ZONE Z ON S.ZONE_CODE = Z.ZONE_CODE
    LEFT JOIN dbo.T_CLIENT CL ON S.CLIENT_CODE = CL.CLIENT_CODE
    LEFT JOIN dbo.T_ACCOUNTS A ON S.ACCOUNT_CODE = A.ACCOUNT_CODE
    LEFT JOIN dbo.T_TYPE_PRICE_SELL TPS ON S.TYPE_PRICE_SELL = TPS.TYPE_PRICE_CODE
    LEFT JOIN dbo.T_IVC_TYPE IT ON S.IVC_CODE = IT.IVC_CODE
    LEFT JOIN dbo.T_MANDOOB M ON S.MANDOOB_CODE = M.MANDOOB_CODE
    LEFT JOIN dbo.T_CURRANNCY CUR ON S.CURRANCY_CODE = CUR.CURRANCY_CODE
    LEFT JOIN dbo.T_TAG_PROCCESS TP ON S.TAG_PROCCESS_CODE = TP.TAG_PROCCESS_CODE
WHERE
    S.ACTIVE = 1
' 
GO
/****** Object:  View [dbo].[V_SALES_DATE_CASH]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DATE_CASH]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_DATE_CASH]
AS
SELECT
    S.BILL_BRANCH,
    S.BILL_NUMBER,
    S.BILL_INVOICE,
    S.BILL_DATE,
    S.OFFER_CODE,
    S.CURRANCY_CODE,
    CUR.CURRANCY_NAME,
    S.CURRANCY_EQUAL,
    S.CLIENT_CODE,
    S.CLIENT_NAME,
    S.CLIENT_PHONE,
    S.CLIENT_ADRESS,
    S.MANDOOB_CODE,
    M.MANDOOB_NAME,
    S.DESCRIPTION,
    S.USER_CREATE,
    S.SECURETY_CODE,
    S.TOTAL_SALES / S.CURRANCY_EQUAL AS TOTAL_SALES,
    S.DISCOUNT_ITEMS / S.CURRANCY_EQUAL AS DISCOUNT_ITEMS,
    S.DISCOUNT_PERCENT,
    S.DISCOUNT_AMOUNT / S.CURRANCY_EQUAL AS DISCOUNT_AMOUNT,
    S.TOTAL_DISCOUNT / S.CURRANCY_EQUAL AS TOTAL_DISCOUNT,
    S.NET_SALES / S.CURRANCY_EQUAL AS NET_SALES,
    S.TOTAL_COST / S.CURRANCY_EQUAL AS TOTAL_COST,
    S.TOTAL_ARBAH / S.CURRANCY_EQUAL AS TOTAL_ARBAH,
    S.IVC_CODE,
    IT.IVC_NAME,
    S.DAY_CASH,
    S.DATE_CASH,
    S.TOT_CONV,
    S.ACCOUNT_CODE,
    A.ACCOUNT_NAME,
    S.CASH_USA,
    S.REMAIN_USA,
    S.CASH_IQ,
    S.REMAIN_IQ,
    S.C_DATE,
    S.C_UPDATE,
    S.USER_UPDATE,
    S.ACTIVE,
    CL.CLIENT_REGION,
    CL.CLIENT_BUSINESS,
    DATEDIFF(DAY, S.DATE_CASH, GETDATE()) AS CASH_DIFF
FROM
    dbo.T_SALES S
    LEFT JOIN dbo.T_CLIENT CL ON S.CLIENT_CODE = CL.CLIENT_CODE
    LEFT JOIN dbo.T_ACCOUNTS A ON S.ACCOUNT_CODE = A.ACCOUNT_CODE
    LEFT JOIN dbo.T_TYPE_PRICE_SELL TPS ON S.TYPE_PRICE_SELL = TPS.TYPE_PRICE_CODE
    LEFT JOIN dbo.T_IVC_TYPE IT ON S.IVC_CODE = IT.IVC_CODE
    LEFT JOIN dbo.T_MANDOOB M ON S.MANDOOB_CODE = M.MANDOOB_CODE
    LEFT JOIN dbo.T_CURRANNCY CUR ON S.CURRANCY_CODE = CUR.CURRANCY_CODE
WHERE
    S.ACTIVE = 1
    AND S.IVC_CODE = 4
    AND S.DAY_CASH <> 0
' 
GO
/****** Object:  View [dbo].[V_SALES_DETAILS_RETURN]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DETAILS_RETURN]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_DETAILS_RETURN]
AS
SELECT
    S.BILL_BRANCH,
    S.BILL_NUMBER,
    CONVERT(NVARCHAR(12), S.BILL_NUMBER) AS BILL_STR,
    S.BILL_INVOICE,
    S.BILL_DATE,
    S.CLIENT_CODE,
    S.CLIENT_NAME,
    S.CLIENT_PHONE,
    S.CLIENT_ADRESS,
    S.MANDOOB_CODE,
    M.MANDOOB_NAME,
    M.MANDOOB_PERCENT,
    S.DESCRIPTION,
    S.USER_CREATE,
    SD.QTY,
    SD.UNIT_NAME,
    SD.UNIT_QTY,
    SD.STORE_CODE,
    ST.STORE_NAME,
    SD.WAJBA_CODE,
    SD.WAJBA_NAME,
    SD.WAJBA_BALANCE,
    SD.CURRANCY_CODE,
    SD.CURRANCY_EQUAL,
    SD.COST / SD.CURRANCY_EQUAL AS COST,
    SD.PRICE / SD.CURRANCY_EQUAL AS PRICE,
    SD.TOTAL / SD.CURRANCY_EQUAL AS TOTAL,
    SD.DISCOUNT_PERCENT_ITEM,
    SD.DISCOUNT_AMOUNT_ITEM / SD.CURRANCY_EQUAL AS DISCOUNT_AMOUNT_ITEM,
    SD.TAX_PERCENT_ITEM,
    SD.TAX_AMO_ITEM / SD.CURRANCY_EQUAL AS TAX_AMO_ITEM,
    SD.MANDOOB_PERCENT_ITEM,
    SD.MANDOOB_AMO_ITEM / SD.CURRANCY_EQUAL AS MANDOOB_AMO_ITEM,
    SD.TOTAL_TAX_ITEM / SD.CURRANCY_EQUAL AS TOTAL_TAX_ITEM,
    SD.TOTAL_MANDOOB_ITEM / SD.CURRANCY_EQUAL AS TOTAL_MANDOOB_ITEM,
    SD.TOTAL_COST / SD.CURRANCY_EQUAL AS TOTAL_COST,
    SD.NET_TOTAL / SD.CURRANCY_EQUAL AS NET_TOTAL,
    SD.ARBAH_ITEM / SD.CURRANCY_EQUAL AS ARBAH_ITEM,
    SD.C_DATE,
    S.ACTIVE,
    S.IVC_CODE,
    IT.IVC_NAME,
    SD.ITEM_CODE,
    SD.ITEM_NAME,
    I.ITEM_BARCODE AS ITEM_SIGN,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    I.TYPE_CODE,
    ITY.TYPE_NAME,
    SD.DISCOUNT_TYPE,
    SD.USER_CUT,
    SD.USER_PREPARE,
    SD.IS_PRINT,
    SD.NOTE_PRINT,
    SD.TOTAL_DISCOUNT / SD.CURRANCY_EQUAL AS TOTAL_DISCOUNT,
    I.KIND_NAME
FROM
    dbo.T_SALES S
    INNER JOIN dbo.T_SALES_DETAILS SD ON S.BILL_NUMBER = SD.BILL_NUMBER
    LEFT JOIN dbo.T_ITEMS I ON SD.ITEM_CODE = I.ITEM_CODE
    LEFT JOIN dbo.T_IVC_TYPE IT ON S.IVC_CODE = IT.IVC_CODE
    LEFT JOIN dbo.T_MANDOOB M ON S.MANDOOB_CODE = M.MANDOOB_CODE
    LEFT JOIN dbo.T_CURRANNCY CUR ON SD.CURRANCY_CODE = CUR.CURRANCY_CODE
    LEFT JOIN dbo.T_STORE_TYPE ST ON SD.STORE_CODE = ST.STORE_CODE
    LEFT JOIN dbo.T_ITEM_TYPE ITY ON I.TYPE_CODE = ITY.TYPE_CODE
    LEFT JOIN dbo.T_ITEM_CATEGORY IC ON I.CATEGORY_CODE = IC.CATEGORY_CODE
WHERE
    S.ACTIVE = 1
    AND S.IVC_CODE < 10
    AND SD.NET_TOTAL / NULLIF(SD.CURRANCY_EQUAL, 0) < 0
' 
GO
/****** Object:  View [dbo].[V_SALES_DIRECT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DIRECT]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_DIRECT]
AS
SELECT
    SD.BILL_NUMBER,
    SD.BILL_INVOICE,
    SD.BILL_DATE,
    SD.BILL_TIME,
    SD.OFFER_CODE,
    SD.CURRANCY_CODE,
    CUR.CURRANCY_NAME,
    SD.CURRANCY_EQUAL,
    SD.ACCOUNT_CODE,
    ACC.ACCOUNT_NAME,
    SD.SUPPLIER_CODE,
    SD.BOX_SUPPLIER,
    SD.CLIENT_CODE,
    SD.CLIENT_NAME,
    SD.CLIENT_PHONE,
    SD.CLIENT_ADRESS,
    SD.USER_CREATE,
    SD.BOX_CLIENT,
    SD.SECURETY_CODE,
    SD.DESCRIPTION,
    SD.BUY_DISC_PERCENT,
    SD.SELL_DISC_PERCENT,
    SD.TOTAL_BUY,
    SD.TOTAL_SELL,
    SD.TOTAL_EXPENSES,
    SD.TOTAL_ARBAH,
    SD.TOTAL_CASH,
    SD.TOTAL_REMAIN,
    SD.C_DATE,
    SD.C_UPDATE,
    SD.USER_UPDATE,
    SD.TAG_PROCCESS_CODE,
    TP.TAG_PROCCESS_NAME,
    SD.TR_DATE,
    SD.IS_PREPARE,
    SD.IS_CHECKED,
    SD.DRIVER_CODE,
    DR.DRIVER_NAME,
    SD.GUIDS,
    SD.ACTIVE
FROM
    dbo.T_SALES_DIRECT SD
    LEFT JOIN dbo.T_ACCOUNTS ACC ON SD.ACCOUNT_CODE = ACC.ACCOUNT_CODE
    LEFT JOIN dbo.T_CURRANNCY CUR ON SD.CURRANCY_CODE = CUR.CURRANCY_CODE
    LEFT JOIN dbo.T_DRIVERS DR ON SD.DRIVER_CODE = DR.DRIVER_CODE
    LEFT JOIN dbo.T_TAG_PROCCESS TP ON SD.TAG_PROCCESS_CODE = TP.TAG_PROCCESS_CODE
WHERE
    SD.ACTIVE = 1
' 
GO
/****** Object:  View [dbo].[V_SALES_DIRECT_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_DIRECT_DETAILS]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_DIRECT_DETAILS]
AS
SELECT
    SD.T_ID,
    SD.BILL_NUMBER,
    SD.BILL_DATE,
    SD.USER_CREATE,
    SD.ITEM_CODE,
    SD.ITEM_NAME,
    SD.QTY,
    SD.UNIT_NAME,
    SD.DESCRIPTION,
    SD.SUPPLIER_CODE,
    ACC_SUPPLIER.ACCOUNT_NAME AS SUPPLIER_NAME,
    SD.BOX_BUY,
    SD.BUY_CURRANCY_CODE,
    CUR_BUY.CURRANCY_NAME AS BUY_CURRANCY_NANE,
    SD.BUY_CURRANCY_EQUAL,
    SD.BUY_CURRANCY_EQUAL_SYS,
    SD.PRICE_BUY,
    SD.TAX,
    SD.FARE,
    SD.PNR,
    SD.PAX_NAME,
    SD.PASSPORT_NO,
    SD.BUY,
    SD.BUY_DISC_PERCENT,
    SD.BUY_DISC_AMO,
    SD.NET_BUY,
    SD.BUY_IVC_CODE,
    IVC_BUY.IVC_NAME AS BUY_IVC_NAME,
    SD.BUY_CASH,
    SD.BUY_REMAIN,
    SD.TICKET_NO,
    SD.ROUTE,
    SD.CLIENT_CODE,
    ACC_CLIENT.ACCOUNT_NAME AS CLIENT_NAME,
    SD.BOX_SELL,
    SD.SELL_CURRANCY_CODE,
    CUR_SELL.CURRANCY_NAME AS SELL_CURRANCY_NAME,
    SD.SELL_CURRANCY_EQUAL,
    SD.SELL_CURRANCY_EQUAL_SYS,
    SD.PRICE_SELL,
    SD.ADD_MINUS_AMO,
    SD.SELL,
    SD.SELL_DISC_PERCENT,
    SD.SELL_DISC_AMO,
    SD.NET_SELL,
    SD.SELL_CASH,
    SD.SELL_REMAIN,
    SD.EXPENSES,
    SD.ARBAH,
    SD.TR_DATE,
    SD.IS_CHECKED,
    SD.GUIDS,
    SD.ACTIVE,
    SD.C_DATE,
    SD.C_UPDATE,
    SD.USER_UPDATE,
    SD.SELL_IVC_CODE,
    IVC_SELL.IVC_NAME AS SELL_IVC_NAME
FROM
    dbo.T_SALES_DIRECT_DETAILS SD
    LEFT JOIN dbo.T_ACCOUNTS ACC_SUPPLIER ON SD.SUPPLIER_CODE = ACC_SUPPLIER.ACCOUNT_CODE
    LEFT JOIN dbo.T_ACCOUNTS ACC_CLIENT ON SD.CLIENT_CODE = ACC_CLIENT.ACCOUNT_CODE
    LEFT JOIN dbo.T_CURRANNCY CUR_BUY ON SD.BUY_CURRANCY_CODE = CUR_BUY.CURRANCY_CODE
    LEFT JOIN dbo.T_CURRANNCY CUR_SELL ON SD.SELL_CURRANCY_CODE = CUR_SELL.CURRANCY_CODE
    LEFT JOIN dbo.T_IVC_TYPE IVC_BUY ON SD.BUY_IVC_CODE = IVC_BUY.IVC_CODE
    LEFT JOIN dbo.T_IVC_TYPE IVC_SELL ON SD.SELL_IVC_CODE = IVC_SELL.IVC_CODE
' 
GO
/****** Object:  View [dbo].[V_SALES_EXPENSES]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_EXPENSES]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_EXPENSES]
AS
SELECT
    SE.T_ID_SALES,
    SE.BILL_NUMBER,
    SE.BILL_DATE,
    SE.BILL_TIME,
    SE.BUY_ACCOUNT_CODE,
    ACC_BUY.ACCOUNT_NAME AS BUY_ACCOUNT_NAME,
    SE.BUY_EXP_CUR,
    SE.BUY_CURRANCY_CODE,
    SE.BUY_CURRANCY_EQUAL,
    SE.BUY_TOT_EXP,
    SE.SELL_ACCOUNT_CODE,
    ACC_SELL.ACCOUNT_NAME AS SELL_ACCOUNT_NAME,
    SE.SELL_EXP_CUR,
    SE.SELL_CURRANCY_CODE,
    SE.SELL_CURRANCY_EQUAL,
    SE.SELL_TOT_EXP,
    SE.NOTE,
    SE.USER_C,
    SE.C_DATE,
    SE.BILL_SALES
FROM
    dbo.T_SALES_EXPENSES SE
    LEFT JOIN dbo.T_ACCOUNTS ACC_SELL ON SE.SELL_ACCOUNT_CODE = ACC_SELL.ACCOUNT_CODE
    LEFT JOIN dbo.T_ACCOUNTS ACC_BUY ON SE.BUY_ACCOUNT_CODE = ACC_BUY.ACCOUNT_CODE
' 
GO
/****** Object:  View [dbo].[V_SALES_FRUIT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_FRUIT]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_FRUIT]
AS
SELECT
    SF.BILL_NUMBER,
    SF.BILL_INVOICE,
    SF.BILL_DATE,
    SF.OFFER_CODE,
    SF.CURRANCY_CODE,
    CUR.CURRANCY_NAME,
    SF.CURRANCY_EQUAL,
    SF.CLIENT_CODE,
    SF.CLIENT_NAME,
    SF.CLIENT_PHONE,
    SF.CLIENT_ADRESS,
    SF.USER_CREATE,
    SF.SECURETY_CODE,
    SF.DESCRIPTION,
    SF.TOTAL,
    SF.EMPOLA_PERCENT,
    SF.EMPOLA,
    SF.HAMALIA,
    SF.NET_TOTAL,
    SF.TOT_W,
    SF.TOT_N,
    SF.C_DATE,
    SF.C_UPDATE,
    SF.USER_UPDATE,
    SF.TAG_PROCCESS_CODE,
    TP.TAG_PROCCESS_NAME,
    SF.DRIVER_CODE,
    DR.DRIVER_NAME,
    SF.ACTIVE
FROM
    dbo.T_SALES_FRUIT SF
    LEFT JOIN dbo.T_CURRANNCY CUR ON SF.CURRANCY_CODE = CUR.CURRANCY_CODE
    LEFT JOIN dbo.T_TAG_PROCCESS TP ON SF.TAG_PROCCESS_CODE = TP.TAG_PROCCESS_CODE
    LEFT JOIN dbo.T_DRIVERS DR ON SF.DRIVER_CODE = DR.DRIVER_CODE
WHERE
    SF.ACTIVE = 1
' 
GO
/****** Object:  View [dbo].[V_SALES_INVOICE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_INVOICE]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_INVOICE]
AS
SELECT
    S.BILL_BRANCH,
    S.BILL_NUMBER,
    S.BILL_INVOICE,
    S.BILL_DATE,
    S.OFFER_CODE,
    S.CURRANCY_CODE,
    CUR.CURRANCY_NAME,
    S.CURRANCY_EQUAL,
    S.CLIENT_CODE,
    S.CLIENT_NAME,
    S.CLIENT_PHONE,
    S.CLIENT_ADRESS,
    S.MANDOOB_CODE,
    M.MANDOOB_NAME,
    S.DESCRIPTION,
    S.USER_CREATE,
    S.SECURETY_CODE,
    S.TOTAL_SALES,
    S.DISCOUNT_ITEMS,
    S.DISCOUNT_PERCENT,
    S.DISCOUNT_AMOUNT,
    S.TOTAL_DISCOUNT,
    S.NET_SALES,
    S.TOTAL_COST,
    S.TOTAL_ARBAH,
    S.IVC_CODE,
    IT.IVC_NAME,
    S.DAY_CASH,
    S.DATE_CASH,
    S.TOT_CONV,
    S.ACCOUNT_CODE,
    A.ACCOUNT_NAME,
    S.CASH_USA,
    S.REMAIN_USA,
    S.CASH_IQ,
    S.REMAIN_IQ,
    S.C_DATE,
    S.C_UPDATE,
    S.USER_UPDATE,
    S.ACTIVE,
    CL.CLIENT_REGION,
    CL.CLIENT_BUSINESS,
    DATEDIFF(DAY, S.DATE_CASH, GETDATE()) AS CASH_DIFF,
    S.QR_DATA,
    S.ITEM_ID_PAYMENT,
    S.TAG_PROCCESS_CODE,
    S.LINK_ID_PAYMENT,
    S.BILL_RETURN,
    S.BILL_SANAD_CNY,
    S.CNY_IQ,
    S.IS_PREPARE,
    S.DRIVER_CODE,
    S.LAT,
    S.LNG,
    S.STATUS_SHIPING,
    S.MOVE_CODE,
    S.BILL_ORDER,
    S.TOTAL_TAX_ITEM,
    S.TOTAL_MANDOOB_ITEM,
    S.TOTAL_ADD_COST,
    S.TOTAL_ADD_AMO,
    DR.DRIVER_NAME,
    S.SHIP_CODE,
    SS.SHIP_NAME,
    S.COST_SHIP,
    S.IS_POINT,
    S.COST_SHIP_CLIENT,
    S.USER_TAG_CODE,
    S.RELATION_BILL_CODE,
    S.RELATION_B_CODE,
    S.REGION_CODE,
    RS.REGION_NAME,
    S.COL_INT1,
    S.COL_INT2,
    S.COL_INT3,
    S.COL_STR1,
    S.COL_STR2,
    S.COL_STR3,
    S.IS_PDF,
    S.PATH_PDF,
    S.PATH_PDF_API,
    S.ZONE_CODE,
    Z.ZONE_NAME,
    Z.ZONE_COLOR,
    TP.TAG_PROCCESS_NAME
FROM
    dbo.T_SALES S
    LEFT JOIN dbo.T_TAG_PROCCESS TP ON S.TAG_PROCCESS_CODE = TP.TAG_PROCCESS_CODE
    LEFT JOIN dbo.T_REGION_SHIP RS ON S.REGION_CODE = RS.REGION_CODE
    LEFT JOIN dbo.T_SALES_ZONE Z ON S.ZONE_CODE = Z.ZONE_CODE
    LEFT JOIN dbo.T_SALES_SHIPPING SS ON S.SHIP_CODE = SS.SHIP_CODE
    LEFT JOIN dbo.T_DRIVERS DR ON S.DRIVER_CODE = DR.DRIVER_CODE
    LEFT JOIN dbo.T_CLIENT CL ON S.CLIENT_CODE = CL.CLIENT_CODE
    LEFT JOIN dbo.T_ACCOUNTS A ON S.ACCOUNT_CODE = A.ACCOUNT_CODE
    LEFT JOIN dbo.T_TYPE_PRICE_SELL TPS ON S.TYPE_PRICE_SELL = TPS.TYPE_PRICE_CODE
    LEFT JOIN dbo.T_IVC_TYPE IT ON S.IVC_CODE = IT.IVC_CODE
    LEFT JOIN dbo.T_MANDOOB M ON S.MANDOOB_CODE = M.MANDOOB_CODE
    LEFT JOIN dbo.T_CURRANNCY CUR ON S.CURRANCY_CODE = CUR.CURRANCY_CODE
WHERE
    S.ACTIVE = 1
' 
GO
/****** Object:  View [dbo].[V_SALES_INVOICE_80]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_INVOICE_80]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_INVOICE_80]
AS
SELECT
    S.BILL_BRANCH,
    S.BILL_NUMBER,
    S.BILL_INVOICE,
    S.BILL_DATE,
    S.CLIENT_CODE,
    S.CLIENT_NAME,
    S.CLIENT_PHONE,
    S.CLIENT_ADRESS,
    S.DESCRIPTION,
    S.USER_CREATE,
    S.TOTAL_SALES,
    S.TOTAL_DISCOUNT,
    S.NET_SALES,
    S.IVC_CODE,
    IT.IVC_NAME,
    S.CASH_USA,
    S.REMAIN_USA,
    S.CASH_IQ,
    S.REMAIN_IQ,
    S.C_DATE,
    S.C_UPDATE,
    S.USER_UPDATE,
    S.ACTIVE,
    DATEDIFF(DAY, S.DATE_CASH, GETDATE()) AS CASH_DIFF,
    S.CNY_IQ,
    S.BILL_ORDER
FROM
    dbo.T_SALES S
    LEFT JOIN dbo.T_IVC_TYPE IT ON S.IVC_CODE = IT.IVC_CODE
WHERE
    S.ACTIVE = 1
' 
GO
/****** Object:  View [dbo].[V_SALES_INVOICE_DETAILS_80]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_INVOICE_DETAILS_80]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_INVOICE_DETAILS_80]
AS
SELECT
    SD.T_ID,
    S.BILL_NUMBER,
    S.BILL_BRANCH,
    CONVERT(NVARCHAR(12), S.BILL_NUMBER) AS BILL_STR,
    S.BILL_INVOICE,
    SUM(SD.QTY) AS QTY,
    SD.UNIT_NAME,
    SD.UNIT_QTY,
    IIF(SUM(SD.QTY) = 0, 0, SUM(SD.TOTAL) / SUM(SD.QTY)) AS PRICE,
    SUM(SD.TOTAL) AS TOTAL,
    SUM(SD.NET_TOTAL) AS NET_TOTAL,
    SD.ITEM_CODE,
    I.TYPE_CODE,
    SD.ITEM_NAME
FROM
    dbo.T_SALES S
    INNER JOIN dbo.T_SALES_DETAILS SD ON S.BILL_BRANCH = SD.BILL_BRANCH
    LEFT JOIN dbo.T_ITEMS I ON SD.ITEM_CODE = I.ITEM_CODE
WHERE
    S.ACTIVE = 1
GROUP BY
    SD.T_ID,
    S.BILL_NUMBER,
    S.BILL_BRANCH,
    CONVERT(NVARCHAR(12), S.BILL_NUMBER),
    S.BILL_INVOICE,
    SD.UNIT_NAME,
    SD.UNIT_QTY,
    SD.ITEM_NAME,
    I.TYPE_CODE,
    SD.ITEM_CODE
' 
GO
/****** Object:  View [dbo].[V_SALES_INVOICE_DETAILS_INFO]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_INVOICE_DETAILS_INFO]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_INVOICE_DETAILS_INFO]
AS

SELECT
    S.BILL_NUMBER,
    CONVERT(NVARCHAR(12), S.BILL_NUMBER) AS BILL_STR,
    S.BILL_INVOICE,
    S.BILL_DATE,
    S.CLIENT_CODE,
    S.CLIENT_NAME,
    S.CLIENT_PHONE,
    S.CLIENT_ADRESS,
    S.MANDOOB_CODE,
    M.MANDOOB_NAME,
    M.MANDOOB_PERCENT,
    S.DESCRIPTION,
    S.USER_CREATE,

    SD.QTY,
    SD.UNIT_NAME,
    SD.UNIT_QTY,
    SD.STORE_CODE,
    ST.STORE_NAME,
    SD.WAJBA_CODE,
    SD.WAJBA_NAME,
    SD.CURRANCY_CODE,
    SD.CURRANCY_EQUAL,
    SD.COST,
    SD.PRICE,
    SD.TOTAL,
    SD.DISCOUNT_PERCENT_ITEM,
    SD.DISCOUNT_AMOUNT_ITEM,
    SD.TOTAL_COST,
    SD.NET_TOTAL,
    SD.ARBAH_ITEM,
    SD.C_DATE,
    S.ACTIVE,
    S.IVC_CODE,
    IV.IVC_NAME,
    SD.ITEM_CODE,
    SD.ITEM_NAME,
    IT.ITEM_BARCODE AS ITEM_SIGN,
    IT.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    IT.TYPE_CODE,
    TT.TYPE_NAME,
    SD.T_ID,
    SD.BILL_BRANCH,
    IT.CLIENT_NAME_BEST,
    IT.RAF_NAME,
    SD.DISCOUNT_TYPE,
    SD.USER_CUT,
    SD.USER_PREPARE,
    SD.IS_PRINT,
    SD.NOTE_PRINT,
    SD.TOTAL_DISCOUNT,
    S.QR_DATA,

    SD.TAX_PERCENT_ITEM,
    SD.TAX_AMO_ITEM,
    SD.MANDOOB_PERCENT_ITEM,
    SD.MANDOOB_AMO_ITEM,
    SD.TOTAL_TAX_ITEM,
    SD.TOTAL_MANDOOB_ITEM,
    SD.IS_ITEM_AREA,
    SD.WIDTH_CM,
    SD.LENGTH_CM,
    SD.AREA_M2,
    SD.QTY_AREA,
    SD.QTY_XZ,
    SD.UNIT_QTY_XZ,
    SD.QTY_X1,
    SD.UNIT_QTY_X1,
    SD.QTY_XY,
    SD.UNIT_QTY_XY,
    SD.QTY_FREE,
    SD.TOTAL_QTY,
    IT.KIND_NAME,
    SD.TOTAL_POINTS

FROM
    dbo.T_SALES           AS S
    INNER JOIN dbo.T_SALES_DETAILS AS SD ON S.BILL_NUMBER = SD.BILL_NUMBER
    LEFT JOIN  dbo.T_ITEMS         AS IT ON SD.ITEM_CODE = IT.ITEM_CODE
    LEFT JOIN  dbo.T_IVC_TYPE      AS IV ON S.IVC_CODE = IV.IVC_CODE
    LEFT JOIN  dbo.T_MANDOOB       AS M  ON S.MANDOOB_CODE = M.MANDOOB_CODE
    LEFT JOIN  dbo.T_CURRANNCY     AS CR ON SD.CURRANCY_CODE = CR.CURRANCY_CODE
    LEFT JOIN  dbo.T_STORE_TYPE    AS ST ON SD.STORE_CODE = ST.STORE_CODE
    LEFT JOIN  dbo.T_ITEM_TYPE     AS TT ON IT.TYPE_CODE = TT.TYPE_CODE
    LEFT JOIN  dbo.T_ITEM_CATEGORY AS IC ON IT.CATEGORY_CODE = IC.CATEGORY_CODE

WHERE
    S.ACTIVE = 1
-- لا تضع ORDER BY داخل الفيو أبداً

' 
GO
/****** Object:  View [dbo].[V_SALES_INVOICE_DETAILS_KIMASH]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_INVOICE_DETAILS_KIMASH]'))
EXEC dbo.sp_executesql @statement = N'






CREATE VIEW [dbo].[V_SALES_INVOICE_DETAILS_KIMASH]
AS
SELECT        TOP (100) PERCENT CONVERT(NVARCHAR(12), dbo.T_SALES.BILL_NUMBER) AS BILL_STR, dbo.T_SALES.BILL_INVOICE, dbo.T_SALES.BILL_DATE, dbo.T_SALES.CLIENT_CODE, dbo.T_SALES.CLIENT_NAME, 
                         dbo.T_SALES.CLIENT_PHONE, dbo.T_SALES.CLIENT_ADRESS, dbo.T_SALES.MANDOOB_CODE, dbo.T_MANDOOB.MANDOOB_NAME, dbo.T_MANDOOB.MANDOOB_PERCENT, dbo.T_SALES.DESCRIPTION, 
                         dbo.T_SALES.USER_CREATE, SUM(dbo.T_SALES_DETAILS.QTY) AS QTY, dbo.T_SALES_DETAILS.UNIT_NAME, dbo.T_SALES_DETAILS.UNIT_QTY, dbo.T_SALES_DETAILS.STORE_CODE, dbo.T_STORE_TYPE.STORE_NAME, 
                         dbo.T_SALES_DETAILS.WAJBA_CODE, dbo.T_SALES_DETAILS.WAJBA_NAME, dbo.T_SALES_DETAILS.CURRANCY_CODE, dbo.T_SALES_DETAILS.CURRANCY_EQUAL, SUM(dbo.T_SALES_DETAILS.COST) AS COST, 
                         IIF(SUM(dbo.T_SALES_DETAILS.QTY)=0,0,SUM(dbo.T_SALES_DETAILS.TOTAL) / SUM(dbo.T_SALES_DETAILS.QTY)) AS PRICE, SUM(dbo.T_SALES_DETAILS.TOTAL) AS TOTAL, SUM(dbo.T_SALES_DETAILS.DISCOUNT_PERCENT_ITEM) AS DISCOUNT_PERCENT_ITEM, 
                         SUM(dbo.T_SALES_DETAILS.DISCOUNT_AMOUNT_ITEM) AS DISCOUNT_AMOUNT_ITEM, SUM(dbo.T_SALES_DETAILS.TOTAL_COST) AS TOTAL_COST, SUM(dbo.T_SALES_DETAILS.NET_TOTAL) AS NET_TOTAL, 
                         SUM(dbo.T_SALES_DETAILS.ARBAH_ITEM) AS ARBAH_ITEM, MAX(dbo.T_SALES_DETAILS.C_DATE) AS C_DATE, dbo.T_SALES.ACTIVE, dbo.T_SALES.IVC_CODE, dbo.T_IVC_TYPE.IVC_NAME, dbo.T_SALES_DETAILS.ITEM_CODE, 
                         dbo.T_SALES_DETAILS.ITEM_NAME, dbo.T_ITEMS.ITEM_BARCODE AS ITEM_SIGN, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_ITEMS.TYPE_CODE, dbo.T_ITEM_TYPE.TYPE_NAME, 
                         dbo.T_SALES_DETAILS.T_ID, dbo.T_SALES_DETAILS.BILL_BRANCH, dbo.T_SALES.BILL_NUMBER, dbo.T_ITEMS.ITEM_NOTE, dbo.T_SALES_DETAILS.ITEM_NOTE_SALES, dbo.T_ITEMS.RAF_NAME, 
                         dbo.T_ITEMS.CLIENT_NAME_BEST, dbo.T_SALES_DETAILS.DISCOUNT_TYPE, dbo.T_SALES_DETAILS.USER_CUT, dbo.T_SALES_DETAILS.USER_PREPARE, dbo.T_SALES_DETAILS.IS_PRINT, 
                         dbo.T_SALES_DETAILS.NOTE_PRINT, SUM(dbo.T_SALES_DETAILS.TOTAL_DISCOUNT ) AS TOTAL_DISCOUNT
						 ,dbo.T_SALES_DETAILS.TAX_PERCENT_ITEM, 
						  SUM(dbo.T_SALES_DETAILS.TAX_AMO_ITEM) AS TAX_AMO_ITEM, 
						 dbo.T_SALES_DETAILS.MANDOOB_PERCENT_ITEM, 
						  SUM(dbo.T_SALES_DETAILS.MANDOOB_AMO_ITEM ) AS MANDOOB_AMO_ITEM, 
						    SUM(dbo.T_SALES_DETAILS.TOTAL_TAX_ITEM ) AS TOTAL_TAX_ITEM, 
							 SUM(dbo.T_SALES_DETAILS.TOTAL_MANDOOB_ITEM ) AS TOTAL_MANDOOB_ITEM, 
							 
                             (SELECT        TOP (1) EXP_DATE
                               FROM            dbo.T_BUY_DETAILS
                               WHERE        (ITEM_CODE = dbo.T_SALES_DETAILS.ITEM_CODE) AND (BILL_NUMBER = dbo.T_SALES_DETAILS.BILL_BUY)) AS EXP_DATE, dbo.T_SALES.QR_DATA, dbo.T_ITEMS.IMG_URL, dbo.T_ITEMS.QTY_AKSAT
							   , dbo.T_SALES_DETAILS.IS_ITEM_AREA, dbo.T_SALES_DETAILS.WIDTH_CM, 
                  dbo.T_SALES_DETAILS.LENGTH_CM, dbo.T_SALES_DETAILS.AREA_M2, dbo.T_SALES_DETAILS.QTY_AREA, dbo.T_SALES_DETAILS.QTY_XZ, dbo.T_SALES_DETAILS.UNIT_QTY_XZ, dbo.T_SALES_DETAILS.QTY_X1, dbo.T_SALES_DETAILS.UNIT_QTY_X1, dbo.T_SALES_DETAILS.QTY_XY, 
                  dbo.T_SALES_DETAILS.UNIT_QTY_XY
				  , dbo.T_SALES_DETAILS.NOTE_PRINT_2, dbo.T_SALES_DETAILS.K_STORE_ITEM_CODE, dbo.T_SALES_DETAILS.K_STORE_COST, dbo.T_SALES_DETAILS.K_STORE_SELL, 
                  dbo.T_SALES_DETAILS.K_PRINT_ITEM_CODE, dbo.T_SALES_DETAILS.K_PRINT_COST, dbo.T_SALES_DETAILS.K_PRINT_SELL, dbo.T_SALES_DETAILS.K_MODEL_ITEM_CODE, dbo.T_SALES_DETAILS.K_MODEL_COST, dbo.T_SALES_DETAILS.K_MODEL_SELL, 
                  dbo.T_SALES_DETAILS.K_MOTOR_ITEM_CODE, dbo.T_SALES_DETAILS.K_MOTOR_COST, dbo.T_SALES_DETAILS.K_MOTOR_SELL, dbo.T_SALES_DETAILS.K_HABEL_ITEM_CODE, dbo.T_SALES_DETAILS.K_HABEL_COST, dbo.T_SALES_DETAILS.K_HABEL_SELL
				  ,dbo.T_SALES_DETAILS.[K_STORE_TOTAL]
      ,dbo.T_SALES_DETAILS.[K_PRINT_TOTAL]
      ,dbo.T_SALES_DETAILS.[K_MODEL_TOTAL]
      ,dbo.T_SALES_DETAILS.[K_MOTOR_TOTAL]
      ,dbo.T_SALES_DETAILS.[K_HABEL_TOTAL]
				  ,IIF(K_STORE_ITEM_CODE=0,N'''',ST.ITEM_NAME) AS K_STORE_ITEM_NAME
				  ,IIF(K_PRINT_ITEM_CODE=0,N'''',PR.ITEM_NAME) AS K_PRINT_ITEM_NAME
				   ,IIF(K_MODEL_ITEM_CODE=0,N'''',MD.ITEM_NAME) AS K_MODEL_ITEM_NAME
					,IIF(K_MOTOR_ITEM_CODE=0,N'''',MO.ITEM_NAME) AS K_MOTOR_ITEM_NAME
					,IIF(K_HABEL_ITEM_CODE=0,N'''',HB.ITEM_NAME) AS K_HABEL_ITEM_NAME
					, dbo.T_SALES_DETAILS.QTY_FREE  
					, dbo.T_SALES_DETAILS.TOTAL_QTY
					, dbo.T_ITEMS.KIND_NAME
FROM            dbo.T_SALES INNER JOIN
                         dbo.T_SALES_DETAILS ON dbo.T_SALES.BILL_BRANCH = dbo.T_SALES_DETAILS.BILL_BRANCH LEFT OUTER JOIN
                         dbo.T_ITEMS ON dbo.T_SALES_DETAILS.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_IVC_TYPE ON dbo.T_SALES.IVC_CODE = dbo.T_IVC_TYPE.IVC_CODE LEFT OUTER JOIN
                         dbo.T_MANDOOB ON dbo.T_SALES.MANDOOB_CODE = dbo.T_MANDOOB.MANDOOB_CODE LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.T_SALES_DETAILS.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE LEFT OUTER JOIN
                         dbo.T_STORE_TYPE ON dbo.T_SALES_DETAILS.STORE_CODE = dbo.T_STORE_TYPE.STORE_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_TYPE ON dbo.T_ITEMS.TYPE_CODE = dbo.T_ITEM_TYPE.TYPE_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE LEFT OUTER JOIN
                         dbo.T_ITEMS ST ON dbo.T_SALES_DETAILS.K_STORE_ITEM_CODE = ST.ITEM_CODE LEFT OUTER JOIN 
                         dbo.T_ITEMS PR ON dbo.T_SALES_DETAILS.K_PRINT_ITEM_CODE =PR.ITEM_CODE LEFT OUTER JOIN
						  dbo.T_ITEMS MD ON dbo.T_SALES_DETAILS.K_MODEL_ITEM_CODE = MD.ITEM_CODE LEFT OUTER JOIN
						 dbo.T_ITEMS MO ON dbo.T_SALES_DETAILS.K_MOTOR_ITEM_CODE = MO.ITEM_CODE LEFT OUTER JOIN
						 dbo.T_ITEMS HB ON dbo.T_SALES_DETAILS.K_HABEL_ITEM_CODE = HB.ITEM_CODE

WHERE        (dbo.T_SALES.ACTIVE = 1)
GROUP BY dbo.T_SALES.BILL_NUMBER, CONVERT(NVARCHAR(12), dbo.T_SALES.BILL_NUMBER), dbo.T_SALES.BILL_INVOICE, dbo.T_SALES.BILL_DATE, dbo.T_SALES.CLIENT_CODE, dbo.T_SALES.CLIENT_NAME, 
                         dbo.T_SALES.CLIENT_PHONE, dbo.T_SALES.CLIENT_ADRESS, dbo.T_SALES.MANDOOB_CODE, dbo.T_MANDOOB.MANDOOB_NAME, dbo.T_MANDOOB.MANDOOB_PERCENT, dbo.T_SALES.DESCRIPTION, 
                         dbo.T_SALES.USER_CREATE, dbo.T_SALES_DETAILS.UNIT_NAME, dbo.T_SALES_DETAILS.UNIT_QTY, dbo.T_SALES_DETAILS.STORE_CODE, dbo.T_STORE_TYPE.STORE_NAME, dbo.T_SALES_DETAILS.WAJBA_CODE, 
                         dbo.T_SALES_DETAILS.WAJBA_NAME, dbo.T_SALES_DETAILS.CURRANCY_CODE, dbo.T_SALES_DETAILS.CURRANCY_EQUAL, dbo.T_SALES.IVC_CODE, dbo.T_IVC_TYPE.IVC_NAME, dbo.T_SALES_DETAILS.ITEM_CODE, 
                         dbo.T_SALES_DETAILS.ITEM_NAME, dbo.T_ITEMS.ITEM_BARCODE, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_ITEMS.TYPE_CODE, dbo.T_ITEM_TYPE.TYPE_NAME, 
                         dbo.T_SALES.ACTIVE, dbo.T_SALES_DETAILS.T_ID, dbo.T_SALES_DETAILS.BILL_BRANCH, dbo.T_ITEMS.ITEM_NOTE, dbo.T_SALES_DETAILS.ITEM_NOTE_SALES, dbo.T_ITEMS.RAF_NAME, dbo.T_ITEMS.CLIENT_NAME_BEST, 
                         dbo.T_SALES_DETAILS.DISCOUNT_TYPE, dbo.T_SALES_DETAILS.USER_CUT, dbo.T_SALES_DETAILS.USER_PREPARE, dbo.T_SALES_DETAILS.NOTE_PRINT, dbo.T_SALES_DETAILS.TAX_PERCENT_ITEM,  dbo.T_SALES_DETAILS.MANDOOB_PERCENT_ITEM, 
                         dbo.T_SALES_DETAILS.IS_PRINT, dbo.T_SALES_DETAILS.BILL_BUY, dbo.T_SALES.QR_DATA, dbo.T_ITEMS.IMG_URL, dbo.T_ITEMS.QTY_AKSAT, dbo.T_SALES_DETAILS.IS_ITEM_AREA, dbo.T_SALES_DETAILS.WIDTH_CM, 
                  dbo.T_SALES_DETAILS.LENGTH_CM, dbo.T_SALES_DETAILS.AREA_M2, dbo.T_SALES_DETAILS.QTY_AREA, dbo.T_SALES_DETAILS.QTY_XZ, dbo.T_SALES_DETAILS.UNIT_QTY_XZ, dbo.T_SALES_DETAILS.QTY_X1, dbo.T_SALES_DETAILS.UNIT_QTY_X1, dbo.T_SALES_DETAILS.QTY_XY, 
                  dbo.T_SALES_DETAILS.UNIT_QTY_XY, dbo.T_SALES_DETAILS.NOTE_PRINT_2, dbo.T_SALES_DETAILS.K_STORE_ITEM_CODE, dbo.T_SALES_DETAILS.K_STORE_COST, dbo.T_SALES_DETAILS.K_STORE_SELL, 
                  dbo.T_SALES_DETAILS.K_PRINT_ITEM_CODE, dbo.T_SALES_DETAILS.K_PRINT_COST, dbo.T_SALES_DETAILS.K_PRINT_SELL, dbo.T_SALES_DETAILS.K_MODEL_ITEM_CODE, dbo.T_SALES_DETAILS.K_MODEL_COST, dbo.T_SALES_DETAILS.K_MODEL_SELL, 
                  dbo.T_SALES_DETAILS.K_MOTOR_ITEM_CODE, dbo.T_SALES_DETAILS.K_MOTOR_COST, dbo.T_SALES_DETAILS.K_MOTOR_SELL, dbo.T_SALES_DETAILS.K_HABEL_ITEM_CODE, dbo.T_SALES_DETAILS.K_HABEL_COST, dbo.T_SALES_DETAILS.K_HABEL_SELL
				  ,ST.ITEM_NAME  ,PR.ITEM_NAME    ,MD.ITEM_NAME ,MO.ITEM_NAME ,HB.ITEM_NAME  ,dbo.T_SALES_DETAILS.[K_STORE_TOTAL]
      ,dbo.T_SALES_DETAILS.[K_PRINT_TOTAL]
      ,dbo.T_SALES_DETAILS.[K_MODEL_TOTAL]
      ,dbo.T_SALES_DETAILS.[K_MOTOR_TOTAL]
      ,dbo.T_SALES_DETAILS.[K_HABEL_TOTAL]
	  , dbo.T_SALES_DETAILS.QTY_FREE  
					, dbo.T_SALES_DETAILS.TOTAL_QTY
					, dbo.T_ITEMS.KIND_NAME

ORDER BY dbo.T_SALES.BILL_NUMBER







' 
GO
/****** Object:  View [dbo].[V_SALES_INVOICE_DETAILS_MATERIAL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_INVOICE_DETAILS_MATERIAL]'))
EXEC dbo.sp_executesql @statement = N'




CREATE VIEW [dbo].[V_SALES_INVOICE_DETAILS_MATERIAL]
AS
SELECT        dbo.T_SALES_DETAILS.T_ID, dbo.T_SALES_DETAILS.BILL_BRANCH, dbo.T_SALES_DETAILS.BILL_NUMBER, dbo.T_SALES_DETAILS.ITEM_CODE, dbo.T_SALES_DETAILS.ITEM_NAME, dbo.T_SALES_DETAILS.QTY, 
                         dbo.T_SALES_DETAILS.UNIT_NAME, dbo.T_SALES_DETAILS.UNIT_QTY, dbo.T_SALES_DETAILS.STORE_CODE, dbo.T_SALES_DETAILS.WAJBA_CODE, dbo.T_SALES_DETAILS.WAJBA_NAME, 
                         dbo.T_SALES_DETAILS.WAJBA_BALANCE, dbo.T_SALES_DETAILS.CURRANCY_CODE, dbo.T_SALES_DETAILS.CURRANCY_EQUAL, dbo.T_SALES_DETAILS.COST, dbo.T_SALES_DETAILS.PRICE, dbo.T_SALES_DETAILS.TOTAL, 
                         dbo.T_SALES_DETAILS.DISCOUNT_PERCENT_ITEM, dbo.T_SALES_DETAILS.DISCOUNT_AMOUNT_ITEM, dbo.T_SALES_DETAILS.C_DATE, dbo.T_SALES_DETAILS.ACTIVE, dbo.T_SALES_DETAILS.BILL_BUY, 
                         dbo.T_SALES_DETAILS.ITEM_NOTE_SALES, dbo.T_SALES_DETAILS.ARBAH_ITEM, dbo.T_SALES_DETAILS.TOTAL_COST, dbo.T_SALES_DETAILS.NET_TOTAL, dbo.T_SALES_DETAILS.TOTAL_DISCOUNT, 
                         dbo.T_SALES_DETAILS.NOTE_PRINT, dbo.T_SALES_DETAILS.IS_PRINT, dbo.T_SALES_DETAILS.USER_PREPARE, dbo.T_SALES_DETAILS.USER_CUT, dbo.T_SALES_DETAILS.DISCOUNT_TYPE, 
                         dbo.T_SALES_DETAILS.IS_SERIAL, dbo.T_ITEM_MATERIAL_EFFECTIVE.EFFECTIVE_MATERIAL_ID, dbo.T_ITEM_MATERIAL.EFFECTIVE_MATERIAL, dbo.T_ITEM_MATERIAL_EFFECTIVE.EFFECTIVE_MATERIAL_2, 
                         dbo.T_ITEM_MATERIAL_EFFECTIVE.QTY_STR
						 ,dbo.T_SALES_DETAILS.TAX_PERCENT_ITEM, 
						  dbo.T_SALES_DETAILS.TAX_AMO_ITEM, 
						 dbo.T_SALES_DETAILS.MANDOOB_PERCENT_ITEM, 
						 dbo.T_SALES_DETAILS.MANDOOB_AMO_ITEM , 
						    dbo.T_SALES_DETAILS.TOTAL_TAX_ITEM , 
							 dbo.T_SALES_DETAILS.TOTAL_MANDOOB_ITEM  
							 , dbo.T_SALES_DETAILS.IS_ITEM_AREA, dbo.T_SALES_DETAILS.WIDTH_CM, 
                  dbo.T_SALES_DETAILS.LENGTH_CM, dbo.T_SALES_DETAILS.AREA_M2, dbo.T_SALES_DETAILS.QTY_AREA, dbo.T_SALES_DETAILS.QTY_XZ, dbo.T_SALES_DETAILS.UNIT_QTY_XZ, dbo.T_SALES_DETAILS.QTY_X1, dbo.T_SALES_DETAILS.UNIT_QTY_X1, dbo.T_SALES_DETAILS.QTY_XY, 
                  dbo.T_SALES_DETAILS.UNIT_QTY_XY
				  , dbo.T_SALES_DETAILS.QTY_FREE  
					, dbo.T_SALES_DETAILS.TOTAL_QTY
					 
FROM            dbo.T_SALES_DETAILS LEFT OUTER JOIN
                         dbo.T_ITEM_MATERIAL_EFFECTIVE ON dbo.T_SALES_DETAILS.ITEM_CODE = dbo.T_ITEM_MATERIAL_EFFECTIVE.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_MATERIAL ON dbo.T_ITEM_MATERIAL_EFFECTIVE.EFFECTIVE_MATERIAL_ID = dbo.T_ITEM_MATERIAL.T_ID





' 
GO
/****** Object:  View [dbo].[V_SALES_INVOICE_MATERIAL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_INVOICE_MATERIAL]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_INVOICE_MATERIAL]
AS
SELECT        TOP (100) PERCENT dbo.T_SALES.BILL_BRANCH, dbo.T_SALES.BILL_NUMBER, dbo.T_SALES.BILL_INVOICE, dbo.T_SALES.BILL_DATE, dbo.T_SALES.OFFER_CODE, dbo.T_SALES.CURRANCY_CODE, 
                         dbo.T_CURRANNCY.CURRANCY_NAME, dbo.T_SALES.CURRANCY_EQUAL, dbo.T_SALES.CLIENT_CODE, dbo.T_SALES.CLIENT_NAME, dbo.T_SALES.CLIENT_PHONE, dbo.T_SALES.CLIENT_ADRESS, 
                         dbo.T_SALES.MANDOOB_CODE, dbo.T_MANDOOB.MANDOOB_NAME, dbo.T_SALES.DESCRIPTION, dbo.T_SALES.USER_CREATE, dbo.T_SALES.SECURETY_CODE, dbo.T_SALES.TOTAL_SALES, 
                         dbo.T_SALES.DISCOUNT_ITEMS, dbo.T_SALES.DISCOUNT_PERCENT, dbo.T_SALES.DISCOUNT_AMOUNT, dbo.T_SALES.TOTAL_DISCOUNT, dbo.T_SALES.NET_SALES, dbo.T_SALES.TOTAL_COST, dbo.T_SALES.TOTAL_ARBAH, 
                         dbo.T_SALES.IVC_CODE, dbo.T_SALES.DAY_CASH, dbo.T_SALES.DATE_CASH, dbo.T_SALES.TOT_CONV, dbo.T_SALES.ACCOUNT_CODE, dbo.T_SALES.CASH_USA, dbo.T_SALES.REMAIN_USA, dbo.T_SALES.CASH_IQ, 
                         dbo.T_SALES.REMAIN_IQ, dbo.T_SALES.C_DATE, dbo.T_SALES.C_UPDATE, dbo.T_SALES.USER_UPDATE, dbo.T_SALES.ACTIVE, DATEDIFF(DAY, dbo.T_SALES.DATE_CASH, GETDATE()) AS CASH_DIFF, dbo.T_SALES.QR_DATA, 
                         dbo.T_SALES.CENTER_CODE, dbo.T_SALES.TAG_PROCCESS_CODE, dbo.T_TAG_PROCCESS.TAG_PROCCESS_NAME, dbo.T_CENTER_COST_INVOICE.CENTER_NAME
FROM            dbo.T_SALES LEFT OUTER JOIN
                         dbo.T_CENTER_COST_INVOICE ON dbo.T_SALES.CENTER_CODE = dbo.T_CENTER_COST_INVOICE.CENTER_CODE LEFT OUTER JOIN
                         dbo.T_TAG_PROCCESS ON dbo.T_SALES.TAG_PROCCESS_CODE = dbo.T_TAG_PROCCESS.TAG_PROCCESS_CODE LEFT OUTER JOIN
                         dbo.T_MANDOOB ON dbo.T_SALES.MANDOOB_CODE = dbo.T_MANDOOB.MANDOOB_CODE LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.T_SALES.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE
WHERE        (dbo.T_SALES.ACTIVE = 1)
ORDER BY dbo.T_SALES.BILL_NUMBER
' 
GO
/****** Object:  View [dbo].[V_SALES_INVOICE_TEMP]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_INVOICE_TEMP]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_INVOICE_TEMP]
AS
SELECT
    S.BILL_NUMBER,
    CONVERT(NVARCHAR(12), S.BILL_NUMBER) AS BILL_STR,
    S.BILL_INVOICE,
    S.BILL_DATE,
    S.CLIENT_CODE,
    S.CLIENT_NAME,
    S.CLIENT_PHONE,
    S.CLIENT_ADRESS,
    S.MANDOOB_CODE,
    S.DESCRIPTION,
    S.USER_CREATE,
    
    SUM(ST.QTY) AS QTY,
    ST.UNIT_NAME,
    ST.UNIT_QTY,
    ST.STORE_CODE,
    STY.STORE_NAME,
    ST.WAJBA_CODE,
    ST.WAJBA_NAME,
    ST.CURRANCY_CODE,
    ST.CURRANCY_EQUAL,

    -- تجميع القيم المالية
    SUM(ST.COST) AS COST,
    IIF(SUM(ST.QTY) = 0, 0, SUM(ST.TOTAL) / NULLIF(SUM(ST.QTY), 0)) AS PRICE,   -- حماية من القسمة على صفر
    SUM(ST.TOTAL) AS TOTAL,
    SUM(ST.DISCOUNT_PERCENT_ITEM) AS DISCOUNT_PERCENT_ITEM,
    SUM(ST.DISCOUNT_AMOUNT_ITEM) AS DISCOUNT_AMOUNT_ITEM,
    SUM(ST.TOTAL_COST) AS TOTAL_COST,
    SUM(ST.NET_TOTAL) AS NET_TOTAL,
    MAX(ST.C_DATE) AS C_DATE,
    S.ACTIVE,
    S.IVC_CODE,
    IV.IVC_NAME,
    ST.ITEM_CODE,
    ST.ITEM_NAME,
    IT.ITEM_BARCODE AS ITEM_SIGN,
    IT.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    IT.TYPE_CODE,
    TT.TYPE_NAME,
    ST.T_ID,
    ST.BILL_BRANCH,
    IT.CLIENT_NAME_BEST,
    IT.RAF_NAME,
    S.QR_DATA,
    ST.NOTE_PRINT,
    SUM(ST.TOTAL_DISCOUNT) AS TOTAL_DISCOUNT,
    ST.TAX_PERCENT_ITEM,
    SUM(ST.TAX_AMO_ITEM) AS TAX_AMO_ITEM,
    ST.MANDOOB_PERCENT_ITEM,
    SUM(ST.MANDOOB_AMO_ITEM) AS MANDOOB_AMO_ITEM,
    SUM(ST.TOTAL_TAX_ITEM) AS TOTAL_TAX_ITEM,
    SUM(ST.TOTAL_MANDOOB_ITEM) AS TOTAL_MANDOOB_ITEM

FROM dbo.T_SALES AS S
    INNER JOIN dbo.T_SALES_TEMP AS ST ON S.BILL_NUMBER = ST.BILL_NUMBER
    LEFT JOIN dbo.T_ITEMS         AS IT ON ST.ITEM_CODE = IT.ITEM_CODE
    LEFT JOIN dbo.T_IVC_TYPE      AS IV ON S.IVC_CODE = IV.IVC_CODE
    LEFT JOIN dbo.T_CURRANNCY     AS CR ON ST.CURRANCY_CODE = CR.CURRANCY_CODE
    LEFT JOIN dbo.T_STORE_TYPE    AS STY ON ST.STORE_CODE = STY.STORE_CODE
    LEFT JOIN dbo.T_ITEM_TYPE     AS TT ON IT.TYPE_CODE = TT.TYPE_CODE
    LEFT JOIN dbo.T_ITEM_CATEGORY AS IC ON IT.CATEGORY_CODE = IC.CATEGORY_CODE

 
GROUP BY 
    S.BILL_NUMBER, 
    CONVERT(NVARCHAR(12), S.BILL_NUMBER), 
    S.BILL_INVOICE,
    S.BILL_DATE,
    S.CLIENT_CODE,
    S.CLIENT_NAME,
    S.CLIENT_PHONE,
    S.CLIENT_ADRESS,
    S.MANDOOB_CODE,
    S.DESCRIPTION,
    S.USER_CREATE,
    ST.UNIT_NAME,
    ST.UNIT_QTY,
    ST.STORE_CODE,
    STY.STORE_NAME,
    ST.WAJBA_CODE,
    ST.WAJBA_NAME,
    ST.CURRANCY_CODE,
    ST.CURRANCY_EQUAL,
    S.ACTIVE,
    S.IVC_CODE,
    IV.IVC_NAME,
    ST.ITEM_CODE,
    ST.ITEM_NAME,
    IT.ITEM_BARCODE,
    IT.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    IT.TYPE_CODE,
    TT.TYPE_NAME,
    ST.T_ID,
    ST.BILL_BRANCH,
    IT.CLIENT_NAME_BEST,
    IT.RAF_NAME,
    S.QR_DATA,
    ST.NOTE_PRINT,
    ST.TAX_PERCENT_ITEM,
    ST.MANDOOB_PERCENT_ITEM

 
' 
GO
/****** Object:  View [dbo].[V_SALES_PATROL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_PATROL]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_PATROL]
AS
SELECT        dbo.T_SALES_PATROL.BILL_NUMBER, dbo.T_SALES_PATROL.BILL_DATE, dbo.T_SALES_PATROL.CLIENT_CODE, dbo.T_SALES_PATROL.CLIENT_NAME, dbo.T_SALES_PATROL.CLIENT_PHONE, 
                         dbo.T_SALES_PATROL.CLIENT_ADRESS, dbo.T_SALES_PATROL.NET_SALES, dbo.T_SALES_PATROL.DATE_FIRST, dbo.T_SALES_PATROL.DAY_AFTER, dbo.T_SALES_PATROL.DATE_NEXT, dbo.T_SALES_PATROL.INFO_SALES, 
                         dbo.T_SALES_PATROL.INFO_SALES_DETAILS, dbo.T_SALES_PATROL.C_DATE, dbo.T_SALES_PATROL.USER_CREATE, dbo.T_SALES_PATROL.C_UPDATE, dbo.T_SALES_PATROL.USER_UPDATE, dbo.T_SALES_PATROL.ACTIVE, 
                         dbo.T_SALES_PATROL.IS_ARSHEF, dbo.T_SALES_DETAILS.ITEM_CODE, dbo.T_SALES_DETAILS.ITEM_NAME, dbo.T_ITEMS.ITEM_BARCODE
FROM            dbo.T_SALES_PATROL INNER JOIN
                         dbo.T_SALES_DETAILS ON dbo.T_SALES_PATROL.BILL_BRANCH = dbo.T_SALES_DETAILS.BILL_BRANCH LEFT OUTER JOIN
                         dbo.T_ITEMS ON dbo.T_SALES_DETAILS.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE
' 
GO
/****** Object:  View [dbo].[V_SALES_RETURN]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_RETURN]'))
EXEC dbo.sp_executesql @statement = N'





CREATE VIEW [dbo].[V_SALES_RETURN]
AS
SELECT        TOP (100) PERCENT dbo.T_SALES.BILL_BRANCH, dbo.T_SALES.BILL_NUMBER, dbo.T_SALES.BILL_INVOICE, dbo.T_SALES.BILL_DATE, dbo.T_SALES.OFFER_CODE, dbo.T_SALES.CURRANCY_CODE, 
                         dbo.T_CURRANNCY.CURRANCY_NAME, dbo.T_SALES.CURRANCY_EQUAL, dbo.T_SALES.CLIENT_CODE, dbo.T_SALES.CLIENT_NAME, dbo.T_SALES.CLIENT_PHONE, dbo.T_SALES.CLIENT_ADRESS, 
                         dbo.T_SALES.MANDOOB_CODE, dbo.T_MANDOOB.MANDOOB_NAME, dbo.T_SALES.DESCRIPTION, dbo.T_SALES.USER_CREATE, dbo.T_SALES.SECURETY_CODE, 
                         dbo.T_SALES.TOTAL_SALES / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_SALES, dbo.T_SALES.DISCOUNT_ITEMS / dbo.T_SALES.CURRANCY_EQUAL AS DISCOUNT_ITEMS, dbo.T_SALES.DISCOUNT_PERCENT, 
                         dbo.T_SALES.DISCOUNT_AMOUNT / dbo.T_SALES.CURRANCY_EQUAL AS DISCOUNT_AMOUNT, dbo.T_SALES.TOTAL_DISCOUNT / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_DISCOUNT, 
                         dbo.T_SALES.NET_SALES / dbo.T_SALES.CURRANCY_EQUAL AS NET_SALES, dbo.T_SALES.TOTAL_COST / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_COST, 
                         dbo.T_SALES.TOTAL_ARBAH / dbo.T_SALES.CURRANCY_EQUAL AS TOTAL_ARBAH, dbo.T_SALES.IVC_CODE, dbo.T_IVC_TYPE.IVC_NAME, dbo.T_SALES.DAY_CASH, dbo.T_SALES.DATE_CASH, dbo.T_SALES.TOT_CONV, 
                         dbo.T_SALES.ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME, dbo.T_SALES.CASH_USA, dbo.T_SALES.REMAIN_USA, dbo.T_SALES.CASH_IQ, dbo.T_SALES.REMAIN_IQ, dbo.T_SALES.C_DATE, dbo.T_SALES.C_UPDATE, 
                         dbo.T_SALES.USER_UPDATE, dbo.T_SALES.ACTIVE, dbo.T_CLIENT.CLIENT_REGION, dbo.T_CLIENT.CLIENT_BUSINESS, DATEDIFF(DAY, dbo.T_SALES.DATE_CASH, GETDATE()) AS CASH_DIFF
FROM            dbo.T_SALES LEFT OUTER JOIN
                         dbo.T_CLIENT ON dbo.T_SALES.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                         dbo.T_ACCOUNTS ON dbo.T_SALES.ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.T_TYPE_PRICE_SELL ON dbo.T_SALES.TYPE_PRICE_SELL = dbo.T_TYPE_PRICE_SELL.TYPE_PRICE_CODE LEFT OUTER JOIN
                         dbo.T_IVC_TYPE ON dbo.T_SALES.IVC_CODE = dbo.T_IVC_TYPE.IVC_CODE LEFT OUTER JOIN
                         dbo.T_MANDOOB ON dbo.T_SALES.MANDOOB_CODE = dbo.T_MANDOOB.MANDOOB_CODE LEFT OUTER JOIN
                         dbo.T_CURRANNCY ON dbo.T_SALES.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE
WHERE        (dbo.T_SALES.ACTIVE = 1) AND (dbo.T_SALES.IVC_CODE < 10) AND (dbo.T_SALES.NET_SALES / dbo.T_SALES.CURRANCY_EQUAL < 0)
ORDER BY dbo.T_SALES.BILL_NUMBER









' 
GO
/****** Object:  View [dbo].[V_SALES_TEMP_ORDER]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_TEMP_ORDER]'))
EXEC dbo.sp_executesql @statement = N'


CREATE VIEW [dbo].[V_SALES_TEMP_ORDER]
AS
SELECT        dbo.T_SALES_TEMP.T_ID, dbo.T_SALES_TEMP.BILL_BRANCH, dbo.T_SALES_TEMP.BILL_NUMBER, dbo.T_SALES_TEMP.ITEM_CODE, dbo.T_SALES_TEMP.ITEM_NAME, dbo.T_SALES_TEMP.QTY, 
                         dbo.T_SALES_TEMP.UNIT_NAME, dbo.T_SALES_TEMP.UNIT_QTY, dbo.T_SALES_TEMP.STORE_CODE, dbo.T_STORE_TYPE.STORE_NAME, dbo.T_SALES_TEMP.ITEM_NOTE_SALES, dbo.T_SALES_TEMP.IS_PRINT, 
                         dbo.T_SALES_TEMP.USER_PREPARE, dbo.T_SALES_TEMP.USER_CUT, dbo.T_SALES_TEMP.NOTE_PRINT, dbo.T_SALES_TEMP.PROCCESS_ID, dbo.T_SALES.CLIENT_CODE, dbo.T_SALES.CLIENT_NAME, 
                         dbo.T_SALES.CLIENT_PHONE, dbo.T_SALES.CLIENT_ADRESS, dbo.T_SALES.DESCRIPTION, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_PRINTER.PRINTER_NAME, 
                         dbo.T_PRINTER.DEVICE_NAME, dbo.T_ITEMS.ITEM_NOTE, dbo.T_ITEMS.ITEM_BARCODE, dbo.T_ITEMS.RAF_NAME, dbo.T_ITEMS.IMG_URL, dbo.T_PRINTER_STORE.PRINTER_ID
						 , dbo.T_ITEMS.KIND_NAME , dbo.T_SALES.BILL_ORDER
FROM            dbo.T_SALES RIGHT OUTER JOIN
                         dbo.T_STORE_TYPE RIGHT OUTER JOIN
                         dbo.T_SALES_TEMP LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY LEFT OUTER JOIN
                         dbo.T_ITEMS ON dbo.T_ITEM_CATEGORY.CATEGORY_CODE = dbo.T_ITEMS.CATEGORY_CODE ON dbo.T_SALES_TEMP.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_PRINTER_STORE LEFT OUTER JOIN
                         dbo.T_PRINTER ON dbo.T_PRINTER_STORE.PRINTER_ID = dbo.T_PRINTER.T_ID ON dbo.T_SALES_TEMP.STORE_CODE = dbo.T_PRINTER.STORE_CODE AND 
                         dbo.T_ITEM_CATEGORY.CATEGORY_CODE = dbo.T_PRINTER_STORE.CATEGORY_CODE ON dbo.T_STORE_TYPE.STORE_CODE = dbo.T_SALES_TEMP.STORE_CODE ON 
                         dbo.T_SALES.BILL_BRANCH = dbo.T_SALES_TEMP.BILL_BRANCH



' 
GO
/****** Object:  View [dbo].[V_SALES_WAITING]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_WAITING]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SALES_WAITING]
AS
SELECT        TOP (100) PERCENT BILL_BRANCH, BILL_NUMBER, BILL_DATE, CLIENT_NAME, CLIENT_PHONE, NET_SALES, OFFER_CODE, USER_CREATE
FROM            dbo.T_SALES
GROUP BY BILL_BRANCH, BILL_NUMBER, BILL_DATE, CLIENT_NAME, CLIENT_PHONE, NET_SALES, OFFER_CODE, USER_CREATE
HAVING        (OFFER_CODE = 88)
ORDER BY BILL_NUMBER
' 
GO
/****** Object:  View [dbo].[V_SALES_WAITING_ORDER]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SALES_WAITING_ORDER]'))
EXEC dbo.sp_executesql @statement = N'






CREATE VIEW [dbo].[V_SALES_WAITING_ORDER]
AS
SELECT        TOP (100) PERCENT dbo.T_SALES.BILL_BRANCH, dbo.T_SALES.BILL_NUMBER, dbo.T_SALES.BILL_DATE, dbo.T_SALES.CLIENT_NAME, dbo.T_SALES.CLIENT_PHONE, dbo.T_SALES.NET_SALES, dbo.T_SALES.OFFER_CODE, 
                         dbo.T_SALES.USER_CREATE
FROM            dbo.T_SALES INNER JOIN
                         dbo.T_SALES_TEMP ON dbo.T_SALES.BILL_BRANCH = dbo.T_SALES_TEMP.BILL_BRANCH
GROUP BY dbo.T_SALES.BILL_BRANCH, dbo.T_SALES.BILL_NUMBER, dbo.T_SALES.BILL_DATE, dbo.T_SALES.CLIENT_NAME, dbo.T_SALES.CLIENT_PHONE, dbo.T_SALES.NET_SALES, dbo.T_SALES.OFFER_CODE, 
                         dbo.T_SALES.USER_CREATE
HAVING        (dbo.T_SALES.OFFER_CODE = 77)
ORDER BY dbo.T_SALES.BILL_NUMBER










' 
GO
/****** Object:  View [dbo].[V_SANAD]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SANAD]'))
EXEC dbo.sp_executesql @statement = N'





CREATE VIEW [dbo].[V_SANAD]
AS
SELECT      TOP (100) PERCENT  dbo.T_SANAD.BILL_BRANCH, dbo.T_SANAD.BILL_NUMBER, dbo.T_SANAD.BILL_DATE, dbo.T_SANAD.BILL_TIME, dbo.T_SANAD.USER_CREATE, dbo.T_SANAD.CURRANCY_EQUAL, dbo.T_SANAD.MOVE_CODE, 
                         dbo.T_MOVE.MOVE_NAME, dbo.T_SANAD.FROM_ACCOUNT, dbo.T_SANAD.TO_ACCCOUNT, dbo.T_SANAD.FROM_ACC, dbo.T_SANAD.TO_ACC, dbo.T_SANAD.AMO_USA, dbo.T_SANAD.AMO_IQ, dbo.T_SANAD.CONV_USA, 
                         dbo.T_SANAD.CONV_IQ, dbo.T_SANAD.DESCRIPTION, dbo.T_SANAD.C_DATE, dbo.T_SANAD.C_UPDATE, dbo.T_SANAD.USER_UPDATE, dbo.T_SANAD.SECURETY_CODE, dbo.T_SANAD.SANAD_ACTIVE, 
                         dbo.T_SANAD.BILL_SALES_BRANCH
FROM            dbo.T_SANAD LEFT OUTER JOIN
                         dbo.T_MOVE ON dbo.T_SANAD.MOVE_CODE = dbo.T_MOVE.MOVE_CODE
WHERE        (dbo.T_SANAD.SANAD_ACTIVE = 1)
ORDER BY dbo.T_SANAD.BILL_NUMBER








' 
GO
/****** Object:  View [dbo].[V_SANAD_CNY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SANAD_CNY]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SANAD_CNY]
AS
SELECT     TOP (100) PERCENT dbo.T_SANAD_CNY.BILL_BRANCH, dbo.T_SANAD_CNY.BILL_NUMBER, dbo.T_SANAD_CNY.BILL_DATE, dbo.T_SANAD_CNY.BILL_TIME, dbo.T_SANAD_CNY.USER_CREATE, dbo.T_SANAD_CNY.CURRANCY_EQUAL, dbo.T_SANAD_CNY.MOVE_CODE, 
                  dbo.T_MOVE.MOVE_NAME, dbo.T_SANAD_CNY.FROM_ACCOUNT, dbo.T_SANAD_CNY.TO_ACCCOUNT, dbo.T_SANAD_CNY.FROM_ACC, dbo.T_SANAD_CNY.TO_ACC, dbo.T_SANAD_CNY.CONV_USA, dbo.T_SANAD_CNY.CONV_IQ, dbo.T_SANAD_CNY.DESCRIPTION, 
                  dbo.T_SANAD_CNY.C_DATE, dbo.T_SANAD_CNY.C_UPDATE, dbo.T_SANAD_CNY.USER_UPDATE, dbo.T_SANAD_CNY.SECURETY_CODE, dbo.T_SANAD_CNY.SANAD_ACTIVE, dbo.T_SANAD_CNY.BILL_SALES_BRANCH, dbo.T_SANAD_CNY.AMO_USA_OUT, 
                  dbo.T_SANAD_CNY.AMO_IQ_OUT, dbo.T_SANAD_CNY.AMO_USA_IN, dbo.T_SANAD_CNY.AMO_IQ_IN, dbo.T_SANAD_CNY.MOVE_CODE_SMAH_OUT, dbo.T_SANAD_CNY.AMO_USA_SMAH_OUT, dbo.T_SANAD_CNY.AMO_IQ_SMAH_OUT, dbo.T_SANAD_CNY.MOVE_CODE_SMAH_IN, 
                  dbo.T_SANAD_CNY.AMO_USA_SMAH_IN, dbo.T_SANAD_CNY.AMO_IQ_SMAH_IN, dbo.T_SANAD_CNY.OFFER_CODE, dbo.T_SANAD_CNY.IS_TRANS
FROM        dbo.T_SANAD_CNY LEFT OUTER JOIN
                  dbo.T_MOVE ON dbo.T_SANAD_CNY.MOVE_CODE = dbo.T_MOVE.MOVE_CODE
WHERE     (dbo.T_SANAD_CNY.SANAD_ACTIVE = 1)
ORDER BY dbo.T_SANAD_CNY.BILL_NUMBER
' 
GO
/****** Object:  View [dbo].[V_SANAD_DOLLAR]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SANAD_DOLLAR]'))
EXEC dbo.sp_executesql @statement = N'






CREATE VIEW [dbo].[V_SANAD_DOLLAR]
AS
SELECT      TOP (100) PERCENT    dbo.T_SANAD_DOLLAR.BILL_BRANCH, dbo.T_SANAD_DOLLAR.BILL_NUMBER, dbo.T_SANAD_DOLLAR.BILL_DATE, dbo.T_SANAD_DOLLAR.BILL_TIME, dbo.T_SANAD_DOLLAR.USER_CREATE, dbo.T_SANAD_DOLLAR.CURRANCY_EQUAL, 
                         dbo.T_SANAD_DOLLAR.FROM_ACCOUNT, dbo.T_SANAD_DOLLAR.TO_ACCCOUNT, dbo.T_SANAD_DOLLAR.FROM_ACC, dbo.T_SANAD_DOLLAR.TO_ACC, dbo.T_SANAD_DOLLAR.AMO_USA, dbo.T_SANAD_DOLLAR.AMO_IQ, 
                         dbo.T_SANAD_DOLLAR.CONV_USA, dbo.T_SANAD_DOLLAR.CONV_IQ, dbo.T_SANAD_DOLLAR.DESCRIPTION, dbo.T_SANAD_DOLLAR.C_DATE, dbo.T_SANAD_DOLLAR.C_UPDATE, dbo.T_SANAD_DOLLAR.USER_UPDATE, 
                         dbo.T_SANAD_DOLLAR.SECURETY_CODE, dbo.T_SANAD_DOLLAR.SANAD_ACTIVE, dbo.T_SANAD_DOLLAR.MOVE_CODE, dbo.T_MOVE.MOVE_NAME
FROM            dbo.T_SANAD_DOLLAR LEFT OUTER JOIN
                         dbo.T_MOVE ON dbo.T_SANAD_DOLLAR.MOVE_CODE = dbo.T_MOVE.MOVE_CODE

ORDER BY dbo.T_SANAD_DOLLAR.BILL_NUMBER








' 
GO
/****** Object:  View [dbo].[V_SANAD_HAWALA]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SANAD_HAWALA]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_SANAD_HAWALA]
AS
SELECT     TOP (100) PERCENT dbo.T_SANAD_HAWALA.BILL_BRANCH, dbo.T_SANAD_HAWALA.BILL_NUMBER, dbo.T_SANAD_HAWALA.BILL_DATE, dbo.T_SANAD_HAWALA.BILL_TIME, dbo.T_SANAD_HAWALA.USER_CREATE, dbo.T_SANAD_HAWALA.CURRANCY_EQUAL, 
                  dbo.T_SANAD_HAWALA.MOVE_CODE, dbo.T_MOVE.MOVE_NAME, dbo.T_SANAD_HAWALA.FROM_ACCOUNT, dbo.T_SANAD_HAWALA.TO_ACCCOUNT, dbo.T_SANAD_HAWALA.FROM_ACC, dbo.T_SANAD_HAWALA.TO_ACC, dbo.T_SANAD_HAWALA.AMO_USA, dbo.T_SANAD_HAWALA.AMO_IQ, 
                  dbo.T_SANAD_HAWALA.CONV_USA, dbo.T_SANAD_HAWALA.CONV_IQ, dbo.T_SANAD_HAWALA.DESCRIPTION, dbo.T_SANAD_HAWALA.C_DATE, dbo.T_SANAD_HAWALA.C_UPDATE, dbo.T_SANAD_HAWALA.USER_UPDATE, dbo.T_SANAD_HAWALA.SECURETY_CODE, 
                  dbo.T_SANAD_HAWALA.SANAD_ACTIVE, dbo.T_SANAD_HAWALA.AMO_EMOLA_USA_FROM, dbo.T_SANAD_HAWALA.AMO_EMOLA_IQ_FROM, dbo.T_SANAD_HAWALA.AMO_EMOLA_USA_TO, dbo.T_SANAD_HAWALA.AMO_EMOLA_IQ_TO, dbo.T_SANAD_HAWALA.AMO_USA_IQ_EQUAL, 
                  dbo.T_SANAD_HAWALA.AMO_USA_C, dbo.T_SANAD_HAWALA.AMO_USA_T, dbo.T_SANAD_HAWALA.AMO_IQ_USA_EQUAL, dbo.T_SANAD_HAWALA.AMO_IQ_C, dbo.T_SANAD_HAWALA.AMO_IQ_T, dbo.T_SANAD_HAWALA.CLIENT_NAME, dbo.T_SANAD_HAWALA.CLIENT_PHONE, 
                  dbo.T_SANAD_HAWALA.OFFER_CODE, dbo.T_SANAD_HAWALA.IS_TRANS
FROM        dbo.T_SANAD_HAWALA LEFT OUTER JOIN
                  dbo.T_MOVE ON dbo.T_SANAD_HAWALA.MOVE_CODE = dbo.T_MOVE.MOVE_CODE
WHERE     (dbo.T_SANAD_HAWALA.SANAD_ACTIVE = 1)
ORDER BY dbo.T_SANAD_HAWALA.BILL_NUMBER
' 
GO
/****** Object:  View [dbo].[V_SANAD_KAYD_DETAILS]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SANAD_KAYD_DETAILS]'))
EXEC dbo.sp_executesql @statement = N'





CREATE VIEW [dbo].[V_SANAD_KAYD_DETAILS]
AS
SELECT      TOP (100) PERCENT   dbo.T_SANAD_KAYD.BILL_BRANCH, dbo.T_SANAD_KAYD.BILL_NUMBER, dbo.T_SANAD_KAYD.BILL_DATE, dbo.T_SANAD_KAYD.BILL_TIME, dbo.T_SANAD_KAYD.USER_CREATE, dbo.T_SANAD_KAYD.CURRANCY_EQUAL, 
                         dbo.T_SANAD_KAYD.AMO_USA, dbo.T_SANAD_KAYD.AMO_IQ, dbo.T_SANAD_KAYD.C_UPDATE, dbo.T_SANAD_KAYD.USER_UPDATE, dbo.T_SANAD_KAYD.SECURETY_CODE, dbo.T_SANAD_KAYD.SANAD_ACTIVE, 
                         dbo.T_SANAD_KAYD_DETAILS.ACCOUNT_CODE, dbo.T_ACCOUNTS.ACCOUNT_NAME, dbo.T_ACCOUNTS.ACCOUNT_PARENT, dbo.T_SANAD_KAYD_DETAILS.MOVE_CODE, dbo.T_MOVE.MOVE_NAME, 
                         dbo.T_SANAD_KAYD_DETAILS.DEBIT, dbo.T_SANAD_KAYD_DETAILS.CREDIT, dbo.T_SANAD_KAYD_DETAILS.DEBIT_IQ, dbo.T_SANAD_KAYD_DETAILS.CREDIT_IQ, dbo.T_SANAD_KAYD_DETAILS.DESCRIPTION, 
                         dbo.T_SANAD_KAYD_DETAILS.USER_C, dbo.T_SANAD_KAYD_DETAILS.C_DATE
FROM            dbo.T_SANAD_KAYD LEFT OUTER JOIN
                         dbo.T_SANAD_KAYD_DETAILS ON dbo.T_SANAD_KAYD.BILL_BRANCH = dbo.T_SANAD_KAYD_DETAILS.BILL_BRANCH LEFT OUTER JOIN
                         dbo.T_ACCOUNTS ON dbo.T_SANAD_KAYD_DETAILS.ACCOUNT_CODE = dbo.T_ACCOUNTS.ACCOUNT_CODE LEFT OUTER JOIN
                         dbo.T_MOVE ON dbo.T_SANAD_KAYD_DETAILS.MOVE_CODE = dbo.T_MOVE.MOVE_CODE

ORDER BY dbo.T_SANAD_KAYD.BILL_NUMBER







' 
GO
/****** Object:  View [dbo].[V_SANAD_SMAH]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_SANAD_SMAH]'))
EXEC dbo.sp_executesql @statement = N'





CREATE VIEW [dbo].[V_SANAD_SMAH]
AS
SELECT     TOP (100) PERCENT    dbo.T_SANAD_SMAH.BILL_BRANCH, dbo.T_SANAD_SMAH.BILL_NUMBER, dbo.T_SANAD_SMAH.BILL_DATE, dbo.T_SANAD_SMAH.BILL_TIME, dbo.T_SANAD_SMAH.USER_CREATE, dbo.T_SANAD_SMAH.CURRANCY_EQUAL, 
                         dbo.T_SANAD_SMAH.FROM_ACCOUNT, dbo.T_SANAD_SMAH.TO_ACCCOUNT, dbo.T_SANAD_SMAH.FROM_ACC, dbo.T_SANAD_SMAH.TO_ACC, dbo.T_SANAD_SMAH.AMO_USA, dbo.T_SANAD_SMAH.AMO_IQ, 
                         dbo.T_SANAD_SMAH.CONV_USA, dbo.T_SANAD_SMAH.CONV_IQ, dbo.T_SANAD_SMAH.DESCRIPTION, dbo.T_SANAD_SMAH.C_DATE, dbo.T_SANAD_SMAH.C_UPDATE, dbo.T_SANAD_SMAH.USER_UPDATE, 
                         dbo.T_SANAD_SMAH.SECURETY_CODE, dbo.T_SANAD_SMAH.SANAD_ACTIVE, dbo.T_SANAD_SMAH.MOVE_CODE, dbo.T_MOVE.MOVE_NAME
FROM            dbo.T_SANAD_SMAH LEFT OUTER JOIN
                         dbo.T_MOVE ON dbo.T_SANAD_SMAH.MOVE_CODE = dbo.T_MOVE.MOVE_CODE
ORDER BY dbo.T_SANAD_SMAH.BILL_NUMBER








' 
GO
/****** Object:  View [dbo].[V_STORE_BOX_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_BARCODE]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_STORE_BOX_BARCODE]
AS
SELECT
    I.ITEM_CODE,
    ISNULL(IB.ITEM_BARCODE, I.ITEM_BARCODE) AS ITEM_BARCODE,
    I.ITEM_NAME,
    I.TYPE_CODE,
    IU.UNIT_CODE,
    IU.UNIT_QTY,
    IU.UNIT_NAME,
    SUM(ISNULL(SB.BALANCE_M, 0)) / IU.UNIT_QTY AS BALANCE,
    IU.DF_SALE,
    IU.DF_STORE,
    IU.DF_BUY,
    CASE
        WHEN I.ITEM_BARCODE = N'''' THEN I.ITEM_NAME
        ELSE I.ITEM_BARCODE + N'' : '' + I.ITEM_NAME
    END AS FULL_NAME,
    IU.PRICE_BUY,
    IU.PRICE_COST,
    IU.PRICE_SALE_1,
    IU.PRICE_SALE_2,
    IU.PRICE_SALE_3,
    IU.PRICE_AVG_COST,
    IU.PRICE_SALE_CUR,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    ST.IS_USED,
    I.IS_HIDE,
    I.KIND_NAME
FROM dbo.T_ITEMS AS I
    INNER JOIN dbo.T_ITEM_UNIT AS IU ON I.ITEM_CODE = IU.ITEM_CODE
    LEFT JOIN (
        SELECT ITEM_CODE, UNIT_CODE, MIN(ITEM_BARCODE) AS ITEM_BARCODE
        FROM dbo.T_ITEM_BARCODE
        WHERE ISNULL(ITEM_BARCODE, N'''') <> N''''
        GROUP BY ITEM_CODE, UNIT_CODE
    ) AS IB ON I.ITEM_CODE = IB.ITEM_CODE AND IU.UNIT_CODE = IB.UNIT_CODE
    LEFT JOIN dbo.T_STORE_BOX AS SB ON I.ITEM_CODE = SB.ITEM_CODE AND IU.UNIT_CODE = SB.UNIT_CODE
    LEFT JOIN dbo.T_STORE_TYPE AS ST ON SB.STORE_CODE = ST.STORE_CODE
    LEFT JOIN dbo.T_ITEM_CATEGORY AS IC ON I.CATEGORY_CODE = IC.CATEGORY_CODE
WHERE
    IU.ON_OFF = 1
    AND I.ACTIVE = 1
    AND (ISNULL(SB.STORE_CODE, -1) <> -1)
    AND (ST.IS_USED = 1)
    AND (ISNULL(SB.ACTIVE, 1) = 1)
GROUP BY
    I.ITEM_CODE,
    IB.ITEM_BARCODE,
    I.ITEM_BARCODE,      -- أضف هذا السطر
    I.ITEM_NAME,
    I.TYPE_CODE,
    IU.UNIT_CODE,
    IU.UNIT_QTY,
    IU.UNIT_NAME,
    IU.DF_SALE,
    IU.DF_STORE,
    IU.DF_BUY,
    IU.PRICE_BUY,
    IU.PRICE_COST,
    IU.PRICE_SALE_1,
    IU.PRICE_SALE_2,
    IU.PRICE_SALE_3,
    IU.PRICE_AVG_COST,
    IU.PRICE_SALE_CUR,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    ST.IS_USED,
    I.IS_HIDE,
    I.KIND_NAME
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_STORE_BOX_MOVE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_MOVE]'))
EXEC dbo.sp_executesql @statement = N'







CREATE VIEW [dbo].[V_STORE_BOX_MOVE]
AS
SELECT     TOP (100) PERCENT   dbo.T_STORE_BOX.T_ID, dbo.T_STORE_BOX.BILL_NUMBER, dbo.T_STORE_BOX.B_CODE, dbo.T_BILL_TYPE.B_NAME, dbo.T_STORE_BOX.WAJBA_CODE, dbo.T_WAJBA.WAJBA_NAME, dbo.T_STORE_BOX.STORE_CODE, 
                         dbo.T_STORE_BOX.EXP_DATE, dbo.T_STORE_BOX.ITEM_CODE, dbo.T_ITEMS.ITEM_BARCODE, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, 
                         dbo.T_STORE_BOX.UNIT_CODE, dbo.T_ITEM_UNIT.UNIT_NAME, dbo.T_STORE_BOX.ST_IN, dbo.T_STORE_BOX.ST_OUT, dbo.T_STORE_BOX.ST_BALANCE, dbo.T_STORE_BOX.QTY_UNIT, dbo.T_STORE_BOX.IN_M, 
                         dbo.T_STORE_BOX.OUT_M, dbo.T_STORE_BOX.BALANCE_M, dbo.T_STORE_BOX.BILL_DATE, dbo.T_ITEMS.KIND_NAME
FROM            dbo.T_STORE_BOX LEFT OUTER JOIN
                         dbo.T_ITEM_UNIT ON dbo.T_STORE_BOX.ITEM_CODE = dbo.T_ITEM_UNIT.ITEM_CODE AND dbo.T_STORE_BOX.UNIT_CODE = dbo.T_ITEM_UNIT.UNIT_CODE LEFT OUTER JOIN
                         dbo.T_ITEMS ON dbo.T_STORE_BOX.ITEM_CODE = dbo.T_ITEMS.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_STORE_TYPE ON dbo.T_STORE_BOX.STORE_CODE = dbo.T_STORE_TYPE.STORE_CODE LEFT OUTER JOIN
                         dbo.T_WAJBA ON dbo.T_STORE_BOX.WAJBA_CODE = dbo.T_WAJBA.WAJBA_CODE LEFT OUTER JOIN
                         dbo.T_BILL_TYPE ON dbo.T_STORE_BOX.B_CODE = dbo.T_BILL_TYPE.B_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE
WHERE        (dbo.T_STORE_BOX.ACTIVE = 1)
ORDER BY  dbo.T_STORE_BOX.T_ID










' 
GO
/****** Object:  View [dbo].[V_STORE_BOX_ON]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_ON]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[V_STORE_BOX_ON]
AS
SELECT        TOP (100) PERCENT dbo.T_STORE_BOX.T_ID, dbo.T_STORE_BOX.BILL_BRANCH, dbo.T_STORE_BOX.BILL_NUMBER, dbo.T_STORE_BOX.BILL_DATE, dbo.T_STORE_BOX.B_CODE, dbo.T_STORE_BOX.WAJBA_CODE, 
                         dbo.T_STORE_BOX.STORE_CODE, dbo.T_STORE_TYPE.STORE_NAME, dbo.T_STORE_TYPE.IS_USED, dbo.T_STORE_TYPE.FOR_SALES, dbo.T_STORE_TYPE.FOR_BUY, dbo.T_STORE_BOX.ITEM_CODE, 
                         dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME, dbo.T_STORE_BOX.UNIT_CODE, dbo.T_STORE_BOX.ST_IN, dbo.T_STORE_BOX.ST_OUT, 
                         dbo.T_STORE_BOX.ST_BALANCE, dbo.T_STORE_BOX.QTY_UNIT, dbo.T_STORE_BOX.IN_M, dbo.T_STORE_BOX.OUT_M, dbo.T_STORE_BOX.BALANCE_M, dbo.T_STORE_BOX.C_DATE, dbo.T_STORE_BOX.IS_AVG_COST, 
                         dbo.T_STORE_BOX.AVG_COST, dbo.T_STORE_BOX.ACTIVE, dbo.T_ITEMS.TIME_USE, dbo.T_ITEMS.RAF_NAME, dbo.T_ITEMS.KIND_NAME
FROM            dbo.T_ITEMS RIGHT OUTER JOIN
                         dbo.T_STORE_BOX LEFT OUTER JOIN
                         dbo.T_STORE_TYPE ON dbo.T_STORE_BOX.STORE_CODE = dbo.T_STORE_TYPE.STORE_CODE ON dbo.T_ITEMS.ITEM_CODE = dbo.T_STORE_BOX.STORE_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE
WHERE        (dbo.T_STORE_BOX.ACTIVE = 1)
ORDER BY dbo.T_STORE_BOX.T_ID

' 
GO
/****** Object:  View [dbo].[V_STORE_BOX_ON_ON]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_ON_ON]'))
EXEC dbo.sp_executesql @statement = N'


CREATE VIEW [dbo].[V_STORE_BOX_ON_ON]
AS
SELECT    TOP (100) PERCENT    dbo.T_ITEMS.ITEM_CODE, dbo.T_ITEMS.ITEM_BARCODE AS ITEM_SIGN, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.TYPE_CODE, dbo.T_ITEM_UNIT.UNIT_CODE, dbo.T_ITEM_UNIT.UNIT_QTY, dbo.T_ITEM_UNIT.UNIT_NAME, 
                         SUM(ISNULL(dbo.T_STORE_BOX.BALANCE_M, 0)) / dbo.T_ITEM_UNIT.UNIT_QTY AS BALANCE, dbo.T_ITEM_UNIT.DF_SALE, dbo.T_ITEM_UNIT.DF_STORE, dbo.T_ITEM_UNIT.DF_BUY, iif(dbo.T_ITEMS.ITEM_BARCODE = N'''', 
                         dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEMS.ITEM_BARCODE + '' : '' + dbo.T_ITEMS.ITEM_NAME) AS FULL_NAME, dbo.T_ITEM_UNIT.PRICE_BUY, dbo.T_ITEM_UNIT.PRICE_COST, dbo.T_ITEM_UNIT.PRICE_SALE_1, 
                         dbo.T_ITEM_UNIT.PRICE_SALE_2, dbo.T_ITEM_UNIT.PRICE_SALE_3, dbo.T_ITEM_UNIT.PRICE_AVG_COST, dbo.T_ITEM_UNIT.PRICE_SALE_CUR , dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME
						 , dbo.T_ITEMS.KIND_NAME
FROM            dbo.T_ITEMS INNER JOIN
                         dbo.T_ITEM_UNIT ON dbo.T_ITEMS.ITEM_CODE = dbo.T_ITEM_UNIT.ITEM_CODE LEFT OUTER JOIN
                          dbo.T_STORE_BOX ON dbo.T_ITEMS.ITEM_CODE = dbo.T_STORE_BOX.ITEM_CODE LEFT OUTER JOIN
                         dbo.T_ITEM_CATEGORY ON dbo.T_ITEMS.CATEGORY_CODE = dbo.T_ITEM_CATEGORY.CATEGORY_CODE
WHERE        (dbo.T_ITEM_UNIT.ON_OFF = 1) AND T_ITEMS.TYPE_CODE<>5
GROUP BY dbo.T_ITEMS.ITEM_CODE, dbo.T_ITEMS.ITEM_NAME, dbo.T_ITEM_UNIT.UNIT_CODE, dbo.T_ITEM_UNIT.UNIT_NAME, dbo.T_ITEM_UNIT.UNIT_QTY, dbo.T_ITEM_UNIT.DF_BUY, dbo.T_ITEM_UNIT.ON_OFF, 
                         dbo.T_ITEMS.ITEM_BARCODE, dbo.T_ITEM_UNIT.DF_SALE, dbo.T_ITEM_UNIT.DF_STORE, dbo.T_ITEMS.ACTIVE, dbo.T_ITEMS.TYPE_CODE, dbo.T_STORE_BOX.ACTIVE, dbo.T_ITEM_UNIT.PRICE_BUY, 
                         dbo.T_ITEM_UNIT.PRICE_COST, dbo.T_ITEM_UNIT.PRICE_SALE_1, dbo.T_ITEM_UNIT.PRICE_SALE_2, dbo.T_ITEM_UNIT.PRICE_SALE_3, dbo.T_ITEM_UNIT.PRICE_AVG_COST, dbo.T_ITEM_UNIT.PRICE_SALE_CUR, dbo.T_ITEMS.CATEGORY_CODE, dbo.T_ITEM_CATEGORY.CATEGORY_NAME
						 , dbo.T_ITEMS.KIND_NAME
HAVING       (dbo.T_ITEMS.ACTIVE = 1) AND dbo.T_STORE_BOX.ACTIVE = 1 --AND ( SUM(ISNULL(dbo.T_STORE_BOX.BALANCE_M, 0)) / dbo.T_ITEM_UNIT.UNIT_QTY)<>0
ORDER BY dbo.T_ITEMS.ITEM_CODE


' 
GO
/****** Object:  View [dbo].[V_STORE_BOX_STORE_ALL]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_STORE_ALL]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_STORE_BOX_STORE_ALL]
AS
SELECT
    I.ITEM_CODE,
    I.ITEM_BARCODE,
    I.ITEM_NAME,
    I.TYPE_CODE,
    IU.UNIT_CODE,
    IU.UNIT_QTY,
    IU.UNIT_NAME,
    SUM(ISNULL(SB.BALANCE_M, 0)) / IU.UNIT_QTY AS BALANCE,
    IU.DF_SALE,
    IU.DF_STORE,
    IU.DF_BUY,
    CASE
        WHEN I.ITEM_BARCODE = N'''' THEN I.ITEM_NAME
        ELSE I.ITEM_BARCODE + N'' : '' + I.ITEM_NAME
    END AS FULL_NAME,
    IU.PRICE_BUY,
    IU.PRICE_COST,
    IU.PRICE_SALE_1,
    IU.PRICE_SALE_2,
    IU.PRICE_SALE_3,
    IU.PRICE_AVG_COST,
    IU.PRICE_SALE_CUR,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    SB.STORE_CODE,
    ST.STORE_NAME,
    ST.IS_USED,
    I.IS_HIDE,
    I.RAF_NAME,
    I.KIND_NAME
FROM dbo.T_ITEMS AS I
    INNER JOIN dbo.T_ITEM_UNIT AS IU ON I.ITEM_CODE = IU.ITEM_CODE
    LEFT JOIN dbo.T_STORE_BOX AS SB ON I.ITEM_CODE = SB.ITEM_CODE AND IU.UNIT_CODE = SB.UNIT_CODE
    LEFT JOIN dbo.T_STORE_TYPE AS ST ON SB.STORE_CODE = ST.STORE_CODE
    LEFT JOIN dbo.T_ITEM_CATEGORY AS IC ON I.CATEGORY_CODE = IC.CATEGORY_CODE
WHERE
    IU.ON_OFF = 1
    AND I.ACTIVE = 1
    AND ISNULL(SB.ACTIVE, 1) = 1
GROUP BY
    I.ITEM_CODE,
    I.ITEM_BARCODE,
    I.ITEM_NAME,
    I.TYPE_CODE,
    IU.UNIT_CODE,
    IU.UNIT_QTY,
    IU.UNIT_NAME,
    IU.DF_SALE,
    IU.DF_STORE,
    IU.DF_BUY,
    IU.PRICE_BUY,
    IU.PRICE_COST,
    IU.PRICE_SALE_1,
    IU.PRICE_SALE_2,
    IU.PRICE_SALE_3,
    IU.PRICE_AVG_COST,
    IU.PRICE_SALE_CUR,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    SB.STORE_CODE,
    ST.STORE_NAME,
    ST.IS_USED,
    I.IS_HIDE,
    I.RAF_NAME,
    I.KIND_NAME
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[V_STORE_BOX_STORE_BARCODE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[V_STORE_BOX_STORE_BARCODE]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[V_STORE_BOX_STORE_BARCODE]
AS
SELECT
    I.ITEM_CODE,
    ISNULL(IB.ITEM_BARCODE, I.ITEM_BARCODE) AS ITEM_BARCODE,
    I.ITEM_NAME,
    I.TYPE_CODE,
    IU.UNIT_CODE,
    IU.UNIT_QTY,
    IU.UNIT_NAME,
    SUM(ISNULL(SB.BALANCE_M, 0)) / IU.UNIT_QTY AS BALANCE,
    IU.DF_SALE,
    IU.DF_STORE,
    IU.DF_BUY,
    CASE
        WHEN I.ITEM_BARCODE = N'''' THEN I.ITEM_NAME
        ELSE I.ITEM_BARCODE + N'' : '' + I.ITEM_NAME
    END AS FULL_NAME,
    IU.PRICE_BUY,
    IU.PRICE_COST,
    IU.PRICE_SALE_1,
    IU.PRICE_SALE_2,
    IU.PRICE_SALE_3,
    IU.PRICE_AVG_COST,
    IU.PRICE_SALE_CUR,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    SB.STORE_CODE,
    ST.STORE_NAME,
    ST.IS_USED,
    I.KIND_NAME
FROM dbo.T_ITEMS AS I
    INNER JOIN dbo.T_ITEM_UNIT AS IU ON I.ITEM_CODE = IU.ITEM_CODE
    -- باركود الوحدة، أو باركود الصنف إذا لم يوجد
    LEFT JOIN (
        SELECT ITEM_CODE, UNIT_CODE, MIN(ITEM_BARCODE) AS ITEM_BARCODE
        FROM dbo.T_ITEM_BARCODE
        WHERE ISNULL(ITEM_BARCODE, N'''') <> N''''
        GROUP BY ITEM_CODE, UNIT_CODE
    ) AS IB ON I.ITEM_CODE = IB.ITEM_CODE AND IU.UNIT_CODE = IB.UNIT_CODE
    LEFT JOIN dbo.T_STORE_BOX AS SB ON I.ITEM_CODE = SB.ITEM_CODE AND IU.UNIT_CODE = SB.UNIT_CODE
    LEFT JOIN dbo.T_STORE_TYPE AS ST ON SB.STORE_CODE = ST.STORE_CODE
    LEFT JOIN dbo.T_ITEM_CATEGORY AS IC ON I.CATEGORY_CODE = IC.CATEGORY_CODE
WHERE
    IU.ON_OFF = 1
    AND I.ACTIVE = 1
    AND ISNULL(SB.ACTIVE, 1) = 1
    AND ST.IS_USED = 1
GROUP BY
    I.ITEM_CODE,
    IB.ITEM_BARCODE,
    I.ITEM_BARCODE,
    I.ITEM_NAME,
    I.TYPE_CODE,
    IU.UNIT_CODE,
    IU.UNIT_QTY,
    IU.UNIT_NAME,
    IU.DF_SALE,
    IU.DF_STORE,
    IU.DF_BUY,
    IU.PRICE_BUY,
    IU.PRICE_COST,
    IU.PRICE_SALE_1,
    IU.PRICE_SALE_2,
    IU.PRICE_SALE_3,
    IU.PRICE_AVG_COST,
    IU.PRICE_SALE_CUR,
    I.CATEGORY_CODE,
    IC.CATEGORY_NAME,
    SB.STORE_CODE,
    ST.STORE_NAME,
    ST.IS_USED,
    I.KIND_NAME
-- لا يوجد ORDER BY في الفيو
' 
GO
/****** Object:  View [dbo].[VA_PROJECT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VA_PROJECT]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[VA_PROJECT]
AS
SELECT     dbo.TA_PROJECT.PROJECT_CODE, dbo.TA_PROJECT.PROJECT_NAME, dbo.TA_PROJECT.PROJECT_NO, dbo.TA_PROJECT.PROJECT_NOTE, dbo.TA_PROJECT.FINISH_DAY, dbo.TA_PROJECT.WARNNING_DAY, dbo.TA_PROJECT.START_DATE, dbo.TA_PROJECT.END_DATE, 
                  dbo.TA_PROJECT.RATE_FINISH, dbo.TA_PROJECT.ZONE, dbo.TA_PROJECT.REGION, dbo.TA_PROJECT.ADDRESS, dbo.TA_PROJECT.PHONE, dbo.TA_PROJECT.CLIENT_CODE, dbo.T_CLIENT.CLIENT_NAME, dbo.TA_PROJECT.CURRANCY_CODE, dbo.TA_PROJECT.TOTAL_AMO, 
                  dbo.TA_PROJECT.ARBAH_PERC, dbo.TA_PROJECT.PROJECT_IMG, dbo.TA_PROJECT.IMG_BASE_64, dbo.TA_PROJECT.IMG_PATH, dbo.TA_PROJECT.SECURETY_CODE, dbo.TA_PROJECT.USER_ACTIVE, dbo.TA_PROJECT.IS_FINISH, dbo.TA_PROJECT.C_DATE, 
                  dbo.TA_PROJECT.USER_CREATE, dbo.TA_PROJECT.ACTIVE, dbo.TA_PROJECT.TAG_PROCCESS_CODE, dbo.T_TAG_PROCCESS.TAG_PROCCESS_NAME
FROM        dbo.TA_PROJECT LEFT OUTER JOIN
                  dbo.T_CURRANNCY ON dbo.TA_PROJECT.CURRANCY_CODE = dbo.T_CURRANNCY.CURRANCY_CODE LEFT OUTER JOIN
                  dbo.T_CLIENT ON dbo.TA_PROJECT.CLIENT_CODE = dbo.T_CLIENT.CLIENT_CODE LEFT OUTER JOIN
                  dbo.T_TAG_PROCCESS ON dbo.TA_PROJECT.TAG_PROCCESS_CODE = dbo.T_TAG_PROCCESS.TAG_PROCCESS_CODE
' 
GO
/****** Object:  View [dbo].[VA_STUDENT]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VA_STUDENT]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[VA_STUDENT]
AS
SELECT     dbo.TA_STUDENT.STUDENT_CODE, dbo.TA_STUDENT.STUDENT_NAME, dbo.TA_STUDENT.STUDENT_PHONE, dbo.TA_STUDENT.STUDENT_SCHOOL, dbo.TA_STUDENT.STUDENT_FATHER, dbo.TA_STUDENT.ST_GROUP_CODE, dbo.TA_STUDENT_GROUP.ST_GROUP_NAME, 
                  dbo.TA_STUDENT_GROUP.DAYS_CODE, dbo.TA_STUDENT.STUDENT_CARD, dbo.TA_STUDENT.GENDER, dbo.TA_STUDENT.S1_DATE, dbo.TA_STUDENT.S2_DATE, dbo.TA_STUDENT.S3_DATE, dbo.TA_STUDENT.S4_DATE, dbo.TA_STUDENT.S1_CASH, dbo.TA_STUDENT.S2_CASH, 
                  dbo.TA_STUDENT.S3_CASH, dbo.TA_STUDENT.S4_CASH, dbo.TA_STUDENT.COUNT_ON, dbo.TA_STUDENT.COUNT_OFF, dbo.TA_STUDENT.IMG_PATH, dbo.TA_STUDENT.IMG_64, dbo.TA_STUDENT.C_DATE, dbo.TA_STUDENT.USER_CREATE, dbo.TA_STUDENT.TYPE_STUDENT, 
                  dbo.TA_STUDENT.ACTIVE, dbo.TA_STUDENT.NOTE, dbo.TA_STUDENT.IMG_64_SHOW, dbo.TA_STUDENT.IMG_PATH_SHOW, dbo.TA_STUDENT.ACCOUNT_CODE, dbo.TA_STUDENT.TOTAL_AMO
FROM        dbo.TA_STUDENT INNER JOIN
                  dbo.TA_STUDENT_GROUP ON dbo.TA_STUDENT.ST_GROUP_CODE = dbo.TA_STUDENT_GROUP.ST_GROUP_CODE
' 
GO
/****** Object:  View [dbo].[VA_STUDENT_ENTRY]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VA_STUDENT_ENTRY]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[VA_STUDENT_ENTRY]
AS
SELECT     dbo.TA_STUDENT_ENTRY.T_ID, dbo.TA_STUDENT_ENTRY.STUDENT_CODE, dbo.TA_STUDENT.STUDENT_NAME, dbo.TA_STUDENT.STUDENT_PHONE, dbo.TA_STUDENT.STUDENT_SCHOOL, dbo.TA_STUDENT.STUDENT_FATHER, dbo.TA_STUDENT.ST_GROUP_CODE, 
                  dbo.TA_STUDENT_GROUP.ST_GROUP_NAME, dbo.TA_STUDENT_ENTRY.E_DATE, dbo.TA_STUDENT_ENTRY.DAY_NAME, dbo.TA_STUDENT_ENTRY.GATE_SN, dbo.TA_STUDENT_ENTRY.IS_ENTRY, dbo.TA_STUDENT.ACTIVE
FROM        dbo.TA_STUDENT_ENTRY INNER JOIN
                  dbo.TA_STUDENT ON dbo.TA_STUDENT_ENTRY.STUDENT_CODE = dbo.TA_STUDENT.STUDENT_CODE INNER JOIN
                  dbo.TA_STUDENT_GROUP ON dbo.TA_STUDENT.ST_GROUP_CODE = dbo.TA_STUDENT_GROUP.ST_GROUP_CODE
WHERE     (dbo.TA_STUDENT.ACTIVE = 1)
' 
GO
/****** Object:  View [dbo].[VA_STUDENT_GATE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VA_STUDENT_GATE]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[VA_STUDENT_GATE]
AS
SELECT     dbo.TA_STUDENT_GATE.T_ID_GATE, dbo.TA_STUDENT_GATE.STUDENT_CODE, dbo.TA_STUDENT.STUDENT_NAME, dbo.TA_STUDENT_GATE.SN, dbo.TA_STUDENT_GATE.IS_SEND_GATE, dbo.TA_STUDENT_GATE.IS_SEND_STUDENT, dbo.TA_STUDENT.STUDENT_PHONE, 
                  dbo.TA_STUDENT.STUDENT_SCHOOL, dbo.TA_STUDENT.STUDENT_FATHER, dbo.TA_STUDENT.ST_GROUP_CODE, dbo.TA_STUDENT.STUDENT_CARD, dbo.TA_STUDENT.GENDER, dbo.TA_STUDENT.S1_DATE, dbo.TA_STUDENT.S2_DATE, dbo.TA_STUDENT.S3_DATE, 
                  dbo.TA_STUDENT.S4_DATE, dbo.TA_STUDENT.S1_CASH, dbo.TA_STUDENT.S2_CASH, dbo.TA_STUDENT.S3_CASH, dbo.TA_STUDENT.S4_CASH, dbo.TA_STUDENT.COUNT_ON, dbo.TA_STUDENT.COUNT_OFF, dbo.TA_STUDENT.IMG_PATH, dbo.TA_STUDENT.IMG_64, 
                  dbo.TA_STUDENT.C_DATE, dbo.TA_STUDENT.USER_CREATE, dbo.TA_STUDENT.TYPE_STUDENT, dbo.TA_STUDENT.ACTIVE, dbo.TA_STUDENT.NOTE, dbo.TA_STUDENT.IMG_64_SHOW, dbo.TA_STUDENT.IMG_PATH_SHOW, ''2000-01-01'' AS START_DATE, ''2998-01-01'' AS END_DATE, 
                  dbo.TA_STUDENT.ACCOUNT_CODE, dbo.TA_STUDENT.TOTAL_AMO
FROM        dbo.TA_STUDENT_GATE LEFT OUTER JOIN
                  dbo.TA_STUDENT ON dbo.TA_STUDENT_GATE.STUDENT_CODE = dbo.TA_STUDENT.STUDENT_CODE
' 
GO
/****** Object:  View [dbo].[VB_MAINTENANCE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VB_MAINTENANCE]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[VB_MAINTENANCE]
AS
SELECT        dbo.TB_MAINTENANCE.T_ID, dbo.TB_MAINTENANCE.HOUSE_CODE, dbo.TB_MAINTENANCE.CLIENT_CODE, dbo.TB_MAINTENANCE.MAIN_NAME, dbo.TB_MAINTENANCE.MAIN_TIME, dbo.TB_MAINTENANCE.MAIN_USER, 
                         dbo.TB_MAINTENANCE.STATUES, dbo.TB_MAINTENANCE.USER_CREATE, dbo.TB_MAINTENANCE.C_DATE, dbo.TB_MAINTENANCE.BILL_NUMBER, dbo.T_SALES.NET_SALES, dbo.TB_MAINTENANCE.ATTACH_CODE, 
                         dbo.TB_ATTACHMENT.ATTACH_NAME, dbo.TB_ATTACHMENT.ATTACH_PATH
FROM            dbo.TB_MAINTENANCE LEFT OUTER JOIN
                         dbo.TB_ATTACHMENT ON dbo.TB_MAINTENANCE.ATTACH_CODE = dbo.TB_ATTACHMENT.ATTACH_CODE LEFT OUTER JOIN
                         dbo.T_SALES ON dbo.TB_MAINTENANCE.BILL_NUMBER = dbo.T_SALES.BILL_NUMBER
' 
GO
/****** Object:  View [dbo].[VH_ROOM]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VH_ROOM]'))
EXEC dbo.sp_executesql @statement = N'








CREATE VIEW [dbo].[VH_ROOM]
AS
SELECT     dbo.TH_ROOM.ROOM_CODE, dbo.TH_ROOM.ROOM_NAME, dbo.TH_ROOM.ROOM_NUMBER, dbo.TH_ROOM.ROOM_TYPE_CODE, dbo.TH_ROOM_TYPE.ROOM_TYPE_NAME, dbo.TH_ROOM.FLOOR_CODE, dbo.TH_ROOM_FLOOR.FLOOR_NAME, dbo.TH_ROOM.ROOM_PRICE, 
                  dbo.TH_ROOM.ROOM_PRICE_MIN, dbo.TH_ROOM.ROOM_PRICE_MAX, dbo.TH_ROOM.ROOM_PRICE_SPECIAL,dbo.TH_ROOM.ROOM_STATUS_CODE  , cast(dbo.TH_ROOM.ROOM_STATUS_CODE as bit)as STATUS_CODE ,cast(IIF(dbo.TH_ROOM.ROOM_STATUS_CODE=0,1,0) as bit)as BOOK_CODE , dbo.TH_ROOM_STATUS.ROOM_STATUS_NAME, dbo.TH_ROOM.ROOM_GUESTS_NO, dbo.TH_ROOM.ROOM_NOTE, 
                  dbo.TH_ROOM.ACTIVE, dbo.TH_ROOM.ROOM_PRICE_TXT,concat( dbo.TH_ROOM.ROOM_GUESTS_NO, '' Guest'', '' - '', dbo.TH_ROOM_FLOOR.FLOOR_NAME) as ROOM_INFO
				  ,dbo.TH_ROOM_FLOOR.FLOOR_COLOR, dbo.TH_ROOM_STATUS.ROOM_STATUS_COLOR, dbo.TH_ROOM_FLOOR.FLOOR_CSS,dbo.TH_ROOM_STATUS.ROOM_STATUS_CSS,
                  dbo.TH_ROOM_TYPE.ROOM_TYPE_COLOR,
                  dbo.TH_ROOM_TYPE.ROOM_TYPE_CSS,
				  dbo.TH_ROOM.ROOM_FEATURE_CODE,
					dbo.TH_ROOM.ROOM_FEATURE_NAME
					,ISNULL((SELECT CLIENT_NAME FROM TH_ROOM_BOOKING WHERE BILL_NUMBER=(SELECT MIN(BILL_NUMBER) FROM TH_ROOM_BOOKING_STATE WHERE ROOM_CODE=dbo.TH_ROOM.ROOM_CODE AND BOOK_DATE=CONVERT(VARCHAR(10),  GETDATE(), 111)   )),N'''') AS N''CLIENT_NAME''
					,ISNULL((SELECT CLIENT_COLOR FROM T_CLIENT WHERE CLIENT_CODE=(SELECT CLIENT_CODE FROM TH_ROOM_BOOKING WHERE BILL_NUMBER=(SELECT MIN(BILL_NUMBER) FROM TH_ROOM_BOOKING_STATE WHERE ROOM_CODE=dbo.TH_ROOM.ROOM_CODE AND BOOK_DATE=CONVERT(VARCHAR(10),  GETDATE(), 111) ))   ),N'''') AS N''CLIENT_COLOR''
FROM        dbo.TH_ROOM LEFT OUTER JOIN
                  dbo.TH_ROOM_TYPE ON dbo.TH_ROOM.ROOM_TYPE_CODE = dbo.TH_ROOM_TYPE.ROOM_TYPE_CODE LEFT OUTER JOIN
                  dbo.TH_ROOM_STATUS ON dbo.TH_ROOM.ROOM_STATUS_CODE = dbo.TH_ROOM_STATUS.ROOM_STATUS_CODE LEFT OUTER JOIN
                  dbo.TH_ROOM_FLOOR ON dbo.TH_ROOM.FLOOR_CODE = dbo.TH_ROOM_FLOOR.FLOOR_CODE
WHERE     (dbo.TH_ROOM.ACTIVE = 1)









' 
GO
/****** Object:  View [dbo].[VH_ROOM_TYPE]    Script Date: 2025/09/13 7:36:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[VH_ROOM_TYPE]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[VH_ROOM_TYPE]
AS
SELECT     dbo.TH_ROOM.ROOM_CODE, dbo.TH_ROOM.ROOM_NAME, dbo.TH_ROOM.ROOM_NUMBER, dbo.TH_ROOM.ROOM_TYPE_CODE, dbo.TH_ROOM_TYPE.ROOM_TYPE_NAME, dbo.TH_ROOM.FLOOR_CODE, dbo.TH_ROOM_FLOOR.FLOOR_NAME, dbo.TH_ROOM.ROOM_PRICE, 
                  dbo.TH_ROOM.ROOM_PRICE_MIN, dbo.TH_ROOM.ROOM_PRICE_MAX, dbo.TH_ROOM.ROOM_PRICE_SPECIAL, dbo.TH_ROOM.ROOM_PRICE_TXT, dbo.TH_ROOM.ROOM_STATUS_CODE, dbo.TH_ROOM_STATUS.ROOM_STATUS_NAME, dbo.TH_ROOM.ROOM_GUESTS_NO, 
                  dbo.TH_ROOM.ROOM_NOTE, dbo.TH_ROOM.ROOM_FEATURE_CODE, dbo.TH_ROOM.ROOM_FEATURE_NAME, dbo.TH_ROOM.ACTIVE
FROM        dbo.TH_ROOM LEFT OUTER JOIN
                  dbo.TH_ROOM_STATUS ON dbo.TH_ROOM.ROOM_STATUS_CODE = dbo.TH_ROOM_STATUS.ROOM_STATUS_CODE LEFT OUTER JOIN
                  dbo.TH_ROOM_FLOOR ON dbo.TH_ROOM.FLOOR_CODE = dbo.TH_ROOM_FLOOR.FLOOR_CODE LEFT OUTER JOIN
                  dbo.TH_ROOM_TYPE ON dbo.TH_ROOM.ROOM_TYPE_CODE = dbo.TH_ROOM_TYPE.ROOM_TYPE_CODE
' 
GO
